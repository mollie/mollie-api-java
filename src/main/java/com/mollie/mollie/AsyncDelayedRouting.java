/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.components.EntityRoute;
import com.mollie.mollie.models.operations.PaymentCreateRouteRequest;
import com.mollie.mollie.models.operations.PaymentListRoutesRequest;
import com.mollie.mollie.models.operations.async.PaymentCreateRouteRequestBuilder;
import com.mollie.mollie.models.operations.async.PaymentCreateRouteResponse;
import com.mollie.mollie.models.operations.async.PaymentListRoutesRequestBuilder;
import com.mollie.mollie.models.operations.async.PaymentListRoutesResponse;
import com.mollie.mollie.operations.PaymentCreateRoute;
import com.mollie.mollie.operations.PaymentListRoutes;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncDelayedRouting {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final DelayedRouting syncSDK;

    AsyncDelayedRouting(DelayedRouting syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public DelayedRouting sync() {
        return syncSDK;
    }


    /**
     * Create a delayed route
     * 
     * <p>Create a route for a specific payment.
     * The routed amount is credited to the account of your customer.
     * 
     * @return The async call builder
     */
    public PaymentCreateRouteRequestBuilder create() {
        return new PaymentCreateRouteRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a delayed route
     * 
     * <p>Create a route for a specific payment.
     * The routed amount is credited to the account of your customer.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return {@code CompletableFuture<PaymentCreateRouteResponse>} - The async response
     */
    public CompletableFuture<PaymentCreateRouteResponse> create(String paymentId) {
        return create(
                paymentId, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Create a delayed route
     * 
     * <p>Create a route for a specific payment.
     * The routed amount is credited to the account of your customer.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param entityRoute 
     * @param options additional options
     * @return {@code CompletableFuture<PaymentCreateRouteResponse>} - The async response
     */
    public CompletableFuture<PaymentCreateRouteResponse> create(
            String paymentId, Optional<String> idempotencyKey,
            Optional<? extends EntityRoute> entityRoute, Optional<Options> options) {
        PaymentCreateRouteRequest request =
            PaymentCreateRouteRequest
                .builder()
                .paymentId(paymentId)
                .idempotencyKey(idempotencyKey)
                .entityRoute(entityRoute)
                .build();
        AsyncRequestOperation<PaymentCreateRouteRequest, PaymentCreateRouteResponse> operation
              = new PaymentCreateRoute.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List payment routes
     * 
     * <p>Retrieve a list of all routes created for a specific payment.
     * 
     * @return The async call builder
     */
    public PaymentListRoutesRequestBuilder list() {
        return new PaymentListRoutesRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment routes
     * 
     * <p>Retrieve a list of all routes created for a specific payment.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return {@code CompletableFuture<PaymentListRoutesResponse>} - The async response
     */
    public CompletableFuture<PaymentListRoutesResponse> list(String paymentId) {
        return list(
                paymentId, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * List payment routes
     * 
     * <p>Retrieve a list of all routes created for a specific payment.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return {@code CompletableFuture<PaymentListRoutesResponse>} - The async response
     */
    public CompletableFuture<PaymentListRoutesResponse> list(
            String paymentId, Optional<Boolean> testmode,
            Optional<String> idempotencyKey, Optional<Options> options) {
        PaymentListRoutesRequest request =
            PaymentListRoutesRequest
                .builder()
                .paymentId(paymentId)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<PaymentListRoutesRequest, PaymentListRoutesResponse> operation
              = new PaymentListRoutes.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
