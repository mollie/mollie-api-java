/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.operations.GetBalanceReportRequest;
import com.mollie.mollie.models.operations.GetBalanceRequest;
import com.mollie.mollie.models.operations.GetPrimaryBalanceRequest;
import com.mollie.mollie.models.operations.ListBalanceTransactionsRequest;
import com.mollie.mollie.models.operations.ListBalancesRequest;
import com.mollie.mollie.models.operations.async.GetBalanceReportRequestBuilder;
import com.mollie.mollie.models.operations.async.GetBalanceReportResponse;
import com.mollie.mollie.models.operations.async.GetBalanceRequestBuilder;
import com.mollie.mollie.models.operations.async.GetBalanceResponse;
import com.mollie.mollie.models.operations.async.GetPrimaryBalanceRequestBuilder;
import com.mollie.mollie.models.operations.async.GetPrimaryBalanceResponse;
import com.mollie.mollie.models.operations.async.ListBalanceTransactionsRequestBuilder;
import com.mollie.mollie.models.operations.async.ListBalanceTransactionsResponse;
import com.mollie.mollie.models.operations.async.ListBalancesRequestBuilder;
import com.mollie.mollie.models.operations.async.ListBalancesResponse;
import com.mollie.mollie.operations.GetBalance;
import com.mollie.mollie.operations.GetBalanceReport;
import com.mollie.mollie.operations.GetPrimaryBalance;
import com.mollie.mollie.operations.ListBalanceTransactions;
import com.mollie.mollie.operations.ListBalances;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncBalances {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Balances syncSDK;

    AsyncBalances(Balances syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Balances sync() {
        return syncSDK;
    }


    /**
     * List balances
     * 
     * <p>Retrieve a list of the organization's balances, including the primary balance.
     * 
     * <p>The results are paginated.
     * 
     * @return The async call builder
     */
    public ListBalancesRequestBuilder list() {
        return new ListBalancesRequestBuilder(sdkConfiguration);
    }

    /**
     * List balances
     * 
     * <p>Retrieve a list of the organization's balances, including the primary balance.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListBalancesResponse&gt; - The async response
     */
    public CompletableFuture<ListBalancesResponse> list(ListBalancesRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List balances
     * 
     * <p>Retrieve a list of the organization's balances, including the primary balance.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListBalancesResponse&gt; - The async response
     */
    public CompletableFuture<ListBalancesResponse> list(ListBalancesRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListBalancesRequest, ListBalancesResponse> operation
              = new ListBalances.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get balance
     * 
     * <p>When processing payments with Mollie, we put all pending funds — usually
     * minus Mollie fees — on a balance. Once you have linked a bank account to your Mollie account, we can pay out your
     * balance towards this bank account.
     * 
     * <p>With the Balances API you can retrieve your current balance. The response
     * includes two amounts:
     * 
     * <p>* The *pending amount*. These are payments that have been marked as `paid`,
     * but are not yet available on your balance.
     * * The *available amount*. This is the amount that you can get paid out to
     * your bank account, or use for refunds.
     * 
     * <p>With instant payment methods like iDEAL, payments are moved to the available
     * balance instantly. With slower payment methods, like credit card for example, it can take a few days before the
     * funds are available on your balance. These funds will be shown under the *pending amount* in the meanwhile.
     * 
     * @return The async call builder
     */
    public GetBalanceRequestBuilder get() {
        return new GetBalanceRequestBuilder(sdkConfiguration);
    }

    /**
     * Get balance
     * 
     * <p>When processing payments with Mollie, we put all pending funds — usually
     * minus Mollie fees — on a balance. Once you have linked a bank account to your Mollie account, we can pay out your
     * balance towards this bank account.
     * 
     * <p>With the Balances API you can retrieve your current balance. The response
     * includes two amounts:
     * 
     * <p>* The *pending amount*. These are payments that have been marked as `paid`,
     * but are not yet available on your balance.
     * * The *available amount*. This is the amount that you can get paid out to
     * your bank account, or use for refunds.
     * 
     * <p>With instant payment methods like iDEAL, payments are moved to the available
     * balance instantly. With slower payment methods, like credit card for example, it can take a few days before the
     * funds are available on your balance. These funds will be shown under the *pending amount* in the meanwhile.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return CompletableFuture&lt;GetBalanceResponse&gt; - The async response
     */
    public CompletableFuture<GetBalanceResponse> get(String id) {
        return get(
                id, JsonNullable.undefined(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Get balance
     * 
     * <p>When processing payments with Mollie, we put all pending funds — usually
     * minus Mollie fees — on a balance. Once you have linked a bank account to your Mollie account, we can pay out your
     * balance towards this bank account.
     * 
     * <p>With the Balances API you can retrieve your current balance. The response
     * includes two amounts:
     * 
     * <p>* The *pending amount*. These are payments that have been marked as `paid`,
     * but are not yet available on your balance.
     * * The *available amount*. This is the amount that you can get paid out to
     * your bank account, or use for refunds.
     * 
     * <p>With instant payment methods like iDEAL, payments are moved to the available
     * balance instantly. With slower payment methods, like credit card for example, it can take a few days before the
     * funds are available on your balance. These funds will be shown under the *pending amount* in the meanwhile.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return CompletableFuture&lt;GetBalanceResponse&gt; - The async response
     */
    public CompletableFuture<GetBalanceResponse> get(
            String id, JsonNullable<Boolean> testmode,
            Optional<String> idempotencyKey, Optional<Options> options) {
        GetBalanceRequest request =
            GetBalanceRequest
                .builder()
                .id(id)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<GetBalanceRequest, GetBalanceResponse> operation
              = new GetBalance.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get primary balance
     * 
     * <p>Retrieve the primary balance. This is the balance of your account's primary
     * currency, where all payments are settled to by default.
     * 
     * <p>This endpoint is a convenient alias of the [Get balance](get-balance)
     * endpoint.
     * 
     * @return The async call builder
     */
    public GetPrimaryBalanceRequestBuilder getPrimary() {
        return new GetPrimaryBalanceRequestBuilder(sdkConfiguration);
    }

    /**
     * Get primary balance
     * 
     * <p>Retrieve the primary balance. This is the balance of your account's primary
     * currency, where all payments are settled to by default.
     * 
     * <p>This endpoint is a convenient alias of the [Get balance](get-balance)
     * endpoint.
     * 
     * @return CompletableFuture&lt;GetPrimaryBalanceResponse&gt; - The async response
     */
    public CompletableFuture<GetPrimaryBalanceResponse> getPrimaryDirect() {
        return getPrimary(Optional.empty(), Optional.empty());
    }

    /**
     * Get primary balance
     * 
     * <p>Retrieve the primary balance. This is the balance of your account's primary
     * currency, where all payments are settled to by default.
     * 
     * <p>This endpoint is a convenient alias of the [Get balance](get-balance)
     * endpoint.
     * 
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return CompletableFuture&lt;GetPrimaryBalanceResponse&gt; - The async response
     */
    public CompletableFuture<GetPrimaryBalanceResponse> getPrimary(Optional<String> idempotencyKey, Optional<Options> options) {
        GetPrimaryBalanceRequest request =
            GetPrimaryBalanceRequest
                .builder()
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<GetPrimaryBalanceRequest, GetPrimaryBalanceResponse> operation
              = new GetPrimaryBalance.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get balance report
     * 
     * <p>Retrieve a summarized report for all transactions on a given balance within a given timeframe.
     * 
     * <p>The API also provides a detailed report on all 'prepayments' for Mollie fees that were deducted from your balance
     * during the reported period, ahead of your Mollie invoice.
     * 
     * <p>The alias `primary` can be used instead of the balance ID to refer to the
     * organization's primary balance.
     * 
     * @return The async call builder
     */
    public GetBalanceReportRequestBuilder getReport() {
        return new GetBalanceReportRequestBuilder(sdkConfiguration);
    }

    /**
     * Get balance report
     * 
     * <p>Retrieve a summarized report for all transactions on a given balance within a given timeframe.
     * 
     * <p>The API also provides a detailed report on all 'prepayments' for Mollie fees that were deducted from your balance
     * during the reported period, ahead of your Mollie invoice.
     * 
     * <p>The alias `primary` can be used instead of the balance ID to refer to the
     * organization's primary balance.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetBalanceReportResponse&gt; - The async response
     */
    public CompletableFuture<GetBalanceReportResponse> getReport(GetBalanceReportRequest request) {
        return getReport(request, Optional.empty());
    }

    /**
     * Get balance report
     * 
     * <p>Retrieve a summarized report for all transactions on a given balance within a given timeframe.
     * 
     * <p>The API also provides a detailed report on all 'prepayments' for Mollie fees that were deducted from your balance
     * during the reported period, ahead of your Mollie invoice.
     * 
     * <p>The alias `primary` can be used instead of the balance ID to refer to the
     * organization's primary balance.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;GetBalanceReportResponse&gt; - The async response
     */
    public CompletableFuture<GetBalanceReportResponse> getReport(GetBalanceReportRequest request, Optional<Options> options) {
        AsyncRequestOperation<GetBalanceReportRequest, GetBalanceReportResponse> operation
              = new GetBalanceReport.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List balance transactions
     * 
     * <p>Retrieve a list of all balance transactions. Transactions include for
     * example payments, refunds, chargebacks, and settlements.
     * 
     * <p>For an aggregated report of these balance transactions, refer to the [Get
     * balance report](get-balance-report) endpoint.
     * 
     * <p>The alias `primary` can be used instead of the balance ID to refer to the
     * organization's primary balance.
     * 
     * <p>The results are paginated.
     * 
     * @return The async call builder
     */
    public ListBalanceTransactionsRequestBuilder listTransactions() {
        return new ListBalanceTransactionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List balance transactions
     * 
     * <p>Retrieve a list of all balance transactions. Transactions include for
     * example payments, refunds, chargebacks, and settlements.
     * 
     * <p>For an aggregated report of these balance transactions, refer to the [Get
     * balance report](get-balance-report) endpoint.
     * 
     * <p>The alias `primary` can be used instead of the balance ID to refer to the
     * organization's primary balance.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListBalanceTransactionsResponse&gt; - The async response
     */
    public CompletableFuture<ListBalanceTransactionsResponse> listTransactions(ListBalanceTransactionsRequest request) {
        return listTransactions(request, Optional.empty());
    }

    /**
     * List balance transactions
     * 
     * <p>Retrieve a list of all balance transactions. Transactions include for
     * example payments, refunds, chargebacks, and settlements.
     * 
     * <p>For an aggregated report of these balance transactions, refer to the [Get
     * balance report](get-balance-report) endpoint.
     * 
     * <p>The alias `primary` can be used instead of the balance ID to refer to the
     * organization's primary balance.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListBalanceTransactionsResponse&gt; - The async response
     */
    public CompletableFuture<ListBalanceTransactionsResponse> listTransactions(ListBalanceTransactionsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListBalanceTransactionsRequest, ListBalanceTransactionsResponse> operation
              = new ListBalanceTransactions.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
