/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.components.SubscriptionRequest;
import com.mollie.mollie.models.operations.CancelSubscriptionRequest;
import com.mollie.mollie.models.operations.CancelSubscriptionRequestBody;
import com.mollie.mollie.models.operations.CancelSubscriptionRequestBuilder;
import com.mollie.mollie.models.operations.CancelSubscriptionResponse;
import com.mollie.mollie.models.operations.CreateSubscriptionRequest;
import com.mollie.mollie.models.operations.CreateSubscriptionRequestBuilder;
import com.mollie.mollie.models.operations.CreateSubscriptionResponse;
import com.mollie.mollie.models.operations.GetSubscriptionRequest;
import com.mollie.mollie.models.operations.GetSubscriptionRequestBuilder;
import com.mollie.mollie.models.operations.GetSubscriptionResponse;
import com.mollie.mollie.models.operations.ListAllSubscriptionsRequest;
import com.mollie.mollie.models.operations.ListAllSubscriptionsRequestBuilder;
import com.mollie.mollie.models.operations.ListAllSubscriptionsResponse;
import com.mollie.mollie.models.operations.ListSubscriptionPaymentsRequest;
import com.mollie.mollie.models.operations.ListSubscriptionPaymentsRequestBuilder;
import com.mollie.mollie.models.operations.ListSubscriptionPaymentsResponse;
import com.mollie.mollie.models.operations.ListSubscriptionsRequest;
import com.mollie.mollie.models.operations.ListSubscriptionsRequestBuilder;
import com.mollie.mollie.models.operations.ListSubscriptionsResponse;
import com.mollie.mollie.models.operations.UpdateSubscriptionRequest;
import com.mollie.mollie.models.operations.UpdateSubscriptionRequestBody;
import com.mollie.mollie.models.operations.UpdateSubscriptionRequestBuilder;
import com.mollie.mollie.models.operations.UpdateSubscriptionResponse;
import com.mollie.mollie.operations.CancelSubscription;
import com.mollie.mollie.operations.CreateSubscription;
import com.mollie.mollie.operations.GetSubscription;
import com.mollie.mollie.operations.ListAllSubscriptions;
import com.mollie.mollie.operations.ListSubscriptionPayments;
import com.mollie.mollie.operations.ListSubscriptions;
import com.mollie.mollie.operations.UpdateSubscription;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Subscriptions {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncSubscriptions asyncSDK;

    Subscriptions(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncSubscriptions(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncSubscriptions async() {
        return asyncSDK;
    }

    /**
     * Create subscription
     * 
     * <p>With subscriptions, you can schedule recurring payments to take place at regular intervals.
     * 
     * <p>For example, by simply specifying an `amount` and an `interval`, you can create an endless
     * subscription to charge a
     * monthly fee, until you cancel the subscription.
     * 
     * <p>Or, you could use the times parameter to only charge a limited number of times, for example to split
     * a big
     * transaction in multiple parts.
     * 
     * <p>A few example usages:
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="5.00"` `interval="2 weeks"`
     * Your customer will be charged €5 once every two weeks.
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="20.00"` `interval="1 day" times=5`
     * Your customer will be charged €20 every day, for five consecutive days.
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="10.00"` `interval="1 month"`
     * `startDate="2018-04-30"`
     * Your customer will be charged €10 on the last day of each month, starting in April 2018.
     * 
     * @return The call builder
     */
    public CreateSubscriptionRequestBuilder create() {
        return new CreateSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create subscription
     * 
     * <p>With subscriptions, you can schedule recurring payments to take place at regular intervals.
     * 
     * <p>For example, by simply specifying an `amount` and an `interval`, you can create an endless
     * subscription to charge a
     * monthly fee, until you cancel the subscription.
     * 
     * <p>Or, you could use the times parameter to only charge a limited number of times, for example to split
     * a big
     * transaction in multiple parts.
     * 
     * <p>A few example usages:
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="5.00"` `interval="2 weeks"`
     * Your customer will be charged €5 once every two weeks.
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="20.00"` `interval="1 day" times=5`
     * Your customer will be charged €20 every day, for five consecutive days.
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="10.00"` `interval="1 month"`
     * `startDate="2018-04-30"`
     * Your customer will be charged €10 on the last day of each month, starting in April 2018.
     * 
     * @param customerId Provide the ID of the related customer.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateSubscriptionResponse create(String customerId) throws Exception {
        return create(customerId, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Create subscription
     * 
     * <p>With subscriptions, you can schedule recurring payments to take place at regular intervals.
     * 
     * <p>For example, by simply specifying an `amount` and an `interval`, you can create an endless
     * subscription to charge a
     * monthly fee, until you cancel the subscription.
     * 
     * <p>Or, you could use the times parameter to only charge a limited number of times, for example to split
     * a big
     * transaction in multiple parts.
     * 
     * <p>A few example usages:
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="5.00"` `interval="2 weeks"`
     * Your customer will be charged €5 once every two weeks.
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="20.00"` `interval="1 day" times=5`
     * Your customer will be charged €20 every day, for five consecutive days.
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="10.00"` `interval="1 month"`
     * `startDate="2018-04-30"`
     * Your customer will be charged €10 on the last day of each month, starting in April 2018.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param subscriptionRequest 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateSubscriptionResponse create(
            String customerId, Optional<String> idempotencyKey,
            Optional<? extends SubscriptionRequest> subscriptionRequest, Optional<Options> options) throws Exception {
        CreateSubscriptionRequest request =
            CreateSubscriptionRequest
                .builder()
                .customerId(customerId)
                .idempotencyKey(idempotencyKey)
                .subscriptionRequest(subscriptionRequest)
                .build();
        RequestOperation<CreateSubscriptionRequest, CreateSubscriptionResponse> operation
              = new CreateSubscription.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List customer subscriptions
     * 
     * <p>Retrieve all subscriptions of a customer.
     * 
     * <p>The results are paginated.
     * 
     * @return The call builder
     */
    public ListSubscriptionsRequestBuilder list() {
        return new ListSubscriptionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List customer subscriptions
     * 
     * <p>Retrieve all subscriptions of a customer.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListSubscriptionsResponse list(ListSubscriptionsRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List customer subscriptions
     * 
     * <p>Retrieve all subscriptions of a customer.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListSubscriptionsResponse list(ListSubscriptionsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListSubscriptionsRequest, ListSubscriptionsResponse> operation
              = new ListSubscriptions.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get subscription
     * 
     * <p>Retrieve a single subscription by its ID and the ID of its parent customer.
     * 
     * @return The call builder
     */
    public GetSubscriptionRequestBuilder get() {
        return new GetSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get subscription
     * 
     * <p>Retrieve a single subscription by its ID and the ID of its parent customer.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param subscriptionId Provide the ID of the related subscription.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSubscriptionResponse get(String customerId, String subscriptionId) throws Exception {
        return get(customerId, subscriptionId, JsonNullable.undefined(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Get subscription
     * 
     * <p>Retrieve a single subscription by its ID and the ID of its parent customer.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param subscriptionId Provide the ID of the related subscription.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSubscriptionResponse get(
            String customerId, String subscriptionId,
            JsonNullable<Boolean> testmode, Optional<String> idempotencyKey,
            Optional<Options> options) throws Exception {
        GetSubscriptionRequest request =
            GetSubscriptionRequest
                .builder()
                .customerId(customerId)
                .subscriptionId(subscriptionId)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        RequestOperation<GetSubscriptionRequest, GetSubscriptionResponse> operation
              = new GetSubscription.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update subscription
     * 
     * <p>Update an existing subscription.
     * 
     * <p>Canceled subscriptions cannot be updated.
     * 
     * <p>For an in-depth explanation of each parameter, refer to the [Create
     * subscription](create-subscription) endpoint.
     * 
     * @return The call builder
     */
    public UpdateSubscriptionRequestBuilder update() {
        return new UpdateSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update subscription
     * 
     * <p>Update an existing subscription.
     * 
     * <p>Canceled subscriptions cannot be updated.
     * 
     * <p>For an in-depth explanation of each parameter, refer to the [Create
     * subscription](create-subscription) endpoint.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param subscriptionId Provide the ID of the related subscription.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateSubscriptionResponse update(String customerId, String subscriptionId) throws Exception {
        return update(customerId, subscriptionId, Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Update subscription
     * 
     * <p>Update an existing subscription.
     * 
     * <p>Canceled subscriptions cannot be updated.
     * 
     * <p>For an in-depth explanation of each parameter, refer to the [Create
     * subscription](create-subscription) endpoint.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param subscriptionId Provide the ID of the related subscription.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateSubscriptionResponse update(
            String customerId, String subscriptionId,
            Optional<String> idempotencyKey, Optional<? extends UpdateSubscriptionRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        UpdateSubscriptionRequest request =
            UpdateSubscriptionRequest
                .builder()
                .customerId(customerId)
                .subscriptionId(subscriptionId)
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateSubscriptionRequest, UpdateSubscriptionResponse> operation
              = new UpdateSubscription.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Cancel subscription
     * 
     * <p>Cancel an existing subscription. Canceling a subscription has no effect on the mandates of the
     * customer.
     * 
     * @return The call builder
     */
    public CancelSubscriptionRequestBuilder cancel() {
        return new CancelSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel subscription
     * 
     * <p>Cancel an existing subscription. Canceling a subscription has no effect on the mandates of the
     * customer.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param subscriptionId Provide the ID of the related subscription.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CancelSubscriptionResponse cancel(String customerId, String subscriptionId) throws Exception {
        return cancel(customerId, subscriptionId, Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Cancel subscription
     * 
     * <p>Cancel an existing subscription. Canceling a subscription has no effect on the mandates of the
     * customer.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param subscriptionId Provide the ID of the related subscription.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CancelSubscriptionResponse cancel(
            String customerId, String subscriptionId,
            Optional<String> idempotencyKey, Optional<? extends CancelSubscriptionRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        CancelSubscriptionRequest request =
            CancelSubscriptionRequest
                .builder()
                .customerId(customerId)
                .subscriptionId(subscriptionId)
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        RequestOperation<CancelSubscriptionRequest, CancelSubscriptionResponse> operation
              = new CancelSubscription.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all subscriptions
     * 
     * <p>Retrieve all subscriptions initiated across all your customers.
     * 
     * <p>The results are paginated.
     * 
     * @return The call builder
     */
    public ListAllSubscriptionsRequestBuilder all() {
        return new ListAllSubscriptionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all subscriptions
     * 
     * <p>Retrieve all subscriptions initiated across all your customers.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAllSubscriptionsResponse all(ListAllSubscriptionsRequest request) throws Exception {
        return all(request, Optional.empty());
    }

    /**
     * List all subscriptions
     * 
     * <p>Retrieve all subscriptions initiated across all your customers.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAllSubscriptionsResponse all(ListAllSubscriptionsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListAllSubscriptionsRequest, ListAllSubscriptionsResponse> operation
              = new ListAllSubscriptions.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List subscription payments
     * 
     * <p>Retrieve all payments of a specific subscription.
     * 
     * <p>The results are paginated.
     * 
     * @return The call builder
     */
    public ListSubscriptionPaymentsRequestBuilder listPayments() {
        return new ListSubscriptionPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List subscription payments
     * 
     * <p>Retrieve all payments of a specific subscription.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListSubscriptionPaymentsResponse listPayments(ListSubscriptionPaymentsRequest request) throws Exception {
        return listPayments(request, Optional.empty());
    }

    /**
     * List subscription payments
     * 
     * <p>Retrieve all payments of a specific subscription.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListSubscriptionPaymentsResponse listPayments(ListSubscriptionPaymentsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListSubscriptionPaymentsRequest, ListSubscriptionPaymentsResponse> operation
              = new ListSubscriptionPayments.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
