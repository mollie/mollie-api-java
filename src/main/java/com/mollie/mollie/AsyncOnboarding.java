/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestlessOperation;
import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.operations.SubmitOnboardingDataRequestBody;
import com.mollie.mollie.models.operations.async.GetOnboardingStatusRequestBuilder;
import com.mollie.mollie.models.operations.async.GetOnboardingStatusResponse;
import com.mollie.mollie.models.operations.async.SubmitOnboardingDataRequestBuilder;
import com.mollie.mollie.models.operations.async.SubmitOnboardingDataResponse;
import com.mollie.mollie.operations.GetOnboardingStatus;
import com.mollie.mollie.operations.SubmitOnboardingData;
import com.mollie.mollie.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncOnboarding {
    private final SDKConfiguration sdkConfiguration;
    private final Onboarding syncSDK;

    AsyncOnboarding(Onboarding syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Onboarding sync() {
        return syncSDK;
    }


    /**
     * Get onboarding status
     * 
     * <p>Retrieve the onboarding status of the currently authenticated organization.
     * 
     * @return The async call builder
     */
    public GetOnboardingStatusRequestBuilder get() {
        return new GetOnboardingStatusRequestBuilder(sdkConfiguration);
    }

    /**
     * Get onboarding status
     * 
     * <p>Retrieve the onboarding status of the currently authenticated organization.
     * 
     * @return CompletableFuture&lt;GetOnboardingStatusResponse&gt; - The async response
     */
    public CompletableFuture<GetOnboardingStatusResponse> getDirect() {
        return get(Optional.empty());
    }

    /**
     * Get onboarding status
     * 
     * <p>Retrieve the onboarding status of the currently authenticated organization.
     * 
     * @param options additional options
     * @return CompletableFuture&lt;GetOnboardingStatusResponse&gt; - The async response
     */
    public CompletableFuture<GetOnboardingStatusResponse> get(Optional<Options> options) {
        AsyncRequestlessOperation<GetOnboardingStatusResponse> operation
            = new GetOnboardingStatus.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest()
            .thenCompose(operation::handleResponse);
    }


    /**
     * Submit onboarding data
     * 
     * <p>**⚠️ We no longer recommend implementing this endpoint. Please refer to the Client Links API instead to kick off the
     * onboarding process for your merchants.**
     * 
     * <p>Submit data that will be prefilled in the merchant's onboarding. The data you submit will only be processed when the
     * onboarding status is `needs-data`.  
     * Information that the merchant has entered in their dashboard will not be overwritten.
     * 
     * @return The async call builder
     */
    public SubmitOnboardingDataRequestBuilder submit() {
        return new SubmitOnboardingDataRequestBuilder(sdkConfiguration);
    }

    /**
     * Submit onboarding data
     * 
     * <p>**⚠️ We no longer recommend implementing this endpoint. Please refer to the Client Links API instead to kick off the
     * onboarding process for your merchants.**
     * 
     * <p>Submit data that will be prefilled in the merchant's onboarding. The data you submit will only be processed when the
     * onboarding status is `needs-data`.  
     * Information that the merchant has entered in their dashboard will not be overwritten.
     * 
     * @return CompletableFuture&lt;SubmitOnboardingDataResponse&gt; - The async response
     */
    public CompletableFuture<SubmitOnboardingDataResponse> submitDirect() {
        return submit(Optional.empty(), Optional.empty());
    }

    /**
     * Submit onboarding data
     * 
     * <p>**⚠️ We no longer recommend implementing this endpoint. Please refer to the Client Links API instead to kick off the
     * onboarding process for your merchants.**
     * 
     * <p>Submit data that will be prefilled in the merchant's onboarding. The data you submit will only be processed when the
     * onboarding status is `needs-data`.  
     * Information that the merchant has entered in their dashboard will not be overwritten.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;SubmitOnboardingDataResponse&gt; - The async response
     */
    public CompletableFuture<SubmitOnboardingDataResponse> submit(Optional<? extends SubmitOnboardingDataRequestBody> request, Optional<Options> options) {
        AsyncRequestOperation<Optional<? extends SubmitOnboardingDataRequestBody>, SubmitOnboardingDataResponse> operation
              = new SubmitOnboardingData.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
