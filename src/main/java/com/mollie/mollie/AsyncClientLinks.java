/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.components.EntityClientLink;
import com.mollie.mollie.models.operations.CreateClientLinkRequest;
import com.mollie.mollie.models.operations.async.CreateClientLinkRequestBuilder;
import com.mollie.mollie.models.operations.async.CreateClientLinkResponse;
import com.mollie.mollie.operations.CreateClientLink;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncClientLinks {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final ClientLinks syncSDK;

    AsyncClientLinks(ClientLinks syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public ClientLinks sync() {
        return syncSDK;
    }


    /**
     * Create client link
     * 
     * <p>Link a new or existing organization to your OAuth application, in effect creating a new client. The
     * response
     * contains a `clientLink` where you should redirect your customer to.
     * 
     * <p>## Redirecting the Customer
     * 
     * <p>The `clientLink` URL behaves similarly to a standard OAuth authorization URL. Therefore, after
     * receiving the
     * `clientLink` URL in the API response, you need to **append the following query parameters** *before*
     * redirecting
     * the customer:
     * 
     * <p>* `client_id` _string (required)_
     * 
     * <p>The client ID you received when you registered your OAuth app. The ID starts with `app_`. For
     * example:
     * `app_abc123qwerty`.
     * 
     * <p>* `state` _string (required)_
     * 
     * <p>A random string **generated by your app** to prevent CSRF attacks. This will be reflected in the
     * `state` query
     * parameter when the user returns to the `redirect_uri` after authorizing your app.
     * 
     * <p>* `scope` _string (required)_
     * 
     * <p>A space-separated list of permissions ('scopes') your app requires. See the
     * [permissions list](https://docs.mollie.com/docs/connect-permissions) for more information about the
     * available
     * scopes.
     * 
     * <p>We recommend at least : `onboarding.read onboarding.write`
     * 
     * <p>* `approval_prompt` _string_
     * 
     * <p>Can be set to `force` to force showing the consent screen to the merchant, *even when it is not
     * necessary*. If you
     * force an approval prompt and the user creates a new authorization, previously active authorizations
     * will be
     * revoked.
     * 
     * <p>Possible values: `auto` `force` (default: `auto`)
     * 
     * <p>### Example of a Complete Redirect URL
     * 
     * <p>After adding the above url parameter your URL will look something like this and you can redirect
     * your client to this
     * page:
     * 
     * <p>```
     * https://my.mollie.com/dashboard/client-link/{id}?client_id={your_client_id}&amp;state={unique_state}&amp;scope=onboarding.read%20onboarding.write
     * ```
     * 
     * <p>## Error Handling
     * 
     * <p>Error handling is also dealt with similar to the
     * [Authorize](https://docs.mollie.com/reference/authorize) endpoint:
     * the customer is redirected back to your app's redirect URL with the `error` and `error_description`
     * parameters added
     * to the URL.
     * 
     * <p>&gt; ðŸš§
     * &gt;
     * &gt; A client link must be used within 30 days of creation. After that period, it will expire and
     * you will need to create a new client link.
     * 
     * @return The async call builder
     */
    public CreateClientLinkRequestBuilder create() {
        return new CreateClientLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Create client link
     * 
     * <p>Link a new or existing organization to your OAuth application, in effect creating a new client. The
     * response
     * contains a `clientLink` where you should redirect your customer to.
     * 
     * <p>## Redirecting the Customer
     * 
     * <p>The `clientLink` URL behaves similarly to a standard OAuth authorization URL. Therefore, after
     * receiving the
     * `clientLink` URL in the API response, you need to **append the following query parameters** *before*
     * redirecting
     * the customer:
     * 
     * <p>* `client_id` _string (required)_
     * 
     * <p>The client ID you received when you registered your OAuth app. The ID starts with `app_`. For
     * example:
     * `app_abc123qwerty`.
     * 
     * <p>* `state` _string (required)_
     * 
     * <p>A random string **generated by your app** to prevent CSRF attacks. This will be reflected in the
     * `state` query
     * parameter when the user returns to the `redirect_uri` after authorizing your app.
     * 
     * <p>* `scope` _string (required)_
     * 
     * <p>A space-separated list of permissions ('scopes') your app requires. See the
     * [permissions list](https://docs.mollie.com/docs/connect-permissions) for more information about the
     * available
     * scopes.
     * 
     * <p>We recommend at least : `onboarding.read onboarding.write`
     * 
     * <p>* `approval_prompt` _string_
     * 
     * <p>Can be set to `force` to force showing the consent screen to the merchant, *even when it is not
     * necessary*. If you
     * force an approval prompt and the user creates a new authorization, previously active authorizations
     * will be
     * revoked.
     * 
     * <p>Possible values: `auto` `force` (default: `auto`)
     * 
     * <p>### Example of a Complete Redirect URL
     * 
     * <p>After adding the above url parameter your URL will look something like this and you can redirect
     * your client to this
     * page:
     * 
     * <p>```
     * https://my.mollie.com/dashboard/client-link/{id}?client_id={your_client_id}&amp;state={unique_state}&amp;scope=onboarding.read%20onboarding.write
     * ```
     * 
     * <p>## Error Handling
     * 
     * <p>Error handling is also dealt with similar to the
     * [Authorize](https://docs.mollie.com/reference/authorize) endpoint:
     * the customer is redirected back to your app's redirect URL with the `error` and `error_description`
     * parameters added
     * to the URL.
     * 
     * <p>&gt; ðŸš§
     * &gt;
     * &gt; A client link must be used within 30 days of creation. After that period, it will expire and
     * you will need to create a new client link.
     * 
     * @return {@code CompletableFuture<CreateClientLinkResponse>} - The async response
     */
    public CompletableFuture<CreateClientLinkResponse> createDirect() {
        return create(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Create client link
     * 
     * <p>Link a new or existing organization to your OAuth application, in effect creating a new client. The
     * response
     * contains a `clientLink` where you should redirect your customer to.
     * 
     * <p>## Redirecting the Customer
     * 
     * <p>The `clientLink` URL behaves similarly to a standard OAuth authorization URL. Therefore, after
     * receiving the
     * `clientLink` URL in the API response, you need to **append the following query parameters** *before*
     * redirecting
     * the customer:
     * 
     * <p>* `client_id` _string (required)_
     * 
     * <p>The client ID you received when you registered your OAuth app. The ID starts with `app_`. For
     * example:
     * `app_abc123qwerty`.
     * 
     * <p>* `state` _string (required)_
     * 
     * <p>A random string **generated by your app** to prevent CSRF attacks. This will be reflected in the
     * `state` query
     * parameter when the user returns to the `redirect_uri` after authorizing your app.
     * 
     * <p>* `scope` _string (required)_
     * 
     * <p>A space-separated list of permissions ('scopes') your app requires. See the
     * [permissions list](https://docs.mollie.com/docs/connect-permissions) for more information about the
     * available
     * scopes.
     * 
     * <p>We recommend at least : `onboarding.read onboarding.write`
     * 
     * <p>* `approval_prompt` _string_
     * 
     * <p>Can be set to `force` to force showing the consent screen to the merchant, *even when it is not
     * necessary*. If you
     * force an approval prompt and the user creates a new authorization, previously active authorizations
     * will be
     * revoked.
     * 
     * <p>Possible values: `auto` `force` (default: `auto`)
     * 
     * <p>### Example of a Complete Redirect URL
     * 
     * <p>After adding the above url parameter your URL will look something like this and you can redirect
     * your client to this
     * page:
     * 
     * <p>```
     * https://my.mollie.com/dashboard/client-link/{id}?client_id={your_client_id}&amp;state={unique_state}&amp;scope=onboarding.read%20onboarding.write
     * ```
     * 
     * <p>## Error Handling
     * 
     * <p>Error handling is also dealt with similar to the
     * [Authorize](https://docs.mollie.com/reference/authorize) endpoint:
     * the customer is redirected back to your app's redirect URL with the `error` and `error_description`
     * parameters added
     * to the URL.
     * 
     * <p>&gt; ðŸš§
     * &gt;
     * &gt; A client link must be used within 30 days of creation. After that period, it will expire and
     * you will need to create a new client link.
     * 
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param entityClientLink 
     * @param options additional options
     * @return {@code CompletableFuture<CreateClientLinkResponse>} - The async response
     */
    public CompletableFuture<CreateClientLinkResponse> create(
            Optional<String> idempotencyKey, Optional<? extends EntityClientLink> entityClientLink,
            Optional<Options> options) {
        CreateClientLinkRequest request =
            CreateClientLinkRequest
                .builder()
                .idempotencyKey(idempotencyKey)
                .entityClientLink(entityClientLink)
                .build();
        AsyncRequestOperation<CreateClientLinkRequest, CreateClientLinkResponse> operation
              = new CreateClientLink.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
