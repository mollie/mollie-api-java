/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.CreateCaptureRequest;
import com.mollie.mollie.models.operations.CreateCaptureRequestBody;
import com.mollie.mollie.models.operations.CreateCaptureRequestBuilder;
import com.mollie.mollie.models.operations.CreateCaptureResponse;
import com.mollie.mollie.models.operations.GetCaptureQueryParamEmbed;
import com.mollie.mollie.models.operations.GetCaptureRequest;
import com.mollie.mollie.models.operations.GetCaptureRequestBuilder;
import com.mollie.mollie.models.operations.GetCaptureResponse;
import com.mollie.mollie.models.operations.ListCapturesRequest;
import com.mollie.mollie.models.operations.ListCapturesRequestBuilder;
import com.mollie.mollie.models.operations.ListCapturesResponse;
import com.mollie.mollie.operations.CreateCapture;
import com.mollie.mollie.operations.GetCapture;
import com.mollie.mollie.operations.ListCaptures;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Captures {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncCaptures asyncSDK;

    Captures(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncCaptures(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncCaptures async() {
        return asyncSDK;
    }

    /**
     * Create capture
     * 
     * <p>Capture an *authorized* payment.
     * 
     * <p>Some payment methods allow you to first collect a customer's authorization,
     * and capture the amount at a later point.
     * 
     * <p>By default, Mollie captures payments automatically. If however you
     * configured your payment with `captureMode: manual`, you can capture the payment using this endpoint after
     * having collected the customer's authorization.
     * 
     * @return The call builder
     */
    public CreateCaptureRequestBuilder create() {
        return new CreateCaptureRequestBuilder(sdkConfiguration);
    }

    /**
     * Create capture
     * 
     * <p>Capture an *authorized* payment.
     * 
     * <p>Some payment methods allow you to first collect a customer's authorization,
     * and capture the amount at a later point.
     * 
     * <p>By default, Mollie captures payments automatically. If however you
     * configured your payment with `captureMode: manual`, you can capture the payment using this endpoint after
     * having collected the customer's authorization.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCaptureResponse create(String paymentId) throws Exception {
        return create(paymentId, Optional.empty(), Optional.empty());
    }

    /**
     * Create capture
     * 
     * <p>Capture an *authorized* payment.
     * 
     * <p>Some payment methods allow you to first collect a customer's authorization,
     * and capture the amount at a later point.
     * 
     * <p>By default, Mollie captures payments automatically. If however you
     * configured your payment with `captureMode: manual`, you can capture the payment using this endpoint after
     * having collected the customer's authorization.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCaptureResponse create(
            String paymentId, Optional<? extends CreateCaptureRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        CreateCaptureRequest request =
            CreateCaptureRequest
                .builder()
                .paymentId(paymentId)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreateCaptureRequest, CreateCaptureResponse> operation
              = new CreateCapture.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List captures
     * 
     * <p>Retrieve a list of all captures created for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @return The call builder
     */
    public ListCapturesRequestBuilder list() {
        return new ListCapturesRequestBuilder(sdkConfiguration);
    }

    /**
     * List captures
     * 
     * <p>Retrieve a list of all captures created for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListCapturesResponse list(ListCapturesRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List captures
     * 
     * <p>Retrieve a list of all captures created for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListCapturesResponse list(ListCapturesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListCapturesRequest, ListCapturesResponse> operation
              = new ListCaptures.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get capture
     * 
     * <p>Retrieve a single payment capture by its ID and the ID of its parent
     * payment.
     * 
     * @return The call builder
     */
    public GetCaptureRequestBuilder get() {
        return new GetCaptureRequestBuilder(sdkConfiguration);
    }

    /**
     * Get capture
     * 
     * <p>Retrieve a single payment capture by its ID and the ID of its parent
     * payment.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param captureId Provide the ID of the related capture.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCaptureResponse get(String paymentId, String captureId) throws Exception {
        return get(paymentId, captureId, Optional.empty(),
            JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get capture
     * 
     * <p>Retrieve a single payment capture by its ID and the ID of its parent
     * payment.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param captureId Provide the ID of the related capture.
     * @param embed This endpoint allows you to embed additional resources via the
     *         `embed` query string parameter.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCaptureResponse get(
            String paymentId, String captureId,
            Optional<? extends GetCaptureQueryParamEmbed> embed, JsonNullable<Boolean> testmode,
            Optional<Options> options) throws Exception {
        GetCaptureRequest request =
            GetCaptureRequest
                .builder()
                .paymentId(paymentId)
                .captureId(captureId)
                .embed(embed)
                .testmode(testmode)
                .build();
        RequestOperation<GetCaptureRequest, GetCaptureResponse> operation
              = new GetCapture.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
