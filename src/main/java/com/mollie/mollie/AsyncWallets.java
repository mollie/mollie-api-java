/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.operations.RequestApplePayPaymentSessionRequest;
import com.mollie.mollie.models.operations.RequestApplePayPaymentSessionRequestBody;
import com.mollie.mollie.models.operations.async.RequestApplePayPaymentSessionRequestBuilder;
import com.mollie.mollie.models.operations.async.RequestApplePayPaymentSessionResponse;
import com.mollie.mollie.operations.RequestApplePayPaymentSession;
import com.mollie.mollie.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncWallets {
    private final SDKConfiguration sdkConfiguration;
    private final Wallets syncSDK;

    AsyncWallets(Wallets syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Wallets sync() {
        return syncSDK;
    }


    /**
     * Request Apple Pay payment session
     * 
     * <p>When integrating Apple Pay in your own checkout on the web, you need to
     * [provide merchant validation](https://developer.apple.com/documentation/apple_pay_on_the_web/apple_pay_js_api/providing_merchant_validation).
     * This is normally done using Apple's
     * [Requesting an Apple Pay Session](https://developer.apple.com/documentation/apple_pay_on_the_web/apple_pay_js_api/requesting_an_apple_pay_payment_session).
     * The merchant validation proves to Apple that a validated merchant is calling the Apple Pay Javascript APIs.
     * 
     * <p>To integrate Apple Pay via Mollie, you will have to call the Mollie API instead of Apple's API. The response of this
     * API call can then be passed as-is to the completion method, `completeMerchantValidation`.
     * 
     * <p>Before requesting an Apple Pay Payment Session, you must place the domain validation file on your server at:
     * `https://[domain]/.well-known/apple-developer-merchantid-domain-association`. Without this file, it will not be
     * possible to use Apple Pay on your domain.
     * 
     * <p>Each new transaction requires a new payment session object. Merchant session objects are not reusable, and they
     * expire after five minutes.
     * 
     * <p>Payment sessions cannot be requested directly from the browser. The request must be sent from your server. For the
     * full documentation, see the official
     * [Apple Pay JS API](https://developer.apple.com/documentation/apple_pay_on_the_web/apple_pay_js_api) documentation.
     * 
     * @return The async call builder
     */
    public RequestApplePayPaymentSessionRequestBuilder requestApplePaySession() {
        return new RequestApplePayPaymentSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Request Apple Pay payment session
     * 
     * <p>When integrating Apple Pay in your own checkout on the web, you need to
     * [provide merchant validation](https://developer.apple.com/documentation/apple_pay_on_the_web/apple_pay_js_api/providing_merchant_validation).
     * This is normally done using Apple's
     * [Requesting an Apple Pay Session](https://developer.apple.com/documentation/apple_pay_on_the_web/apple_pay_js_api/requesting_an_apple_pay_payment_session).
     * The merchant validation proves to Apple that a validated merchant is calling the Apple Pay Javascript APIs.
     * 
     * <p>To integrate Apple Pay via Mollie, you will have to call the Mollie API instead of Apple's API. The response of this
     * API call can then be passed as-is to the completion method, `completeMerchantValidation`.
     * 
     * <p>Before requesting an Apple Pay Payment Session, you must place the domain validation file on your server at:
     * `https://[domain]/.well-known/apple-developer-merchantid-domain-association`. Without this file, it will not be
     * possible to use Apple Pay on your domain.
     * 
     * <p>Each new transaction requires a new payment session object. Merchant session objects are not reusable, and they
     * expire after five minutes.
     * 
     * <p>Payment sessions cannot be requested directly from the browser. The request must be sent from your server. For the
     * full documentation, see the official
     * [Apple Pay JS API](https://developer.apple.com/documentation/apple_pay_on_the_web/apple_pay_js_api) documentation.
     * 
     * @return CompletableFuture&lt;RequestApplePayPaymentSessionResponse&gt; - The async response
     */
    public CompletableFuture<RequestApplePayPaymentSessionResponse> requestApplePaySessionDirect() {
        return requestApplePaySession(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Request Apple Pay payment session
     * 
     * <p>When integrating Apple Pay in your own checkout on the web, you need to
     * [provide merchant validation](https://developer.apple.com/documentation/apple_pay_on_the_web/apple_pay_js_api/providing_merchant_validation).
     * This is normally done using Apple's
     * [Requesting an Apple Pay Session](https://developer.apple.com/documentation/apple_pay_on_the_web/apple_pay_js_api/requesting_an_apple_pay_payment_session).
     * The merchant validation proves to Apple that a validated merchant is calling the Apple Pay Javascript APIs.
     * 
     * <p>To integrate Apple Pay via Mollie, you will have to call the Mollie API instead of Apple's API. The response of this
     * API call can then be passed as-is to the completion method, `completeMerchantValidation`.
     * 
     * <p>Before requesting an Apple Pay Payment Session, you must place the domain validation file on your server at:
     * `https://[domain]/.well-known/apple-developer-merchantid-domain-association`. Without this file, it will not be
     * possible to use Apple Pay on your domain.
     * 
     * <p>Each new transaction requires a new payment session object. Merchant session objects are not reusable, and they
     * expire after five minutes.
     * 
     * <p>Payment sessions cannot be requested directly from the browser. The request must be sent from your server. For the
     * full documentation, see the official
     * [Apple Pay JS API](https://developer.apple.com/documentation/apple_pay_on_the_web/apple_pay_js_api) documentation.
     * 
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return CompletableFuture&lt;RequestApplePayPaymentSessionResponse&gt; - The async response
     */
    public CompletableFuture<RequestApplePayPaymentSessionResponse> requestApplePaySession(
            Optional<String> idempotencyKey, Optional<? extends RequestApplePayPaymentSessionRequestBody> requestBody,
            Optional<Options> options) {
        RequestApplePayPaymentSessionRequest request =
            RequestApplePayPaymentSessionRequest
                .builder()
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        AsyncRequestOperation<RequestApplePayPaymentSessionRequest, RequestApplePayPaymentSessionResponse> operation
              = new RequestApplePayPaymentSession.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
