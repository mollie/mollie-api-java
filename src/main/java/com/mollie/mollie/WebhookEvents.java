/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.GetWebhookEventRequest;
import com.mollie.mollie.models.operations.GetWebhookEventRequestBuilder;
import com.mollie.mollie.models.operations.GetWebhookEventResponse;
import com.mollie.mollie.operations.GetWebhookEventOperation;
import com.mollie.mollie.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class WebhookEvents {
    private final SDKConfiguration sdkConfiguration;

    WebhookEvents(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Get a Webhook Event
     * 
     * <p>Retrieve a single webhook event object by its event ID.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **events.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public GetWebhookEventRequestBuilder get() {
        return new GetWebhookEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a Webhook Event
     * 
     * <p>Retrieve a single webhook event object by its event ID.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **events.read**](/reference/authentication)
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWebhookEventResponse get(String id) throws Exception {
        return get(id, Optional.empty());
    }

    /**
     * Get a Webhook Event
     * 
     * <p>Retrieve a single webhook event object by its event ID.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **events.read**](/reference/authentication)
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWebhookEventResponse get(String id, Optional<Options> options) throws Exception {
        GetWebhookEventRequest request =
            GetWebhookEventRequest
                .builder()
                .id(id)
                .build();
        RequestOperation<GetWebhookEventRequest, GetWebhookEventResponse> operation
              = new GetWebhookEventOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
