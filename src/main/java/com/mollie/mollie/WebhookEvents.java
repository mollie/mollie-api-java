/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.GetWebhookEventRequest;
import com.mollie.mollie.models.operations.GetWebhookEventRequestBuilder;
import com.mollie.mollie.models.operations.GetWebhookEventResponse;
import com.mollie.mollie.operations.GetWebhookEvent;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class WebhookEvents {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncWebhookEvents asyncSDK;

    WebhookEvents(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncWebhookEvents(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncWebhookEvents async() {
        return asyncSDK;
    }

    /**
     * Get a Webhook Event
     * 
     * <p>Retrieve a single webhook event object by its event ID.
     * 
     * @return The call builder
     */
    public GetWebhookEventRequestBuilder get() {
        return new GetWebhookEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a Webhook Event
     * 
     * <p>Retrieve a single webhook event object by its event ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWebhookEventResponse get(String id) throws Exception {
        return get(id, JsonNullable.undefined(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Get a Webhook Event
     * 
     * <p>Retrieve a single webhook event object by its event ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWebhookEventResponse get(
            String id, JsonNullable<Boolean> testmode,
            Optional<String> idempotencyKey, Optional<Options> options) throws Exception {
        GetWebhookEventRequest request =
            GetWebhookEventRequest
                .builder()
                .id(id)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        RequestOperation<GetWebhookEventRequest, GetWebhookEventResponse> operation
              = new GetWebhookEvent.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
