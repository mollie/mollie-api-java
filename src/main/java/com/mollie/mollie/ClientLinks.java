/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.CreateClientLinkRequestBody;
import com.mollie.mollie.models.operations.CreateClientLinkRequestBuilder;
import com.mollie.mollie.models.operations.CreateClientLinkResponse;
import com.mollie.mollie.operations.CreateClientLinkOperation;
import com.mollie.mollie.utils.Options;
import java.lang.Exception;
import java.util.List;
import java.util.Optional;


public class ClientLinks {
    private final SDKConfiguration sdkConfiguration;

    ClientLinks(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create client link
     * 
     * <p>&gt; ðŸš§ Open beta
     * &gt;
     * &gt; This feature is currently in open beta, and the final specification may still change.
     * 
     * <p>Link a new or existing organization to your OAuth application, in effect creating a new client. The response contains a `clientLink` where you should redirect your customer to.
     * 
     * <p>The `clientLink` URL behaves similar to the regular OAuth authorization URL. It supports the following parameters from the [Authorize](authorize) endpoint:
     * 
     * <p>* `client_id`
     * * `state`
     * * `approval_prompt`
     * * `scope`
     * 
     * <p>We recommend at least requesting the scopes `onboarding.read onboarding.write` this way.
     * 
     * <p>Error handling is also dealt with similar to the [Authorize](authorize) endpoint: the customer is redirected back to your app's redirect URL with the `error` and `error_description` parameters added to the URL.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **clients.write**](/reference/authentication)
     * 
     * @return The call builder
     */
    public CreateClientLinkRequestBuilder create() {
        return new CreateClientLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Create client link
     * 
     * <p>&gt; ðŸš§ Open beta
     * &gt;
     * &gt; This feature is currently in open beta, and the final specification may still change.
     * 
     * <p>Link a new or existing organization to your OAuth application, in effect creating a new client. The response contains a `clientLink` where you should redirect your customer to.
     * 
     * <p>The `clientLink` URL behaves similar to the regular OAuth authorization URL. It supports the following parameters from the [Authorize](authorize) endpoint:
     * 
     * <p>* `client_id`
     * * `state`
     * * `approval_prompt`
     * * `scope`
     * 
     * <p>We recommend at least requesting the scopes `onboarding.read onboarding.write` this way.
     * 
     * <p>Error handling is also dealt with similar to the [Authorize](authorize) endpoint: the customer is redirected back to your app's redirect URL with the `error` and `error_description` parameters added to the URL.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **clients.write**](/reference/authentication)
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateClientLinkResponse createDirect() throws Exception {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create client link
     * 
     * <p>&gt; ðŸš§ Open beta
     * &gt;
     * &gt; This feature is currently in open beta, and the final specification may still change.
     * 
     * <p>Link a new or existing organization to your OAuth application, in effect creating a new client. The response contains a `clientLink` where you should redirect your customer to.
     * 
     * <p>The `clientLink` URL behaves similar to the regular OAuth authorization URL. It supports the following parameters from the [Authorize](authorize) endpoint:
     * 
     * <p>* `client_id`
     * * `state`
     * * `approval_prompt`
     * * `scope`
     * 
     * <p>We recommend at least requesting the scopes `onboarding.read onboarding.write` this way.
     * 
     * <p>Error handling is also dealt with similar to the [Authorize](authorize) endpoint: the customer is redirected back to your app's redirect URL with the `error` and `error_description` parameters added to the URL.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **clients.write**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateClientLinkResponse create(
            Optional<? extends CreateClientLinkRequestBody> request,
            Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CreateClientLinkRequestBody>, CreateClientLinkResponse> operation
              = new CreateClientLinkOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
