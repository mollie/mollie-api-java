/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.components.PaymentRequest;
import com.mollie.mollie.models.operations.CancelPaymentRequest;
import com.mollie.mollie.models.operations.CancelPaymentRequestBody;
import com.mollie.mollie.models.operations.CreatePaymentRequest;
import com.mollie.mollie.models.operations.GetPaymentRequest;
import com.mollie.mollie.models.operations.ListPaymentsRequest;
import com.mollie.mollie.models.operations.ReleaseAuthorizationRequest;
import com.mollie.mollie.models.operations.ReleaseAuthorizationRequestBody;
import com.mollie.mollie.models.operations.UpdatePaymentRequest;
import com.mollie.mollie.models.operations.UpdatePaymentRequestBody;
import com.mollie.mollie.models.operations.async.CancelPaymentRequestBuilder;
import com.mollie.mollie.models.operations.async.CancelPaymentResponse;
import com.mollie.mollie.models.operations.async.CreatePaymentRequestBuilder;
import com.mollie.mollie.models.operations.async.CreatePaymentResponse;
import com.mollie.mollie.models.operations.async.GetPaymentRequestBuilder;
import com.mollie.mollie.models.operations.async.GetPaymentResponse;
import com.mollie.mollie.models.operations.async.ListPaymentsRequestBuilder;
import com.mollie.mollie.models.operations.async.ListPaymentsResponse;
import com.mollie.mollie.models.operations.async.ReleaseAuthorizationRequestBuilder;
import com.mollie.mollie.models.operations.async.ReleaseAuthorizationResponse;
import com.mollie.mollie.models.operations.async.UpdatePaymentRequestBuilder;
import com.mollie.mollie.models.operations.async.UpdatePaymentResponse;
import com.mollie.mollie.operations.CancelPayment;
import com.mollie.mollie.operations.CreatePayment;
import com.mollie.mollie.operations.GetPayment;
import com.mollie.mollie.operations.ListPayments;
import com.mollie.mollie.operations.ReleaseAuthorization;
import com.mollie.mollie.operations.UpdatePayment;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncPayments {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Payments syncSDK;

    AsyncPayments(Payments syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Payments sync() {
        return syncSDK;
    }


    /**
     * Create payment
     * 
     * <p>Payment creation is elemental to the Mollie API: this is where most payment
     * implementations start off.
     * 
     * <p>Once you have created a payment, you should redirect your customer to the
     * URL in the `_links.checkout` property from the response.
     * 
     * <p>To wrap your head around the payment process, an explanation and flow charts
     * can be found in the 'Accepting payments' guide.
     * 
     * <p>If you specify the `method` parameter when creating a payment, optional
     * additional parameters may be available for the payment method that are not listed below. Please
     * refer to the
     * guide on [method-specific parameters](extra-payment-parameters).
     * 
     * @return The async call builder
     */
    public CreatePaymentRequestBuilder create() {
        return new CreatePaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Create payment
     * 
     * <p>Payment creation is elemental to the Mollie API: this is where most payment
     * implementations start off.
     * 
     * <p>Once you have created a payment, you should redirect your customer to the
     * URL in the `_links.checkout` property from the response.
     * 
     * <p>To wrap your head around the payment process, an explanation and flow charts
     * can be found in the 'Accepting payments' guide.
     * 
     * <p>If you specify the `method` parameter when creating a payment, optional
     * additional parameters may be available for the payment method that are not listed below. Please
     * refer to the
     * guide on [method-specific parameters](extra-payment-parameters).
     * 
     * @return {@code CompletableFuture<CreatePaymentResponse>} - The async response
     */
    public CompletableFuture<CreatePaymentResponse> createDirect() {
        return create(
                JsonNullable.undefined(), Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Create payment
     * 
     * <p>Payment creation is elemental to the Mollie API: this is where most payment
     * implementations start off.
     * 
     * <p>Once you have created a payment, you should redirect your customer to the
     * URL in the `_links.checkout` property from the response.
     * 
     * <p>To wrap your head around the payment process, an explanation and flow charts
     * can be found in the 'Accepting payments' guide.
     * 
     * <p>If you specify the `method` parameter when creating a payment, optional
     * additional parameters may be available for the payment method that are not listed below. Please
     * refer to the
     * guide on [method-specific parameters](extra-payment-parameters).
     * 
     * @param include This endpoint allows you to include additional information via the `include` query string parameter.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param paymentRequest 
     * @param options additional options
     * @return {@code CompletableFuture<CreatePaymentResponse>} - The async response
     */
    public CompletableFuture<CreatePaymentResponse> create(
            JsonNullable<String> include, Optional<String> idempotencyKey,
            Optional<? extends PaymentRequest> paymentRequest, Optional<Options> options) {
        CreatePaymentRequest request =
            CreatePaymentRequest
                .builder()
                .include(include)
                .idempotencyKey(idempotencyKey)
                .paymentRequest(paymentRequest)
                .build();
        AsyncRequestOperation<CreatePaymentRequest, CreatePaymentResponse> operation
              = new CreatePayment.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List payments
     * 
     * <p>Retrieve all payments created with the current website profile.
     * 
     * <p>The results are paginated.
     * 
     * @return The async call builder
     */
    public ListPaymentsRequestBuilder list() {
        return new ListPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List payments
     * 
     * <p>Retrieve all payments created with the current website profile.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListPaymentsResponse>} - The async response
     */
    public CompletableFuture<ListPaymentsResponse> list(ListPaymentsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List payments
     * 
     * <p>Retrieve all payments created with the current website profile.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<ListPaymentsResponse>} - The async response
     */
    public CompletableFuture<ListPaymentsResponse> list(ListPaymentsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListPaymentsRequest, ListPaymentsResponse> operation
              = new ListPayments.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get payment
     * 
     * <p>Retrieve a single payment object by its payment ID.
     * 
     * @return The async call builder
     */
    public GetPaymentRequestBuilder get() {
        return new GetPaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment
     * 
     * <p>Retrieve a single payment object by its payment ID.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetPaymentResponse>} - The async response
     */
    public CompletableFuture<GetPaymentResponse> get(GetPaymentRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get payment
     * 
     * <p>Retrieve a single payment object by its payment ID.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<GetPaymentResponse>} - The async response
     */
    public CompletableFuture<GetPaymentResponse> get(GetPaymentRequest request, Optional<Options> options) {
        AsyncRequestOperation<GetPaymentRequest, GetPaymentResponse> operation
              = new GetPayment.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update payment
     * 
     * <p>Certain details of an existing payment can be updated.
     * 
     * <p>Updating the payment details will not result in a webhook call.
     * 
     * @return The async call builder
     */
    public UpdatePaymentRequestBuilder update() {
        return new UpdatePaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Update payment
     * 
     * <p>Certain details of an existing payment can be updated.
     * 
     * <p>Updating the payment details will not result in a webhook call.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return {@code CompletableFuture<UpdatePaymentResponse>} - The async response
     */
    public CompletableFuture<UpdatePaymentResponse> update(String paymentId) {
        return update(
                paymentId, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Update payment
     * 
     * <p>Certain details of an existing payment can be updated.
     * 
     * <p>Updating the payment details will not result in a webhook call.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return {@code CompletableFuture<UpdatePaymentResponse>} - The async response
     */
    public CompletableFuture<UpdatePaymentResponse> update(
            String paymentId, Optional<String> idempotencyKey,
            Optional<? extends UpdatePaymentRequestBody> requestBody, Optional<Options> options) {
        UpdatePaymentRequest request =
            UpdatePaymentRequest
                .builder()
                .paymentId(paymentId)
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        AsyncRequestOperation<UpdatePaymentRequest, UpdatePaymentResponse> operation
              = new UpdatePayment.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Cancel payment
     * 
     * <p>Depending on the payment method, you may be able to cancel a payment for a certain amount of time —
     * usually until
     * the next business day or as long as the payment status is open.
     * 
     * <p>Payments may also be canceled manually from the Mollie Dashboard.
     * 
     * <p>The `isCancelable` property on the [Payment object](get-payment) will indicate if the payment can be
     * canceled.
     * 
     * @return The async call builder
     */
    public CancelPaymentRequestBuilder cancel() {
        return new CancelPaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel payment
     * 
     * <p>Depending on the payment method, you may be able to cancel a payment for a certain amount of time —
     * usually until
     * the next business day or as long as the payment status is open.
     * 
     * <p>Payments may also be canceled manually from the Mollie Dashboard.
     * 
     * <p>The `isCancelable` property on the [Payment object](get-payment) will indicate if the payment can be
     * canceled.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return {@code CompletableFuture<CancelPaymentResponse>} - The async response
     */
    public CompletableFuture<CancelPaymentResponse> cancel(String paymentId) {
        return cancel(
                paymentId, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Cancel payment
     * 
     * <p>Depending on the payment method, you may be able to cancel a payment for a certain amount of time —
     * usually until
     * the next business day or as long as the payment status is open.
     * 
     * <p>Payments may also be canceled manually from the Mollie Dashboard.
     * 
     * <p>The `isCancelable` property on the [Payment object](get-payment) will indicate if the payment can be
     * canceled.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return {@code CompletableFuture<CancelPaymentResponse>} - The async response
     */
    public CompletableFuture<CancelPaymentResponse> cancel(
            String paymentId, Optional<String> idempotencyKey,
            Optional<? extends CancelPaymentRequestBody> requestBody, Optional<Options> options) {
        CancelPaymentRequest request =
            CancelPaymentRequest
                .builder()
                .paymentId(paymentId)
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        AsyncRequestOperation<CancelPaymentRequest, CancelPaymentResponse> operation
              = new CancelPayment.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Release payment authorization
     * 
     * <p>Releases the full remaining authorized amount. Call this endpoint when you will not be making any
     * additional
     * captures. Payment authorizations may also be released manually from the Mollie Dashboard.
     * 
     * <p>Mollie will do its best to process release requests, but it is not guaranteed that it will succeed.
     * It is up to
     * the issuing bank if and when the hold will be released.
     * 
     * <p>If the request does succeed, the payment status will change to `canceled` for payments without
     * captures.
     * If there is a successful capture, the payment will transition to `paid`.
     * 
     * @return The async call builder
     */
    public ReleaseAuthorizationRequestBuilder releaseAuthorization() {
        return new ReleaseAuthorizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Release payment authorization
     * 
     * <p>Releases the full remaining authorized amount. Call this endpoint when you will not be making any
     * additional
     * captures. Payment authorizations may also be released manually from the Mollie Dashboard.
     * 
     * <p>Mollie will do its best to process release requests, but it is not guaranteed that it will succeed.
     * It is up to
     * the issuing bank if and when the hold will be released.
     * 
     * <p>If the request does succeed, the payment status will change to `canceled` for payments without
     * captures.
     * If there is a successful capture, the payment will transition to `paid`.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return {@code CompletableFuture<ReleaseAuthorizationResponse>} - The async response
     */
    public CompletableFuture<ReleaseAuthorizationResponse> releaseAuthorization(String paymentId) {
        return releaseAuthorization(
                paymentId, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Release payment authorization
     * 
     * <p>Releases the full remaining authorized amount. Call this endpoint when you will not be making any
     * additional
     * captures. Payment authorizations may also be released manually from the Mollie Dashboard.
     * 
     * <p>Mollie will do its best to process release requests, but it is not guaranteed that it will succeed.
     * It is up to
     * the issuing bank if and when the hold will be released.
     * 
     * <p>If the request does succeed, the payment status will change to `canceled` for payments without
     * captures.
     * If there is a successful capture, the payment will transition to `paid`.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return {@code CompletableFuture<ReleaseAuthorizationResponse>} - The async response
     */
    public CompletableFuture<ReleaseAuthorizationResponse> releaseAuthorization(
            String paymentId, Optional<String> idempotencyKey,
            Optional<? extends ReleaseAuthorizationRequestBody> requestBody, Optional<Options> options) {
        ReleaseAuthorizationRequest request =
            ReleaseAuthorizationRequest
                .builder()
                .paymentId(paymentId)
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        AsyncRequestOperation<ReleaseAuthorizationRequest, ReleaseAuthorizationResponse> operation
              = new ReleaseAuthorization.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
