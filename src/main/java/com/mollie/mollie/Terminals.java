/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.GetTerminalRequest;
import com.mollie.mollie.models.operations.GetTerminalRequestBuilder;
import com.mollie.mollie.models.operations.GetTerminalResponse;
import com.mollie.mollie.models.operations.ListTerminalsRequest;
import com.mollie.mollie.models.operations.ListTerminalsRequestBuilder;
import com.mollie.mollie.models.operations.ListTerminalsResponse;
import com.mollie.mollie.operations.GetTerminal;
import com.mollie.mollie.operations.ListTerminals;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;


public class Terminals {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncTerminals asyncSDK;

    Terminals(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncTerminals(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncTerminals async() {
        return asyncSDK;
    }

    /**
     * List terminals
     * 
     * <p>Retrieve a list of all physical point-of-sale devices.
     * 
     * <p>The results are paginated.
     * 
     * @return The call builder
     */
    public ListTerminalsRequestBuilder list() {
        return new ListTerminalsRequestBuilder(sdkConfiguration);
    }

    /**
     * List terminals
     * 
     * <p>Retrieve a list of all physical point-of-sale devices.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListTerminalsResponse list(ListTerminalsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List terminals
     * 
     * <p>Retrieve a list of all physical point-of-sale devices.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListTerminalsResponse list(ListTerminalsRequest request, Optional<Options> options) {
        RequestOperation<ListTerminalsRequest, ListTerminalsResponse> operation
              = new ListTerminals.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get terminal
     * 
     * <p>Retrieve a single terminal by its ID.
     * 
     * @return The call builder
     */
    public GetTerminalRequestBuilder get() {
        return new GetTerminalRequestBuilder(sdkConfiguration);
    }

    /**
     * Get terminal
     * 
     * <p>Retrieve a single terminal by its ID.
     * 
     * @param terminalId Provide the ID of the related terminal.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetTerminalResponse get(String terminalId) {
        return get(terminalId, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Get terminal
     * 
     * <p>Retrieve a single terminal by its ID.
     * 
     * @param terminalId Provide the ID of the related terminal.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetTerminalResponse get(
            String terminalId, Optional<Boolean> testmode,
            Optional<String> idempotencyKey, Optional<Options> options) {
        GetTerminalRequest request =
            GetTerminalRequest
                .builder()
                .terminalId(terminalId)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        RequestOperation<GetTerminalRequest, GetTerminalResponse> operation
              = new GetTerminal.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
