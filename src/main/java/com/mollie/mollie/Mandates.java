/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.CreateMandateRequest;
import com.mollie.mollie.models.operations.CreateMandateRequestBody;
import com.mollie.mollie.models.operations.CreateMandateRequestBuilder;
import com.mollie.mollie.models.operations.CreateMandateResponse;
import com.mollie.mollie.models.operations.GetMandateRequest;
import com.mollie.mollie.models.operations.GetMandateRequestBuilder;
import com.mollie.mollie.models.operations.GetMandateResponse;
import com.mollie.mollie.models.operations.ListMandatesRequest;
import com.mollie.mollie.models.operations.ListMandatesRequestBuilder;
import com.mollie.mollie.models.operations.ListMandatesResponse;
import com.mollie.mollie.models.operations.RevokeMandateRequest;
import com.mollie.mollie.models.operations.RevokeMandateRequestBody;
import com.mollie.mollie.models.operations.RevokeMandateRequestBuilder;
import com.mollie.mollie.models.operations.RevokeMandateResponse;
import com.mollie.mollie.operations.CreateMandate;
import com.mollie.mollie.operations.GetMandate;
import com.mollie.mollie.operations.ListMandates;
import com.mollie.mollie.operations.RevokeMandate;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Mandates {
    private final SDKConfiguration sdkConfiguration;

    Mandates(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create mandate
     * 
     * <p>Create a mandate for a specific customer. Mandates allow you to charge a customer's card, PayPal account or bank
     * account recurrently.
     * 
     * <p>It is only possible to create mandates for IBANs and PayPal billing agreements with this endpoint. To create
     * mandates for cards, your customers need to perform a 'first payment' with their card.
     * 
     * @return The call builder
     */
    public CreateMandateRequestBuilder create() {
        return new CreateMandateRequestBuilder(sdkConfiguration);
    }

    /**
     * Create mandate
     * 
     * <p>Create a mandate for a specific customer. Mandates allow you to charge a customer's card, PayPal account or bank
     * account recurrently.
     * 
     * <p>It is only possible to create mandates for IBANs and PayPal billing agreements with this endpoint. To create
     * mandates for cards, your customers need to perform a 'first payment' with their card.
     * 
     * @param customerId Provide the ID of the related customer.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateMandateResponse create(String customerId) throws Exception {
        return create(customerId, Optional.empty(), Optional.empty());
    }

    /**
     * Create mandate
     * 
     * <p>Create a mandate for a specific customer. Mandates allow you to charge a customer's card, PayPal account or bank
     * account recurrently.
     * 
     * <p>It is only possible to create mandates for IBANs and PayPal billing agreements with this endpoint. To create
     * mandates for cards, your customers need to perform a 'first payment' with their card.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateMandateResponse create(
            String customerId, Optional<? extends CreateMandateRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        CreateMandateRequest request =
            CreateMandateRequest
                .builder()
                .customerId(customerId)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreateMandateRequest, CreateMandateResponse> operation
              = new CreateMandate.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List mandates
     * 
     * <p>Retrieve a list of all mandates.
     * 
     * <p>The results are paginated.
     * 
     * @return The call builder
     */
    public ListMandatesRequestBuilder list() {
        return new ListMandatesRequestBuilder(sdkConfiguration);
    }

    /**
     * List mandates
     * 
     * <p>Retrieve a list of all mandates.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListMandatesResponse list(ListMandatesRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List mandates
     * 
     * <p>Retrieve a list of all mandates.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListMandatesResponse list(ListMandatesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListMandatesRequest, ListMandatesResponse> operation
              = new ListMandates.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get mandate
     * 
     * <p>Retrieve a single mandate by its ID. Depending on the type of mandate, the object will contain the customer's bank
     * account details, card details, or PayPal account details.
     * 
     * @return The call builder
     */
    public GetMandateRequestBuilder get() {
        return new GetMandateRequestBuilder(sdkConfiguration);
    }

    /**
     * Get mandate
     * 
     * <p>Retrieve a single mandate by its ID. Depending on the type of mandate, the object will contain the customer's bank
     * account details, card details, or PayPal account details.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param mandateId Provide the ID of the related mandate.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetMandateResponse get(String customerId, String mandateId) throws Exception {
        return get(customerId, mandateId, JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * Get mandate
     * 
     * <p>Retrieve a single mandate by its ID. Depending on the type of mandate, the object will contain the customer's bank
     * account details, card details, or PayPal account details.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param mandateId Provide the ID of the related mandate.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetMandateResponse get(
            String customerId, String mandateId,
            JsonNullable<Boolean> testmode, Optional<Options> options) throws Exception {
        GetMandateRequest request =
            GetMandateRequest
                .builder()
                .customerId(customerId)
                .mandateId(mandateId)
                .testmode(testmode)
                .build();
        RequestOperation<GetMandateRequest, GetMandateResponse> operation
              = new GetMandate.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Revoke mandate
     * 
     * <p>Revoke a customer's mandate. You will no longer be able to charge the customer's bank account or card with this
     * mandate, and all connected subscriptions will be canceled.
     * 
     * @return The call builder
     */
    public RevokeMandateRequestBuilder revoke() {
        return new RevokeMandateRequestBuilder(sdkConfiguration);
    }

    /**
     * Revoke mandate
     * 
     * <p>Revoke a customer's mandate. You will no longer be able to charge the customer's bank account or card with this
     * mandate, and all connected subscriptions will be canceled.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param mandateId Provide the ID of the related mandate.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeMandateResponse revoke(String customerId, String mandateId) throws Exception {
        return revoke(customerId, mandateId, Optional.empty(),
            Optional.empty());
    }

    /**
     * Revoke mandate
     * 
     * <p>Revoke a customer's mandate. You will no longer be able to charge the customer's bank account or card with this
     * mandate, and all connected subscriptions will be canceled.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param mandateId Provide the ID of the related mandate.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeMandateResponse revoke(
            String customerId, String mandateId,
            Optional<? extends RevokeMandateRequestBody> requestBody, Optional<Options> options) throws Exception {
        RevokeMandateRequest request =
            RevokeMandateRequest
                .builder()
                .customerId(customerId)
                .mandateId(mandateId)
                .requestBody(requestBody)
                .build();
        RequestOperation<RevokeMandateRequest, RevokeMandateResponse> operation
              = new RevokeMandate.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
