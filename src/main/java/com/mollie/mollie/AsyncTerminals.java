/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.operations.GetTerminalRequest;
import com.mollie.mollie.models.operations.ListTerminalsRequest;
import com.mollie.mollie.models.operations.async.GetTerminalRequestBuilder;
import com.mollie.mollie.models.operations.async.GetTerminalResponse;
import com.mollie.mollie.models.operations.async.ListTerminalsRequestBuilder;
import com.mollie.mollie.models.operations.async.ListTerminalsResponse;
import com.mollie.mollie.operations.GetTerminal;
import com.mollie.mollie.operations.ListTerminals;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncTerminals {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Terminals syncSDK;

    AsyncTerminals(Terminals syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Terminals sync() {
        return syncSDK;
    }


    /**
     * List terminals
     * 
     * <p>Retrieve a list of all physical point-of-sale devices.
     * 
     * <p>The results are paginated.
     * 
     * @return The async call builder
     */
    public ListTerminalsRequestBuilder list() {
        return new ListTerminalsRequestBuilder(sdkConfiguration);
    }

    /**
     * List terminals
     * 
     * <p>Retrieve a list of all physical point-of-sale devices.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListTerminalsResponse>} - The async response
     */
    public CompletableFuture<ListTerminalsResponse> list(ListTerminalsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List terminals
     * 
     * <p>Retrieve a list of all physical point-of-sale devices.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<ListTerminalsResponse>} - The async response
     */
    public CompletableFuture<ListTerminalsResponse> list(ListTerminalsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListTerminalsRequest, ListTerminalsResponse> operation
              = new ListTerminals.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get terminal
     * 
     * <p>Retrieve a single terminal by its ID.
     * 
     * @return The async call builder
     */
    public GetTerminalRequestBuilder get() {
        return new GetTerminalRequestBuilder(sdkConfiguration);
    }

    /**
     * Get terminal
     * 
     * <p>Retrieve a single terminal by its ID.
     * 
     * @param terminalId Provide the ID of the related terminal.
     * @return {@code CompletableFuture<GetTerminalResponse>} - The async response
     */
    public CompletableFuture<GetTerminalResponse> get(String terminalId) {
        return get(
                terminalId, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Get terminal
     * 
     * <p>Retrieve a single terminal by its ID.
     * 
     * @param terminalId Provide the ID of the related terminal.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return {@code CompletableFuture<GetTerminalResponse>} - The async response
     */
    public CompletableFuture<GetTerminalResponse> get(
            String terminalId, Optional<Boolean> testmode,
            Optional<String> idempotencyKey, Optional<Options> options) {
        GetTerminalRequest request =
            GetTerminalRequest
                .builder()
                .terminalId(terminalId)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<GetTerminalRequest, GetTerminalResponse> operation
              = new GetTerminal.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
