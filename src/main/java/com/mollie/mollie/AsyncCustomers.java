/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.components.EntityCustomer;
import com.mollie.mollie.models.components.PaymentRequest;
import com.mollie.mollie.models.operations.CreateCustomerPaymentRequest;
import com.mollie.mollie.models.operations.CreateCustomerRequest;
import com.mollie.mollie.models.operations.DeleteCustomerRequest;
import com.mollie.mollie.models.operations.DeleteCustomerRequestBody;
import com.mollie.mollie.models.operations.GetCustomerRequest;
import com.mollie.mollie.models.operations.ListCustomerPaymentsRequest;
import com.mollie.mollie.models.operations.ListCustomersRequest;
import com.mollie.mollie.models.operations.UpdateCustomerRequest;
import com.mollie.mollie.models.operations.async.CreateCustomerPaymentRequestBuilder;
import com.mollie.mollie.models.operations.async.CreateCustomerPaymentResponse;
import com.mollie.mollie.models.operations.async.CreateCustomerRequestBuilder;
import com.mollie.mollie.models.operations.async.CreateCustomerResponse;
import com.mollie.mollie.models.operations.async.DeleteCustomerRequestBuilder;
import com.mollie.mollie.models.operations.async.DeleteCustomerResponse;
import com.mollie.mollie.models.operations.async.GetCustomerRequestBuilder;
import com.mollie.mollie.models.operations.async.GetCustomerResponse;
import com.mollie.mollie.models.operations.async.ListCustomerPaymentsRequestBuilder;
import com.mollie.mollie.models.operations.async.ListCustomerPaymentsResponse;
import com.mollie.mollie.models.operations.async.ListCustomersRequestBuilder;
import com.mollie.mollie.models.operations.async.ListCustomersResponse;
import com.mollie.mollie.models.operations.async.UpdateCustomerRequestBuilder;
import com.mollie.mollie.models.operations.async.UpdateCustomerResponse;
import com.mollie.mollie.operations.CreateCustomer;
import com.mollie.mollie.operations.CreateCustomerPayment;
import com.mollie.mollie.operations.DeleteCustomer;
import com.mollie.mollie.operations.GetCustomer;
import com.mollie.mollie.operations.ListCustomerPayments;
import com.mollie.mollie.operations.ListCustomers;
import com.mollie.mollie.operations.UpdateCustomer;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncCustomers {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Customers syncSDK;

    AsyncCustomers(Customers syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Customers sync() {
        return syncSDK;
    }


    /**
     * Create customer
     * 
     * <p>Creates a simple minimal representation of a customer. Payments, recurring mandates, and
     * subscriptions can be linked
     * to this customer object, which simplifies management of recurring payments.
     * 
     * <p>Once registered, customers will also appear in your Mollie dashboard.
     * 
     * @return The async call builder
     */
    public CreateCustomerRequestBuilder create() {
        return new CreateCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Create customer
     * 
     * <p>Creates a simple minimal representation of a customer. Payments, recurring mandates, and
     * subscriptions can be linked
     * to this customer object, which simplifies management of recurring payments.
     * 
     * <p>Once registered, customers will also appear in your Mollie dashboard.
     * 
     * @return {@code CompletableFuture<CreateCustomerResponse>} - The async response
     */
    public CompletableFuture<CreateCustomerResponse> createDirect() {
        return create(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Create customer
     * 
     * <p>Creates a simple minimal representation of a customer. Payments, recurring mandates, and
     * subscriptions can be linked
     * to this customer object, which simplifies management of recurring payments.
     * 
     * <p>Once registered, customers will also appear in your Mollie dashboard.
     * 
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param entityCustomer 
     * @param options additional options
     * @return {@code CompletableFuture<CreateCustomerResponse>} - The async response
     */
    public CompletableFuture<CreateCustomerResponse> create(
            Optional<String> idempotencyKey, Optional<? extends EntityCustomer> entityCustomer,
            Optional<Options> options) {
        CreateCustomerRequest request =
            CreateCustomerRequest
                .builder()
                .idempotencyKey(idempotencyKey)
                .entityCustomer(entityCustomer)
                .build();
        AsyncRequestOperation<CreateCustomerRequest, CreateCustomerResponse> operation
              = new CreateCustomer.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List customers
     * 
     * <p>Retrieve a list of all customers.
     * 
     * <p>The results are paginated.
     * 
     * @return The async call builder
     */
    public ListCustomersRequestBuilder list() {
        return new ListCustomersRequestBuilder(sdkConfiguration);
    }

    /**
     * List customers
     * 
     * <p>Retrieve a list of all customers.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListCustomersResponse>} - The async response
     */
    public CompletableFuture<ListCustomersResponse> list(ListCustomersRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List customers
     * 
     * <p>Retrieve a list of all customers.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<ListCustomersResponse>} - The async response
     */
    public CompletableFuture<ListCustomersResponse> list(ListCustomersRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListCustomersRequest, ListCustomersResponse> operation
              = new ListCustomers.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get customer
     * 
     * <p>Retrieve a single customer by its ID.
     * 
     * @return The async call builder
     */
    public GetCustomerRequestBuilder get() {
        return new GetCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Get customer
     * 
     * <p>Retrieve a single customer by its ID.
     * 
     * @param customerId Provide the ID of the related customer.
     * @return {@code CompletableFuture<GetCustomerResponse>} - The async response
     */
    public CompletableFuture<GetCustomerResponse> get(String customerId) {
        return get(
                customerId, JsonNullable.undefined(), Optional.empty(),
                Optional.empty(), Optional.empty());
    }

    /**
     * Get customer
     * 
     * <p>Retrieve a single customer by its ID.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param include This endpoint allows you to include additional information via the `include` query string parameter.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return {@code CompletableFuture<GetCustomerResponse>} - The async response
     */
    public CompletableFuture<GetCustomerResponse> get(
            String customerId, JsonNullable<String> include,
            Optional<Boolean> testmode, Optional<String> idempotencyKey,
            Optional<Options> options) {
        GetCustomerRequest request =
            GetCustomerRequest
                .builder()
                .customerId(customerId)
                .include(include)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<GetCustomerRequest, GetCustomerResponse> operation
              = new GetCustomer.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update customer
     * 
     * <p>Update an existing customer.
     * 
     * <p>For an in-depth explanation of each parameter, refer to the [Create customer](create-customer)
     * endpoint.
     * 
     * @return The async call builder
     */
    public UpdateCustomerRequestBuilder update() {
        return new UpdateCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Update customer
     * 
     * <p>Update an existing customer.
     * 
     * <p>For an in-depth explanation of each parameter, refer to the [Create customer](create-customer)
     * endpoint.
     * 
     * @param customerId Provide the ID of the related customer.
     * @return {@code CompletableFuture<UpdateCustomerResponse>} - The async response
     */
    public CompletableFuture<UpdateCustomerResponse> update(String customerId) {
        return update(
                customerId, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Update customer
     * 
     * <p>Update an existing customer.
     * 
     * <p>For an in-depth explanation of each parameter, refer to the [Create customer](create-customer)
     * endpoint.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param entityCustomer 
     * @param options additional options
     * @return {@code CompletableFuture<UpdateCustomerResponse>} - The async response
     */
    public CompletableFuture<UpdateCustomerResponse> update(
            String customerId, Optional<String> idempotencyKey,
            Optional<? extends EntityCustomer> entityCustomer, Optional<Options> options) {
        UpdateCustomerRequest request =
            UpdateCustomerRequest
                .builder()
                .customerId(customerId)
                .idempotencyKey(idempotencyKey)
                .entityCustomer(entityCustomer)
                .build();
        AsyncRequestOperation<UpdateCustomerRequest, UpdateCustomerResponse> operation
              = new UpdateCustomer.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete customer
     * 
     * <p>Delete a customer. All mandates and subscriptions created for this customer will be canceled as
     * well.
     * 
     * @return The async call builder
     */
    public DeleteCustomerRequestBuilder delete() {
        return new DeleteCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete customer
     * 
     * <p>Delete a customer. All mandates and subscriptions created for this customer will be canceled as
     * well.
     * 
     * @param customerId Provide the ID of the related customer.
     * @return {@code CompletableFuture<DeleteCustomerResponse>} - The async response
     */
    public CompletableFuture<DeleteCustomerResponse> delete(String customerId) {
        return delete(
                customerId, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Delete customer
     * 
     * <p>Delete a customer. All mandates and subscriptions created for this customer will be canceled as
     * well.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return {@code CompletableFuture<DeleteCustomerResponse>} - The async response
     */
    public CompletableFuture<DeleteCustomerResponse> delete(
            String customerId, Optional<String> idempotencyKey,
            Optional<? extends DeleteCustomerRequestBody> requestBody, Optional<Options> options) {
        DeleteCustomerRequest request =
            DeleteCustomerRequest
                .builder()
                .customerId(customerId)
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        AsyncRequestOperation<DeleteCustomerRequest, DeleteCustomerResponse> operation
              = new DeleteCustomer.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create customer payment
     * 
     * <p>Creates a payment for the customer.
     * 
     * <p>Linking customers to payments enables you to:
     * 
     * <p>* Keep track of payment preferences for your customers
     * * Allow your customers to charge a previously used credit card with a single click in our hosted
     * checkout
     * * Improve payment insights in the Mollie dashboard
     * * Use recurring payments
     * 
     * <p>This endpoint is effectively an alias of the [Create payment endpoint](create-payment) with the
     * `customerId`
     * parameter predefined.
     * 
     * @return The async call builder
     */
    public CreateCustomerPaymentRequestBuilder createPayment() {
        return new CreateCustomerPaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Create customer payment
     * 
     * <p>Creates a payment for the customer.
     * 
     * <p>Linking customers to payments enables you to:
     * 
     * <p>* Keep track of payment preferences for your customers
     * * Allow your customers to charge a previously used credit card with a single click in our hosted
     * checkout
     * * Improve payment insights in the Mollie dashboard
     * * Use recurring payments
     * 
     * <p>This endpoint is effectively an alias of the [Create payment endpoint](create-payment) with the
     * `customerId`
     * parameter predefined.
     * 
     * @param customerId Provide the ID of the related customer.
     * @return {@code CompletableFuture<CreateCustomerPaymentResponse>} - The async response
     */
    public CompletableFuture<CreateCustomerPaymentResponse> createPayment(String customerId) {
        return createPayment(
                customerId, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Create customer payment
     * 
     * <p>Creates a payment for the customer.
     * 
     * <p>Linking customers to payments enables you to:
     * 
     * <p>* Keep track of payment preferences for your customers
     * * Allow your customers to charge a previously used credit card with a single click in our hosted
     * checkout
     * * Improve payment insights in the Mollie dashboard
     * * Use recurring payments
     * 
     * <p>This endpoint is effectively an alias of the [Create payment endpoint](create-payment) with the
     * `customerId`
     * parameter predefined.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param paymentRequest 
     * @param options additional options
     * @return {@code CompletableFuture<CreateCustomerPaymentResponse>} - The async response
     */
    public CompletableFuture<CreateCustomerPaymentResponse> createPayment(
            String customerId, Optional<String> idempotencyKey,
            Optional<? extends PaymentRequest> paymentRequest, Optional<Options> options) {
        CreateCustomerPaymentRequest request =
            CreateCustomerPaymentRequest
                .builder()
                .customerId(customerId)
                .idempotencyKey(idempotencyKey)
                .paymentRequest(paymentRequest)
                .build();
        AsyncRequestOperation<CreateCustomerPaymentRequest, CreateCustomerPaymentResponse> operation
              = new CreateCustomerPayment.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List customer payments
     * 
     * <p>Retrieve all payments linked to the customer.
     * 
     * @return The async call builder
     */
    public ListCustomerPaymentsRequestBuilder listPayments() {
        return new ListCustomerPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List customer payments
     * 
     * <p>Retrieve all payments linked to the customer.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListCustomerPaymentsResponse>} - The async response
     */
    public CompletableFuture<ListCustomerPaymentsResponse> listPayments(ListCustomerPaymentsRequest request) {
        return listPayments(request, Optional.empty());
    }

    /**
     * List customer payments
     * 
     * <p>Retrieve all payments linked to the customer.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<ListCustomerPaymentsResponse>} - The async response
     */
    public CompletableFuture<ListCustomerPaymentsResponse> listPayments(ListCustomerPaymentsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListCustomerPaymentsRequest, ListCustomerPaymentsResponse> operation
              = new ListCustomerPayments.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
