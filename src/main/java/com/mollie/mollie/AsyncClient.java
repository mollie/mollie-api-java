/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import com.mollie.mollie.utils.Headers;

public class AsyncClient {
    private static final Headers _headers = Headers.EMPTY;

    private final AsyncBalances balances;

    private final AsyncSettlements settlements;

    private final AsyncInvoices invoices;

    private final AsyncPermissions permissions;

    private final AsyncOrganizations organizations;

    private final AsyncProfiles profiles;

    private final AsyncOnboarding onboarding;

    private final AsyncCapabilities capabilities;

    private final AsyncClients clients;

    private final AsyncClientLinks clientLinks;

    private final AsyncWebhooks webhooks;

    private final AsyncWebhookEvents webhookEvents;

    private final AsyncBalanceTransfers balanceTransfers;

    private final AsyncPayments payments;

    private final AsyncMethods methods;

    private final AsyncRefunds refunds;

    private final AsyncChargebacks chargebacks;

    private final AsyncCaptures captures;

    private final AsyncWallets wallets;

    private final AsyncPaymentLinks paymentLinks;

    private final AsyncTerminals terminals;

    private final AsyncDelayedRouting delayedRouting;

    private final AsyncCustomers customers;

    private final AsyncMandates mandates;

    private final AsyncSubscriptions subscriptions;

    private final AsyncSalesInvoices salesInvoices;

    public AsyncBalances balances() {
        return balances;
    }

    public AsyncSettlements settlements() {
        return settlements;
    }

    public AsyncInvoices invoices() {
        return invoices;
    }

    public AsyncPermissions permissions() {
        return permissions;
    }

    public AsyncOrganizations organizations() {
        return organizations;
    }

    public AsyncProfiles profiles() {
        return profiles;
    }

    public AsyncOnboarding onboarding() {
        return onboarding;
    }

    public AsyncCapabilities capabilities() {
        return capabilities;
    }

    public AsyncClients clients() {
        return clients;
    }

    public AsyncClientLinks clientLinks() {
        return clientLinks;
    }

    public AsyncWebhooks webhooks() {
        return webhooks;
    }

    public AsyncWebhookEvents webhookEvents() {
        return webhookEvents;
    }

    public AsyncBalanceTransfers balanceTransfers() {
        return balanceTransfers;
    }

    public AsyncPayments payments() {
        return payments;
    }

    public AsyncMethods methods() {
        return methods;
    }

    public AsyncRefunds refunds() {
        return refunds;
    }

    public AsyncChargebacks chargebacks() {
        return chargebacks;
    }

    public AsyncCaptures captures() {
        return captures;
    }

    public AsyncWallets wallets() {
        return wallets;
    }

    public AsyncPaymentLinks paymentLinks() {
        return paymentLinks;
    }

    public AsyncTerminals terminals() {
        return terminals;
    }

    public AsyncDelayedRouting delayedRouting() {
        return delayedRouting;
    }

    public AsyncCustomers customers() {
        return customers;
    }

    public AsyncMandates mandates() {
        return mandates;
    }

    public AsyncSubscriptions subscriptions() {
        return subscriptions;
    }

    public AsyncSalesInvoices salesInvoices() {
        return salesInvoices;
    }

    private final SDKConfiguration sdkConfiguration;
    private final Client syncSDK;

    AsyncClient(Client syncSDK, SDKConfiguration sdkConfiguration) {
        this.syncSDK = syncSDK;
        this.sdkConfiguration = sdkConfiguration;
        this.balances = new AsyncBalances(syncSDK.balances(), sdkConfiguration);
        this.settlements = new AsyncSettlements(syncSDK.settlements(), sdkConfiguration);
        this.invoices = new AsyncInvoices(syncSDK.invoices(), sdkConfiguration);
        this.permissions = new AsyncPermissions(syncSDK.permissions(), sdkConfiguration);
        this.organizations = new AsyncOrganizations(syncSDK.organizations(), sdkConfiguration);
        this.profiles = new AsyncProfiles(syncSDK.profiles(), sdkConfiguration);
        this.onboarding = new AsyncOnboarding(syncSDK.onboarding(), sdkConfiguration);
        this.capabilities = new AsyncCapabilities(syncSDK.capabilities(), sdkConfiguration);
        this.clients = new AsyncClients(syncSDK.clients(), sdkConfiguration);
        this.clientLinks = new AsyncClientLinks(syncSDK.clientLinks(), sdkConfiguration);
        this.webhooks = new AsyncWebhooks(syncSDK.webhooks(), sdkConfiguration);
        this.webhookEvents = new AsyncWebhookEvents(syncSDK.webhookEvents(), sdkConfiguration);
        this.balanceTransfers = new AsyncBalanceTransfers(syncSDK.balanceTransfers(), sdkConfiguration);
        this.payments = new AsyncPayments(syncSDK.payments(), sdkConfiguration);
        this.methods = new AsyncMethods(syncSDK.methods(), sdkConfiguration);
        this.refunds = new AsyncRefunds(syncSDK.refunds(), sdkConfiguration);
        this.chargebacks = new AsyncChargebacks(syncSDK.chargebacks(), sdkConfiguration);
        this.captures = new AsyncCaptures(syncSDK.captures(), sdkConfiguration);
        this.wallets = new AsyncWallets(syncSDK.wallets(), sdkConfiguration);
        this.paymentLinks = new AsyncPaymentLinks(syncSDK.paymentLinks(), sdkConfiguration);
        this.terminals = new AsyncTerminals(syncSDK.terminals(), sdkConfiguration);
        this.delayedRouting = new AsyncDelayedRouting(syncSDK.delayedRouting(), sdkConfiguration);
        this.customers = new AsyncCustomers(syncSDK.customers(), sdkConfiguration);
        this.mandates = new AsyncMandates(syncSDK.mandates(), sdkConfiguration);
        this.subscriptions = new AsyncSubscriptions(syncSDK.subscriptions(), sdkConfiguration);
        this.salesInvoices = new AsyncSalesInvoices(syncSDK.salesInvoices(), sdkConfiguration);
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Client sync() {
        return syncSDK;
    }
}
