/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.components.SubscriptionRequest;
import com.mollie.mollie.models.operations.CancelSubscriptionRequest;
import com.mollie.mollie.models.operations.CancelSubscriptionRequestBody;
import com.mollie.mollie.models.operations.CreateSubscriptionRequest;
import com.mollie.mollie.models.operations.GetSubscriptionRequest;
import com.mollie.mollie.models.operations.ListAllSubscriptionsRequest;
import com.mollie.mollie.models.operations.ListSubscriptionPaymentsRequest;
import com.mollie.mollie.models.operations.ListSubscriptionsRequest;
import com.mollie.mollie.models.operations.UpdateSubscriptionRequest;
import com.mollie.mollie.models.operations.UpdateSubscriptionRequestBody;
import com.mollie.mollie.models.operations.async.CancelSubscriptionRequestBuilder;
import com.mollie.mollie.models.operations.async.CancelSubscriptionResponse;
import com.mollie.mollie.models.operations.async.CreateSubscriptionRequestBuilder;
import com.mollie.mollie.models.operations.async.CreateSubscriptionResponse;
import com.mollie.mollie.models.operations.async.GetSubscriptionRequestBuilder;
import com.mollie.mollie.models.operations.async.GetSubscriptionResponse;
import com.mollie.mollie.models.operations.async.ListAllSubscriptionsRequestBuilder;
import com.mollie.mollie.models.operations.async.ListAllSubscriptionsResponse;
import com.mollie.mollie.models.operations.async.ListSubscriptionPaymentsRequestBuilder;
import com.mollie.mollie.models.operations.async.ListSubscriptionPaymentsResponse;
import com.mollie.mollie.models.operations.async.ListSubscriptionsRequestBuilder;
import com.mollie.mollie.models.operations.async.ListSubscriptionsResponse;
import com.mollie.mollie.models.operations.async.UpdateSubscriptionRequestBuilder;
import com.mollie.mollie.models.operations.async.UpdateSubscriptionResponse;
import com.mollie.mollie.operations.CancelSubscription;
import com.mollie.mollie.operations.CreateSubscription;
import com.mollie.mollie.operations.GetSubscription;
import com.mollie.mollie.operations.ListAllSubscriptions;
import com.mollie.mollie.operations.ListSubscriptionPayments;
import com.mollie.mollie.operations.ListSubscriptions;
import com.mollie.mollie.operations.UpdateSubscription;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncSubscriptions {
    private final SDKConfiguration sdkConfiguration;
    private final Subscriptions syncSDK;

    AsyncSubscriptions(Subscriptions syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Subscriptions sync() {
        return syncSDK;
    }


    /**
     * Create subscription
     * 
     * <p>With subscriptions, you can schedule recurring payments to take place at regular intervals.
     * 
     * <p>For example, by simply specifying an `amount` and an `interval`, you can create an endless subscription to charge a
     * monthly fee, until you cancel the subscription.
     * 
     * <p>Or, you could use the times parameter to only charge a limited number of times, for example to split a big
     * transaction in multiple parts.
     * 
     * <p>A few example usages:
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="5.00"` `interval="2 weeks"`
     * Your customer will be charged €5 once every two weeks.
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="20.00"` `interval="1 day" times=5`
     * Your customer will be charged €20 every day, for five consecutive days.
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="10.00"` `interval="1 month"`
     * `startDate="2018-04-30"`
     * Your customer will be charged €10 on the last day of each month, starting in April 2018.
     * 
     * @return The async call builder
     */
    public CreateSubscriptionRequestBuilder create() {
        return new CreateSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create subscription
     * 
     * <p>With subscriptions, you can schedule recurring payments to take place at regular intervals.
     * 
     * <p>For example, by simply specifying an `amount` and an `interval`, you can create an endless subscription to charge a
     * monthly fee, until you cancel the subscription.
     * 
     * <p>Or, you could use the times parameter to only charge a limited number of times, for example to split a big
     * transaction in multiple parts.
     * 
     * <p>A few example usages:
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="5.00"` `interval="2 weeks"`
     * Your customer will be charged €5 once every two weeks.
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="20.00"` `interval="1 day" times=5`
     * Your customer will be charged €20 every day, for five consecutive days.
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="10.00"` `interval="1 month"`
     * `startDate="2018-04-30"`
     * Your customer will be charged €10 on the last day of each month, starting in April 2018.
     * 
     * @param customerId Provide the ID of the related customer.
     * @return CompletableFuture&lt;CreateSubscriptionResponse&gt; - The async response
     */
    public CompletableFuture<CreateSubscriptionResponse> create(String customerId) {
        return create(customerId, Optional.empty(), Optional.empty());
    }

    /**
     * Create subscription
     * 
     * <p>With subscriptions, you can schedule recurring payments to take place at regular intervals.
     * 
     * <p>For example, by simply specifying an `amount` and an `interval`, you can create an endless subscription to charge a
     * monthly fee, until you cancel the subscription.
     * 
     * <p>Or, you could use the times parameter to only charge a limited number of times, for example to split a big
     * transaction in multiple parts.
     * 
     * <p>A few example usages:
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="5.00"` `interval="2 weeks"`
     * Your customer will be charged €5 once every two weeks.
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="20.00"` `interval="1 day" times=5`
     * Your customer will be charged €20 every day, for five consecutive days.
     * 
     * <p>`amount[currency]="EUR"` `amount[value]="10.00"` `interval="1 month"`
     * `startDate="2018-04-30"`
     * Your customer will be charged €10 on the last day of each month, starting in April 2018.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param subscriptionRequest 
     * @param options additional options
     * @return CompletableFuture&lt;CreateSubscriptionResponse&gt; - The async response
     */
    public CompletableFuture<CreateSubscriptionResponse> create(
            String customerId, Optional<? extends SubscriptionRequest> subscriptionRequest,
            Optional<Options> options) {
        CreateSubscriptionRequest request =
            CreateSubscriptionRequest
                .builder()
                .customerId(customerId)
                .subscriptionRequest(subscriptionRequest)
                .build();
        AsyncRequestOperation<CreateSubscriptionRequest, CreateSubscriptionResponse> operation
              = new CreateSubscription.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List customer subscriptions
     * 
     * <p>Retrieve all subscriptions of a customer.
     * 
     * <p>The results are paginated.
     * 
     * @return The async call builder
     */
    public ListSubscriptionsRequestBuilder list() {
        return new ListSubscriptionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List customer subscriptions
     * 
     * <p>Retrieve all subscriptions of a customer.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListSubscriptionsResponse&gt; - The async response
     */
    public CompletableFuture<ListSubscriptionsResponse> list(ListSubscriptionsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List customer subscriptions
     * 
     * <p>Retrieve all subscriptions of a customer.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListSubscriptionsResponse&gt; - The async response
     */
    public CompletableFuture<ListSubscriptionsResponse> list(ListSubscriptionsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListSubscriptionsRequest, ListSubscriptionsResponse> operation
              = new ListSubscriptions.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get subscription
     * 
     * <p>Retrieve a single subscription by its ID and the ID of its parent customer.
     * 
     * @return The async call builder
     */
    public GetSubscriptionRequestBuilder get() {
        return new GetSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get subscription
     * 
     * <p>Retrieve a single subscription by its ID and the ID of its parent customer.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param subscriptionId Provide the ID of the related subscription.
     * @return CompletableFuture&lt;GetSubscriptionResponse&gt; - The async response
     */
    public CompletableFuture<GetSubscriptionResponse> get(String customerId, String subscriptionId) {
        return get(
                customerId, subscriptionId, JsonNullable.undefined(),
                Optional.empty());
    }

    /**
     * Get subscription
     * 
     * <p>Retrieve a single subscription by its ID and the ID of its parent customer.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param subscriptionId Provide the ID of the related subscription.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return CompletableFuture&lt;GetSubscriptionResponse&gt; - The async response
     */
    public CompletableFuture<GetSubscriptionResponse> get(
            String customerId, String subscriptionId,
            JsonNullable<Boolean> testmode, Optional<Options> options) {
        GetSubscriptionRequest request =
            GetSubscriptionRequest
                .builder()
                .customerId(customerId)
                .subscriptionId(subscriptionId)
                .testmode(testmode)
                .build();
        AsyncRequestOperation<GetSubscriptionRequest, GetSubscriptionResponse> operation
              = new GetSubscription.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update subscription
     * 
     * <p>Update an existing subscription.
     * 
     * <p>Canceled subscriptions cannot be updated.
     * 
     * <p>For an in-depth explanation of each parameter, refer to the [Create subscription](create-subscription) endpoint.
     * 
     * @return The async call builder
     */
    public UpdateSubscriptionRequestBuilder update() {
        return new UpdateSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update subscription
     * 
     * <p>Update an existing subscription.
     * 
     * <p>Canceled subscriptions cannot be updated.
     * 
     * <p>For an in-depth explanation of each parameter, refer to the [Create subscription](create-subscription) endpoint.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param subscriptionId Provide the ID of the related subscription.
     * @return CompletableFuture&lt;UpdateSubscriptionResponse&gt; - The async response
     */
    public CompletableFuture<UpdateSubscriptionResponse> update(String customerId, String subscriptionId) {
        return update(
                customerId, subscriptionId, Optional.empty(),
                Optional.empty());
    }

    /**
     * Update subscription
     * 
     * <p>Update an existing subscription.
     * 
     * <p>Canceled subscriptions cannot be updated.
     * 
     * <p>For an in-depth explanation of each parameter, refer to the [Create subscription](create-subscription) endpoint.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param subscriptionId Provide the ID of the related subscription.
     * @param requestBody 
     * @param options additional options
     * @return CompletableFuture&lt;UpdateSubscriptionResponse&gt; - The async response
     */
    public CompletableFuture<UpdateSubscriptionResponse> update(
            String customerId, String subscriptionId,
            Optional<? extends UpdateSubscriptionRequestBody> requestBody, Optional<Options> options) {
        UpdateSubscriptionRequest request =
            UpdateSubscriptionRequest
                .builder()
                .customerId(customerId)
                .subscriptionId(subscriptionId)
                .requestBody(requestBody)
                .build();
        AsyncRequestOperation<UpdateSubscriptionRequest, UpdateSubscriptionResponse> operation
              = new UpdateSubscription.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Cancel subscription
     * 
     * <p>Cancel an existing subscription. Canceling a subscription has no effect on the mandates of the customer.
     * 
     * @return The async call builder
     */
    public CancelSubscriptionRequestBuilder cancel() {
        return new CancelSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel subscription
     * 
     * <p>Cancel an existing subscription. Canceling a subscription has no effect on the mandates of the customer.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param subscriptionId Provide the ID of the related subscription.
     * @return CompletableFuture&lt;CancelSubscriptionResponse&gt; - The async response
     */
    public CompletableFuture<CancelSubscriptionResponse> cancel(String customerId, String subscriptionId) {
        return cancel(
                customerId, subscriptionId, Optional.empty(),
                Optional.empty());
    }

    /**
     * Cancel subscription
     * 
     * <p>Cancel an existing subscription. Canceling a subscription has no effect on the mandates of the customer.
     * 
     * @param customerId Provide the ID of the related customer.
     * @param subscriptionId Provide the ID of the related subscription.
     * @param requestBody 
     * @param options additional options
     * @return CompletableFuture&lt;CancelSubscriptionResponse&gt; - The async response
     */
    public CompletableFuture<CancelSubscriptionResponse> cancel(
            String customerId, String subscriptionId,
            Optional<? extends CancelSubscriptionRequestBody> requestBody, Optional<Options> options) {
        CancelSubscriptionRequest request =
            CancelSubscriptionRequest
                .builder()
                .customerId(customerId)
                .subscriptionId(subscriptionId)
                .requestBody(requestBody)
                .build();
        AsyncRequestOperation<CancelSubscriptionRequest, CancelSubscriptionResponse> operation
              = new CancelSubscription.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all subscriptions
     * 
     * <p>Retrieve all subscriptions initiated across all your customers.
     * 
     * <p>The results are paginated.
     * 
     * @return The async call builder
     */
    public ListAllSubscriptionsRequestBuilder all() {
        return new ListAllSubscriptionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all subscriptions
     * 
     * <p>Retrieve all subscriptions initiated across all your customers.
     * 
     * <p>The results are paginated.
     * 
     * @return CompletableFuture&lt;ListAllSubscriptionsResponse&gt; - The async response
     */
    public CompletableFuture<ListAllSubscriptionsResponse> allDirect() {
        return all(
                JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
                JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List all subscriptions
     * 
     * <p>Retrieve all subscriptions initiated across all your customers.
     * 
     * <p>The results are paginated.
     * 
     * @param from Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
     *         result set.
     * @param limit The maximum number of items to return. Defaults to 50 items.
     * @param profileId The identifier referring to the [profile](get-profile) you wish to retrieve subscriptions for.
     *         
     *         Most API credentials are linked to a single profile. In these cases the `profileId` is already implied.
     *         
     *         To retrieve all subscriptions across the organization, use an organization-level API credential and omit the
     *         `profileId` parameter.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return CompletableFuture&lt;ListAllSubscriptionsResponse&gt; - The async response
     */
    public CompletableFuture<ListAllSubscriptionsResponse> all(
            JsonNullable<String> from, JsonNullable<Long> limit,
            JsonNullable<String> profileId, JsonNullable<Boolean> testmode,
            Optional<Options> options) {
        ListAllSubscriptionsRequest request =
            ListAllSubscriptionsRequest
                .builder()
                .from(from)
                .limit(limit)
                .profileId(profileId)
                .testmode(testmode)
                .build();
        AsyncRequestOperation<ListAllSubscriptionsRequest, ListAllSubscriptionsResponse> operation
              = new ListAllSubscriptions.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List subscription payments
     * 
     * <p>Retrieve all payments of a specific subscription.
     * 
     * <p>The results are paginated.
     * 
     * @return The async call builder
     */
    public ListSubscriptionPaymentsRequestBuilder listPayments() {
        return new ListSubscriptionPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List subscription payments
     * 
     * <p>Retrieve all payments of a specific subscription.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListSubscriptionPaymentsResponse&gt; - The async response
     */
    public CompletableFuture<ListSubscriptionPaymentsResponse> listPayments(ListSubscriptionPaymentsRequest request) {
        return listPayments(request, Optional.empty());
    }

    /**
     * List subscription payments
     * 
     * <p>Retrieve all payments of a specific subscription.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListSubscriptionPaymentsResponse&gt; - The async response
     */
    public CompletableFuture<ListSubscriptionPaymentsResponse> listPayments(ListSubscriptionPaymentsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListSubscriptionPaymentsRequest, ListSubscriptionPaymentsResponse> operation
              = new ListSubscriptionPayments.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
