/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.operations.GetChargebackRequest;
import com.mollie.mollie.models.operations.ListAllChargebacksRequest;
import com.mollie.mollie.models.operations.ListChargebacksRequest;
import com.mollie.mollie.models.operations.async.GetChargebackRequestBuilder;
import com.mollie.mollie.models.operations.async.GetChargebackResponse;
import com.mollie.mollie.models.operations.async.ListAllChargebacksRequestBuilder;
import com.mollie.mollie.models.operations.async.ListAllChargebacksResponse;
import com.mollie.mollie.models.operations.async.ListChargebacksRequestBuilder;
import com.mollie.mollie.models.operations.async.ListChargebacksResponse;
import com.mollie.mollie.operations.GetChargeback;
import com.mollie.mollie.operations.ListAllChargebacks;
import com.mollie.mollie.operations.ListChargebacks;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncChargebacks {
    private final SDKConfiguration sdkConfiguration;
    private final Chargebacks syncSDK;

    AsyncChargebacks(Chargebacks syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Chargebacks sync() {
        return syncSDK;
    }


    /**
     * List payment chargebacks
     * 
     * <p>Retrieve the chargebacks initiated for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @return The async call builder
     */
    public ListChargebacksRequestBuilder list() {
        return new ListChargebacksRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment chargebacks
     * 
     * <p>Retrieve the chargebacks initiated for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListChargebacksResponse&gt; - The async response
     */
    public CompletableFuture<ListChargebacksResponse> list(ListChargebacksRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List payment chargebacks
     * 
     * <p>Retrieve the chargebacks initiated for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListChargebacksResponse&gt; - The async response
     */
    public CompletableFuture<ListChargebacksResponse> list(ListChargebacksRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListChargebacksRequest, ListChargebacksResponse> operation
              = new ListChargebacks.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get payment chargeback
     * 
     * <p>Retrieve a single payment chargeback by its ID and the ID of its parent payment.
     * 
     * @return The async call builder
     */
    public GetChargebackRequestBuilder get() {
        return new GetChargebackRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment chargeback
     * 
     * <p>Retrieve a single payment chargeback by its ID and the ID of its parent payment.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param chargebackId Provide the ID of the related chargeback.
     * @return CompletableFuture&lt;GetChargebackResponse&gt; - The async response
     */
    public CompletableFuture<GetChargebackResponse> get(String paymentId, String chargebackId) {
        return get(
                paymentId, chargebackId, JsonNullable.undefined(),
                JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get payment chargeback
     * 
     * <p>Retrieve a single payment chargeback by its ID and the ID of its parent payment.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param chargebackId Provide the ID of the related chargeback.
     * @param embed This endpoint allows embedding related API items by appending the following values via the `embed` query string
     *         parameter.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return CompletableFuture&lt;GetChargebackResponse&gt; - The async response
     */
    public CompletableFuture<GetChargebackResponse> get(
            String paymentId, String chargebackId,
            JsonNullable<String> embed, JsonNullable<Boolean> testmode,
            Optional<Options> options) {
        GetChargebackRequest request =
            GetChargebackRequest
                .builder()
                .paymentId(paymentId)
                .chargebackId(chargebackId)
                .embed(embed)
                .testmode(testmode)
                .build();
        AsyncRequestOperation<GetChargebackRequest, GetChargebackResponse> operation
              = new GetChargeback.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all chargebacks
     * 
     * <p>Retrieve all chargebacks initiated for all your payments.
     * 
     * <p>The results are paginated.
     * 
     * @return The async call builder
     */
    public ListAllChargebacksRequestBuilder all() {
        return new ListAllChargebacksRequestBuilder(sdkConfiguration);
    }

    /**
     * List all chargebacks
     * 
     * <p>Retrieve all chargebacks initiated for all your payments.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAllChargebacksResponse&gt; - The async response
     */
    public CompletableFuture<ListAllChargebacksResponse> all(ListAllChargebacksRequest request) {
        return all(request, Optional.empty());
    }

    /**
     * List all chargebacks
     * 
     * <p>Retrieve all chargebacks initiated for all your payments.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListAllChargebacksResponse&gt; - The async response
     */
    public CompletableFuture<ListAllChargebacksResponse> all(ListAllChargebacksRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListAllChargebacksRequest, ListAllChargebacksResponse> operation
              = new ListAllChargebacks.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
