/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.CreateCustomerPaymentRequest;
import com.mollie.mollie.models.operations.CreateCustomerPaymentRequestBody;
import com.mollie.mollie.models.operations.CreateCustomerPaymentRequestBuilder;
import com.mollie.mollie.models.operations.CreateCustomerPaymentResponse;
import com.mollie.mollie.models.operations.CreateCustomerRequestBody;
import com.mollie.mollie.models.operations.CreateCustomerRequestBuilder;
import com.mollie.mollie.models.operations.CreateCustomerResponse;
import com.mollie.mollie.models.operations.DeleteCustomerRequest;
import com.mollie.mollie.models.operations.DeleteCustomerRequestBody;
import com.mollie.mollie.models.operations.DeleteCustomerRequestBuilder;
import com.mollie.mollie.models.operations.DeleteCustomerResponse;
import com.mollie.mollie.models.operations.GetCustomerQueryParamInclude;
import com.mollie.mollie.models.operations.GetCustomerRequest;
import com.mollie.mollie.models.operations.GetCustomerRequestBuilder;
import com.mollie.mollie.models.operations.GetCustomerResponse;
import com.mollie.mollie.models.operations.ListCustomerPaymentsRequest;
import com.mollie.mollie.models.operations.ListCustomerPaymentsRequestBuilder;
import com.mollie.mollie.models.operations.ListCustomerPaymentsResponse;
import com.mollie.mollie.models.operations.ListCustomersRequest;
import com.mollie.mollie.models.operations.ListCustomersRequestBuilder;
import com.mollie.mollie.models.operations.ListCustomersResponse;
import com.mollie.mollie.models.operations.UpdateCustomerRequest;
import com.mollie.mollie.models.operations.UpdateCustomerRequestBody;
import com.mollie.mollie.models.operations.UpdateCustomerRequestBuilder;
import com.mollie.mollie.models.operations.UpdateCustomerResponse;
import com.mollie.mollie.operations.CreateCustomerOperation;
import com.mollie.mollie.operations.CreateCustomerPaymentOperation;
import com.mollie.mollie.operations.DeleteCustomerOperation;
import com.mollie.mollie.operations.GetCustomerOperation;
import com.mollie.mollie.operations.ListCustomerPaymentsOperation;
import com.mollie.mollie.operations.ListCustomersOperation;
import com.mollie.mollie.operations.UpdateCustomerOperation;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Customers {
    private final SDKConfiguration sdkConfiguration;

    Customers(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * Create customer
     * 
     * <p>Creates a simple minimal representation of a customer. Payments, recurring mandates, and subscriptions can be linked to this customer object, which simplifies management of recurring payments.
     * 
     * <p>Once registered, customers will also appear in your Mollie dashboard.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **customers.write**](/reference/authentication)
     * 
     * @return The call builder
     */
    public CreateCustomerRequestBuilder create() {
        return new CreateCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Create customer
     * 
     * <p>Creates a simple minimal representation of a customer. Payments, recurring mandates, and subscriptions can be linked to this customer object, which simplifies management of recurring payments.
     * 
     * <p>Once registered, customers will also appear in your Mollie dashboard.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **customers.write**](/reference/authentication)
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCustomerResponse createDirect() throws Exception {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create customer
     * 
     * <p>Creates a simple minimal representation of a customer. Payments, recurring mandates, and subscriptions can be linked to this customer object, which simplifies management of recurring payments.
     * 
     * <p>Once registered, customers will also appear in your Mollie dashboard.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **customers.write**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCustomerResponse create(
            Optional<? extends CreateCustomerRequestBody> request,
            Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CreateCustomerRequestBody>, CreateCustomerResponse> operation
              = new CreateCustomerOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List customers
     * 
     * <p>Retrieve a list of all customers.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **customers.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public ListCustomersRequestBuilder list() {
        return new ListCustomersRequestBuilder(sdkConfiguration);
    }

    /**
     * List customers
     * 
     * <p>Retrieve a list of all customers.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **customers.read**](/reference/authentication)
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListCustomersResponse listDirect() throws Exception {
        return list(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List customers
     * 
     * <p>Retrieve a list of all customers.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **customers.read**](/reference/authentication)
     * 
     * @param from Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
     * @param limit The maximum number of items to return. Defaults to 50 items.
     * @param sort Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from newest to oldest.
     *         
     *         Possible values: `asc` `desc` (default: `desc`)
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListCustomersResponse list(
            Optional<String> from,
            JsonNullable<Long> limit,
            JsonNullable<String> sort,
            JsonNullable<Boolean> testmode,
            Optional<Options> options) throws Exception {
        ListCustomersRequest request =
            ListCustomersRequest
                .builder()
                .from(from)
                .limit(limit)
                .sort(sort)
                .testmode(testmode)
                .build();
        RequestOperation<ListCustomersRequest, ListCustomersResponse> operation
              = new ListCustomersOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get customer
     * 
     * <p>Retrieve a single customer by its ID.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @return The call builder
     */
    public GetCustomerRequestBuilder get() {
        return new GetCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Get customer
     * 
     * <p>Retrieve a single customer by its ID.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @param customerId Provide the ID of the related customer.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCustomerResponse get(String customerId) throws Exception {
        return get(customerId, JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * Get customer
     * 
     * <p>Retrieve a single customer by its ID.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @param customerId Provide the ID of the related customer.
     * @param include This endpoint allows you to include additional information via the `include` query string parameter.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCustomerResponse get(
            String customerId,
            JsonNullable<? extends GetCustomerQueryParamInclude> include,
            JsonNullable<Boolean> testmode,
            Optional<Options> options) throws Exception {
        GetCustomerRequest request =
            GetCustomerRequest
                .builder()
                .customerId(customerId)
                .include(include)
                .testmode(testmode)
                .build();
        RequestOperation<GetCustomerRequest, GetCustomerResponse> operation
              = new GetCustomerOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update customer
     * 
     * <p>Update an existing customer.
     * 
     * <p>For an in-depth explanation of each parameter, refer to the [Create customer](create-customer) endpoint.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @return The call builder
     */
    public UpdateCustomerRequestBuilder update() {
        return new UpdateCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Update customer
     * 
     * <p>Update an existing customer.
     * 
     * <p>For an in-depth explanation of each parameter, refer to the [Create customer](create-customer) endpoint.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @param customerId Provide the ID of the related customer.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateCustomerResponse update(String customerId) throws Exception {
        return update(customerId, Optional.empty(), Optional.empty());
    }

    /**
     * Update customer
     * 
     * <p>Update an existing customer.
     * 
     * <p>For an in-depth explanation of each parameter, refer to the [Create customer](create-customer) endpoint.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @param customerId Provide the ID of the related customer.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateCustomerResponse update(
            String customerId,
            Optional<? extends UpdateCustomerRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        UpdateCustomerRequest request =
            UpdateCustomerRequest
                .builder()
                .customerId(customerId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateCustomerRequest, UpdateCustomerResponse> operation
              = new UpdateCustomerOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete customer
     * 
     * <p>Delete a customer. All mandates and subscriptions created for this customer will be canceled as well.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @return The call builder
     */
    public DeleteCustomerRequestBuilder delete() {
        return new DeleteCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete customer
     * 
     * <p>Delete a customer. All mandates and subscriptions created for this customer will be canceled as well.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @param customerId Provide the ID of the related customer.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteCustomerResponse delete(String customerId) throws Exception {
        return delete(customerId, Optional.empty(), Optional.empty());
    }

    /**
     * Delete customer
     * 
     * <p>Delete a customer. All mandates and subscriptions created for this customer will be canceled as well.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @param customerId Provide the ID of the related customer.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteCustomerResponse delete(
            String customerId,
            Optional<? extends DeleteCustomerRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        DeleteCustomerRequest request =
            DeleteCustomerRequest
                .builder()
                .customerId(customerId)
                .requestBody(requestBody)
                .build();
        RequestOperation<DeleteCustomerRequest, DeleteCustomerResponse> operation
              = new DeleteCustomerOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create customer payment
     * 
     * <p>Creates a payment for the customer.
     * 
     * <p>Linking customers to payments enables you to:
     * 
     * <p>* Keep track of payment preferences for your customers
     * * Allow your customers to charge a previously used credit card with a single click in our hosted checkout
     * * Improve payment insights in the Mollie dashboard
     * * Use recurring payments
     * 
     * <p>This endpoint is effectively an alias of the [Create payment endpoint](create-payment) with the `customerId` parameter predefined.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payments.write**](/reference/authentication)
     * 
     * @return The call builder
     */
    public CreateCustomerPaymentRequestBuilder createPayment() {
        return new CreateCustomerPaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Create customer payment
     * 
     * <p>Creates a payment for the customer.
     * 
     * <p>Linking customers to payments enables you to:
     * 
     * <p>* Keep track of payment preferences for your customers
     * * Allow your customers to charge a previously used credit card with a single click in our hosted checkout
     * * Improve payment insights in the Mollie dashboard
     * * Use recurring payments
     * 
     * <p>This endpoint is effectively an alias of the [Create payment endpoint](create-payment) with the `customerId` parameter predefined.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payments.write**](/reference/authentication)
     * 
     * @param customerId Provide the ID of the related customer.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCustomerPaymentResponse createPayment(String customerId) throws Exception {
        return createPayment(customerId, Optional.empty(), Optional.empty());
    }

    /**
     * Create customer payment
     * 
     * <p>Creates a payment for the customer.
     * 
     * <p>Linking customers to payments enables you to:
     * 
     * <p>* Keep track of payment preferences for your customers
     * * Allow your customers to charge a previously used credit card with a single click in our hosted checkout
     * * Improve payment insights in the Mollie dashboard
     * * Use recurring payments
     * 
     * <p>This endpoint is effectively an alias of the [Create payment endpoint](create-payment) with the `customerId` parameter predefined.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payments.write**](/reference/authentication)
     * 
     * @param customerId Provide the ID of the related customer.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCustomerPaymentResponse createPayment(
            String customerId,
            Optional<? extends CreateCustomerPaymentRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        CreateCustomerPaymentRequest request =
            CreateCustomerPaymentRequest
                .builder()
                .customerId(customerId)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreateCustomerPaymentRequest, CreateCustomerPaymentResponse> operation
              = new CreateCustomerPaymentOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List customer payments
     * 
     * <p>Retrieve all payments linked to the customer.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payments.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public ListCustomerPaymentsRequestBuilder listPayments() {
        return new ListCustomerPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List customer payments
     * 
     * <p>Retrieve all payments linked to the customer.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payments.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListCustomerPaymentsResponse listPayments(ListCustomerPaymentsRequest request) throws Exception {
        return listPayments(request, Optional.empty());
    }

    /**
     * List customer payments
     * 
     * <p>Retrieve all payments linked to the customer.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payments.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListCustomerPaymentsResponse listPayments(
            ListCustomerPaymentsRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<ListCustomerPaymentsRequest, ListCustomerPaymentsResponse> operation
              = new ListCustomerPaymentsOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
