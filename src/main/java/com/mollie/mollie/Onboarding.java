/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestlessOperation;
import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.GetOnboardingStatusRequestBuilder;
import com.mollie.mollie.models.operations.GetOnboardingStatusResponse;
import com.mollie.mollie.models.operations.SubmitOnboardingDataRequestBody;
import com.mollie.mollie.models.operations.SubmitOnboardingDataRequestBuilder;
import com.mollie.mollie.models.operations.SubmitOnboardingDataResponse;
import com.mollie.mollie.operations.GetOnboardingStatus;
import com.mollie.mollie.operations.SubmitOnboardingData;
import com.mollie.mollie.utils.Options;
import java.lang.Exception;
import java.util.Optional;


public class Onboarding {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncOnboarding asyncSDK;

    Onboarding(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncOnboarding(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncOnboarding async() {
        return asyncSDK;
    }

    /**
     * Get onboarding status
     * 
     * <p>Retrieve the onboarding status of the currently authenticated organization.
     * 
     * @return The call builder
     */
    public GetOnboardingStatusRequestBuilder get() {
        return new GetOnboardingStatusRequestBuilder(sdkConfiguration);
    }

    /**
     * Get onboarding status
     * 
     * <p>Retrieve the onboarding status of the currently authenticated organization.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOnboardingStatusResponse getDirect() throws Exception {
        return get(Optional.empty());
    }

    /**
     * Get onboarding status
     * 
     * <p>Retrieve the onboarding status of the currently authenticated organization.
     * 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOnboardingStatusResponse get(Optional<Options> options) throws Exception {
        RequestlessOperation<GetOnboardingStatusResponse> operation
            = new GetOnboardingStatus.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Submit onboarding data
     * 
     * <p>**⚠️ We no longer recommend implementing this endpoint. Please refer to the Client Links API instead to kick off the
     * onboarding process for your merchants.**
     * 
     * <p>Submit data that will be prefilled in the merchant's onboarding. The data you submit will only be processed when the
     * onboarding status is `needs-data`.  
     * Information that the merchant has entered in their dashboard will not be overwritten.
     * 
     * @return The call builder
     */
    public SubmitOnboardingDataRequestBuilder submit() {
        return new SubmitOnboardingDataRequestBuilder(sdkConfiguration);
    }

    /**
     * Submit onboarding data
     * 
     * <p>**⚠️ We no longer recommend implementing this endpoint. Please refer to the Client Links API instead to kick off the
     * onboarding process for your merchants.**
     * 
     * <p>Submit data that will be prefilled in the merchant's onboarding. The data you submit will only be processed when the
     * onboarding status is `needs-data`.  
     * Information that the merchant has entered in their dashboard will not be overwritten.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SubmitOnboardingDataResponse submitDirect() throws Exception {
        return submit(Optional.empty(), Optional.empty());
    }

    /**
     * Submit onboarding data
     * 
     * <p>**⚠️ We no longer recommend implementing this endpoint. Please refer to the Client Links API instead to kick off the
     * onboarding process for your merchants.**
     * 
     * <p>Submit data that will be prefilled in the merchant's onboarding. The data you submit will only be processed when the
     * onboarding status is `needs-data`.  
     * Information that the merchant has entered in their dashboard will not be overwritten.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SubmitOnboardingDataResponse submit(Optional<? extends SubmitOnboardingDataRequestBody> request, Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends SubmitOnboardingDataRequestBody>, SubmitOnboardingDataResponse> operation
              = new SubmitOnboardingData.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
