/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.components.DeleteValuesSalesInvoice;
import com.mollie.mollie.models.components.EntitySalesInvoice;
import com.mollie.mollie.models.components.UpdateValuesSalesInvoice;
import com.mollie.mollie.models.operations.DeleteSalesInvoiceRequest;
import com.mollie.mollie.models.operations.GetSalesInvoiceRequest;
import com.mollie.mollie.models.operations.ListSalesInvoicesRequest;
import com.mollie.mollie.models.operations.UpdateSalesInvoiceRequest;
import com.mollie.mollie.models.operations.async.CreateSalesInvoiceRequestBuilder;
import com.mollie.mollie.models.operations.async.CreateSalesInvoiceResponse;
import com.mollie.mollie.models.operations.async.DeleteSalesInvoiceRequestBuilder;
import com.mollie.mollie.models.operations.async.DeleteSalesInvoiceResponse;
import com.mollie.mollie.models.operations.async.GetSalesInvoiceRequestBuilder;
import com.mollie.mollie.models.operations.async.GetSalesInvoiceResponse;
import com.mollie.mollie.models.operations.async.ListSalesInvoicesRequestBuilder;
import com.mollie.mollie.models.operations.async.ListSalesInvoicesResponse;
import com.mollie.mollie.models.operations.async.UpdateSalesInvoiceRequestBuilder;
import com.mollie.mollie.models.operations.async.UpdateSalesInvoiceResponse;
import com.mollie.mollie.operations.CreateSalesInvoice;
import com.mollie.mollie.operations.DeleteSalesInvoice;
import com.mollie.mollie.operations.GetSalesInvoice;
import com.mollie.mollie.operations.ListSalesInvoices;
import com.mollie.mollie.operations.UpdateSalesInvoice;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncSalesInvoices {
    private final SDKConfiguration sdkConfiguration;
    private final SalesInvoices syncSDK;

    AsyncSalesInvoices(SalesInvoices syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public SalesInvoices sync() {
        return syncSDK;
    }


    /**
     * Create sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>With the Sales Invoice API you can generate sales invoices to send to your customers.
     * 
     * @return The async call builder
     */
    public CreateSalesInvoiceRequestBuilder create() {
        return new CreateSalesInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Create sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>With the Sales Invoice API you can generate sales invoices to send to your customers.
     * 
     * @return CompletableFuture&lt;CreateSalesInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<CreateSalesInvoiceResponse> createDirect() {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>With the Sales Invoice API you can generate sales invoices to send to your customers.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;CreateSalesInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<CreateSalesInvoiceResponse> create(Optional<? extends EntitySalesInvoice> request, Optional<Options> options) {
        AsyncRequestOperation<Optional<? extends EntitySalesInvoice>, CreateSalesInvoiceResponse> operation
              = new CreateSalesInvoice.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List sales invoices
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a list of all sales invoices created through the API.
     * 
     * <p>The results are paginated.
     * 
     * @return The async call builder
     */
    public ListSalesInvoicesRequestBuilder list() {
        return new ListSalesInvoicesRequestBuilder(sdkConfiguration);
    }

    /**
     * List sales invoices
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a list of all sales invoices created through the API.
     * 
     * <p>The results are paginated.
     * 
     * @return CompletableFuture&lt;ListSalesInvoicesResponse&gt; - The async response
     */
    public CompletableFuture<ListSalesInvoicesResponse> listDirect() {
        return list(
                JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
                Optional.empty());
    }

    /**
     * List sales invoices
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a list of all sales invoices created through the API.
     * 
     * <p>The results are paginated.
     * 
     * @param from Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
     *         result set.
     * @param limit The maximum number of items to return. Defaults to 50 items.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return CompletableFuture&lt;ListSalesInvoicesResponse&gt; - The async response
     */
    public CompletableFuture<ListSalesInvoicesResponse> list(
            JsonNullable<String> from, JsonNullable<Long> limit,
            JsonNullable<Boolean> testmode, Optional<Options> options) {
        ListSalesInvoicesRequest request =
            ListSalesInvoicesRequest
                .builder()
                .from(from)
                .limit(limit)
                .testmode(testmode)
                .build();
        AsyncRequestOperation<ListSalesInvoicesRequest, ListSalesInvoicesResponse> operation
              = new ListSalesInvoices.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a single sales invoice by its ID.
     * 
     * @return The async call builder
     */
    public GetSalesInvoiceRequestBuilder get() {
        return new GetSalesInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Get sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a single sales invoice by its ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return CompletableFuture&lt;GetSalesInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<GetSalesInvoiceResponse> get(String id) {
        return get(id, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a single sales invoice by its ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return CompletableFuture&lt;GetSalesInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<GetSalesInvoiceResponse> get(
            String id, JsonNullable<Boolean> testmode,
            Optional<Options> options) {
        GetSalesInvoiceRequest request =
            GetSalesInvoiceRequest
                .builder()
                .id(id)
                .testmode(testmode)
                .build();
        AsyncRequestOperation<GetSalesInvoiceRequest, GetSalesInvoiceResponse> operation
              = new GetSalesInvoice.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Certain details of an existing sales invoice can be updated. For `draft` it is all values listed below, but for
     * statuses `paid` and `issued` there are certain additional requirements (`paymentDetails` and `emailDetails`,
     * respectively).
     * 
     * @return The async call builder
     */
    public UpdateSalesInvoiceRequestBuilder update() {
        return new UpdateSalesInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Update sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Certain details of an existing sales invoice can be updated. For `draft` it is all values listed below, but for
     * statuses `paid` and `issued` there are certain additional requirements (`paymentDetails` and `emailDetails`,
     * respectively).
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return CompletableFuture&lt;UpdateSalesInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<UpdateSalesInvoiceResponse> update(String id) {
        return update(id, Optional.empty(), Optional.empty());
    }

    /**
     * Update sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Certain details of an existing sales invoice can be updated. For `draft` it is all values listed below, but for
     * statuses `paid` and `issued` there are certain additional requirements (`paymentDetails` and `emailDetails`,
     * respectively).
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param updateValuesSalesInvoice 
     * @param options additional options
     * @return CompletableFuture&lt;UpdateSalesInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<UpdateSalesInvoiceResponse> update(
            String id, Optional<? extends UpdateValuesSalesInvoice> updateValuesSalesInvoice,
            Optional<Options> options) {
        UpdateSalesInvoiceRequest request =
            UpdateSalesInvoiceRequest
                .builder()
                .id(id)
                .updateValuesSalesInvoice(updateValuesSalesInvoice)
                .build();
        AsyncRequestOperation<UpdateSalesInvoiceRequest, UpdateSalesInvoiceResponse> operation
              = new UpdateSalesInvoice.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Sales invoices which are in status `draft` can be deleted. For all other statuses, please use the
     * [Update sales invoice](update-sales-invoice) endpoint instead.
     * 
     * @return The async call builder
     */
    public DeleteSalesInvoiceRequestBuilder delete() {
        return new DeleteSalesInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Sales invoices which are in status `draft` can be deleted. For all other statuses, please use the
     * [Update sales invoice](update-sales-invoice) endpoint instead.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return CompletableFuture&lt;DeleteSalesInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<DeleteSalesInvoiceResponse> delete(String id) {
        return delete(id, Optional.empty(), Optional.empty());
    }

    /**
     * Delete sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Sales invoices which are in status `draft` can be deleted. For all other statuses, please use the
     * [Update sales invoice](update-sales-invoice) endpoint instead.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param deleteValuesSalesInvoice 
     * @param options additional options
     * @return CompletableFuture&lt;DeleteSalesInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<DeleteSalesInvoiceResponse> delete(
            String id, Optional<? extends DeleteValuesSalesInvoice> deleteValuesSalesInvoice,
            Optional<Options> options) {
        DeleteSalesInvoiceRequest request =
            DeleteSalesInvoiceRequest
                .builder()
                .id(id)
                .deleteValuesSalesInvoice(deleteValuesSalesInvoice)
                .build();
        AsyncRequestOperation<DeleteSalesInvoiceRequest, DeleteSalesInvoiceResponse> operation
              = new DeleteSalesInvoice.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
