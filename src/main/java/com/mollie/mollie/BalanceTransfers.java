/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.components.EntityBalanceTransfer;
import com.mollie.mollie.models.operations.CreateConnectBalanceTransferRequest;
import com.mollie.mollie.models.operations.CreateConnectBalanceTransferRequestBuilder;
import com.mollie.mollie.models.operations.CreateConnectBalanceTransferResponse;
import com.mollie.mollie.models.operations.GetConnectBalanceTransferRequest;
import com.mollie.mollie.models.operations.GetConnectBalanceTransferRequestBuilder;
import com.mollie.mollie.models.operations.GetConnectBalanceTransferResponse;
import com.mollie.mollie.models.operations.ListConnectBalanceTransfersRequest;
import com.mollie.mollie.models.operations.ListConnectBalanceTransfersRequestBuilder;
import com.mollie.mollie.models.operations.ListConnectBalanceTransfersResponse;
import com.mollie.mollie.operations.CreateConnectBalanceTransfer;
import com.mollie.mollie.operations.GetConnectBalanceTransfer;
import com.mollie.mollie.operations.ListConnectBalanceTransfers;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;


public class BalanceTransfers {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncBalanceTransfers asyncSDK;

    BalanceTransfers(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncBalanceTransfers(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncBalanceTransfers async() {
        return asyncSDK;
    }

    /**
     * Create a Connect balance transfer
     * 
     * <p>This API endpoint allows you to create a balance transfer from your organization's balance to a
     * connected organization's balance, or vice versa.
     * You can also create a balance transfer between two connected organizations.
     * To create a balance transfer, you must be authenticated as the source organization, and the
     * destination organization must be a connected organization
     * that has authorized the `balance-transfers.write` scope for your organization.
     * 
     * @return The call builder
     */
    public CreateConnectBalanceTransferRequestBuilder create() {
        return new CreateConnectBalanceTransferRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a Connect balance transfer
     * 
     * <p>This API endpoint allows you to create a balance transfer from your organization's balance to a
     * connected organization's balance, or vice versa.
     * You can also create a balance transfer between two connected organizations.
     * To create a balance transfer, you must be authenticated as the source organization, and the
     * destination organization must be a connected organization
     * that has authorized the `balance-transfers.write` scope for your organization.
     * 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateConnectBalanceTransferResponse createDirect() {
        return create(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Create a Connect balance transfer
     * 
     * <p>This API endpoint allows you to create a balance transfer from your organization's balance to a
     * connected organization's balance, or vice versa.
     * You can also create a balance transfer between two connected organizations.
     * To create a balance transfer, you must be authenticated as the source organization, and the
     * destination organization must be a connected organization
     * that has authorized the `balance-transfers.write` scope for your organization.
     * 
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param entityBalanceTransfer 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateConnectBalanceTransferResponse create(
            Optional<String> idempotencyKey, Optional<? extends EntityBalanceTransfer> entityBalanceTransfer,
            Optional<Options> options) {
        CreateConnectBalanceTransferRequest request =
            CreateConnectBalanceTransferRequest
                .builder()
                .idempotencyKey(idempotencyKey)
                .entityBalanceTransfer(entityBalanceTransfer)
                .build();
        RequestOperation<CreateConnectBalanceTransferRequest, CreateConnectBalanceTransferResponse> operation
              = new CreateConnectBalanceTransfer.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all Connect balance transfers
     * 
     * <p>Returns a paginated list of balance transfers associated with your organization. These may be a
     * balance transfer that was received or sent from your balance, or a balance transfer that you
     * initiated on behalf of your clients. If no balance transfers are available, the resulting array will
     * be empty.
     * 
     * <p>This request should never throw an error.
     * 
     * @return The call builder
     */
    public ListConnectBalanceTransfersRequestBuilder list() {
        return new ListConnectBalanceTransfersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all Connect balance transfers
     * 
     * <p>Returns a paginated list of balance transfers associated with your organization. These may be a
     * balance transfer that was received or sent from your balance, or a balance transfer that you
     * initiated on behalf of your clients. If no balance transfers are available, the resulting array will
     * be empty.
     * 
     * <p>This request should never throw an error.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListConnectBalanceTransfersResponse list(ListConnectBalanceTransfersRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List all Connect balance transfers
     * 
     * <p>Returns a paginated list of balance transfers associated with your organization. These may be a
     * balance transfer that was received or sent from your balance, or a balance transfer that you
     * initiated on behalf of your clients. If no balance transfers are available, the resulting array will
     * be empty.
     * 
     * <p>This request should never throw an error.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListConnectBalanceTransfersResponse list(ListConnectBalanceTransfersRequest request, Optional<Options> options) {
        RequestOperation<ListConnectBalanceTransfersRequest, ListConnectBalanceTransfersResponse> operation
              = new ListConnectBalanceTransfers.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a Connect balance transfer
     * 
     * <p>Retrieve a single Connect balance transfer object by its ID.
     * 
     * @return The call builder
     */
    public GetConnectBalanceTransferRequestBuilder get() {
        return new GetConnectBalanceTransferRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a Connect balance transfer
     * 
     * <p>Retrieve a single Connect balance transfer object by its ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetConnectBalanceTransferResponse get(String id) {
        return get(id, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Get a Connect balance transfer
     * 
     * <p>Retrieve a single Connect balance transfer object by its ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetConnectBalanceTransferResponse get(
            String id, Optional<Boolean> testmode,
            Optional<String> idempotencyKey, Optional<Options> options) {
        GetConnectBalanceTransferRequest request =
            GetConnectBalanceTransferRequest
                .builder()
                .id(id)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        RequestOperation<GetConnectBalanceTransferRequest, GetConnectBalanceTransferResponse> operation
              = new GetConnectBalanceTransfer.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
