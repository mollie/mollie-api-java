/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie;

import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.models.errors.APIException;
import com.mollie.mollie.models.errors.CreateShipmentResponseBody;
import com.mollie.mollie.models.errors.CreateShipmentShipmentsAPIResponseBody;
import com.mollie.mollie.models.errors.ListShipmentsShipmentsAPIResponseBody;
import com.mollie.mollie.models.errors.UpdateShipmentResponseBody;
import com.mollie.mollie.models.operations.CreateShipmentRequest;
import com.mollie.mollie.models.operations.CreateShipmentRequestBody;
import com.mollie.mollie.models.operations.CreateShipmentRequestBuilder;
import com.mollie.mollie.models.operations.CreateShipmentResponse;
import com.mollie.mollie.models.operations.CreateShipmentSecurity;
import com.mollie.mollie.models.operations.GetShipmentRequest;
import com.mollie.mollie.models.operations.GetShipmentRequestBuilder;
import com.mollie.mollie.models.operations.GetShipmentResponse;
import com.mollie.mollie.models.operations.GetShipmentResponseBody;
import com.mollie.mollie.models.operations.GetShipmentSecurity;
import com.mollie.mollie.models.operations.ListShipmentsRequest;
import com.mollie.mollie.models.operations.ListShipmentsRequestBuilder;
import com.mollie.mollie.models.operations.ListShipmentsResponse;
import com.mollie.mollie.models.operations.ListShipmentsResponseBody;
import com.mollie.mollie.models.operations.ListShipmentsSecurity;
import com.mollie.mollie.models.operations.SDKMethodInterfaces.*;
import com.mollie.mollie.models.operations.UpdateShipmentRequest;
import com.mollie.mollie.models.operations.UpdateShipmentRequestBody;
import com.mollie.mollie.models.operations.UpdateShipmentRequestBuilder;
import com.mollie.mollie.models.operations.UpdateShipmentResponse;
import com.mollie.mollie.models.operations.UpdateShipmentSecurity;
import com.mollie.mollie.utils.HTTPClient;
import com.mollie.mollie.utils.HTTPRequest;
import com.mollie.mollie.utils.Hook.AfterErrorContextImpl;
import com.mollie.mollie.utils.Hook.AfterSuccessContextImpl;
import com.mollie.mollie.utils.Hook.BeforeRequestContextImpl;
import com.mollie.mollie.utils.SerializedBody;
import com.mollie.mollie.utils.Utils.JsonShape;
import com.mollie.mollie.utils.Utils;
import java.io.InputStream;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable; 

public class ShipmentsAPI implements
            MethodCallCreateShipment,
            MethodCallListShipments,
            MethodCallGetShipment,
            MethodCallUpdateShipment {

    private final SDKConfiguration sdkConfiguration;

    ShipmentsAPI(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create shipment
     * **⚠️ We no longer recommend implementing the Shipments API. Please refer to the Captures API instead. We are
     * actively working on adding support for line-specific captures to the Captures API.**
     * 
     * Create a shipment for specific order lines of an order.
     * 
     * When using Klarna, using this endpoint is mandatory for the order amount to be captured. A [capture](get-capture)
     * will automatically be created for the shipment.
     * 
     * The word 'shipment' is used in the figurative sense here. It can also mean that a service was provided or digital
     * content was delivered.
     * @return The call builder
     */
    public CreateShipmentRequestBuilder create() {
        return new CreateShipmentRequestBuilder(this);
    }

    /**
     * Create shipment
     * **⚠️ We no longer recommend implementing the Shipments API. Please refer to the Captures API instead. We are
     * actively working on adding support for line-specific captures to the Captures API.**
     * 
     * Create a shipment for specific order lines of an order.
     * 
     * When using Klarna, using this endpoint is mandatory for the order amount to be captured. A [capture](get-capture)
     * will automatically be created for the shipment.
     * 
     * The word 'shipment' is used in the figurative sense here. It can also mean that a service was provided or digital
     * content was delivered.
     * @param security The security details to use for authentication.
     * @param orderId Provide the ID of the related order.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateShipmentResponse create(
            CreateShipmentSecurity security,
            String orderId) throws Exception {
        return create(security, orderId, Optional.empty());
    }
    
    /**
     * Create shipment
     * **⚠️ We no longer recommend implementing the Shipments API. Please refer to the Captures API instead. We are
     * actively working on adding support for line-specific captures to the Captures API.**
     * 
     * Create a shipment for specific order lines of an order.
     * 
     * When using Klarna, using this endpoint is mandatory for the order amount to be captured. A [capture](get-capture)
     * will automatically be created for the shipment.
     * 
     * The word 'shipment' is used in the figurative sense here. It can also mean that a service was provided or digital
     * content was delivered.
     * @param security The security details to use for authentication.
     * @param orderId Provide the ID of the related order.
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateShipmentResponse create(
            CreateShipmentSecurity security,
            String orderId,
            Optional<? extends CreateShipmentRequestBody> requestBody) throws Exception {
        CreateShipmentRequest request =
            CreateShipmentRequest
                .builder()
                .orderId(orderId)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                CreateShipmentRequest.class,
                _baseUrl,
                "/orders/{orderId}/shipments",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/hal+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "create-shipment", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "create-shipment",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "create-shipment",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "create-shipment",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CreateShipmentResponse.Builder _resBuilder = 
            CreateShipmentResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        CreateShipmentResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/hal+json")) {
                Object _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Object>() {});
                _res.withAny(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404")) {
            if (Utils.contentTypeMatches(_contentType, "application/hal+json")) {
                CreateShipmentResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<CreateShipmentResponseBody>() {});
                    _out.withRawResponse(Optional.ofNullable(_httpRes));
                
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/hal+json")) {
                CreateShipmentShipmentsAPIResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<CreateShipmentShipmentsAPIResponseBody>() {});
                    _out.withRawResponse(Optional.ofNullable(_httpRes));
                
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * List shipments
     * **⚠️ We no longer recommend implementing the Shipments API. Please refer to the Captures API instead. We are
     * actively working on adding support for line-specific captures to the Captures API.**
     * 
     * Retrieve a list of all shipments created for a specific order.
     * 
     * The results are paginated.
     * @return The call builder
     */
    public ListShipmentsRequestBuilder list() {
        return new ListShipmentsRequestBuilder(this);
    }

    /**
     * List shipments
     * **⚠️ We no longer recommend implementing the Shipments API. Please refer to the Captures API instead. We are
     * actively working on adding support for line-specific captures to the Captures API.**
     * 
     * Retrieve a list of all shipments created for a specific order.
     * 
     * The results are paginated.
     * @param security The security details to use for authentication.
     * @param orderId Provide the ID of the related order.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListShipmentsResponse list(
            ListShipmentsSecurity security,
            String orderId) throws Exception {
        return list(security, orderId, Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }
    
    /**
     * List shipments
     * **⚠️ We no longer recommend implementing the Shipments API. Please refer to the Captures API instead. We are
     * actively working on adding support for line-specific captures to the Captures API.**
     * 
     * Retrieve a list of all shipments created for a specific order.
     * 
     * The results are paginated.
     * @param security The security details to use for authentication.
     * @param orderId Provide the ID of the related order.
     * @param from Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
    result set.
     * @param limit The maximum number of items to return. Defaults to 50 items.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
    parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
    setting the `testmode` query parameter to `true`.

    Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListShipmentsResponse list(
            ListShipmentsSecurity security,
            String orderId,
            Optional<String> from,
            JsonNullable<Long> limit,
            JsonNullable<Boolean> testmode) throws Exception {
        ListShipmentsRequest request =
            ListShipmentsRequest
                .builder()
                .orderId(orderId)
                .from(from)
                .limit(limit)
                .testmode(testmode)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                ListShipmentsRequest.class,
                _baseUrl,
                "/orders/{orderId}/shipments",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/hal+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                ListShipmentsRequest.class,
                request, 
                null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "list-shipments", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "list-shipments",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "list-shipments",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "list-shipments",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ListShipmentsResponse.Builder _resBuilder = 
            ListShipmentsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ListShipmentsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/hal+json")) {
                ListShipmentsResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ListShipmentsResponseBody>() {});
                _res.withObject(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400")) {
            if (Utils.contentTypeMatches(_contentType, "application/hal+json")) {
                com.mollie.mollie.models.errors.ListShipmentsResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.mollie.mollie.models.errors.ListShipmentsResponseBody>() {});
                    _out.withRawResponse(Optional.ofNullable(_httpRes));
                
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404")) {
            if (Utils.contentTypeMatches(_contentType, "application/hal+json")) {
                ListShipmentsShipmentsAPIResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ListShipmentsShipmentsAPIResponseBody>() {});
                    _out.withRawResponse(Optional.ofNullable(_httpRes));
                
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get shipment
     * **⚠️ We no longer recommend implementing the Shipments API. Please refer to the Captures API instead. We are
     * actively working on adding support for line-specific captures to the Captures API.**
     * 
     * Retrieve a single shipment by its ID and the ID of its parent order.
     * @return The call builder
     */
    public GetShipmentRequestBuilder get() {
        return new GetShipmentRequestBuilder(this);
    }

    /**
     * Get shipment
     * **⚠️ We no longer recommend implementing the Shipments API. Please refer to the Captures API instead. We are
     * actively working on adding support for line-specific captures to the Captures API.**
     * 
     * Retrieve a single shipment by its ID and the ID of its parent order.
     * @param security The security details to use for authentication.
     * @param orderId Provide the ID of the related order.
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetShipmentResponse get(
            GetShipmentSecurity security,
            String orderId,
            String id) throws Exception {
        return get(security, orderId, id, JsonNullable.undefined());
    }
    
    /**
     * Get shipment
     * **⚠️ We no longer recommend implementing the Shipments API. Please refer to the Captures API instead. We are
     * actively working on adding support for line-specific captures to the Captures API.**
     * 
     * Retrieve a single shipment by its ID and the ID of its parent order.
     * @param security The security details to use for authentication.
     * @param orderId Provide the ID of the related order.
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
    parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
    setting the `testmode` query parameter to `true`.

    Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetShipmentResponse get(
            GetShipmentSecurity security,
            String orderId,
            String id,
            JsonNullable<Boolean> testmode) throws Exception {
        GetShipmentRequest request =
            GetShipmentRequest
                .builder()
                .orderId(orderId)
                .id(id)
                .testmode(testmode)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetShipmentRequest.class,
                _baseUrl,
                "/orders/{orderId}/shipments/{id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/hal+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetShipmentRequest.class,
                request, 
                null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-shipment", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-shipment",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-shipment",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-shipment",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetShipmentResponse.Builder _resBuilder = 
            GetShipmentResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetShipmentResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/hal+json")) {
                GetShipmentResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetShipmentResponseBody>() {});
                _res.withObject(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404")) {
            if (Utils.contentTypeMatches(_contentType, "application/hal+json")) {
                com.mollie.mollie.models.errors.GetShipmentResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.mollie.mollie.models.errors.GetShipmentResponseBody>() {});
                    _out.withRawResponse(Optional.ofNullable(_httpRes));
                
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update shipment
     * **⚠️ We no longer recommend implementing the Shipments API. Please refer to the Captures API instead. We are
     * actively working on adding support for line-specific captures to the Captures API.**
     * 
     * Update the tracking information on a shipment.
     * 
     * For an in-depth explanation of each parameter, refer to the [Create shipment](create-shipment) endpoint.
     * @return The call builder
     */
    public UpdateShipmentRequestBuilder update() {
        return new UpdateShipmentRequestBuilder(this);
    }

    /**
     * Update shipment
     * **⚠️ We no longer recommend implementing the Shipments API. Please refer to the Captures API instead. We are
     * actively working on adding support for line-specific captures to the Captures API.**
     * 
     * Update the tracking information on a shipment.
     * 
     * For an in-depth explanation of each parameter, refer to the [Create shipment](create-shipment) endpoint.
     * @param security The security details to use for authentication.
     * @param orderId Provide the ID of the related order.
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateShipmentResponse update(
            UpdateShipmentSecurity security,
            String orderId,
            String id) throws Exception {
        return update(security, orderId, id, JsonNullable.undefined(), Optional.empty());
    }
    
    /**
     * Update shipment
     * **⚠️ We no longer recommend implementing the Shipments API. Please refer to the Captures API instead. We are
     * actively working on adding support for line-specific captures to the Captures API.**
     * 
     * Update the tracking information on a shipment.
     * 
     * For an in-depth explanation of each parameter, refer to the [Create shipment](create-shipment) endpoint.
     * @param security The security details to use for authentication.
     * @param orderId Provide the ID of the related order.
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
    parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
    setting the `testmode` query parameter to `true`.

    Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateShipmentResponse update(
            UpdateShipmentSecurity security,
            String orderId,
            String id,
            JsonNullable<Boolean> testmode,
            Optional<? extends UpdateShipmentRequestBody> requestBody) throws Exception {
        UpdateShipmentRequest request =
            UpdateShipmentRequest
                .builder()
                .orderId(orderId)
                .id(id)
                .testmode(testmode)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                UpdateShipmentRequest.class,
                _baseUrl,
                "/orders/{orderId}/shipments/{id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PATCH");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/hal+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                UpdateShipmentRequest.class,
                request, 
                null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "update-shipment", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "update-shipment",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "update-shipment",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "update-shipment",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        UpdateShipmentResponse.Builder _resBuilder = 
            UpdateShipmentResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        UpdateShipmentResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/hal+json")) {
                Object _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Object>() {});
                _res.withAny(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404")) {
            if (Utils.contentTypeMatches(_contentType, "application/hal+json")) {
                UpdateShipmentResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UpdateShipmentResponseBody>() {});
                    _out.withRawResponse(Optional.ofNullable(_httpRes));
                
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
