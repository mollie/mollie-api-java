/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.GetChargebackRequest;
import com.mollie.mollie.models.operations.GetChargebackRequestBuilder;
import com.mollie.mollie.models.operations.GetChargebackResponse;
import com.mollie.mollie.models.operations.ListAllChargebacksRequest;
import com.mollie.mollie.models.operations.ListAllChargebacksRequestBuilder;
import com.mollie.mollie.models.operations.ListAllChargebacksResponse;
import com.mollie.mollie.models.operations.ListChargebacksRequest;
import com.mollie.mollie.models.operations.ListChargebacksRequestBuilder;
import com.mollie.mollie.models.operations.ListChargebacksResponse;
import com.mollie.mollie.operations.GetChargeback;
import com.mollie.mollie.operations.ListAllChargebacks;
import com.mollie.mollie.operations.ListChargebacks;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.util.Optional;


public class Chargebacks {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncChargebacks asyncSDK;

    Chargebacks(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncChargebacks(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncChargebacks async() {
        return asyncSDK;
    }

    /**
     * List payment chargebacks
     * 
     * <p>Retrieve the chargebacks initiated for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @return The call builder
     */
    public ListChargebacksRequestBuilder list() {
        return new ListChargebacksRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment chargebacks
     * 
     * <p>Retrieve the chargebacks initiated for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListChargebacksResponse list(ListChargebacksRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List payment chargebacks
     * 
     * <p>Retrieve the chargebacks initiated for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListChargebacksResponse list(ListChargebacksRequest request, Optional<Options> options) {
        RequestOperation<ListChargebacksRequest, ListChargebacksResponse> operation
              = new ListChargebacks.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get payment chargeback
     * 
     * <p>Retrieve a single payment chargeback by its ID and the ID of its parent payment.
     * 
     * @return The call builder
     */
    public GetChargebackRequestBuilder get() {
        return new GetChargebackRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment chargeback
     * 
     * <p>Retrieve a single payment chargeback by its ID and the ID of its parent payment.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetChargebackResponse get(GetChargebackRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get payment chargeback
     * 
     * <p>Retrieve a single payment chargeback by its ID and the ID of its parent payment.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetChargebackResponse get(GetChargebackRequest request, Optional<Options> options) {
        RequestOperation<GetChargebackRequest, GetChargebackResponse> operation
              = new GetChargeback.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all chargebacks
     * 
     * <p>Retrieve all chargebacks initiated for all your payments.
     * 
     * <p>The results are paginated.
     * 
     * @return The call builder
     */
    public ListAllChargebacksRequestBuilder all() {
        return new ListAllChargebacksRequestBuilder(sdkConfiguration);
    }

    /**
     * List all chargebacks
     * 
     * <p>Retrieve all chargebacks initiated for all your payments.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListAllChargebacksResponse all(ListAllChargebacksRequest request) {
        return all(request, Optional.empty());
    }

    /**
     * List all chargebacks
     * 
     * <p>Retrieve all chargebacks initiated for all your payments.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListAllChargebacksResponse all(ListAllChargebacksRequest request, Optional<Options> options) {
        RequestOperation<ListAllChargebacksRequest, ListAllChargebacksResponse> operation
              = new ListAllChargebacks.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
