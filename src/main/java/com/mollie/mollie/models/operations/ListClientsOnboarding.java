/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class ListClientsOnboarding {
    /**
     * Indicates the response contains an onboarding status object. Will always contain the string `onboarding` for this
     * resource type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The name of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The current status of the organization's onboarding process.
     * 
     * <p>* `needs-data` — The merchant needs to provide additional information
     * * `in-review` — The merchant provided all information, awaiting review from Mollie
     * * `completed` — The onboarding is completed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends ListClientsStatus> status;

    /**
     * Whether the organization can receive payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canReceivePayments")
    private Optional<Boolean> canReceivePayments;

    /**
     * Whether the organization can receive settlements to their external bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canReceiveSettlements")
    private Optional<Boolean> canReceiveSettlements;

    /**
     * The sign up date time of the organization in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signedUpAt")
    private Optional<String> signedUpAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends ListClientsClientsResponseLinks> links;

    @JsonCreator
    public ListClientsOnboarding(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("status") Optional<? extends ListClientsStatus> status,
            @JsonProperty("canReceivePayments") Optional<Boolean> canReceivePayments,
            @JsonProperty("canReceiveSettlements") Optional<Boolean> canReceiveSettlements,
            @JsonProperty("signedUpAt") Optional<String> signedUpAt,
            @JsonProperty("_links") Optional<? extends ListClientsClientsResponseLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(canReceivePayments, "canReceivePayments");
        Utils.checkNotNull(canReceiveSettlements, "canReceiveSettlements");
        Utils.checkNotNull(signedUpAt, "signedUpAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.name = name;
        this.status = status;
        this.canReceivePayments = canReceivePayments;
        this.canReceiveSettlements = canReceiveSettlements;
        this.signedUpAt = signedUpAt;
        this.links = links;
    }
    
    public ListClientsOnboarding() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Indicates the response contains an onboarding status object. Will always contain the string `onboarding` for this
     * resource type.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The name of the organization.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The current status of the organization's onboarding process.
     * 
     * <p>* `needs-data` — The merchant needs to provide additional information
     * * `in-review` — The merchant provided all information, awaiting review from Mollie
     * * `completed` — The onboarding is completed
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListClientsStatus> status() {
        return (Optional<ListClientsStatus>) status;
    }

    /**
     * Whether the organization can receive payments.
     */
    @JsonIgnore
    public Optional<Boolean> canReceivePayments() {
        return canReceivePayments;
    }

    /**
     * Whether the organization can receive settlements to their external bank account.
     */
    @JsonIgnore
    public Optional<Boolean> canReceiveSettlements() {
        return canReceiveSettlements;
    }

    /**
     * The sign up date time of the organization in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> signedUpAt() {
        return signedUpAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListClientsClientsResponseLinks> links() {
        return (Optional<ListClientsClientsResponseLinks>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains an onboarding status object. Will always contain the string `onboarding` for this
     * resource type.
     */
    public ListClientsOnboarding withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains an onboarding status object. Will always contain the string `onboarding` for this
     * resource type.
     */
    public ListClientsOnboarding withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The name of the organization.
     */
    public ListClientsOnboarding withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * The name of the organization.
     */
    public ListClientsOnboarding withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The current status of the organization's onboarding process.
     * 
     * <p>* `needs-data` — The merchant needs to provide additional information
     * * `in-review` — The merchant provided all information, awaiting review from Mollie
     * * `completed` — The onboarding is completed
     */
    public ListClientsOnboarding withStatus(ListClientsStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * The current status of the organization's onboarding process.
     * 
     * <p>* `needs-data` — The merchant needs to provide additional information
     * * `in-review` — The merchant provided all information, awaiting review from Mollie
     * * `completed` — The onboarding is completed
     */
    public ListClientsOnboarding withStatus(Optional<? extends ListClientsStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Whether the organization can receive payments.
     */
    public ListClientsOnboarding withCanReceivePayments(boolean canReceivePayments) {
        Utils.checkNotNull(canReceivePayments, "canReceivePayments");
        this.canReceivePayments = Optional.ofNullable(canReceivePayments);
        return this;
    }


    /**
     * Whether the organization can receive payments.
     */
    public ListClientsOnboarding withCanReceivePayments(Optional<Boolean> canReceivePayments) {
        Utils.checkNotNull(canReceivePayments, "canReceivePayments");
        this.canReceivePayments = canReceivePayments;
        return this;
    }

    /**
     * Whether the organization can receive settlements to their external bank account.
     */
    public ListClientsOnboarding withCanReceiveSettlements(boolean canReceiveSettlements) {
        Utils.checkNotNull(canReceiveSettlements, "canReceiveSettlements");
        this.canReceiveSettlements = Optional.ofNullable(canReceiveSettlements);
        return this;
    }


    /**
     * Whether the organization can receive settlements to their external bank account.
     */
    public ListClientsOnboarding withCanReceiveSettlements(Optional<Boolean> canReceiveSettlements) {
        Utils.checkNotNull(canReceiveSettlements, "canReceiveSettlements");
        this.canReceiveSettlements = canReceiveSettlements;
        return this;
    }

    /**
     * The sign up date time of the organization in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public ListClientsOnboarding withSignedUpAt(String signedUpAt) {
        Utils.checkNotNull(signedUpAt, "signedUpAt");
        this.signedUpAt = Optional.ofNullable(signedUpAt);
        return this;
    }


    /**
     * The sign up date time of the organization in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public ListClientsOnboarding withSignedUpAt(Optional<String> signedUpAt) {
        Utils.checkNotNull(signedUpAt, "signedUpAt");
        this.signedUpAt = signedUpAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public ListClientsOnboarding withLinks(ListClientsClientsResponseLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public ListClientsOnboarding withLinks(Optional<? extends ListClientsClientsResponseLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListClientsOnboarding other = (ListClientsOnboarding) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.canReceivePayments, other.canReceivePayments) &&
            Utils.enhancedDeepEquals(this.canReceiveSettlements, other.canReceiveSettlements) &&
            Utils.enhancedDeepEquals(this.signedUpAt, other.signedUpAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, name, status,
            canReceivePayments, canReceiveSettlements, signedUpAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListClientsOnboarding.class,
                "resource", resource,
                "name", name,
                "status", status,
                "canReceivePayments", canReceivePayments,
                "canReceiveSettlements", canReceiveSettlements,
                "signedUpAt", signedUpAt,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<? extends ListClientsStatus> status = Optional.empty();

        private Optional<Boolean> canReceivePayments = Optional.empty();

        private Optional<Boolean> canReceiveSettlements = Optional.empty();

        private Optional<String> signedUpAt = Optional.empty();

        private Optional<? extends ListClientsClientsResponseLinks> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains an onboarding status object. Will always contain the string `onboarding` for this
         * resource type.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains an onboarding status object. Will always contain the string `onboarding` for this
         * resource type.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The name of the organization.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the organization.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The current status of the organization's onboarding process.
         * 
         * <p>* `needs-data` — The merchant needs to provide additional information
         * * `in-review` — The merchant provided all information, awaiting review from Mollie
         * * `completed` — The onboarding is completed
         */
        public Builder status(ListClientsStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The current status of the organization's onboarding process.
         * 
         * <p>* `needs-data` — The merchant needs to provide additional information
         * * `in-review` — The merchant provided all information, awaiting review from Mollie
         * * `completed` — The onboarding is completed
         */
        public Builder status(Optional<? extends ListClientsStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Whether the organization can receive payments.
         */
        public Builder canReceivePayments(boolean canReceivePayments) {
            Utils.checkNotNull(canReceivePayments, "canReceivePayments");
            this.canReceivePayments = Optional.ofNullable(canReceivePayments);
            return this;
        }

        /**
         * Whether the organization can receive payments.
         */
        public Builder canReceivePayments(Optional<Boolean> canReceivePayments) {
            Utils.checkNotNull(canReceivePayments, "canReceivePayments");
            this.canReceivePayments = canReceivePayments;
            return this;
        }


        /**
         * Whether the organization can receive settlements to their external bank account.
         */
        public Builder canReceiveSettlements(boolean canReceiveSettlements) {
            Utils.checkNotNull(canReceiveSettlements, "canReceiveSettlements");
            this.canReceiveSettlements = Optional.ofNullable(canReceiveSettlements);
            return this;
        }

        /**
         * Whether the organization can receive settlements to their external bank account.
         */
        public Builder canReceiveSettlements(Optional<Boolean> canReceiveSettlements) {
            Utils.checkNotNull(canReceiveSettlements, "canReceiveSettlements");
            this.canReceiveSettlements = canReceiveSettlements;
            return this;
        }


        /**
         * The sign up date time of the organization in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder signedUpAt(String signedUpAt) {
            Utils.checkNotNull(signedUpAt, "signedUpAt");
            this.signedUpAt = Optional.ofNullable(signedUpAt);
            return this;
        }

        /**
         * The sign up date time of the organization in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder signedUpAt(Optional<String> signedUpAt) {
            Utils.checkNotNull(signedUpAt, "signedUpAt");
            this.signedUpAt = signedUpAt;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(ListClientsClientsResponseLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends ListClientsClientsResponseLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public ListClientsOnboarding build() {

            return new ListClientsOnboarding(
                resource, name, status,
                canReceivePayments, canReceiveSettlements, signedUpAt,
                links);
        }

    }
}
