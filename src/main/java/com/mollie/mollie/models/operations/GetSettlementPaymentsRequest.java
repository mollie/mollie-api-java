/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class GetSettlementPaymentsRequest {

    /**
     * Provide the ID of the related settlement.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=settlementId")
    private String settlementId;

    @JsonCreator
    public GetSettlementPaymentsRequest(
            String settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = settlementId;
    }

    /**
     * Provide the ID of the related settlement.
     */
    @JsonIgnore
    public String settlementId() {
        return settlementId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Provide the ID of the related settlement.
     */
    public GetSettlementPaymentsRequest withSettlementId(String settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = settlementId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSettlementPaymentsRequest other = (GetSettlementPaymentsRequest) o;
        return 
            Objects.deepEquals(this.settlementId, other.settlementId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            settlementId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSettlementPaymentsRequest.class,
                "settlementId", settlementId);
    }
    
    public final static class Builder {
 
        private String settlementId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Provide the ID of the related settlement.
         */
        public Builder settlementId(String settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = settlementId;
            return this;
        }
        
        public GetSettlementPaymentsRequest build() {
            return new GetSettlementPaymentsRequest(
                settlementId);
        }
    }
}

