/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GetChargebackResponseBody
 * 
 * <p>The chargeback object.
 */
public class GetChargebackResponseBody {

    /**
     * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this endpoint.
     */
    @JsonProperty("resource")
    private String resource;

    /**
     * The identifier uniquely referring to this chargeback. Example: `chb_n9z0tp`.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The amount charged back by the customer.
     */
    @JsonProperty("amount")
    private GetChargebackAmount amount;

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementAmount")
    private JsonNullable<? extends GetChargebackSettlementAmount> settlementAmount;

    /**
     * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    private JsonNullable<? extends Reason> reason;

    /**
     * The unique identifier of the payment this chargeback was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonProperty("paymentId")
    private String paymentId;

    /**
     * The identifier referring to the settlement this payment was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementId")
    private JsonNullable<String> settlementId;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonProperty("createdAt")
    private String createdAt;

    /**
     * The date and time the chargeback was reversed if applicable, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reversedAt")
    private JsonNullable<String> reversedAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private GetChargebackLinks links;

    @JsonCreator
    public GetChargebackResponseBody(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") String id,
            @JsonProperty("amount") GetChargebackAmount amount,
            @JsonProperty("settlementAmount") JsonNullable<? extends GetChargebackSettlementAmount> settlementAmount,
            @JsonProperty("reason") JsonNullable<? extends Reason> reason,
            @JsonProperty("paymentId") String paymentId,
            @JsonProperty("settlementId") JsonNullable<String> settlementId,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("reversedAt") JsonNullable<String> reversedAt,
            @JsonProperty("_links") GetChargebackLinks links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        Utils.checkNotNull(reason, "reason");
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(settlementId, "settlementId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(reversedAt, "reversedAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.amount = amount;
        this.settlementAmount = settlementAmount;
        this.reason = reason;
        this.paymentId = paymentId;
        this.settlementId = settlementId;
        this.createdAt = createdAt;
        this.reversedAt = reversedAt;
        this.links = links;
    }
    
    public GetChargebackResponseBody(
            String resource,
            String id,
            GetChargebackAmount amount,
            String paymentId,
            String createdAt,
            GetChargebackLinks links) {
        this(resource, id, amount, JsonNullable.undefined(), JsonNullable.undefined(), paymentId, JsonNullable.undefined(), createdAt, JsonNullable.undefined(), links);
    }

    /**
     * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this chargeback. Example: `chb_n9z0tp`.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The amount charged back by the customer.
     */
    @JsonIgnore
    public GetChargebackAmount amount() {
        return amount;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetChargebackSettlementAmount> settlementAmount() {
        return (JsonNullable<GetChargebackSettlementAmount>) settlementAmount;
    }

    /**
     * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Reason> reason() {
        return (JsonNullable<Reason>) reason;
    }

    /**
     * The unique identifier of the payment this chargeback was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonIgnore
    public String paymentId() {
        return paymentId;
    }

    /**
     * The identifier referring to the settlement this payment was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
     */
    @JsonIgnore
    public JsonNullable<String> settlementId() {
        return settlementId;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    /**
     * The date and time the chargeback was reversed if applicable, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public JsonNullable<String> reversedAt() {
        return reversedAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public GetChargebackLinks links() {
        return links;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this endpoint.
     */
    public GetChargebackResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this chargeback. Example: `chb_n9z0tp`.
     */
    public GetChargebackResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The amount charged back by the customer.
     */
    public GetChargebackResponseBody withAmount(GetChargebackAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    public GetChargebackResponseBody withSettlementAmount(GetChargebackSettlementAmount settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = JsonNullable.of(settlementAmount);
        return this;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    public GetChargebackResponseBody withSettlementAmount(JsonNullable<? extends GetChargebackSettlementAmount> settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = settlementAmount;
        return this;
    }

    /**
     * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
     */
    public GetChargebackResponseBody withReason(Reason reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = JsonNullable.of(reason);
        return this;
    }

    /**
     * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
     */
    public GetChargebackResponseBody withReason(JsonNullable<? extends Reason> reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = reason;
        return this;
    }

    /**
     * The unique identifier of the payment this chargeback was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    public GetChargebackResponseBody withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    /**
     * The identifier referring to the settlement this payment was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
     */
    public GetChargebackResponseBody withSettlementId(String settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = JsonNullable.of(settlementId);
        return this;
    }

    /**
     * The identifier referring to the settlement this payment was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
     */
    public GetChargebackResponseBody withSettlementId(JsonNullable<String> settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = settlementId;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetChargebackResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time the chargeback was reversed if applicable, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetChargebackResponseBody withReversedAt(String reversedAt) {
        Utils.checkNotNull(reversedAt, "reversedAt");
        this.reversedAt = JsonNullable.of(reversedAt);
        return this;
    }

    /**
     * The date and time the chargeback was reversed if applicable, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetChargebackResponseBody withReversedAt(JsonNullable<String> reversedAt) {
        Utils.checkNotNull(reversedAt, "reversedAt");
        this.reversedAt = reversedAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetChargebackResponseBody withLinks(GetChargebackLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetChargebackResponseBody other = (GetChargebackResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.settlementAmount, other.settlementAmount) &&
            Utils.enhancedDeepEquals(this.reason, other.reason) &&
            Utils.enhancedDeepEquals(this.paymentId, other.paymentId) &&
            Utils.enhancedDeepEquals(this.settlementId, other.settlementId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.reversedAt, other.reversedAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource,
            id,
            amount,
            settlementAmount,
            reason,
            paymentId,
            settlementId,
            createdAt,
            reversedAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetChargebackResponseBody.class,
                "resource", resource,
                "id", id,
                "amount", amount,
                "settlementAmount", settlementAmount,
                "reason", reason,
                "paymentId", paymentId,
                "settlementId", settlementId,
                "createdAt", createdAt,
                "reversedAt", reversedAt,
                "links", links);
    }
    
    public final static class Builder {
 
        private String resource;
 
        private String id;
 
        private GetChargebackAmount amount;
 
        private JsonNullable<? extends GetChargebackSettlementAmount> settlementAmount = JsonNullable.undefined();
 
        private JsonNullable<? extends Reason> reason = JsonNullable.undefined();
 
        private String paymentId;
 
        private JsonNullable<String> settlementId = JsonNullable.undefined();
 
        private String createdAt;
 
        private JsonNullable<String> reversedAt = JsonNullable.undefined();
 
        private GetChargebackLinks links;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this chargeback. Example: `chb_n9z0tp`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The amount charged back by the customer.
         */
        public Builder amount(GetChargebackAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
         * 
         * <p>The amount is a **negative** amount.
         * 
         * <p>Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
         */
        public Builder settlementAmount(GetChargebackSettlementAmount settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = JsonNullable.of(settlementAmount);
            return this;
        }

        /**
         * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
         * 
         * <p>The amount is a **negative** amount.
         * 
         * <p>Since the field contains an estimated amount during chargeback processing, it may change over time. To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
         */
        public Builder settlementAmount(JsonNullable<? extends GetChargebackSettlementAmount> settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = settlementAmount;
            return this;
        }

        /**
         * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
         */
        public Builder reason(Reason reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = JsonNullable.of(reason);
            return this;
        }

        /**
         * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
         */
        public Builder reason(JsonNullable<? extends Reason> reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = reason;
            return this;
        }

        /**
         * The unique identifier of the payment this chargeback was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
         */
        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }

        /**
         * The identifier referring to the settlement this payment was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
         */
        public Builder settlementId(String settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = JsonNullable.of(settlementId);
            return this;
        }

        /**
         * The identifier referring to the settlement this payment was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
         */
        public Builder settlementId(JsonNullable<String> settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = settlementId;
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date and time the chargeback was reversed if applicable, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder reversedAt(String reversedAt) {
            Utils.checkNotNull(reversedAt, "reversedAt");
            this.reversedAt = JsonNullable.of(reversedAt);
            return this;
        }

        /**
         * The date and time the chargeback was reversed if applicable, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder reversedAt(JsonNullable<String> reversedAt) {
            Utils.checkNotNull(reversedAt, "reversedAt");
            this.reversedAt = reversedAt;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetChargebackLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public GetChargebackResponseBody build() {
            return new GetChargebackResponseBody(
                resource,
                id,
                amount,
                settlementAmount,
                reason,
                paymentId,
                settlementId,
                createdAt,
                reversedAt,
                links);
        }
    }
}
