/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * GetSalesInvoiceSalesInvoicesDiscount
 * 
 * <p>The discount to be applied to the line item.
 */
public class GetSalesInvoiceSalesInvoicesDiscount {
    /**
     * The type of discount.
     */
    @JsonProperty("type")
    private GetSalesInvoiceSalesInvoicesResponseType type;

    /**
     * A string containing an exact monetary amount in the given currency, or the percentage.
     */
    @JsonProperty("value")
    private String value;

    @JsonCreator
    public GetSalesInvoiceSalesInvoicesDiscount(
            @JsonProperty("type") GetSalesInvoiceSalesInvoicesResponseType type,
            @JsonProperty("value") String value) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(value, "value");
        this.type = type;
        this.value = value;
    }

    /**
     * The type of discount.
     */
    @JsonIgnore
    public GetSalesInvoiceSalesInvoicesResponseType type() {
        return type;
    }

    /**
     * A string containing an exact monetary amount in the given currency, or the percentage.
     */
    @JsonIgnore
    public String value() {
        return value;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The type of discount.
     */
    public GetSalesInvoiceSalesInvoicesDiscount withType(GetSalesInvoiceSalesInvoicesResponseType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * A string containing an exact monetary amount in the given currency, or the percentage.
     */
    public GetSalesInvoiceSalesInvoicesDiscount withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSalesInvoiceSalesInvoicesDiscount other = (GetSalesInvoiceSalesInvoicesDiscount) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSalesInvoiceSalesInvoicesDiscount.class,
                "type", type,
                "value", value);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private GetSalesInvoiceSalesInvoicesResponseType type;

        private String value;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The type of discount.
         */
        public Builder type(GetSalesInvoiceSalesInvoicesResponseType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * A string containing an exact monetary amount in the given currency, or the percentage.
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public GetSalesInvoiceSalesInvoicesDiscount build() {

            return new GetSalesInvoiceSalesInvoicesDiscount(
                type, value);
        }

    }
}
