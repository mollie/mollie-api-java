/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * ListAllMethodsImage
 * 
 * <p>URLs of images representing the payment method.
 */
public class ListAllMethodsImage {
    /**
     * The URL pointing to an icon of 32 by 24 pixels.
     */
    @JsonProperty("size1x")
    private String size1x;

    /**
     * The URL pointing to an icon of 64 by 48 pixels.
     */
    @JsonProperty("size2x")
    private String size2x;

    /**
     * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can scale to any desired size without compromising visual quality.
     */
    @JsonProperty("svg")
    private String svg;

    @JsonCreator
    public ListAllMethodsImage(
            @JsonProperty("size1x") String size1x,
            @JsonProperty("size2x") String size2x,
            @JsonProperty("svg") String svg) {
        Utils.checkNotNull(size1x, "size1x");
        Utils.checkNotNull(size2x, "size2x");
        Utils.checkNotNull(svg, "svg");
        this.size1x = size1x;
        this.size2x = size2x;
        this.svg = svg;
    }

    /**
     * The URL pointing to an icon of 32 by 24 pixels.
     */
    @JsonIgnore
    public String size1x() {
        return size1x;
    }

    /**
     * The URL pointing to an icon of 64 by 48 pixels.
     */
    @JsonIgnore
    public String size2x() {
        return size2x;
    }

    /**
     * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can scale to any desired size without compromising visual quality.
     */
    @JsonIgnore
    public String svg() {
        return svg;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The URL pointing to an icon of 32 by 24 pixels.
     */
    public ListAllMethodsImage withSize1x(String size1x) {
        Utils.checkNotNull(size1x, "size1x");
        this.size1x = size1x;
        return this;
    }

    /**
     * The URL pointing to an icon of 64 by 48 pixels.
     */
    public ListAllMethodsImage withSize2x(String size2x) {
        Utils.checkNotNull(size2x, "size2x");
        this.size2x = size2x;
        return this;
    }

    /**
     * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can scale to any desired size without compromising visual quality.
     */
    public ListAllMethodsImage withSvg(String svg) {
        Utils.checkNotNull(svg, "svg");
        this.svg = svg;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllMethodsImage other = (ListAllMethodsImage) o;
        return 
            Utils.enhancedDeepEquals(this.size1x, other.size1x) &&
            Utils.enhancedDeepEquals(this.size2x, other.size2x) &&
            Utils.enhancedDeepEquals(this.svg, other.svg);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            size1x, size2x, svg);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAllMethodsImage.class,
                "size1x", size1x,
                "size2x", size2x,
                "svg", svg);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String size1x;

        private String size2x;

        private String svg;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The URL pointing to an icon of 32 by 24 pixels.
         */
        public Builder size1x(String size1x) {
            Utils.checkNotNull(size1x, "size1x");
            this.size1x = size1x;
            return this;
        }


        /**
         * The URL pointing to an icon of 64 by 48 pixels.
         */
        public Builder size2x(String size2x) {
            Utils.checkNotNull(size2x, "size2x");
            this.size2x = size2x;
            return this;
        }


        /**
         * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can scale to any desired size without compromising visual quality.
         */
        public Builder svg(String svg) {
            Utils.checkNotNull(svg, "svg");
            this.svg = svg;
            return this;
        }

        public ListAllMethodsImage build() {

            return new ListAllMethodsImage(
                size1x, size2x, svg);
        }

    }
}
