/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * CancelPaymentRecurring
 * 
 * <p>The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
 */
public class CancelPaymentRecurring {

    /**
     * A description of the recurring item. If not present, the main description of the item will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
     * 
     * <p>Possible values: `... months` `... weeks` `... days`
     */
    @JsonProperty("interval")
    private String interval;

    /**
     * Total amount and currency of the recurring item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends CancelPaymentPaymentsResponse200Amount> amount;

    /**
     * Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("times")
    private Optional<Long> times;

    /**
     * The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    private JsonNullable<String> startDate;

    @JsonCreator
    public CancelPaymentRecurring(
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("interval") String interval,
            @JsonProperty("amount") Optional<? extends CancelPaymentPaymentsResponse200Amount> amount,
            @JsonProperty("times") Optional<Long> times,
            @JsonProperty("startDate") JsonNullable<String> startDate) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(interval, "interval");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(times, "times");
        Utils.checkNotNull(startDate, "startDate");
        this.description = description;
        this.interval = interval;
        this.amount = amount;
        this.times = times;
        this.startDate = startDate;
    }
    
    public CancelPaymentRecurring(
            String interval) {
        this(Optional.empty(), interval, Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * A description of the recurring item. If not present, the main description of the item will be used.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
     * 
     * <p>Possible values: `... months` `... weeks` `... days`
     */
    @JsonIgnore
    public String interval() {
        return interval;
    }

    /**
     * Total amount and currency of the recurring item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CancelPaymentPaymentsResponse200Amount> amount() {
        return (Optional<CancelPaymentPaymentsResponse200Amount>) amount;
    }

    /**
     * Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
     */
    @JsonIgnore
    public Optional<Long> times() {
        return times;
    }

    /**
     * The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
     */
    @JsonIgnore
    public JsonNullable<String> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A description of the recurring item. If not present, the main description of the item will be used.
     */
    public CancelPaymentRecurring withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A description of the recurring item. If not present, the main description of the item will be used.
     */
    public CancelPaymentRecurring withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
     * 
     * <p>Possible values: `... months` `... weeks` `... days`
     */
    public CancelPaymentRecurring withInterval(String interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = interval;
        return this;
    }

    /**
     * Total amount and currency of the recurring item.
     */
    public CancelPaymentRecurring withAmount(CancelPaymentPaymentsResponse200Amount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * Total amount and currency of the recurring item.
     */
    public CancelPaymentRecurring withAmount(Optional<? extends CancelPaymentPaymentsResponse200Amount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
     */
    public CancelPaymentRecurring withTimes(long times) {
        Utils.checkNotNull(times, "times");
        this.times = Optional.ofNullable(times);
        return this;
    }

    /**
     * Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
     */
    public CancelPaymentRecurring withTimes(Optional<Long> times) {
        Utils.checkNotNull(times, "times");
        this.times = times;
        return this;
    }

    /**
     * The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
     */
    public CancelPaymentRecurring withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = JsonNullable.of(startDate);
        return this;
    }

    /**
     * The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
     */
    public CancelPaymentRecurring withStartDate(JsonNullable<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CancelPaymentRecurring other = (CancelPaymentRecurring) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.interval, other.interval) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.times, other.times) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            interval,
            amount,
            times,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CancelPaymentRecurring.class,
                "description", description,
                "interval", interval,
                "amount", amount,
                "times", times,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Optional<String> description = Optional.empty();
 
        private String interval;
 
        private Optional<? extends CancelPaymentPaymentsResponse200Amount> amount = Optional.empty();
 
        private Optional<Long> times = Optional.empty();
 
        private JsonNullable<String> startDate = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A description of the recurring item. If not present, the main description of the item will be used.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A description of the recurring item. If not present, the main description of the item will be used.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Cadence unit of the recurring item. For example: `12 months`, `52 weeks` or `365 days`.
         * 
         * <p>Possible values: `... months` `... weeks` `... days`
         */
        public Builder interval(String interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = interval;
            return this;
        }

        /**
         * Total amount and currency of the recurring item.
         */
        public Builder amount(CancelPaymentPaymentsResponse200Amount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * Total amount and currency of the recurring item.
         */
        public Builder amount(Optional<? extends CancelPaymentPaymentsResponse200Amount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
         */
        public Builder times(long times) {
            Utils.checkNotNull(times, "times");
            this.times = Optional.ofNullable(times);
            return this;
        }

        /**
         * Total number of charges for the subscription to complete. Leave empty for ongoing subscription.
         */
        public Builder times(Optional<Long> times) {
            Utils.checkNotNull(times, "times");
            this.times = times;
            return this;
        }

        /**
         * The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = JsonNullable.of(startDate);
            return this;
        }

        /**
         * The start date of the subscription if it does not start right away (format `YYYY-MM-DD`)
         */
        public Builder startDate(JsonNullable<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public CancelPaymentRecurring build() {
            return new CancelPaymentRecurring(
                description,
                interval,
                amount,
                times,
                startDate);
        }
    }
}
