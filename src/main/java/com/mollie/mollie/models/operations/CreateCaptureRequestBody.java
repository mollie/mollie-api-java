/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateCaptureRequestBody {
    /**
     * The description of the capture.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The amount captured. If no amount is provided, the full authorized amount is captured.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<? extends CreateCaptureAmount> amount;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends CreateCaptureMetadata> metadata;

    @JsonCreator
    public CreateCaptureRequestBody(
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("amount") JsonNullable<? extends CreateCaptureAmount> amount,
            @JsonProperty("metadata") JsonNullable<? extends CreateCaptureMetadata> metadata) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(metadata, "metadata");
        this.description = description;
        this.amount = amount;
        this.metadata = metadata;
    }
    
    public CreateCaptureRequestBody() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The description of the capture.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The amount captured. If no amount is provided, the full authorized amount is captured.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateCaptureAmount> amount() {
        return (JsonNullable<CreateCaptureAmount>) amount;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateCaptureMetadata> metadata() {
        return (JsonNullable<CreateCaptureMetadata>) metadata;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The description of the capture.
     */
    public CreateCaptureRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * The description of the capture.
     */
    public CreateCaptureRequestBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The amount captured. If no amount is provided, the full authorized amount is captured.
     */
    public CreateCaptureRequestBody withAmount(CreateCaptureAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * The amount captured. If no amount is provided, the full authorized amount is captured.
     */
    public CreateCaptureRequestBody withAmount(JsonNullable<? extends CreateCaptureAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateCaptureRequestBody withMetadata(CreateCaptureMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateCaptureRequestBody withMetadata(JsonNullable<? extends CreateCaptureMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCaptureRequestBody other = (CreateCaptureRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            description, amount, metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCaptureRequestBody.class,
                "description", description,
                "amount", amount,
                "metadata", metadata);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> description = Optional.empty();

        private JsonNullable<? extends CreateCaptureAmount> amount = JsonNullable.undefined();

        private JsonNullable<? extends CreateCaptureMetadata> metadata = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The description of the capture.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the capture.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The amount captured. If no amount is provided, the full authorized amount is captured.
         */
        public Builder amount(CreateCaptureAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * The amount captured. If no amount is provided, the full authorized amount is captured.
         */
        public Builder amount(JsonNullable<? extends CreateCaptureAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(CreateCaptureMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends CreateCaptureMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public CreateCaptureRequestBody build() {

            return new CreateCaptureRequestBody(
                description, amount, metadata);
        }

    }
}
