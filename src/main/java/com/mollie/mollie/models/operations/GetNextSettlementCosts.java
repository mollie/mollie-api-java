/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetNextSettlementCosts {
    /**
     * A description of the cost subtotal
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The payment method, if applicable
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private JsonNullable<? extends GetNextSettlementMethod> method;

    /**
     * The number of fees
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    /**
     * The service rates, further divided into `fixed` and `percentage` costs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rate")
    private Optional<? extends GetNextSettlementRate> rate;

    /**
     * The net total cost, i.e. excluding VAT
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountNet")
    private Optional<? extends GetNextSettlementAmountNet> amountNet;

    /**
     * The applicable VAT
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountVat")
    private Optional<? extends GetNextSettlementAmountVat> amountVat;

    /**
     * The gross total cost, i.e. including VAT
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountGross")
    private Optional<? extends GetNextSettlementAmountGross> amountGross;

    @JsonCreator
    public GetNextSettlementCosts(
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("method") JsonNullable<? extends GetNextSettlementMethod> method,
            @JsonProperty("count") Optional<Long> count,
            @JsonProperty("rate") Optional<? extends GetNextSettlementRate> rate,
            @JsonProperty("amountNet") Optional<? extends GetNextSettlementAmountNet> amountNet,
            @JsonProperty("amountVat") Optional<? extends GetNextSettlementAmountVat> amountVat,
            @JsonProperty("amountGross") Optional<? extends GetNextSettlementAmountGross> amountGross) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(rate, "rate");
        Utils.checkNotNull(amountNet, "amountNet");
        Utils.checkNotNull(amountVat, "amountVat");
        Utils.checkNotNull(amountGross, "amountGross");
        this.description = description;
        this.method = method;
        this.count = count;
        this.rate = rate;
        this.amountNet = amountNet;
        this.amountVat = amountVat;
        this.amountGross = amountGross;
    }
    
    public GetNextSettlementCosts() {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * A description of the cost subtotal
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The payment method, if applicable
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetNextSettlementMethod> method() {
        return (JsonNullable<GetNextSettlementMethod>) method;
    }

    /**
     * The number of fees
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    /**
     * The service rates, further divided into `fixed` and `percentage` costs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetNextSettlementRate> rate() {
        return (Optional<GetNextSettlementRate>) rate;
    }

    /**
     * The net total cost, i.e. excluding VAT
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetNextSettlementAmountNet> amountNet() {
        return (Optional<GetNextSettlementAmountNet>) amountNet;
    }

    /**
     * The applicable VAT
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetNextSettlementAmountVat> amountVat() {
        return (Optional<GetNextSettlementAmountVat>) amountVat;
    }

    /**
     * The gross total cost, i.e. including VAT
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetNextSettlementAmountGross> amountGross() {
        return (Optional<GetNextSettlementAmountGross>) amountGross;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A description of the cost subtotal
     */
    public GetNextSettlementCosts withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * A description of the cost subtotal
     */
    public GetNextSettlementCosts withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The payment method, if applicable
     */
    public GetNextSettlementCosts withMethod(GetNextSettlementMethod method) {
        Utils.checkNotNull(method, "method");
        this.method = JsonNullable.of(method);
        return this;
    }

    /**
     * The payment method, if applicable
     */
    public GetNextSettlementCosts withMethod(JsonNullable<? extends GetNextSettlementMethod> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * The number of fees
     */
    public GetNextSettlementCosts withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }


    /**
     * The number of fees
     */
    public GetNextSettlementCosts withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * The service rates, further divided into `fixed` and `percentage` costs.
     */
    public GetNextSettlementCosts withRate(GetNextSettlementRate rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = Optional.ofNullable(rate);
        return this;
    }


    /**
     * The service rates, further divided into `fixed` and `percentage` costs.
     */
    public GetNextSettlementCosts withRate(Optional<? extends GetNextSettlementRate> rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = rate;
        return this;
    }

    /**
     * The net total cost, i.e. excluding VAT
     */
    public GetNextSettlementCosts withAmountNet(GetNextSettlementAmountNet amountNet) {
        Utils.checkNotNull(amountNet, "amountNet");
        this.amountNet = Optional.ofNullable(amountNet);
        return this;
    }


    /**
     * The net total cost, i.e. excluding VAT
     */
    public GetNextSettlementCosts withAmountNet(Optional<? extends GetNextSettlementAmountNet> amountNet) {
        Utils.checkNotNull(amountNet, "amountNet");
        this.amountNet = amountNet;
        return this;
    }

    /**
     * The applicable VAT
     */
    public GetNextSettlementCosts withAmountVat(GetNextSettlementAmountVat amountVat) {
        Utils.checkNotNull(amountVat, "amountVat");
        this.amountVat = Optional.ofNullable(amountVat);
        return this;
    }


    /**
     * The applicable VAT
     */
    public GetNextSettlementCosts withAmountVat(Optional<? extends GetNextSettlementAmountVat> amountVat) {
        Utils.checkNotNull(amountVat, "amountVat");
        this.amountVat = amountVat;
        return this;
    }

    /**
     * The gross total cost, i.e. including VAT
     */
    public GetNextSettlementCosts withAmountGross(GetNextSettlementAmountGross amountGross) {
        Utils.checkNotNull(amountGross, "amountGross");
        this.amountGross = Optional.ofNullable(amountGross);
        return this;
    }


    /**
     * The gross total cost, i.e. including VAT
     */
    public GetNextSettlementCosts withAmountGross(Optional<? extends GetNextSettlementAmountGross> amountGross) {
        Utils.checkNotNull(amountGross, "amountGross");
        this.amountGross = amountGross;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetNextSettlementCosts other = (GetNextSettlementCosts) o;
        return 
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.count, other.count) &&
            Utils.enhancedDeepEquals(this.rate, other.rate) &&
            Utils.enhancedDeepEquals(this.amountNet, other.amountNet) &&
            Utils.enhancedDeepEquals(this.amountVat, other.amountVat) &&
            Utils.enhancedDeepEquals(this.amountGross, other.amountGross);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            description, method, count,
            rate, amountNet, amountVat,
            amountGross);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetNextSettlementCosts.class,
                "description", description,
                "method", method,
                "count", count,
                "rate", rate,
                "amountNet", amountNet,
                "amountVat", amountVat,
                "amountGross", amountGross);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> description = Optional.empty();

        private JsonNullable<? extends GetNextSettlementMethod> method = JsonNullable.undefined();

        private Optional<Long> count = Optional.empty();

        private Optional<? extends GetNextSettlementRate> rate = Optional.empty();

        private Optional<? extends GetNextSettlementAmountNet> amountNet = Optional.empty();

        private Optional<? extends GetNextSettlementAmountVat> amountVat = Optional.empty();

        private Optional<? extends GetNextSettlementAmountGross> amountGross = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A description of the cost subtotal
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A description of the cost subtotal
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The payment method, if applicable
         */
        public Builder method(GetNextSettlementMethod method) {
            Utils.checkNotNull(method, "method");
            this.method = JsonNullable.of(method);
            return this;
        }

        /**
         * The payment method, if applicable
         */
        public Builder method(JsonNullable<? extends GetNextSettlementMethod> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }


        /**
         * The number of fees
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * The number of fees
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }


        /**
         * The service rates, further divided into `fixed` and `percentage` costs.
         */
        public Builder rate(GetNextSettlementRate rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = Optional.ofNullable(rate);
            return this;
        }

        /**
         * The service rates, further divided into `fixed` and `percentage` costs.
         */
        public Builder rate(Optional<? extends GetNextSettlementRate> rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = rate;
            return this;
        }


        /**
         * The net total cost, i.e. excluding VAT
         */
        public Builder amountNet(GetNextSettlementAmountNet amountNet) {
            Utils.checkNotNull(amountNet, "amountNet");
            this.amountNet = Optional.ofNullable(amountNet);
            return this;
        }

        /**
         * The net total cost, i.e. excluding VAT
         */
        public Builder amountNet(Optional<? extends GetNextSettlementAmountNet> amountNet) {
            Utils.checkNotNull(amountNet, "amountNet");
            this.amountNet = amountNet;
            return this;
        }


        /**
         * The applicable VAT
         */
        public Builder amountVat(GetNextSettlementAmountVat amountVat) {
            Utils.checkNotNull(amountVat, "amountVat");
            this.amountVat = Optional.ofNullable(amountVat);
            return this;
        }

        /**
         * The applicable VAT
         */
        public Builder amountVat(Optional<? extends GetNextSettlementAmountVat> amountVat) {
            Utils.checkNotNull(amountVat, "amountVat");
            this.amountVat = amountVat;
            return this;
        }


        /**
         * The gross total cost, i.e. including VAT
         */
        public Builder amountGross(GetNextSettlementAmountGross amountGross) {
            Utils.checkNotNull(amountGross, "amountGross");
            this.amountGross = Optional.ofNullable(amountGross);
            return this;
        }

        /**
         * The gross total cost, i.e. including VAT
         */
        public Builder amountGross(Optional<? extends GetNextSettlementAmountGross> amountGross) {
            Utils.checkNotNull(amountGross, "amountGross");
            this.amountGross = amountGross;
            return this;
        }

        public GetNextSettlementCosts build() {

            return new GetNextSettlementCosts(
                description, method, count,
                rate, amountNet, amountVat,
                amountGross);
        }

    }
}
