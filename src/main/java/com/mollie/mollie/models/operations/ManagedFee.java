/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class ManagedFee {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feeType")
    private Optional<String> feeType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feeId")
    private Optional<String> feeId;

    @JsonCreator
    public ManagedFee(
            @JsonProperty("feeType") Optional<String> feeType,
            @JsonProperty("feeId") Optional<String> feeId) {
        Utils.checkNotNull(feeType, "feeType");
        Utils.checkNotNull(feeId, "feeId");
        this.feeType = feeType;
        this.feeId = feeId;
    }
    
    public ManagedFee() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> feeType() {
        return feeType;
    }

    @JsonIgnore
    public Optional<String> feeId() {
        return feeId;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ManagedFee withFeeType(String feeType) {
        Utils.checkNotNull(feeType, "feeType");
        this.feeType = Optional.ofNullable(feeType);
        return this;
    }


    public ManagedFee withFeeType(Optional<String> feeType) {
        Utils.checkNotNull(feeType, "feeType");
        this.feeType = feeType;
        return this;
    }

    public ManagedFee withFeeId(String feeId) {
        Utils.checkNotNull(feeId, "feeId");
        this.feeId = Optional.ofNullable(feeId);
        return this;
    }


    public ManagedFee withFeeId(Optional<String> feeId) {
        Utils.checkNotNull(feeId, "feeId");
        this.feeId = feeId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ManagedFee other = (ManagedFee) o;
        return 
            Utils.enhancedDeepEquals(this.feeType, other.feeType) &&
            Utils.enhancedDeepEquals(this.feeId, other.feeId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            feeType, feeId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ManagedFee.class,
                "feeType", feeType,
                "feeId", feeId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> feeType = Optional.empty();

        private Optional<String> feeId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder feeType(String feeType) {
            Utils.checkNotNull(feeType, "feeType");
            this.feeType = Optional.ofNullable(feeType);
            return this;
        }

        public Builder feeType(Optional<String> feeType) {
            Utils.checkNotNull(feeType, "feeType");
            this.feeType = feeType;
            return this;
        }


        public Builder feeId(String feeId) {
            Utils.checkNotNull(feeId, "feeId");
            this.feeId = Optional.ofNullable(feeId);
            return this;
        }

        public Builder feeId(Optional<String> feeId) {
            Utils.checkNotNull(feeId, "feeId");
            this.feeId = feeId;
            return this;
        }

        public ManagedFee build() {

            return new ManagedFee(
                feeType, feeId);
        }

    }
}
