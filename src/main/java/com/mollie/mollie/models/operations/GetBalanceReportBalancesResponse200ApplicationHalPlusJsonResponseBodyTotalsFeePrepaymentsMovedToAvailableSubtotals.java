/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub-totals")
    private JsonNullable<? extends List<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotalsSubTotals>> subTotals;

    /**
     * Number of transactions of this type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    /**
     * Payment type of the transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableMethod> method;

    /**
     * In case of payments transactions with card, the card issuer will be available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardIssuer")
    private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardIssuer> cardIssuer;

    /**
     * In case of payments trnsactions with card, the card audience will be available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardAudience")
    private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardAudience> cardAudience;

    /**
     * In case of payments transactions with card, the card region will be available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardRegion")
    private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardRegion> cardRegion;

    /**
     * Present when the transaction represents a fee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feeType")
    private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableFeeType> feeType;

    /**
     * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prepaymentPartType")
    private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailablePrepaymentPartType> prepaymentPartType;

    /**
     * Represents the transaction type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionType")
    private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableTransactionType> transactionType;

    @JsonCreator
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals(
            @JsonProperty("sub-totals") JsonNullable<? extends List<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotalsSubTotals>> subTotals,
            @JsonProperty("count") Optional<Long> count,
            @JsonProperty("method") JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableMethod> method,
            @JsonProperty("cardIssuer") JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardIssuer> cardIssuer,
            @JsonProperty("cardAudience") JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardAudience> cardAudience,
            @JsonProperty("cardRegion") JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardRegion> cardRegion,
            @JsonProperty("feeType") JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableFeeType> feeType,
            @JsonProperty("prepaymentPartType") JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailablePrepaymentPartType> prepaymentPartType,
            @JsonProperty("transactionType") JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableTransactionType> transactionType) {
        Utils.checkNotNull(subTotals, "subTotals");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(cardIssuer, "cardIssuer");
        Utils.checkNotNull(cardAudience, "cardAudience");
        Utils.checkNotNull(cardRegion, "cardRegion");
        Utils.checkNotNull(feeType, "feeType");
        Utils.checkNotNull(prepaymentPartType, "prepaymentPartType");
        Utils.checkNotNull(transactionType, "transactionType");
        this.subTotals = subTotals;
        this.count = count;
        this.method = method;
        this.cardIssuer = cardIssuer;
        this.cardAudience = cardAudience;
        this.cardRegion = cardRegion;
        this.feeType = feeType;
        this.prepaymentPartType = prepaymentPartType;
        this.transactionType = transactionType;
    }
    
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotalsSubTotals>> subTotals() {
        return (JsonNullable<List<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotalsSubTotals>>) subTotals;
    }

    /**
     * Number of transactions of this type
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    /**
     * Payment type of the transactions
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableMethod> method() {
        return (JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableMethod>) method;
    }

    /**
     * In case of payments transactions with card, the card issuer will be available
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardIssuer> cardIssuer() {
        return (JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardIssuer>) cardIssuer;
    }

    /**
     * In case of payments trnsactions with card, the card audience will be available.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardAudience> cardAudience() {
        return (JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardAudience>) cardAudience;
    }

    /**
     * In case of payments transactions with card, the card region will be available.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardRegion> cardRegion() {
        return (JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardRegion>) cardRegion;
    }

    /**
     * Present when the transaction represents a fee.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableFeeType> feeType() {
        return (JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableFeeType>) feeType;
    }

    /**
     * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailablePrepaymentPartType> prepaymentPartType() {
        return (JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailablePrepaymentPartType>) prepaymentPartType;
    }

    /**
     * Represents the transaction type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableTransactionType> transactionType() {
        return (JsonNullable<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableTransactionType>) transactionType;
    }

    public static Builder builder() {
        return new Builder();
    }


    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withSubTotals(List<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotalsSubTotals> subTotals) {
        Utils.checkNotNull(subTotals, "subTotals");
        this.subTotals = JsonNullable.of(subTotals);
        return this;
    }

    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withSubTotals(JsonNullable<? extends List<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotalsSubTotals>> subTotals) {
        Utils.checkNotNull(subTotals, "subTotals");
        this.subTotals = subTotals;
        return this;
    }

    /**
     * Number of transactions of this type
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }


    /**
     * Number of transactions of this type
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * Payment type of the transactions
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withMethod(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableMethod method) {
        Utils.checkNotNull(method, "method");
        this.method = JsonNullable.of(method);
        return this;
    }

    /**
     * Payment type of the transactions
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withMethod(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableMethod> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * In case of payments transactions with card, the card issuer will be available
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withCardIssuer(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardIssuer cardIssuer) {
        Utils.checkNotNull(cardIssuer, "cardIssuer");
        this.cardIssuer = JsonNullable.of(cardIssuer);
        return this;
    }

    /**
     * In case of payments transactions with card, the card issuer will be available
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withCardIssuer(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardIssuer> cardIssuer) {
        Utils.checkNotNull(cardIssuer, "cardIssuer");
        this.cardIssuer = cardIssuer;
        return this;
    }

    /**
     * In case of payments trnsactions with card, the card audience will be available.
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withCardAudience(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardAudience cardAudience) {
        Utils.checkNotNull(cardAudience, "cardAudience");
        this.cardAudience = JsonNullable.of(cardAudience);
        return this;
    }

    /**
     * In case of payments trnsactions with card, the card audience will be available.
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withCardAudience(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardAudience> cardAudience) {
        Utils.checkNotNull(cardAudience, "cardAudience");
        this.cardAudience = cardAudience;
        return this;
    }

    /**
     * In case of payments transactions with card, the card region will be available.
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withCardRegion(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardRegion cardRegion) {
        Utils.checkNotNull(cardRegion, "cardRegion");
        this.cardRegion = JsonNullable.of(cardRegion);
        return this;
    }

    /**
     * In case of payments transactions with card, the card region will be available.
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withCardRegion(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardRegion> cardRegion) {
        Utils.checkNotNull(cardRegion, "cardRegion");
        this.cardRegion = cardRegion;
        return this;
    }

    /**
     * Present when the transaction represents a fee.
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withFeeType(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableFeeType feeType) {
        Utils.checkNotNull(feeType, "feeType");
        this.feeType = JsonNullable.of(feeType);
        return this;
    }

    /**
     * Present when the transaction represents a fee.
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withFeeType(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableFeeType> feeType) {
        Utils.checkNotNull(feeType, "feeType");
        this.feeType = feeType;
        return this;
    }

    /**
     * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withPrepaymentPartType(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailablePrepaymentPartType prepaymentPartType) {
        Utils.checkNotNull(prepaymentPartType, "prepaymentPartType");
        this.prepaymentPartType = JsonNullable.of(prepaymentPartType);
        return this;
    }

    /**
     * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withPrepaymentPartType(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailablePrepaymentPartType> prepaymentPartType) {
        Utils.checkNotNull(prepaymentPartType, "prepaymentPartType");
        this.prepaymentPartType = prepaymentPartType;
        return this;
    }

    /**
     * Represents the transaction type
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withTransactionType(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableTransactionType transactionType) {
        Utils.checkNotNull(transactionType, "transactionType");
        this.transactionType = JsonNullable.of(transactionType);
        return this;
    }

    /**
     * Represents the transaction type
     */
    public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals withTransactionType(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableTransactionType> transactionType) {
        Utils.checkNotNull(transactionType, "transactionType");
        this.transactionType = transactionType;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals other = (GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals) o;
        return 
            Utils.enhancedDeepEquals(this.subTotals, other.subTotals) &&
            Utils.enhancedDeepEquals(this.count, other.count) &&
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.cardIssuer, other.cardIssuer) &&
            Utils.enhancedDeepEquals(this.cardAudience, other.cardAudience) &&
            Utils.enhancedDeepEquals(this.cardRegion, other.cardRegion) &&
            Utils.enhancedDeepEquals(this.feeType, other.feeType) &&
            Utils.enhancedDeepEquals(this.prepaymentPartType, other.prepaymentPartType) &&
            Utils.enhancedDeepEquals(this.transactionType, other.transactionType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            subTotals, count, method,
            cardIssuer, cardAudience, cardRegion,
            feeType, prepaymentPartType, transactionType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals.class,
                "subTotals", subTotals,
                "count", count,
                "method", method,
                "cardIssuer", cardIssuer,
                "cardAudience", cardAudience,
                "cardRegion", cardRegion,
                "feeType", feeType,
                "prepaymentPartType", prepaymentPartType,
                "transactionType", transactionType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends List<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotalsSubTotals>> subTotals = JsonNullable.undefined();

        private Optional<Long> count = Optional.empty();

        private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableMethod> method = JsonNullable.undefined();

        private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardIssuer> cardIssuer = JsonNullable.undefined();

        private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardAudience> cardAudience = JsonNullable.undefined();

        private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardRegion> cardRegion = JsonNullable.undefined();

        private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableFeeType> feeType = JsonNullable.undefined();

        private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailablePrepaymentPartType> prepaymentPartType = JsonNullable.undefined();

        private JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableTransactionType> transactionType = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder subTotals(List<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotalsSubTotals> subTotals) {
            Utils.checkNotNull(subTotals, "subTotals");
            this.subTotals = JsonNullable.of(subTotals);
            return this;
        }

        public Builder subTotals(JsonNullable<? extends List<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotalsSubTotals>> subTotals) {
            Utils.checkNotNull(subTotals, "subTotals");
            this.subTotals = subTotals;
            return this;
        }


        /**
         * Number of transactions of this type
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * Number of transactions of this type
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }


        /**
         * Payment type of the transactions
         */
        public Builder method(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableMethod method) {
            Utils.checkNotNull(method, "method");
            this.method = JsonNullable.of(method);
            return this;
        }

        /**
         * Payment type of the transactions
         */
        public Builder method(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableMethod> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }


        /**
         * In case of payments transactions with card, the card issuer will be available
         */
        public Builder cardIssuer(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardIssuer cardIssuer) {
            Utils.checkNotNull(cardIssuer, "cardIssuer");
            this.cardIssuer = JsonNullable.of(cardIssuer);
            return this;
        }

        /**
         * In case of payments transactions with card, the card issuer will be available
         */
        public Builder cardIssuer(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardIssuer> cardIssuer) {
            Utils.checkNotNull(cardIssuer, "cardIssuer");
            this.cardIssuer = cardIssuer;
            return this;
        }


        /**
         * In case of payments trnsactions with card, the card audience will be available.
         */
        public Builder cardAudience(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardAudience cardAudience) {
            Utils.checkNotNull(cardAudience, "cardAudience");
            this.cardAudience = JsonNullable.of(cardAudience);
            return this;
        }

        /**
         * In case of payments trnsactions with card, the card audience will be available.
         */
        public Builder cardAudience(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardAudience> cardAudience) {
            Utils.checkNotNull(cardAudience, "cardAudience");
            this.cardAudience = cardAudience;
            return this;
        }


        /**
         * In case of payments transactions with card, the card region will be available.
         */
        public Builder cardRegion(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardRegion cardRegion) {
            Utils.checkNotNull(cardRegion, "cardRegion");
            this.cardRegion = JsonNullable.of(cardRegion);
            return this;
        }

        /**
         * In case of payments transactions with card, the card region will be available.
         */
        public Builder cardRegion(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableCardRegion> cardRegion) {
            Utils.checkNotNull(cardRegion, "cardRegion");
            this.cardRegion = cardRegion;
            return this;
        }


        /**
         * Present when the transaction represents a fee.
         */
        public Builder feeType(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableFeeType feeType) {
            Utils.checkNotNull(feeType, "feeType");
            this.feeType = JsonNullable.of(feeType);
            return this;
        }

        /**
         * Present when the transaction represents a fee.
         */
        public Builder feeType(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableFeeType> feeType) {
            Utils.checkNotNull(feeType, "feeType");
            this.feeType = feeType;
            return this;
        }


        /**
         * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
         */
        public Builder prepaymentPartType(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailablePrepaymentPartType prepaymentPartType) {
            Utils.checkNotNull(prepaymentPartType, "prepaymentPartType");
            this.prepaymentPartType = JsonNullable.of(prepaymentPartType);
            return this;
        }

        /**
         * Prepayment part: fee itself, reimbursement, discount, VAT or rounding compensation.
         */
        public Builder prepaymentPartType(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailablePrepaymentPartType> prepaymentPartType) {
            Utils.checkNotNull(prepaymentPartType, "prepaymentPartType");
            this.prepaymentPartType = prepaymentPartType;
            return this;
        }


        /**
         * Represents the transaction type
         */
        public Builder transactionType(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableTransactionType transactionType) {
            Utils.checkNotNull(transactionType, "transactionType");
            this.transactionType = JsonNullable.of(transactionType);
            return this;
        }

        /**
         * Represents the transaction type
         */
        public Builder transactionType(JsonNullable<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableTransactionType> transactionType) {
            Utils.checkNotNull(transactionType, "transactionType");
            this.transactionType = transactionType;
            return this;
        }

        public GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals build() {

            return new GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsMovedToAvailableSubtotals(
                subTotals, count, method,
                cardIssuer, cardAudience, cardRegion,
                feeType, prepaymentPartType, transactionType);
        }

    }
}
