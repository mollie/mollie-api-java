/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * TransferDestination
 * 
 * <p>The destination where the available amount will be automatically transferred to according to the configured transfer frequency.
 */
public class TransferDestination {

    /**
     * The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
     * 
     * <p>* `bank-account` — Transfer the balance amount to an external bank account
     * 
     * <p>Possible values: `bank-account`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The configured bank account number of the beneficiary the balance amount is to be transferred to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankAccount")
    private Optional<String> bankAccount;

    /**
     * The full name of the beneficiary the balance amount is to be transferred to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beneficiaryName")
    private Optional<String> beneficiaryName;

    @JsonCreator
    public TransferDestination(
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("bankAccount") Optional<String> bankAccount,
            @JsonProperty("beneficiaryName") Optional<String> beneficiaryName) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(bankAccount, "bankAccount");
        Utils.checkNotNull(beneficiaryName, "beneficiaryName");
        this.type = type;
        this.bankAccount = bankAccount;
        this.beneficiaryName = beneficiaryName;
    }
    
    public TransferDestination() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
     * 
     * <p>* `bank-account` — Transfer the balance amount to an external bank account
     * 
     * <p>Possible values: `bank-account`
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The configured bank account number of the beneficiary the balance amount is to be transferred to.
     */
    @JsonIgnore
    public Optional<String> bankAccount() {
        return bankAccount;
    }

    /**
     * The full name of the beneficiary the balance amount is to be transferred to.
     */
    @JsonIgnore
    public Optional<String> beneficiaryName() {
        return beneficiaryName;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
     * 
     * <p>* `bank-account` — Transfer the balance amount to an external bank account
     * 
     * <p>Possible values: `bank-account`
     */
    public TransferDestination withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
     * 
     * <p>* `bank-account` — Transfer the balance amount to an external bank account
     * 
     * <p>Possible values: `bank-account`
     */
    public TransferDestination withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The configured bank account number of the beneficiary the balance amount is to be transferred to.
     */
    public TransferDestination withBankAccount(String bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = Optional.ofNullable(bankAccount);
        return this;
    }

    /**
     * The configured bank account number of the beneficiary the balance amount is to be transferred to.
     */
    public TransferDestination withBankAccount(Optional<String> bankAccount) {
        Utils.checkNotNull(bankAccount, "bankAccount");
        this.bankAccount = bankAccount;
        return this;
    }

    /**
     * The full name of the beneficiary the balance amount is to be transferred to.
     */
    public TransferDestination withBeneficiaryName(String beneficiaryName) {
        Utils.checkNotNull(beneficiaryName, "beneficiaryName");
        this.beneficiaryName = Optional.ofNullable(beneficiaryName);
        return this;
    }

    /**
     * The full name of the beneficiary the balance amount is to be transferred to.
     */
    public TransferDestination withBeneficiaryName(Optional<String> beneficiaryName) {
        Utils.checkNotNull(beneficiaryName, "beneficiaryName");
        this.beneficiaryName = beneficiaryName;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransferDestination other = (TransferDestination) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.bankAccount, other.bankAccount) &&
            Utils.enhancedDeepEquals(this.beneficiaryName, other.beneficiaryName);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            bankAccount,
            beneficiaryName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransferDestination.class,
                "type", type,
                "bankAccount", bankAccount,
                "beneficiaryName", beneficiaryName);
    }
    
    public final static class Builder {
 
        private Optional<String> type = Optional.empty();
 
        private Optional<String> bankAccount = Optional.empty();
 
        private Optional<String> beneficiaryName = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
         * 
         * <p>* `bank-account` — Transfer the balance amount to an external bank account
         * 
         * <p>Possible values: `bank-account`
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The default destination of automatic scheduled transfers. Currently only `bank-account` is supported.
         * 
         * <p>* `bank-account` — Transfer the balance amount to an external bank account
         * 
         * <p>Possible values: `bank-account`
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The configured bank account number of the beneficiary the balance amount is to be transferred to.
         */
        public Builder bankAccount(String bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = Optional.ofNullable(bankAccount);
            return this;
        }

        /**
         * The configured bank account number of the beneficiary the balance amount is to be transferred to.
         */
        public Builder bankAccount(Optional<String> bankAccount) {
            Utils.checkNotNull(bankAccount, "bankAccount");
            this.bankAccount = bankAccount;
            return this;
        }

        /**
         * The full name of the beneficiary the balance amount is to be transferred to.
         */
        public Builder beneficiaryName(String beneficiaryName) {
            Utils.checkNotNull(beneficiaryName, "beneficiaryName");
            this.beneficiaryName = Optional.ofNullable(beneficiaryName);
            return this;
        }

        /**
         * The full name of the beneficiary the balance amount is to be transferred to.
         */
        public Builder beneficiaryName(Optional<String> beneficiaryName) {
            Utils.checkNotNull(beneficiaryName, "beneficiaryName");
            this.beneficiaryName = beneficiaryName;
            return this;
        }
        
        public TransferDestination build() {
            return new TransferDestination(
                type,
                bankAccount,
                beneficiaryName);
        }
    }
}
