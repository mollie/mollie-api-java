/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class ListMandatesMandates {
    /**
     * Indicates the response contains a mandate object. Will always contain the string `mandate` for this endpoint.
     */
    @JsonProperty("resource")
    private String resource;

    /**
     * The identifier uniquely referring to this mandate. Example: `mdt_pWUnw6pkBN`.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonProperty("mode")
    private ListMandatesMode mode;

    /**
     * Payment method of the mandate.
     * 
     * <p>SEPA Direct Debit and PayPal mandates can be created directly.
     */
    @JsonProperty("method")
    private ListMandatesMethod method;


    @JsonProperty("details")
    private ListMandatesDetails details;

    /**
     * The date when the mandate was signed in `YYYY-MM-DD` format.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("signatureDate")
    private Optional<String> signatureDate;

    /**
     * A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
     * decline Direct Debit payments if the mandate reference is not unique.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("mandateReference")
    private Optional<String> mandateReference;

    /**
     * The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
     * when we did not received the IBAN yet from the first payment.
     */
    @JsonProperty("status")
    private ListMandatesStatus status;

    /**
     * The identifier referring to the [customer](get-customer) this mandate was linked to.
     */
    @JsonProperty("customerId")
    private String customerId;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonProperty("createdAt")
    private String createdAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private ListMandatesMandatesLinks links;

    @JsonCreator
    public ListMandatesMandates(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") String id,
            @JsonProperty("mode") ListMandatesMode mode,
            @JsonProperty("method") ListMandatesMethod method,
            @JsonProperty("details") ListMandatesDetails details,
            @JsonProperty("signatureDate") Optional<String> signatureDate,
            @JsonProperty("mandateReference") Optional<String> mandateReference,
            @JsonProperty("status") ListMandatesStatus status,
            @JsonProperty("customerId") String customerId,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("_links") ListMandatesMandatesLinks links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(details, "details");
        Utils.checkNotNull(signatureDate, "signatureDate");
        Utils.checkNotNull(mandateReference, "mandateReference");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.method = method;
        this.details = details;
        this.signatureDate = signatureDate;
        this.mandateReference = mandateReference;
        this.status = status;
        this.customerId = customerId;
        this.createdAt = createdAt;
        this.links = links;
    }
    
    public ListMandatesMandates(
            String resource,
            String id,
            ListMandatesMode mode,
            ListMandatesMethod method,
            ListMandatesDetails details,
            ListMandatesStatus status,
            String customerId,
            String createdAt,
            ListMandatesMandatesLinks links) {
        this(resource, id, mode,
            method, details, Optional.empty(),
            Optional.empty(), status, customerId,
            createdAt, links);
    }

    /**
     * Indicates the response contains a mandate object. Will always contain the string `mandate` for this endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this mandate. Example: `mdt_pWUnw6pkBN`.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonIgnore
    public ListMandatesMode mode() {
        return mode;
    }

    /**
     * Payment method of the mandate.
     * 
     * <p>SEPA Direct Debit and PayPal mandates can be created directly.
     */
    @JsonIgnore
    public ListMandatesMethod method() {
        return method;
    }

    @JsonIgnore
    public ListMandatesDetails details() {
        return details;
    }

    /**
     * The date when the mandate was signed in `YYYY-MM-DD` format.
     */
    @JsonIgnore
    public Optional<String> signatureDate() {
        return signatureDate;
    }

    /**
     * A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
     * decline Direct Debit payments if the mandate reference is not unique.
     */
    @JsonIgnore
    public Optional<String> mandateReference() {
        return mandateReference;
    }

    /**
     * The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
     * when we did not received the IBAN yet from the first payment.
     */
    @JsonIgnore
    public ListMandatesStatus status() {
        return status;
    }

    /**
     * The identifier referring to the [customer](get-customer) this mandate was linked to.
     */
    @JsonIgnore
    public String customerId() {
        return customerId;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public ListMandatesMandatesLinks links() {
        return links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a mandate object. Will always contain the string `mandate` for this endpoint.
     */
    public ListMandatesMandates withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this mandate. Example: `mdt_pWUnw6pkBN`.
     */
    public ListMandatesMandates withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public ListMandatesMandates withMode(ListMandatesMode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * Payment method of the mandate.
     * 
     * <p>SEPA Direct Debit and PayPal mandates can be created directly.
     */
    public ListMandatesMandates withMethod(ListMandatesMethod method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    public ListMandatesMandates withDetails(ListMandatesDetails details) {
        Utils.checkNotNull(details, "details");
        this.details = details;
        return this;
    }

    /**
     * The date when the mandate was signed in `YYYY-MM-DD` format.
     */
    public ListMandatesMandates withSignatureDate(String signatureDate) {
        Utils.checkNotNull(signatureDate, "signatureDate");
        this.signatureDate = Optional.ofNullable(signatureDate);
        return this;
    }


    /**
     * The date when the mandate was signed in `YYYY-MM-DD` format.
     */
    public ListMandatesMandates withSignatureDate(Optional<String> signatureDate) {
        Utils.checkNotNull(signatureDate, "signatureDate");
        this.signatureDate = signatureDate;
        return this;
    }

    /**
     * A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
     * decline Direct Debit payments if the mandate reference is not unique.
     */
    public ListMandatesMandates withMandateReference(String mandateReference) {
        Utils.checkNotNull(mandateReference, "mandateReference");
        this.mandateReference = Optional.ofNullable(mandateReference);
        return this;
    }


    /**
     * A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
     * decline Direct Debit payments if the mandate reference is not unique.
     */
    public ListMandatesMandates withMandateReference(Optional<String> mandateReference) {
        Utils.checkNotNull(mandateReference, "mandateReference");
        this.mandateReference = mandateReference;
        return this;
    }

    /**
     * The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
     * when we did not received the IBAN yet from the first payment.
     */
    public ListMandatesMandates withStatus(ListMandatesStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The identifier referring to the [customer](get-customer) this mandate was linked to.
     */
    public ListMandatesMandates withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public ListMandatesMandates withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public ListMandatesMandates withLinks(ListMandatesMandatesLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListMandatesMandates other = (ListMandatesMandates) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.details, other.details) &&
            Utils.enhancedDeepEquals(this.signatureDate, other.signatureDate) &&
            Utils.enhancedDeepEquals(this.mandateReference, other.mandateReference) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, mode,
            method, details, signatureDate,
            mandateReference, status, customerId,
            createdAt, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListMandatesMandates.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "method", method,
                "details", details,
                "signatureDate", signatureDate,
                "mandateReference", mandateReference,
                "status", status,
                "customerId", customerId,
                "createdAt", createdAt,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private String id;

        private ListMandatesMode mode;

        private ListMandatesMethod method;

        private ListMandatesDetails details;

        private Optional<String> signatureDate = Optional.empty();

        private Optional<String> mandateReference = Optional.empty();

        private ListMandatesStatus status;

        private String customerId;

        private String createdAt;

        private ListMandatesMandatesLinks links;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a mandate object. Will always contain the string `mandate` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this mandate. Example: `mdt_pWUnw6pkBN`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(ListMandatesMode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * Payment method of the mandate.
         * 
         * <p>SEPA Direct Debit and PayPal mandates can be created directly.
         */
        public Builder method(ListMandatesMethod method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }


        public Builder details(ListMandatesDetails details) {
            Utils.checkNotNull(details, "details");
            this.details = details;
            return this;
        }


        /**
         * The date when the mandate was signed in `YYYY-MM-DD` format.
         */
        public Builder signatureDate(String signatureDate) {
            Utils.checkNotNull(signatureDate, "signatureDate");
            this.signatureDate = Optional.ofNullable(signatureDate);
            return this;
        }

        /**
         * The date when the mandate was signed in `YYYY-MM-DD` format.
         */
        public Builder signatureDate(Optional<String> signatureDate) {
            Utils.checkNotNull(signatureDate, "signatureDate");
            this.signatureDate = signatureDate;
            return this;
        }


        /**
         * A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
         * decline Direct Debit payments if the mandate reference is not unique.
         */
        public Builder mandateReference(String mandateReference) {
            Utils.checkNotNull(mandateReference, "mandateReference");
            this.mandateReference = Optional.ofNullable(mandateReference);
            return this;
        }

        /**
         * A custom mandate reference. For SEPA Direct Debit, it is vital to provide a unique reference. Some banks will
         * decline Direct Debit payments if the mandate reference is not unique.
         */
        public Builder mandateReference(Optional<String> mandateReference) {
            Utils.checkNotNull(mandateReference, "mandateReference");
            this.mandateReference = mandateReference;
            return this;
        }


        /**
         * The status of the mandate. A status can be `pending` for mandates when the first payment is not yet finalized, or
         * when we did not received the IBAN yet from the first payment.
         */
        public Builder status(ListMandatesStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The identifier referring to the [customer](get-customer) this mandate was linked to.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(ListMandatesMandatesLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public ListMandatesMandates build() {

            return new ListMandatesMandates(
                resource, id, mode,
                method, details, signatureDate,
                mandateReference, status, customerId,
                createdAt, links);
        }

    }
}
