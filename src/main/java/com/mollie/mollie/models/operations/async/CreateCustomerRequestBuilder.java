/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations.async;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.SDKConfiguration;
import com.mollie.mollie.models.components.EntityCustomer;
import com.mollie.mollie.models.operations.CreateCustomerRequest;
import com.mollie.mollie.operations.CreateCustomer;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import com.mollie.mollie.utils.RetryConfig;
import com.mollie.mollie.utils.Utils;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class CreateCustomerRequestBuilder {

    private Optional<String> idempotencyKey = Optional.empty();
    private Optional<? extends EntityCustomer> entityCustomer = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public CreateCustomerRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public CreateCustomerRequestBuilder idempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.of(idempotencyKey);
        return this;
    }

    public CreateCustomerRequestBuilder idempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }
                
    public CreateCustomerRequestBuilder entityCustomer(EntityCustomer entityCustomer) {
        Utils.checkNotNull(entityCustomer, "entityCustomer");
        this.entityCustomer = Optional.of(entityCustomer);
        return this;
    }

    public CreateCustomerRequestBuilder entityCustomer(Optional<? extends EntityCustomer> entityCustomer) {
        Utils.checkNotNull(entityCustomer, "entityCustomer");
        this.entityCustomer = entityCustomer;
        return this;
    }
                
    public CreateCustomerRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public CreateCustomerRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private CreateCustomerRequest buildRequest() {

        CreateCustomerRequest request = new CreateCustomerRequest(idempotencyKey,
            entityCustomer);

        return request;
    }

    public CompletableFuture<CreateCustomerResponse> call() {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        AsyncRequestOperation<CreateCustomerRequest, CreateCustomerResponse> operation
              = new CreateCustomer.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        CreateCustomerRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
