/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.models.components.EntityCapture;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class CreateCaptureRequest {
    /**
     * Provide the ID of the related payment.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=paymentId")
    private String paymentId;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends EntityCapture> entityCapture;

    @JsonCreator
    public CreateCaptureRequest(
            String paymentId,
            Optional<? extends EntityCapture> entityCapture) {
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(entityCapture, "entityCapture");
        this.paymentId = paymentId;
        this.entityCapture = entityCapture;
    }
    
    public CreateCaptureRequest(
            String paymentId) {
        this(paymentId, Optional.empty());
    }

    /**
     * Provide the ID of the related payment.
     */
    @JsonIgnore
    public String paymentId() {
        return paymentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EntityCapture> entityCapture() {
        return (Optional<EntityCapture>) entityCapture;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Provide the ID of the related payment.
     */
    public CreateCaptureRequest withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    public CreateCaptureRequest withEntityCapture(EntityCapture entityCapture) {
        Utils.checkNotNull(entityCapture, "entityCapture");
        this.entityCapture = Optional.ofNullable(entityCapture);
        return this;
    }


    public CreateCaptureRequest withEntityCapture(Optional<? extends EntityCapture> entityCapture) {
        Utils.checkNotNull(entityCapture, "entityCapture");
        this.entityCapture = entityCapture;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCaptureRequest other = (CreateCaptureRequest) o;
        return 
            Utils.enhancedDeepEquals(this.paymentId, other.paymentId) &&
            Utils.enhancedDeepEquals(this.entityCapture, other.entityCapture);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            paymentId, entityCapture);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCaptureRequest.class,
                "paymentId", paymentId,
                "entityCapture", entityCapture);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String paymentId;

        private Optional<? extends EntityCapture> entityCapture = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Provide the ID of the related payment.
         */
        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }


        public Builder entityCapture(EntityCapture entityCapture) {
            Utils.checkNotNull(entityCapture, "entityCapture");
            this.entityCapture = Optional.ofNullable(entityCapture);
            return this;
        }

        public Builder entityCapture(Optional<? extends EntityCapture> entityCapture) {
            Utils.checkNotNull(entityCapture, "entityCapture");
            this.entityCapture = entityCapture;
            return this;
        }

        public CreateCaptureRequest build() {

            return new CreateCaptureRequest(
                paymentId, entityCapture);
        }

    }
}
