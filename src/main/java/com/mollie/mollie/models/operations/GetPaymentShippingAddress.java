/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
/**
 * GetPaymentShippingAddress - The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
 * 
 * Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
 */

public class GetPaymentShippingAddress {

    /**
     * The title of the person, for example *Mr.* or *Mrs.*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("givenName")
    private Optional<String> givenName;

    /**
     * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("familyName")
    private Optional<String> familyName;

    /**
     * The name of the organization, in case the addressee is an organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationName")
    private Optional<String> organizationName;

    /**
     * A street and street number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streetAndNumber")
    private Optional<String> streetAndNumber;

    /**
     * Any additional addressing details, for example an apartment number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streetAdditional")
    private Optional<String> streetAdditional;

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postalCode")
    private Optional<String> postalCode;

    /**
     * A valid e-mail address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    /**
     * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<String> phone;

    /**
     * A city name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<String> city;

    /**
     * The top-level administrative subdivision of the country. For example: Noord-Holland.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private Optional<String> region;

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<String> country;

    @JsonCreator
    public GetPaymentShippingAddress(
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("givenName") Optional<String> givenName,
            @JsonProperty("familyName") Optional<String> familyName,
            @JsonProperty("organizationName") Optional<String> organizationName,
            @JsonProperty("streetAndNumber") Optional<String> streetAndNumber,
            @JsonProperty("streetAdditional") Optional<String> streetAdditional,
            @JsonProperty("postalCode") Optional<String> postalCode,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("phone") Optional<String> phone,
            @JsonProperty("city") Optional<String> city,
            @JsonProperty("region") Optional<String> region,
            @JsonProperty("country") Optional<String> country) {
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(givenName, "givenName");
        Utils.checkNotNull(familyName, "familyName");
        Utils.checkNotNull(organizationName, "organizationName");
        Utils.checkNotNull(streetAndNumber, "streetAndNumber");
        Utils.checkNotNull(streetAdditional, "streetAdditional");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(country, "country");
        this.title = title;
        this.givenName = givenName;
        this.familyName = familyName;
        this.organizationName = organizationName;
        this.streetAndNumber = streetAndNumber;
        this.streetAdditional = streetAdditional;
        this.postalCode = postalCode;
        this.email = email;
        this.phone = phone;
        this.city = city;
        this.region = region;
        this.country = country;
    }
    
    public GetPaymentShippingAddress() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The title of the person, for example *Mr.* or *Mrs.*.
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
     */
    @JsonIgnore
    public Optional<String> givenName() {
        return givenName;
    }

    /**
     * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
     */
    @JsonIgnore
    public Optional<String> familyName() {
        return familyName;
    }

    /**
     * The name of the organization, in case the addressee is an organization.
     */
    @JsonIgnore
    public Optional<String> organizationName() {
        return organizationName;
    }

    /**
     * A street and street number.
     */
    @JsonIgnore
    public Optional<String> streetAndNumber() {
        return streetAndNumber;
    }

    /**
     * Any additional addressing details, for example an apartment number.
     */
    @JsonIgnore
    public Optional<String> streetAdditional() {
        return streetAdditional;
    }

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     */
    @JsonIgnore
    public Optional<String> postalCode() {
        return postalCode;
    }

    /**
     * A valid e-mail address.
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    /**
     * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
     */
    @JsonIgnore
    public Optional<String> phone() {
        return phone;
    }

    /**
     * A city name.
     */
    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    /**
     * The top-level administrative subdivision of the country. For example: Noord-Holland.
     */
    @JsonIgnore
    public Optional<String> region() {
        return region;
    }

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The title of the person, for example *Mr.* or *Mrs.*.
     */
    public GetPaymentShippingAddress withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * The title of the person, for example *Mr.* or *Mrs.*.
     */
    public GetPaymentShippingAddress withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
     */
    public GetPaymentShippingAddress withGivenName(String givenName) {
        Utils.checkNotNull(givenName, "givenName");
        this.givenName = Optional.ofNullable(givenName);
        return this;
    }

    /**
     * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
     */
    public GetPaymentShippingAddress withGivenName(Optional<String> givenName) {
        Utils.checkNotNull(givenName, "givenName");
        this.givenName = givenName;
        return this;
    }

    /**
     * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
     */
    public GetPaymentShippingAddress withFamilyName(String familyName) {
        Utils.checkNotNull(familyName, "familyName");
        this.familyName = Optional.ofNullable(familyName);
        return this;
    }

    /**
     * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
     */
    public GetPaymentShippingAddress withFamilyName(Optional<String> familyName) {
        Utils.checkNotNull(familyName, "familyName");
        this.familyName = familyName;
        return this;
    }

    /**
     * The name of the organization, in case the addressee is an organization.
     */
    public GetPaymentShippingAddress withOrganizationName(String organizationName) {
        Utils.checkNotNull(organizationName, "organizationName");
        this.organizationName = Optional.ofNullable(organizationName);
        return this;
    }

    /**
     * The name of the organization, in case the addressee is an organization.
     */
    public GetPaymentShippingAddress withOrganizationName(Optional<String> organizationName) {
        Utils.checkNotNull(organizationName, "organizationName");
        this.organizationName = organizationName;
        return this;
    }

    /**
     * A street and street number.
     */
    public GetPaymentShippingAddress withStreetAndNumber(String streetAndNumber) {
        Utils.checkNotNull(streetAndNumber, "streetAndNumber");
        this.streetAndNumber = Optional.ofNullable(streetAndNumber);
        return this;
    }

    /**
     * A street and street number.
     */
    public GetPaymentShippingAddress withStreetAndNumber(Optional<String> streetAndNumber) {
        Utils.checkNotNull(streetAndNumber, "streetAndNumber");
        this.streetAndNumber = streetAndNumber;
        return this;
    }

    /**
     * Any additional addressing details, for example an apartment number.
     */
    public GetPaymentShippingAddress withStreetAdditional(String streetAdditional) {
        Utils.checkNotNull(streetAdditional, "streetAdditional");
        this.streetAdditional = Optional.ofNullable(streetAdditional);
        return this;
    }

    /**
     * Any additional addressing details, for example an apartment number.
     */
    public GetPaymentShippingAddress withStreetAdditional(Optional<String> streetAdditional) {
        Utils.checkNotNull(streetAdditional, "streetAdditional");
        this.streetAdditional = streetAdditional;
        return this;
    }

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     */
    public GetPaymentShippingAddress withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = Optional.ofNullable(postalCode);
        return this;
    }

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     */
    public GetPaymentShippingAddress withPostalCode(Optional<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * A valid e-mail address.
     */
    public GetPaymentShippingAddress withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * A valid e-mail address.
     */
    public GetPaymentShippingAddress withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
     */
    public GetPaymentShippingAddress withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    /**
     * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
     */
    public GetPaymentShippingAddress withPhone(Optional<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * A city name.
     */
    public GetPaymentShippingAddress withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    /**
     * A city name.
     */
    public GetPaymentShippingAddress withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * The top-level administrative subdivision of the country. For example: Noord-Holland.
     */
    public GetPaymentShippingAddress withRegion(String region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.ofNullable(region);
        return this;
    }

    /**
     * The top-level administrative subdivision of the country. For example: Noord-Holland.
     */
    public GetPaymentShippingAddress withRegion(Optional<String> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    public GetPaymentShippingAddress withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    public GetPaymentShippingAddress withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPaymentShippingAddress other = (GetPaymentShippingAddress) o;
        return 
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.givenName, other.givenName) &&
            Objects.deepEquals(this.familyName, other.familyName) &&
            Objects.deepEquals(this.organizationName, other.organizationName) &&
            Objects.deepEquals(this.streetAndNumber, other.streetAndNumber) &&
            Objects.deepEquals(this.streetAdditional, other.streetAdditional) &&
            Objects.deepEquals(this.postalCode, other.postalCode) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.region, other.region) &&
            Objects.deepEquals(this.country, other.country);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            title,
            givenName,
            familyName,
            organizationName,
            streetAndNumber,
            streetAdditional,
            postalCode,
            email,
            phone,
            city,
            region,
            country);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPaymentShippingAddress.class,
                "title", title,
                "givenName", givenName,
                "familyName", familyName,
                "organizationName", organizationName,
                "streetAndNumber", streetAndNumber,
                "streetAdditional", streetAdditional,
                "postalCode", postalCode,
                "email", email,
                "phone", phone,
                "city", city,
                "region", region,
                "country", country);
    }
    
    public final static class Builder {
 
        private Optional<String> title = Optional.empty();
 
        private Optional<String> givenName = Optional.empty();
 
        private Optional<String> familyName = Optional.empty();
 
        private Optional<String> organizationName = Optional.empty();
 
        private Optional<String> streetAndNumber = Optional.empty();
 
        private Optional<String> streetAdditional = Optional.empty();
 
        private Optional<String> postalCode = Optional.empty();
 
        private Optional<String> email = Optional.empty();
 
        private Optional<String> phone = Optional.empty();
 
        private Optional<String> city = Optional.empty();
 
        private Optional<String> region = Optional.empty();
 
        private Optional<String> country = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The title of the person, for example *Mr.* or *Mrs.*.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * The title of the person, for example *Mr.* or *Mrs.*.
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
         */
        public Builder givenName(String givenName) {
            Utils.checkNotNull(givenName, "givenName");
            this.givenName = Optional.ofNullable(givenName);
            return this;
        }

        /**
         * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
         */
        public Builder givenName(Optional<String> givenName) {
            Utils.checkNotNull(givenName, "givenName");
            this.givenName = givenName;
            return this;
        }

        /**
         * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
         */
        public Builder familyName(String familyName) {
            Utils.checkNotNull(familyName, "familyName");
            this.familyName = Optional.ofNullable(familyName);
            return this;
        }

        /**
         * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
         */
        public Builder familyName(Optional<String> familyName) {
            Utils.checkNotNull(familyName, "familyName");
            this.familyName = familyName;
            return this;
        }

        /**
         * The name of the organization, in case the addressee is an organization.
         */
        public Builder organizationName(String organizationName) {
            Utils.checkNotNull(organizationName, "organizationName");
            this.organizationName = Optional.ofNullable(organizationName);
            return this;
        }

        /**
         * The name of the organization, in case the addressee is an organization.
         */
        public Builder organizationName(Optional<String> organizationName) {
            Utils.checkNotNull(organizationName, "organizationName");
            this.organizationName = organizationName;
            return this;
        }

        /**
         * A street and street number.
         */
        public Builder streetAndNumber(String streetAndNumber) {
            Utils.checkNotNull(streetAndNumber, "streetAndNumber");
            this.streetAndNumber = Optional.ofNullable(streetAndNumber);
            return this;
        }

        /**
         * A street and street number.
         */
        public Builder streetAndNumber(Optional<String> streetAndNumber) {
            Utils.checkNotNull(streetAndNumber, "streetAndNumber");
            this.streetAndNumber = streetAndNumber;
            return this;
        }

        /**
         * Any additional addressing details, for example an apartment number.
         */
        public Builder streetAdditional(String streetAdditional) {
            Utils.checkNotNull(streetAdditional, "streetAdditional");
            this.streetAdditional = Optional.ofNullable(streetAdditional);
            return this;
        }

        /**
         * Any additional addressing details, for example an apartment number.
         */
        public Builder streetAdditional(Optional<String> streetAdditional) {
            Utils.checkNotNull(streetAdditional, "streetAdditional");
            this.streetAdditional = streetAdditional;
            return this;
        }

        /**
         * A postal code. This field may be required if the provided country has a postal code system.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        /**
         * A postal code. This field may be required if the provided country has a postal code system.
         */
        public Builder postalCode(Optional<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        /**
         * A valid e-mail address.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * A valid e-mail address.
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
         */
        public Builder phone(Optional<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * A city name.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * A city name.
         */
        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * The top-level administrative subdivision of the country. For example: Noord-Holland.
         */
        public Builder region(String region) {
            Utils.checkNotNull(region, "region");
            this.region = Optional.ofNullable(region);
            return this;
        }

        /**
         * The top-level administrative subdivision of the country. For example: Noord-Holland.
         */
        public Builder region(Optional<String> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         */
        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }
        
        public GetPaymentShippingAddress build() {
            return new GetPaymentShippingAddress(
                title,
                givenName,
                familyName,
                organizationName,
                streetAndNumber,
                streetAdditional,
                postalCode,
                email,
                phone,
                city,
                region,
                country);
        }
    }
}

