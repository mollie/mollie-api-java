/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * CreateCustomerPaymentChangePaymentState
 * 
 * <p>For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
 * 
 * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
 * 
 * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
 */
public class CreateCustomerPaymentChangePaymentState {

    /**
     * The actual URL string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("href")
    private Optional<String> href;

    /**
     * The content type of the page or endpoint the URL points to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonCreator
    public CreateCustomerPaymentChangePaymentState(
            @JsonProperty("href") Optional<String> href,
            @JsonProperty("type") Optional<String> type) {
        Utils.checkNotNull(href, "href");
        Utils.checkNotNull(type, "type");
        this.href = href;
        this.type = type;
    }
    
    public CreateCustomerPaymentChangePaymentState() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The actual URL string.
     */
    @JsonIgnore
    public Optional<String> href() {
        return href;
    }

    /**
     * The content type of the page or endpoint the URL points to.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The actual URL string.
     */
    public CreateCustomerPaymentChangePaymentState withHref(String href) {
        Utils.checkNotNull(href, "href");
        this.href = Optional.ofNullable(href);
        return this;
    }

    /**
     * The actual URL string.
     */
    public CreateCustomerPaymentChangePaymentState withHref(Optional<String> href) {
        Utils.checkNotNull(href, "href");
        this.href = href;
        return this;
    }

    /**
     * The content type of the page or endpoint the URL points to.
     */
    public CreateCustomerPaymentChangePaymentState withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The content type of the page or endpoint the URL points to.
     */
    public CreateCustomerPaymentChangePaymentState withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCustomerPaymentChangePaymentState other = (CreateCustomerPaymentChangePaymentState) o;
        return 
            Objects.deepEquals(this.href, other.href) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            href,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCustomerPaymentChangePaymentState.class,
                "href", href,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<String> href = Optional.empty();
 
        private Optional<String> type = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The actual URL string.
         */
        public Builder href(String href) {
            Utils.checkNotNull(href, "href");
            this.href = Optional.ofNullable(href);
            return this;
        }

        /**
         * The actual URL string.
         */
        public Builder href(Optional<String> href) {
            Utils.checkNotNull(href, "href");
            this.href = href;
            return this;
        }

        /**
         * The content type of the page or endpoint the URL points to.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The content type of the page or endpoint the URL points to.
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public CreateCustomerPaymentChangePaymentState build() {
            return new CreateCustomerPaymentChangePaymentState(
                href,
                type);
        }
    }
}
