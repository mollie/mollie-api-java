/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

/**
 * CreateWebhookResponseBody
 * 
 * <p>The webhook object.
 */
public class CreateWebhookResponseBody {
    /**
     * Indicates the response contains a webhook subscription object. Will always contain the string `webhook` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The subscription's events destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * The identifier uniquely referring to the profile that created the subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileId")
    private Optional<String> profileId;

    /**
     * The subscription's date time of creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * The subscription's name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The events types that are subscribed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventTypes")
    private Optional<? extends List<String>> eventTypes;

    /**
     * The subscription's current status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends CreateWebhookStatus> status;

    /**
     * The subscription's mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<? extends CreateWebhookMode> mode;

    /**
     * The subscription's secret.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookSecret")
    private Optional<String> webhookSecret;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends CreateWebhookLinks> links;

    @JsonCreator
    public CreateWebhookResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("profileId") Optional<String> profileId,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("eventTypes") Optional<? extends List<String>> eventTypes,
            @JsonProperty("status") Optional<? extends CreateWebhookStatus> status,
            @JsonProperty("mode") Optional<? extends CreateWebhookMode> mode,
            @JsonProperty("webhookSecret") Optional<String> webhookSecret,
            @JsonProperty("_links") Optional<? extends CreateWebhookLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(eventTypes, "eventTypes");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(webhookSecret, "webhookSecret");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.url = url;
        this.profileId = profileId;
        this.createdAt = createdAt;
        this.name = name;
        this.eventTypes = eventTypes;
        this.status = status;
        this.mode = mode;
        this.webhookSecret = webhookSecret;
        this.links = links;
    }
    
    public CreateWebhookResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a webhook subscription object. Will always contain the string `webhook` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this subscription.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The subscription's events destination.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * The identifier uniquely referring to the profile that created the subscription.
     */
    @JsonIgnore
    public Optional<String> profileId() {
        return profileId;
    }

    /**
     * The subscription's date time of creation.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * The subscription's name.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The events types that are subscribed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> eventTypes() {
        return (Optional<List<String>>) eventTypes;
    }

    /**
     * The subscription's current status.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateWebhookStatus> status() {
        return (Optional<CreateWebhookStatus>) status;
    }

    /**
     * The subscription's mode.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateWebhookMode> mode() {
        return (Optional<CreateWebhookMode>) mode;
    }

    /**
     * The subscription's secret.
     */
    @JsonIgnore
    public Optional<String> webhookSecret() {
        return webhookSecret;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateWebhookLinks> links() {
        return (Optional<CreateWebhookLinks>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a webhook subscription object. Will always contain the string `webhook` for this endpoint.
     */
    public CreateWebhookResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains a webhook subscription object. Will always contain the string `webhook` for this endpoint.
     */
    public CreateWebhookResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this subscription.
     */
    public CreateWebhookResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * The identifier uniquely referring to this subscription.
     */
    public CreateWebhookResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The subscription's events destination.
     */
    public CreateWebhookResponseBody withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }


    /**
     * The subscription's events destination.
     */
    public CreateWebhookResponseBody withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The identifier uniquely referring to the profile that created the subscription.
     */
    public CreateWebhookResponseBody withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = Optional.ofNullable(profileId);
        return this;
    }


    /**
     * The identifier uniquely referring to the profile that created the subscription.
     */
    public CreateWebhookResponseBody withProfileId(Optional<String> profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * The subscription's date time of creation.
     */
    public CreateWebhookResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    /**
     * The subscription's date time of creation.
     */
    public CreateWebhookResponseBody withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The subscription's name.
     */
    public CreateWebhookResponseBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * The subscription's name.
     */
    public CreateWebhookResponseBody withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The events types that are subscribed.
     */
    public CreateWebhookResponseBody withEventTypes(List<String> eventTypes) {
        Utils.checkNotNull(eventTypes, "eventTypes");
        this.eventTypes = Optional.ofNullable(eventTypes);
        return this;
    }


    /**
     * The events types that are subscribed.
     */
    public CreateWebhookResponseBody withEventTypes(Optional<? extends List<String>> eventTypes) {
        Utils.checkNotNull(eventTypes, "eventTypes");
        this.eventTypes = eventTypes;
        return this;
    }

    /**
     * The subscription's current status.
     */
    public CreateWebhookResponseBody withStatus(CreateWebhookStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * The subscription's current status.
     */
    public CreateWebhookResponseBody withStatus(Optional<? extends CreateWebhookStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The subscription's mode.
     */
    public CreateWebhookResponseBody withMode(CreateWebhookMode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }


    /**
     * The subscription's mode.
     */
    public CreateWebhookResponseBody withMode(Optional<? extends CreateWebhookMode> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The subscription's secret.
     */
    public CreateWebhookResponseBody withWebhookSecret(String webhookSecret) {
        Utils.checkNotNull(webhookSecret, "webhookSecret");
        this.webhookSecret = Optional.ofNullable(webhookSecret);
        return this;
    }


    /**
     * The subscription's secret.
     */
    public CreateWebhookResponseBody withWebhookSecret(Optional<String> webhookSecret) {
        Utils.checkNotNull(webhookSecret, "webhookSecret");
        this.webhookSecret = webhookSecret;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public CreateWebhookResponseBody withLinks(CreateWebhookLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public CreateWebhookResponseBody withLinks(Optional<? extends CreateWebhookLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateWebhookResponseBody other = (CreateWebhookResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.profileId, other.profileId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.eventTypes, other.eventTypes) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.webhookSecret, other.webhookSecret) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, url,
            profileId, createdAt, name,
            eventTypes, status, mode,
            webhookSecret, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateWebhookResponseBody.class,
                "resource", resource,
                "id", id,
                "url", url,
                "profileId", profileId,
                "createdAt", createdAt,
                "name", name,
                "eventTypes", eventTypes,
                "status", status,
                "mode", mode,
                "webhookSecret", webhookSecret,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource;

        private Optional<String> id = Optional.empty();

        private Optional<String> url = Optional.empty();

        private Optional<String> profileId = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<? extends List<String>> eventTypes = Optional.empty();

        private Optional<? extends CreateWebhookStatus> status = Optional.empty();

        private Optional<? extends CreateWebhookMode> mode = Optional.empty();

        private Optional<String> webhookSecret = Optional.empty();

        private Optional<? extends CreateWebhookLinks> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a webhook subscription object. Will always contain the string `webhook` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a webhook subscription object. Will always contain the string `webhook` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this subscription.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this subscription.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The subscription's events destination.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The subscription's events destination.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }


        /**
         * The identifier uniquely referring to the profile that created the subscription.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = Optional.ofNullable(profileId);
            return this;
        }

        /**
         * The identifier uniquely referring to the profile that created the subscription.
         */
        public Builder profileId(Optional<String> profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }


        /**
         * The subscription's date time of creation.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The subscription's date time of creation.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The subscription's name.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The subscription's name.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The events types that are subscribed.
         */
        public Builder eventTypes(List<String> eventTypes) {
            Utils.checkNotNull(eventTypes, "eventTypes");
            this.eventTypes = Optional.ofNullable(eventTypes);
            return this;
        }

        /**
         * The events types that are subscribed.
         */
        public Builder eventTypes(Optional<? extends List<String>> eventTypes) {
            Utils.checkNotNull(eventTypes, "eventTypes");
            this.eventTypes = eventTypes;
            return this;
        }


        /**
         * The subscription's current status.
         */
        public Builder status(CreateWebhookStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The subscription's current status.
         */
        public Builder status(Optional<? extends CreateWebhookStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The subscription's mode.
         */
        public Builder mode(CreateWebhookMode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * The subscription's mode.
         */
        public Builder mode(Optional<? extends CreateWebhookMode> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * The subscription's secret.
         */
        public Builder webhookSecret(String webhookSecret) {
            Utils.checkNotNull(webhookSecret, "webhookSecret");
            this.webhookSecret = Optional.ofNullable(webhookSecret);
            return this;
        }

        /**
         * The subscription's secret.
         */
        public Builder webhookSecret(Optional<String> webhookSecret) {
            Utils.checkNotNull(webhookSecret, "webhookSecret");
            this.webhookSecret = webhookSecret;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(CreateWebhookLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends CreateWebhookLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public CreateWebhookResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }

            return new CreateWebhookResponseBody(
                resource, id, url,
                profileId, createdAt, name,
                eventTypes, status, mode,
                webhookSecret, links);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"webhook\"",
                        new TypeReference<Optional<String>>() {});
    }
}
