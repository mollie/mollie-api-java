/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class UpdateOrderLineRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageUrl")
    private JsonNullable<String> imageUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productUrl")
    private JsonNullable<String> productUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<String> sku;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<String> metadata;

    /**
     * Required when a `unitPrice`, `discountAmount`, `totalAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private JsonNullable<Long> quantity;

    /**
     * Required when a `quantity`, `discountAmount`, `totalAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitPrice")
    private JsonNullable<? extends UpdateOrderLineUnitPrice> unitPrice;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountAmount")
    private JsonNullable<? extends UpdateOrderLineDiscountAmount> discountAmount;

    /**
     * Required when a `quantity`, `unitPrice`, `discountAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private JsonNullable<? extends UpdateOrderLineTotalAmount> totalAmount;

    /**
     * Required when a `quantity`, `unitPrice`, `discountAmount`, `totalAmount`, or `vatRate` is also provided in the same request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatAmount")
    private JsonNullable<? extends UpdateOrderLineVatAmount> vatAmount;

    /**
     * Required when a `quantity`, `unitPrice`, `discountAmount`, `totalAmount`, or `vatAmount` is also provided in the same request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatRate")
    private JsonNullable<String> vatRate;

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public UpdateOrderLineRequestBody(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("imageUrl") JsonNullable<String> imageUrl,
            @JsonProperty("productUrl") JsonNullable<String> productUrl,
            @JsonProperty("sku") JsonNullable<String> sku,
            @JsonProperty("metadata") JsonNullable<String> metadata,
            @JsonProperty("quantity") JsonNullable<Long> quantity,
            @JsonProperty("unitPrice") JsonNullable<? extends UpdateOrderLineUnitPrice> unitPrice,
            @JsonProperty("discountAmount") JsonNullable<? extends UpdateOrderLineDiscountAmount> discountAmount,
            @JsonProperty("totalAmount") JsonNullable<? extends UpdateOrderLineTotalAmount> totalAmount,
            @JsonProperty("vatAmount") JsonNullable<? extends UpdateOrderLineVatAmount> vatAmount,
            @JsonProperty("vatRate") JsonNullable<String> vatRate,
            @JsonProperty("testmode") JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(productUrl, "productUrl");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(unitPrice, "unitPrice");
        Utils.checkNotNull(discountAmount, "discountAmount");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(vatAmount, "vatAmount");
        Utils.checkNotNull(vatRate, "vatRate");
        Utils.checkNotNull(testmode, "testmode");
        this.name = name;
        this.imageUrl = imageUrl;
        this.productUrl = productUrl;
        this.sku = sku;
        this.metadata = metadata;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.discountAmount = discountAmount;
        this.totalAmount = totalAmount;
        this.vatAmount = vatAmount;
        this.vatRate = vatRate;
        this.testmode = testmode;
    }
    
    public UpdateOrderLineRequestBody() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    @JsonIgnore
    public JsonNullable<String> imageUrl() {
        return imageUrl;
    }

    @JsonIgnore
    public JsonNullable<String> productUrl() {
        return productUrl;
    }

    @JsonIgnore
    public JsonNullable<String> sku() {
        return sku;
    }

    @JsonIgnore
    public JsonNullable<String> metadata() {
        return metadata;
    }

    /**
     * Required when a `unitPrice`, `discountAmount`, `totalAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
     */
    @JsonIgnore
    public JsonNullable<Long> quantity() {
        return quantity;
    }

    /**
     * Required when a `quantity`, `discountAmount`, `totalAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<UpdateOrderLineUnitPrice> unitPrice() {
        return (JsonNullable<UpdateOrderLineUnitPrice>) unitPrice;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<UpdateOrderLineDiscountAmount> discountAmount() {
        return (JsonNullable<UpdateOrderLineDiscountAmount>) discountAmount;
    }

    /**
     * Required when a `quantity`, `unitPrice`, `discountAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<UpdateOrderLineTotalAmount> totalAmount() {
        return (JsonNullable<UpdateOrderLineTotalAmount>) totalAmount;
    }

    /**
     * Required when a `quantity`, `unitPrice`, `discountAmount`, `totalAmount`, or `vatRate` is also provided in the same request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<UpdateOrderLineVatAmount> vatAmount() {
        return (JsonNullable<UpdateOrderLineVatAmount>) vatAmount;
    }

    /**
     * Required when a `quantity`, `unitPrice`, `discountAmount`, `totalAmount`, or `vatAmount` is also provided in the same request.
     */
    @JsonIgnore
    public JsonNullable<String> vatRate() {
        return vatRate;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateOrderLineRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    public UpdateOrderLineRequestBody withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public UpdateOrderLineRequestBody withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = JsonNullable.of(imageUrl);
        return this;
    }

    public UpdateOrderLineRequestBody withImageUrl(JsonNullable<String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    public UpdateOrderLineRequestBody withProductUrl(String productUrl) {
        Utils.checkNotNull(productUrl, "productUrl");
        this.productUrl = JsonNullable.of(productUrl);
        return this;
    }

    public UpdateOrderLineRequestBody withProductUrl(JsonNullable<String> productUrl) {
        Utils.checkNotNull(productUrl, "productUrl");
        this.productUrl = productUrl;
        return this;
    }

    public UpdateOrderLineRequestBody withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = JsonNullable.of(sku);
        return this;
    }

    public UpdateOrderLineRequestBody withSku(JsonNullable<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    public UpdateOrderLineRequestBody withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    public UpdateOrderLineRequestBody withMetadata(JsonNullable<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Required when a `unitPrice`, `discountAmount`, `totalAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
     */
    public UpdateOrderLineRequestBody withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = JsonNullable.of(quantity);
        return this;
    }

    /**
     * Required when a `unitPrice`, `discountAmount`, `totalAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
     */
    public UpdateOrderLineRequestBody withQuantity(JsonNullable<Long> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * Required when a `quantity`, `discountAmount`, `totalAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
     */
    public UpdateOrderLineRequestBody withUnitPrice(UpdateOrderLineUnitPrice unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = JsonNullable.of(unitPrice);
        return this;
    }

    /**
     * Required when a `quantity`, `discountAmount`, `totalAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
     */
    public UpdateOrderLineRequestBody withUnitPrice(JsonNullable<? extends UpdateOrderLineUnitPrice> unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = unitPrice;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public UpdateOrderLineRequestBody withDiscountAmount(UpdateOrderLineDiscountAmount discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = JsonNullable.of(discountAmount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public UpdateOrderLineRequestBody withDiscountAmount(JsonNullable<? extends UpdateOrderLineDiscountAmount> discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = discountAmount;
        return this;
    }

    /**
     * Required when a `quantity`, `unitPrice`, `discountAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
     */
    public UpdateOrderLineRequestBody withTotalAmount(UpdateOrderLineTotalAmount totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }

    /**
     * Required when a `quantity`, `unitPrice`, `discountAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
     */
    public UpdateOrderLineRequestBody withTotalAmount(JsonNullable<? extends UpdateOrderLineTotalAmount> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Required when a `quantity`, `unitPrice`, `discountAmount`, `totalAmount`, or `vatRate` is also provided in the same request.
     */
    public UpdateOrderLineRequestBody withVatAmount(UpdateOrderLineVatAmount vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = JsonNullable.of(vatAmount);
        return this;
    }

    /**
     * Required when a `quantity`, `unitPrice`, `discountAmount`, `totalAmount`, or `vatRate` is also provided in the same request.
     */
    public UpdateOrderLineRequestBody withVatAmount(JsonNullable<? extends UpdateOrderLineVatAmount> vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = vatAmount;
        return this;
    }

    /**
     * Required when a `quantity`, `unitPrice`, `discountAmount`, `totalAmount`, or `vatAmount` is also provided in the same request.
     */
    public UpdateOrderLineRequestBody withVatRate(String vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = JsonNullable.of(vatRate);
        return this;
    }

    /**
     * Required when a `quantity`, `unitPrice`, `discountAmount`, `totalAmount`, or `vatAmount` is also provided in the same request.
     */
    public UpdateOrderLineRequestBody withVatRate(JsonNullable<String> vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = vatRate;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public UpdateOrderLineRequestBody withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public UpdateOrderLineRequestBody withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateOrderLineRequestBody other = (UpdateOrderLineRequestBody) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.imageUrl, other.imageUrl) &&
            Objects.deepEquals(this.productUrl, other.productUrl) &&
            Objects.deepEquals(this.sku, other.sku) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.unitPrice, other.unitPrice) &&
            Objects.deepEquals(this.discountAmount, other.discountAmount) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.vatAmount, other.vatAmount) &&
            Objects.deepEquals(this.vatRate, other.vatRate) &&
            Objects.deepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            imageUrl,
            productUrl,
            sku,
            metadata,
            quantity,
            unitPrice,
            discountAmount,
            totalAmount,
            vatAmount,
            vatRate,
            testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateOrderLineRequestBody.class,
                "name", name,
                "imageUrl", imageUrl,
                "productUrl", productUrl,
                "sku", sku,
                "metadata", metadata,
                "quantity", quantity,
                "unitPrice", unitPrice,
                "discountAmount", discountAmount,
                "totalAmount", totalAmount,
                "vatAmount", vatAmount,
                "vatRate", vatRate,
                "testmode", testmode);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> imageUrl = JsonNullable.undefined();
 
        private JsonNullable<String> productUrl = JsonNullable.undefined();
 
        private JsonNullable<String> sku = JsonNullable.undefined();
 
        private JsonNullable<String> metadata = JsonNullable.undefined();
 
        private JsonNullable<Long> quantity = JsonNullable.undefined();
 
        private JsonNullable<? extends UpdateOrderLineUnitPrice> unitPrice = JsonNullable.undefined();
 
        private JsonNullable<? extends UpdateOrderLineDiscountAmount> discountAmount = JsonNullable.undefined();
 
        private JsonNullable<? extends UpdateOrderLineTotalAmount> totalAmount = JsonNullable.undefined();
 
        private JsonNullable<? extends UpdateOrderLineVatAmount> vatAmount = JsonNullable.undefined();
 
        private JsonNullable<String> vatRate = JsonNullable.undefined();
 
        private JsonNullable<Boolean> testmode;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = JsonNullable.of(imageUrl);
            return this;
        }

        public Builder imageUrl(JsonNullable<String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }

        public Builder productUrl(String productUrl) {
            Utils.checkNotNull(productUrl, "productUrl");
            this.productUrl = JsonNullable.of(productUrl);
            return this;
        }

        public Builder productUrl(JsonNullable<String> productUrl) {
            Utils.checkNotNull(productUrl, "productUrl");
            this.productUrl = productUrl;
            return this;
        }

        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = JsonNullable.of(sku);
            return this;
        }

        public Builder sku(JsonNullable<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        public Builder metadata(JsonNullable<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Required when a `unitPrice`, `discountAmount`, `totalAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = JsonNullable.of(quantity);
            return this;
        }

        /**
         * Required when a `unitPrice`, `discountAmount`, `totalAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
         */
        public Builder quantity(JsonNullable<Long> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * Required when a `quantity`, `discountAmount`, `totalAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
         */
        public Builder unitPrice(UpdateOrderLineUnitPrice unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = JsonNullable.of(unitPrice);
            return this;
        }

        /**
         * Required when a `quantity`, `discountAmount`, `totalAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
         */
        public Builder unitPrice(JsonNullable<? extends UpdateOrderLineUnitPrice> unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = unitPrice;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder discountAmount(UpdateOrderLineDiscountAmount discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = JsonNullable.of(discountAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder discountAmount(JsonNullable<? extends UpdateOrderLineDiscountAmount> discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = discountAmount;
            return this;
        }

        /**
         * Required when a `quantity`, `unitPrice`, `discountAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
         */
        public Builder totalAmount(UpdateOrderLineTotalAmount totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        /**
         * Required when a `quantity`, `unitPrice`, `discountAmount`, `vatAmount`, or `vatRate` is also provided in the same request.
         */
        public Builder totalAmount(JsonNullable<? extends UpdateOrderLineTotalAmount> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Required when a `quantity`, `unitPrice`, `discountAmount`, `totalAmount`, or `vatRate` is also provided in the same request.
         */
        public Builder vatAmount(UpdateOrderLineVatAmount vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = JsonNullable.of(vatAmount);
            return this;
        }

        /**
         * Required when a `quantity`, `unitPrice`, `discountAmount`, `totalAmount`, or `vatRate` is also provided in the same request.
         */
        public Builder vatAmount(JsonNullable<? extends UpdateOrderLineVatAmount> vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = vatAmount;
            return this;
        }

        /**
         * Required when a `quantity`, `unitPrice`, `discountAmount`, `totalAmount`, or `vatAmount` is also provided in the same request.
         */
        public Builder vatRate(String vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = JsonNullable.of(vatRate);
            return this;
        }

        /**
         * Required when a `quantity`, `unitPrice`, `discountAmount`, `totalAmount`, or `vatAmount` is also provided in the same request.
         */
        public Builder vatRate(JsonNullable<String> vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = vatRate;
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
         * 
         * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
         * 
         * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }
        
        public UpdateOrderLineRequestBody build() {
            if (testmode == null) {
                testmode = _SINGLETON_VALUE_Testmode.value();
            }            return new UpdateOrderLineRequestBody(
                name,
                imageUrl,
                productUrl,
                sku,
                metadata,
                quantity,
                unitPrice,
                discountAmount,
                totalAmount,
                vatAmount,
                vatRate,
                testmode);
        }

        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_Testmode =
                new LazySingletonValue<>(
                        "testmode",
                        "false",
                        new TypeReference<JsonNullable<Boolean>>() {});
    }
}

