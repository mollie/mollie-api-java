/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class CreateProfileRequestBody {
    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    @JsonProperty("website")
    private String website;

    /**
     * The email address associated with the profile's trade name or brand.
     */
    @JsonProperty("email")
    private String email;

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    @JsonProperty("phone")
    private String phone;

    /**
     * The products or services offered by the profile's website or application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countriesOfActivity")
    private Optional<? extends List<String>> countriesOfActivity;

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types#business-category) for all possible options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessCategory")
    private Optional<String> businessCategory;

    @JsonCreator
    public CreateProfileRequestBody(
            @JsonProperty("name") String name,
            @JsonProperty("website") String website,
            @JsonProperty("email") String email,
            @JsonProperty("phone") String phone,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("countriesOfActivity") Optional<? extends List<String>> countriesOfActivity,
            @JsonProperty("businessCategory") Optional<String> businessCategory) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(website, "website");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
        Utils.checkNotNull(businessCategory, "businessCategory");
        this.name = name;
        this.website = website;
        this.email = email;
        this.phone = phone;
        this.description = description;
        this.countriesOfActivity = countriesOfActivity;
        this.businessCategory = businessCategory;
    }
    
    public CreateProfileRequestBody(
            String name,
            String website,
            String email,
            String phone) {
        this(name, website, email,
            phone, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    @JsonIgnore
    public String website() {
        return website;
    }

    /**
     * The email address associated with the profile's trade name or brand.
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    @JsonIgnore
    public String phone() {
        return phone;
    }

    /**
     * The products or services offered by the profile's website or application.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> countriesOfActivity() {
        return (Optional<List<String>>) countriesOfActivity;
    }

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types#business-category) for all possible options.
     */
    @JsonIgnore
    public Optional<String> businessCategory() {
        return businessCategory;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    public CreateProfileRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    public CreateProfileRequestBody withWebsite(String website) {
        Utils.checkNotNull(website, "website");
        this.website = website;
        return this;
    }

    /**
     * The email address associated with the profile's trade name or brand.
     */
    public CreateProfileRequestBody withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    public CreateProfileRequestBody withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * The products or services offered by the profile's website or application.
     */
    public CreateProfileRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * The products or services offered by the profile's website or application.
     */
    public CreateProfileRequestBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    public CreateProfileRequestBody withCountriesOfActivity(List<String> countriesOfActivity) {
        Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
        this.countriesOfActivity = Optional.ofNullable(countriesOfActivity);
        return this;
    }


    /**
     * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    public CreateProfileRequestBody withCountriesOfActivity(Optional<? extends List<String>> countriesOfActivity) {
        Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
        this.countriesOfActivity = countriesOfActivity;
        return this;
    }

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types#business-category) for all possible options.
     */
    public CreateProfileRequestBody withBusinessCategory(String businessCategory) {
        Utils.checkNotNull(businessCategory, "businessCategory");
        this.businessCategory = Optional.ofNullable(businessCategory);
        return this;
    }


    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types#business-category) for all possible options.
     */
    public CreateProfileRequestBody withBusinessCategory(Optional<String> businessCategory) {
        Utils.checkNotNull(businessCategory, "businessCategory");
        this.businessCategory = businessCategory;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateProfileRequestBody other = (CreateProfileRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.website, other.website) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.phone, other.phone) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.countriesOfActivity, other.countriesOfActivity) &&
            Utils.enhancedDeepEquals(this.businessCategory, other.businessCategory);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, website, email,
            phone, description, countriesOfActivity,
            businessCategory);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateProfileRequestBody.class,
                "name", name,
                "website", website,
                "email", email,
                "phone", phone,
                "description", description,
                "countriesOfActivity", countriesOfActivity,
                "businessCategory", businessCategory);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private String website;

        private String email;

        private String phone;

        private Optional<String> description = Optional.empty();

        private Optional<? extends List<String>> countriesOfActivity = Optional.empty();

        private Optional<String> businessCategory = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
         */
        public Builder website(String website) {
            Utils.checkNotNull(website, "website");
            this.website = website;
            return this;
        }


        /**
         * The email address associated with the profile's trade name or brand.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }


        /**
         * The phone number associated with the profile's trade name or brand.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }


        /**
         * The products or services offered by the profile's website or application.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The products or services offered by the profile's website or application.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         */
        public Builder countriesOfActivity(List<String> countriesOfActivity) {
            Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
            this.countriesOfActivity = Optional.ofNullable(countriesOfActivity);
            return this;
        }

        /**
         * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         */
        public Builder countriesOfActivity(Optional<? extends List<String>> countriesOfActivity) {
            Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
            this.countriesOfActivity = countriesOfActivity;
            return this;
        }


        /**
         * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types#business-category) for all possible options.
         */
        public Builder businessCategory(String businessCategory) {
            Utils.checkNotNull(businessCategory, "businessCategory");
            this.businessCategory = Optional.ofNullable(businessCategory);
            return this;
        }

        /**
         * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types#business-category) for all possible options.
         */
        public Builder businessCategory(Optional<String> businessCategory) {
            Utils.checkNotNull(businessCategory, "businessCategory");
            this.businessCategory = businessCategory;
            return this;
        }

        public CreateProfileRequestBody build() {

            return new CreateProfileRequestBody(
                name, website, email,
                phone, description, countriesOfActivity,
                businessCategory);
        }

    }
}
