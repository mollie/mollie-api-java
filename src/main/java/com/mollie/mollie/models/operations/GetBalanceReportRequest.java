/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetBalanceReportRequest {
    /**
     * Provide the ID of the related balance.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=balanceId")
    private String balanceId;

    /**
     * The start date of the report, in `YYYY-MM-DD` format. The from date is
     * 'inclusive', and in Central European Time. This means a report with for example `from=2024-01-01` will
     * include transactions from 2024-01-01 0:00:00 CET and onwards.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=from")
    private String from;

    /**
     * The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
     * This means a report with for example `until=2024-02-01` will include transactions up until
     * 2024-01-31 23:59:59 CET.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=until")
    private String until;

    /**
     * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped
     * by status (e.g. `pending`, `available`), then by transaction type, and then by other sub-groupings where
     * available (e.g. payment method).
     * 
     * <p>With the `transaction-categories` format, transactions are grouped by
     * transaction type, then by status, and then again by other sub-groupings where available.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=grouping")
    private JsonNullable<? extends Grouping> grouping;

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=testmode")
    private JsonNullable<Boolean> testmode;

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=idempotency-key")
    private Optional<String> idempotencyKey;

    @JsonCreator
    public GetBalanceReportRequest(
            String balanceId,
            String from,
            String until,
            JsonNullable<? extends Grouping> grouping,
            JsonNullable<Boolean> testmode,
            Optional<String> idempotencyKey) {
        Utils.checkNotNull(balanceId, "balanceId");
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(until, "until");
        Utils.checkNotNull(grouping, "grouping");
        Utils.checkNotNull(testmode, "testmode");
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.balanceId = balanceId;
        this.from = from;
        this.until = until;
        this.grouping = grouping;
        this.testmode = testmode;
        this.idempotencyKey = idempotencyKey;
    }
    
    public GetBalanceReportRequest(
            String balanceId,
            String from,
            String until) {
        this(balanceId, from, until,
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Provide the ID of the related balance.
     */
    @JsonIgnore
    public String balanceId() {
        return balanceId;
    }

    /**
     * The start date of the report, in `YYYY-MM-DD` format. The from date is
     * 'inclusive', and in Central European Time. This means a report with for example `from=2024-01-01` will
     * include transactions from 2024-01-01 0:00:00 CET and onwards.
     */
    @JsonIgnore
    public String from() {
        return from;
    }

    /**
     * The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
     * This means a report with for example `until=2024-02-01` will include transactions up until
     * 2024-01-31 23:59:59 CET.
     */
    @JsonIgnore
    public String until() {
        return until;
    }

    /**
     * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped
     * by status (e.g. `pending`, `available`), then by transaction type, and then by other sub-groupings where
     * available (e.g. payment method).
     * 
     * <p>With the `transaction-categories` format, transactions are grouped by
     * transaction type, then by status, and then again by other sub-groupings where available.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Grouping> grouping() {
        return (JsonNullable<Grouping>) grouping;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Provide the ID of the related balance.
     */
    public GetBalanceReportRequest withBalanceId(String balanceId) {
        Utils.checkNotNull(balanceId, "balanceId");
        this.balanceId = balanceId;
        return this;
    }

    /**
     * The start date of the report, in `YYYY-MM-DD` format. The from date is
     * 'inclusive', and in Central European Time. This means a report with for example `from=2024-01-01` will
     * include transactions from 2024-01-01 0:00:00 CET and onwards.
     */
    public GetBalanceReportRequest withFrom(String from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    /**
     * The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
     * This means a report with for example `until=2024-02-01` will include transactions up until
     * 2024-01-31 23:59:59 CET.
     */
    public GetBalanceReportRequest withUntil(String until) {
        Utils.checkNotNull(until, "until");
        this.until = until;
        return this;
    }

    /**
     * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped
     * by status (e.g. `pending`, `available`), then by transaction type, and then by other sub-groupings where
     * available (e.g. payment method).
     * 
     * <p>With the `transaction-categories` format, transactions are grouped by
     * transaction type, then by status, and then again by other sub-groupings where available.
     */
    public GetBalanceReportRequest withGrouping(Grouping grouping) {
        Utils.checkNotNull(grouping, "grouping");
        this.grouping = JsonNullable.of(grouping);
        return this;
    }

    /**
     * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped
     * by status (e.g. `pending`, `available`), then by transaction type, and then by other sub-groupings where
     * available (e.g. payment method).
     * 
     * <p>With the `transaction-categories` format, transactions are grouped by
     * transaction type, then by status, and then again by other sub-groupings where available.
     */
    public GetBalanceReportRequest withGrouping(JsonNullable<? extends Grouping> grouping) {
        Utils.checkNotNull(grouping, "grouping");
        this.grouping = grouping;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public GetBalanceReportRequest withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public GetBalanceReportRequest withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public GetBalanceReportRequest withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }


    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public GetBalanceReportRequest withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetBalanceReportRequest other = (GetBalanceReportRequest) o;
        return 
            Utils.enhancedDeepEquals(this.balanceId, other.balanceId) &&
            Utils.enhancedDeepEquals(this.from, other.from) &&
            Utils.enhancedDeepEquals(this.until, other.until) &&
            Utils.enhancedDeepEquals(this.grouping, other.grouping) &&
            Utils.enhancedDeepEquals(this.testmode, other.testmode) &&
            Utils.enhancedDeepEquals(this.idempotencyKey, other.idempotencyKey);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            balanceId, from, until,
            grouping, testmode, idempotencyKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetBalanceReportRequest.class,
                "balanceId", balanceId,
                "from", from,
                "until", until,
                "grouping", grouping,
                "testmode", testmode,
                "idempotencyKey", idempotencyKey);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String balanceId;

        private String from;

        private String until;

        private JsonNullable<? extends Grouping> grouping = JsonNullable.undefined();

        private JsonNullable<Boolean> testmode = JsonNullable.undefined();

        private Optional<String> idempotencyKey = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Provide the ID of the related balance.
         */
        public Builder balanceId(String balanceId) {
            Utils.checkNotNull(balanceId, "balanceId");
            this.balanceId = balanceId;
            return this;
        }


        /**
         * The start date of the report, in `YYYY-MM-DD` format. The from date is
         * 'inclusive', and in Central European Time. This means a report with for example `from=2024-01-01` will
         * include transactions from 2024-01-01 0:00:00 CET and onwards.
         */
        public Builder from(String from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }


        /**
         * The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
         * This means a report with for example `until=2024-02-01` will include transactions up until
         * 2024-01-31 23:59:59 CET.
         */
        public Builder until(String until) {
            Utils.checkNotNull(until, "until");
            this.until = until;
            return this;
        }


        /**
         * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped
         * by status (e.g. `pending`, `available`), then by transaction type, and then by other sub-groupings where
         * available (e.g. payment method).
         * 
         * <p>With the `transaction-categories` format, transactions are grouped by
         * transaction type, then by status, and then again by other sub-groupings where available.
         */
        public Builder grouping(Grouping grouping) {
            Utils.checkNotNull(grouping, "grouping");
            this.grouping = JsonNullable.of(grouping);
            return this;
        }

        /**
         * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped
         * by status (e.g. `pending`, `available`), then by transaction type, and then by other sub-groupings where
         * available (e.g. payment method).
         * 
         * <p>With the `transaction-categories` format, transactions are grouped by
         * transaction type, then by status, and then again by other sub-groupings where available.
         */
        public Builder grouping(JsonNullable<? extends Grouping> grouping) {
            Utils.checkNotNull(grouping, "grouping");
            this.grouping = grouping;
            return this;
        }


        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
         * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
         * setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
         * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
         * setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }


        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public GetBalanceReportRequest build() {

            return new GetBalanceReportRequest(
                balanceId, from, until,
                grouping, testmode, idempotencyKey);
        }

    }
}
