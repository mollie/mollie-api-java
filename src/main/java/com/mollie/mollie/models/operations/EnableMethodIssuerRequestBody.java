/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class EnableMethodIssuerRequestBody {

    /**
     * When enabling a voucher issuer, an inbetween party may be involved which you have a contract with.
     * Provide the contract ID for the first time you enable an issuer via this contractor.
     * 
     * You can update the contract ID as long as it is not approved yet, by repeating the API call with a
     * different contract ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractId")
    private JsonNullable<String> contractId;

    @JsonCreator
    public EnableMethodIssuerRequestBody(
            @JsonProperty("contractId") JsonNullable<String> contractId) {
        Utils.checkNotNull(contractId, "contractId");
        this.contractId = contractId;
    }
    
    public EnableMethodIssuerRequestBody() {
        this(JsonNullable.undefined());
    }

    /**
     * When enabling a voucher issuer, an inbetween party may be involved which you have a contract with.
     * Provide the contract ID for the first time you enable an issuer via this contractor.
     * 
     * You can update the contract ID as long as it is not approved yet, by repeating the API call with a
     * different contract ID.
     */
    @JsonIgnore
    public JsonNullable<String> contractId() {
        return contractId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * When enabling a voucher issuer, an inbetween party may be involved which you have a contract with.
     * Provide the contract ID for the first time you enable an issuer via this contractor.
     * 
     * You can update the contract ID as long as it is not approved yet, by repeating the API call with a
     * different contract ID.
     */
    public EnableMethodIssuerRequestBody withContractId(String contractId) {
        Utils.checkNotNull(contractId, "contractId");
        this.contractId = JsonNullable.of(contractId);
        return this;
    }

    /**
     * When enabling a voucher issuer, an inbetween party may be involved which you have a contract with.
     * Provide the contract ID for the first time you enable an issuer via this contractor.
     * 
     * You can update the contract ID as long as it is not approved yet, by repeating the API call with a
     * different contract ID.
     */
    public EnableMethodIssuerRequestBody withContractId(JsonNullable<String> contractId) {
        Utils.checkNotNull(contractId, "contractId");
        this.contractId = contractId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EnableMethodIssuerRequestBody other = (EnableMethodIssuerRequestBody) o;
        return 
            Objects.deepEquals(this.contractId, other.contractId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            contractId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EnableMethodIssuerRequestBody.class,
                "contractId", contractId);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> contractId = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * When enabling a voucher issuer, an inbetween party may be involved which you have a contract with.
         * Provide the contract ID for the first time you enable an issuer via this contractor.
         * 
         * You can update the contract ID as long as it is not approved yet, by repeating the API call with a
         * different contract ID.
         */
        public Builder contractId(String contractId) {
            Utils.checkNotNull(contractId, "contractId");
            this.contractId = JsonNullable.of(contractId);
            return this;
        }

        /**
         * When enabling a voucher issuer, an inbetween party may be involved which you have a contract with.
         * Provide the contract ID for the first time you enable an issuer via this contractor.
         * 
         * You can update the contract ID as long as it is not approved yet, by repeating the API call with a
         * different contract ID.
         */
        public Builder contractId(JsonNullable<String> contractId) {
            Utils.checkNotNull(contractId, "contractId");
            this.contractId = contractId;
            return this;
        }
        
        public EnableMethodIssuerRequestBody build() {
            return new EnableMethodIssuerRequestBody(
                contractId);
        }
    }
}

