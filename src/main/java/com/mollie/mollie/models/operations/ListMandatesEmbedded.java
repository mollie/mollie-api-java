/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class ListMandatesEmbedded {

    /**
     * An array of mandate objects. For a complete reference of the mandate object, refer to the
     * [Get mandate endpoint](get-mandate) documentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandates")
    private Optional<? extends List<ListMandatesMandates>> mandates;

    @JsonCreator
    public ListMandatesEmbedded(
            @JsonProperty("mandates") Optional<? extends List<ListMandatesMandates>> mandates) {
        Utils.checkNotNull(mandates, "mandates");
        this.mandates = mandates;
    }
    
    public ListMandatesEmbedded() {
        this(Optional.empty());
    }

    /**
     * An array of mandate objects. For a complete reference of the mandate object, refer to the
     * [Get mandate endpoint](get-mandate) documentation.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ListMandatesMandates>> mandates() {
        return (Optional<List<ListMandatesMandates>>) mandates;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An array of mandate objects. For a complete reference of the mandate object, refer to the
     * [Get mandate endpoint](get-mandate) documentation.
     */
    public ListMandatesEmbedded withMandates(List<ListMandatesMandates> mandates) {
        Utils.checkNotNull(mandates, "mandates");
        this.mandates = Optional.ofNullable(mandates);
        return this;
    }

    /**
     * An array of mandate objects. For a complete reference of the mandate object, refer to the
     * [Get mandate endpoint](get-mandate) documentation.
     */
    public ListMandatesEmbedded withMandates(Optional<? extends List<ListMandatesMandates>> mandates) {
        Utils.checkNotNull(mandates, "mandates");
        this.mandates = mandates;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListMandatesEmbedded other = (ListMandatesEmbedded) o;
        return 
            Objects.deepEquals(this.mandates, other.mandates);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            mandates);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListMandatesEmbedded.class,
                "mandates", mandates);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<ListMandatesMandates>> mandates = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An array of mandate objects. For a complete reference of the mandate object, refer to the
         * [Get mandate endpoint](get-mandate) documentation.
         */
        public Builder mandates(List<ListMandatesMandates> mandates) {
            Utils.checkNotNull(mandates, "mandates");
            this.mandates = Optional.ofNullable(mandates);
            return this;
        }

        /**
         * An array of mandate objects. For a complete reference of the mandate object, refer to the
         * [Get mandate endpoint](get-mandate) documentation.
         */
        public Builder mandates(Optional<? extends List<ListMandatesMandates>> mandates) {
            Utils.checkNotNull(mandates, "mandates");
            this.mandates = mandates;
            return this;
        }
        
        public ListMandatesEmbedded build() {
            return new ListMandatesEmbedded(
                mandates);
        }
    }
}

