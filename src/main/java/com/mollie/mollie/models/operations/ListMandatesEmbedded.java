/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.models.components.MandateResponse;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;


public class ListMandatesEmbedded {
    /**
     * An array of mandate objects.
     */
    @JsonProperty("mandates")
    private List<MandateResponse> mandates;

    @JsonCreator
    public ListMandatesEmbedded(
            @JsonProperty("mandates") List<MandateResponse> mandates) {
        Utils.checkNotNull(mandates, "mandates");
        this.mandates = mandates;
    }

    /**
     * An array of mandate objects.
     */
    @JsonIgnore
    public List<MandateResponse> mandates() {
        return mandates;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An array of mandate objects.
     */
    public ListMandatesEmbedded withMandates(List<MandateResponse> mandates) {
        Utils.checkNotNull(mandates, "mandates");
        this.mandates = mandates;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListMandatesEmbedded other = (ListMandatesEmbedded) o;
        return 
            Utils.enhancedDeepEquals(this.mandates, other.mandates);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            mandates);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListMandatesEmbedded.class,
                "mandates", mandates);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<MandateResponse> mandates;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * An array of mandate objects.
         */
        public Builder mandates(List<MandateResponse> mandates) {
            Utils.checkNotNull(mandates, "mandates");
            this.mandates = mandates;
            return this;
        }

        public ListMandatesEmbedded build() {

            return new ListMandatesEmbedded(
                mandates);
        }

    }
}
