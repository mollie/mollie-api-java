/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class RevokeMandateRequest {
    /**
     * Provide the ID of the related customer.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=customerId")
    private String customerId;

    /**
     * Provide the ID of the related mandate.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=mandateId")
    private String mandateId;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends RevokeMandateRequestBody> requestBody;

    @JsonCreator
    public RevokeMandateRequest(
            String customerId,
            String mandateId,
            Optional<? extends RevokeMandateRequestBody> requestBody) {
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(mandateId, "mandateId");
        Utils.checkNotNull(requestBody, "requestBody");
        this.customerId = customerId;
        this.mandateId = mandateId;
        this.requestBody = requestBody;
    }
    
    public RevokeMandateRequest(
            String customerId,
            String mandateId) {
        this(customerId, mandateId, Optional.empty());
    }

    /**
     * Provide the ID of the related customer.
     */
    @JsonIgnore
    public String customerId() {
        return customerId;
    }

    /**
     * Provide the ID of the related mandate.
     */
    @JsonIgnore
    public String mandateId() {
        return mandateId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RevokeMandateRequestBody> requestBody() {
        return (Optional<RevokeMandateRequestBody>) requestBody;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Provide the ID of the related customer.
     */
    public RevokeMandateRequest withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * Provide the ID of the related mandate.
     */
    public RevokeMandateRequest withMandateId(String mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = mandateId;
        return this;
    }

    public RevokeMandateRequest withRequestBody(RevokeMandateRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }


    public RevokeMandateRequest withRequestBody(Optional<? extends RevokeMandateRequestBody> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RevokeMandateRequest other = (RevokeMandateRequest) o;
        return 
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.mandateId, other.mandateId) &&
            Utils.enhancedDeepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            customerId, mandateId, requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RevokeMandateRequest.class,
                "customerId", customerId,
                "mandateId", mandateId,
                "requestBody", requestBody);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String customerId;

        private String mandateId;

        private Optional<? extends RevokeMandateRequestBody> requestBody = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Provide the ID of the related customer.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * Provide the ID of the related mandate.
         */
        public Builder mandateId(String mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = mandateId;
            return this;
        }


        public Builder requestBody(RevokeMandateRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends RevokeMandateRequestBody> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        public RevokeMandateRequest build() {

            return new RevokeMandateRequest(
                customerId, mandateId, requestBody);
        }

    }
}
