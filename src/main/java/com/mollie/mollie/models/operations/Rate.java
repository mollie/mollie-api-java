/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * Rate
 * 
 * <p>The service rates, further divided into `fixed` and `percentage` costs.
 */
public class Rate {

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fixed")
    private Optional<? extends GetSettlementFixed> fixed;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentage")
    private Optional<? extends Percentage> percentage;

    @JsonCreator
    public Rate(
            @JsonProperty("fixed") Optional<? extends GetSettlementFixed> fixed,
            @JsonProperty("percentage") Optional<? extends Percentage> percentage) {
        Utils.checkNotNull(fixed, "fixed");
        Utils.checkNotNull(percentage, "percentage");
        this.fixed = fixed;
        this.percentage = percentage;
    }
    
    public Rate() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetSettlementFixed> fixed() {
        return (Optional<GetSettlementFixed>) fixed;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Percentage> percentage() {
        return (Optional<Percentage>) percentage;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public Rate withFixed(GetSettlementFixed fixed) {
        Utils.checkNotNull(fixed, "fixed");
        this.fixed = Optional.ofNullable(fixed);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public Rate withFixed(Optional<? extends GetSettlementFixed> fixed) {
        Utils.checkNotNull(fixed, "fixed");
        this.fixed = fixed;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public Rate withPercentage(Percentage percentage) {
        Utils.checkNotNull(percentage, "percentage");
        this.percentage = Optional.ofNullable(percentage);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public Rate withPercentage(Optional<? extends Percentage> percentage) {
        Utils.checkNotNull(percentage, "percentage");
        this.percentage = percentage;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Rate other = (Rate) o;
        return 
            Objects.deepEquals(this.fixed, other.fixed) &&
            Objects.deepEquals(this.percentage, other.percentage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            fixed,
            percentage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Rate.class,
                "fixed", fixed,
                "percentage", percentage);
    }
    
    public final static class Builder {
 
        private Optional<? extends GetSettlementFixed> fixed = Optional.empty();
 
        private Optional<? extends Percentage> percentage = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder fixed(GetSettlementFixed fixed) {
            Utils.checkNotNull(fixed, "fixed");
            this.fixed = Optional.ofNullable(fixed);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder fixed(Optional<? extends GetSettlementFixed> fixed) {
            Utils.checkNotNull(fixed, "fixed");
            this.fixed = fixed;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder percentage(Percentage percentage) {
            Utils.checkNotNull(percentage, "percentage");
            this.percentage = Optional.ofNullable(percentage);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder percentage(Optional<? extends Percentage> percentage) {
            Utils.checkNotNull(percentage, "percentage");
            this.percentage = percentage;
            return this;
        }
        
        public Rate build() {
            return new Rate(
                fixed,
                percentage);
        }
    }
}
