/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.models.components.PaymentRequest;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class CreateCustomerPaymentRequest {
    /**
     * Provide the ID of the related customer.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=customerId")
    private String customerId;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends PaymentRequest> paymentRequest;

    @JsonCreator
    public CreateCustomerPaymentRequest(
            String customerId,
            Optional<? extends PaymentRequest> paymentRequest) {
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(paymentRequest, "paymentRequest");
        this.customerId = customerId;
        this.paymentRequest = paymentRequest;
    }
    
    public CreateCustomerPaymentRequest(
            String customerId) {
        this(customerId, Optional.empty());
    }

    /**
     * Provide the ID of the related customer.
     */
    @JsonIgnore
    public String customerId() {
        return customerId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentRequest> paymentRequest() {
        return (Optional<PaymentRequest>) paymentRequest;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Provide the ID of the related customer.
     */
    public CreateCustomerPaymentRequest withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    public CreateCustomerPaymentRequest withPaymentRequest(PaymentRequest paymentRequest) {
        Utils.checkNotNull(paymentRequest, "paymentRequest");
        this.paymentRequest = Optional.ofNullable(paymentRequest);
        return this;
    }


    public CreateCustomerPaymentRequest withPaymentRequest(Optional<? extends PaymentRequest> paymentRequest) {
        Utils.checkNotNull(paymentRequest, "paymentRequest");
        this.paymentRequest = paymentRequest;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCustomerPaymentRequest other = (CreateCustomerPaymentRequest) o;
        return 
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.paymentRequest, other.paymentRequest);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            customerId, paymentRequest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCustomerPaymentRequest.class,
                "customerId", customerId,
                "paymentRequest", paymentRequest);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String customerId;

        private Optional<? extends PaymentRequest> paymentRequest = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Provide the ID of the related customer.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        public Builder paymentRequest(PaymentRequest paymentRequest) {
            Utils.checkNotNull(paymentRequest, "paymentRequest");
            this.paymentRequest = Optional.ofNullable(paymentRequest);
            return this;
        }

        public Builder paymentRequest(Optional<? extends PaymentRequest> paymentRequest) {
            Utils.checkNotNull(paymentRequest, "paymentRequest");
            this.paymentRequest = paymentRequest;
            return this;
        }

        public CreateCustomerPaymentRequest build() {

            return new CreateCustomerPaymentRequest(
                customerId, paymentRequest);
        }

    }
}
