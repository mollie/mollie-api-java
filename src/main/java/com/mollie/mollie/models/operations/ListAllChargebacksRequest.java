/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListAllChargebacksRequest {

    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=from")
    private Optional<String> from;

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private JsonNullable<Long> limit;

    /**
     * This endpoint allows you to embed additional information via the `embed` query string parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=embed")
    private Optional<? extends ListAllChargebacksQueryParamEmbed> embed;

    /**
     * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from newest to oldest.
     * 
     * <p>Possible values: `asc` `desc` (default: `desc`)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    private JsonNullable<String> sort;

    /**
     * The identifier referring to the [profile](get-profile) you wish to retrieve chargebacks for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` is already implied.
     * 
     * <p>To retrieve all chargebacks across the organization, use an organization-level API credential and omit the `profileId` parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=profileId")
    private JsonNullable<String> profileId;

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public ListAllChargebacksRequest(
            Optional<String> from,
            JsonNullable<Long> limit,
            Optional<? extends ListAllChargebacksQueryParamEmbed> embed,
            JsonNullable<String> sort,
            JsonNullable<String> profileId,
            JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(embed, "embed");
        Utils.checkNotNull(sort, "sort");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(testmode, "testmode");
        this.from = from;
        this.limit = limit;
        this.embed = embed;
        this.sort = sort;
        this.profileId = profileId;
        this.testmode = testmode;
    }
    
    public ListAllChargebacksRequest() {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
     */
    @JsonIgnore
    public Optional<String> from() {
        return from;
    }

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    @JsonIgnore
    public JsonNullable<Long> limit() {
        return limit;
    }

    /**
     * This endpoint allows you to embed additional information via the `embed` query string parameter.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListAllChargebacksQueryParamEmbed> embed() {
        return (Optional<ListAllChargebacksQueryParamEmbed>) embed;
    }

    /**
     * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from newest to oldest.
     * 
     * <p>Possible values: `asc` `desc` (default: `desc`)
     */
    @JsonIgnore
    public JsonNullable<String> sort() {
        return sort;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to retrieve chargebacks for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` is already implied.
     * 
     * <p>To retrieve all chargebacks across the organization, use an organization-level API credential and omit the `profileId` parameter.
     */
    @JsonIgnore
    public JsonNullable<String> profileId() {
        return profileId;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
     */
    public ListAllChargebacksRequest withFrom(String from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }

    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
     */
    public ListAllChargebacksRequest withFrom(Optional<String> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    public ListAllChargebacksRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = JsonNullable.of(limit);
        return this;
    }

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    public ListAllChargebacksRequest withLimit(JsonNullable<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * This endpoint allows you to embed additional information via the `embed` query string parameter.
     */
    public ListAllChargebacksRequest withEmbed(ListAllChargebacksQueryParamEmbed embed) {
        Utils.checkNotNull(embed, "embed");
        this.embed = Optional.ofNullable(embed);
        return this;
    }

    /**
     * This endpoint allows you to embed additional information via the `embed` query string parameter.
     */
    public ListAllChargebacksRequest withEmbed(Optional<? extends ListAllChargebacksQueryParamEmbed> embed) {
        Utils.checkNotNull(embed, "embed");
        this.embed = embed;
        return this;
    }

    /**
     * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from newest to oldest.
     * 
     * <p>Possible values: `asc` `desc` (default: `desc`)
     */
    public ListAllChargebacksRequest withSort(String sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = JsonNullable.of(sort);
        return this;
    }

    /**
     * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from newest to oldest.
     * 
     * <p>Possible values: `asc` `desc` (default: `desc`)
     */
    public ListAllChargebacksRequest withSort(JsonNullable<String> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to retrieve chargebacks for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` is already implied.
     * 
     * <p>To retrieve all chargebacks across the organization, use an organization-level API credential and omit the `profileId` parameter.
     */
    public ListAllChargebacksRequest withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = JsonNullable.of(profileId);
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to retrieve chargebacks for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` is already implied.
     * 
     * <p>To retrieve all chargebacks across the organization, use an organization-level API credential and omit the `profileId` parameter.
     */
    public ListAllChargebacksRequest withProfileId(JsonNullable<String> profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public ListAllChargebacksRequest withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public ListAllChargebacksRequest withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllChargebacksRequest other = (ListAllChargebacksRequest) o;
        return 
            Objects.deepEquals(this.from, other.from) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.embed, other.embed) &&
            Objects.deepEquals(this.sort, other.sort) &&
            Objects.deepEquals(this.profileId, other.profileId) &&
            Objects.deepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            from,
            limit,
            embed,
            sort,
            profileId,
            testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAllChargebacksRequest.class,
                "from", from,
                "limit", limit,
                "embed", embed,
                "sort", sort,
                "profileId", profileId,
                "testmode", testmode);
    }
    
    public final static class Builder {
 
        private Optional<String> from = Optional.empty();
 
        private JsonNullable<Long> limit;
 
        private Optional<? extends ListAllChargebacksQueryParamEmbed> embed = Optional.empty();
 
        private JsonNullable<String> sort = JsonNullable.undefined();
 
        private JsonNullable<String> profileId = JsonNullable.undefined();
 
        private JsonNullable<Boolean> testmode;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
         */
        public Builder from(String from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        /**
         * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
         */
        public Builder from(Optional<String> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        /**
         * The maximum number of items to return. Defaults to 50 items.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = JsonNullable.of(limit);
            return this;
        }

        /**
         * The maximum number of items to return. Defaults to 50 items.
         */
        public Builder limit(JsonNullable<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * This endpoint allows you to embed additional information via the `embed` query string parameter.
         */
        public Builder embed(ListAllChargebacksQueryParamEmbed embed) {
            Utils.checkNotNull(embed, "embed");
            this.embed = Optional.ofNullable(embed);
            return this;
        }

        /**
         * This endpoint allows you to embed additional information via the `embed` query string parameter.
         */
        public Builder embed(Optional<? extends ListAllChargebacksQueryParamEmbed> embed) {
            Utils.checkNotNull(embed, "embed");
            this.embed = embed;
            return this;
        }

        /**
         * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from newest to oldest.
         * 
         * <p>Possible values: `asc` `desc` (default: `desc`)
         */
        public Builder sort(String sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = JsonNullable.of(sort);
            return this;
        }

        /**
         * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from newest to oldest.
         * 
         * <p>Possible values: `asc` `desc` (default: `desc`)
         */
        public Builder sort(JsonNullable<String> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) you wish to retrieve chargebacks for.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` is already implied.
         * 
         * <p>To retrieve all chargebacks across the organization, use an organization-level API credential and omit the `profileId` parameter.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = JsonNullable.of(profileId);
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) you wish to retrieve chargebacks for.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` is already implied.
         * 
         * <p>To retrieve all chargebacks across the organization, use an organization-level API credential and omit the `profileId` parameter.
         */
        public Builder profileId(JsonNullable<String> profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }
        
        public ListAllChargebacksRequest build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            if (testmode == null) {
                testmode = _SINGLETON_VALUE_Testmode.value();
            }
            return new ListAllChargebacksRequest(
                from,
                limit,
                embed,
                sort,
                profileId,
                testmode);
        }

        private static final LazySingletonValue<JsonNullable<Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "50",
                        new TypeReference<JsonNullable<Long>>() {});

        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_Testmode =
                new LazySingletonValue<>(
                        "testmode",
                        "false",
                        new TypeReference<JsonNullable<Boolean>>() {});
    }
}
