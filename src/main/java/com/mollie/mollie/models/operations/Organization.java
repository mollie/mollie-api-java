/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Organization {

    /**
     * The name of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The address of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends Address> address;

    /**
     * The registration number of the organization at their local chamber of commerce.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrationNumber")
    private Optional<String> registrationNumber;

    /**
     * The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT
     * numbers are verified against the international registry *VIES*.
     * 
     * The field can be omitted for merchants residing in other countries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatNumber")
    private JsonNullable<String> vatNumber;

    /**
     * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in
     * The United Kingdom, and shifted VAT for merchants in the European Union.
     * 
     * The field can be omitted for merchants residing in other countries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatRegulation")
    private JsonNullable<? extends VatRegulation> vatRegulation;

    @JsonCreator
    public Organization(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("address") Optional<? extends Address> address,
            @JsonProperty("registrationNumber") Optional<String> registrationNumber,
            @JsonProperty("vatNumber") JsonNullable<String> vatNumber,
            @JsonProperty("vatRegulation") JsonNullable<? extends VatRegulation> vatRegulation) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        Utils.checkNotNull(vatNumber, "vatNumber");
        Utils.checkNotNull(vatRegulation, "vatRegulation");
        this.name = name;
        this.address = address;
        this.registrationNumber = registrationNumber;
        this.vatNumber = vatNumber;
        this.vatRegulation = vatRegulation;
    }
    
    public Organization() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The name of the organization.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The address of the organization.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Address> address() {
        return (Optional<Address>) address;
    }

    /**
     * The registration number of the organization at their local chamber of commerce.
     */
    @JsonIgnore
    public Optional<String> registrationNumber() {
        return registrationNumber;
    }

    /**
     * The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT
     * numbers are verified against the international registry *VIES*.
     * 
     * The field can be omitted for merchants residing in other countries.
     */
    @JsonIgnore
    public JsonNullable<String> vatNumber() {
        return vatNumber;
    }

    /**
     * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in
     * The United Kingdom, and shifted VAT for merchants in the European Union.
     * 
     * The field can be omitted for merchants residing in other countries.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<VatRegulation> vatRegulation() {
        return (JsonNullable<VatRegulation>) vatRegulation;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the organization.
     */
    public Organization withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the organization.
     */
    public Organization withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The address of the organization.
     */
    public Organization withAddress(Address address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    /**
     * The address of the organization.
     */
    public Organization withAddress(Optional<? extends Address> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    /**
     * The registration number of the organization at their local chamber of commerce.
     */
    public Organization withRegistrationNumber(String registrationNumber) {
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        this.registrationNumber = Optional.ofNullable(registrationNumber);
        return this;
    }

    /**
     * The registration number of the organization at their local chamber of commerce.
     */
    public Organization withRegistrationNumber(Optional<String> registrationNumber) {
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        this.registrationNumber = registrationNumber;
        return this;
    }

    /**
     * The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT
     * numbers are verified against the international registry *VIES*.
     * 
     * The field can be omitted for merchants residing in other countries.
     */
    public Organization withVatNumber(String vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = JsonNullable.of(vatNumber);
        return this;
    }

    /**
     * The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT
     * numbers are verified against the international registry *VIES*.
     * 
     * The field can be omitted for merchants residing in other countries.
     */
    public Organization withVatNumber(JsonNullable<String> vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = vatNumber;
        return this;
    }

    /**
     * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in
     * The United Kingdom, and shifted VAT for merchants in the European Union.
     * 
     * The field can be omitted for merchants residing in other countries.
     */
    public Organization withVatRegulation(VatRegulation vatRegulation) {
        Utils.checkNotNull(vatRegulation, "vatRegulation");
        this.vatRegulation = JsonNullable.of(vatRegulation);
        return this;
    }

    /**
     * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in
     * The United Kingdom, and shifted VAT for merchants in the European Union.
     * 
     * The field can be omitted for merchants residing in other countries.
     */
    public Organization withVatRegulation(JsonNullable<? extends VatRegulation> vatRegulation) {
        Utils.checkNotNull(vatRegulation, "vatRegulation");
        this.vatRegulation = vatRegulation;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Organization other = (Organization) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.registrationNumber, other.registrationNumber) &&
            Objects.deepEquals(this.vatNumber, other.vatNumber) &&
            Objects.deepEquals(this.vatRegulation, other.vatRegulation);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            address,
            registrationNumber,
            vatNumber,
            vatRegulation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Organization.class,
                "name", name,
                "address", address,
                "registrationNumber", registrationNumber,
                "vatNumber", vatNumber,
                "vatRegulation", vatRegulation);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends Address> address = Optional.empty();
 
        private Optional<String> registrationNumber = Optional.empty();
 
        private JsonNullable<String> vatNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends VatRegulation> vatRegulation = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the organization.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the organization.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The address of the organization.
         */
        public Builder address(Address address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * The address of the organization.
         */
        public Builder address(Optional<? extends Address> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        /**
         * The registration number of the organization at their local chamber of commerce.
         */
        public Builder registrationNumber(String registrationNumber) {
            Utils.checkNotNull(registrationNumber, "registrationNumber");
            this.registrationNumber = Optional.ofNullable(registrationNumber);
            return this;
        }

        /**
         * The registration number of the organization at their local chamber of commerce.
         */
        public Builder registrationNumber(Optional<String> registrationNumber) {
            Utils.checkNotNull(registrationNumber, "registrationNumber");
            this.registrationNumber = registrationNumber;
            return this;
        }

        /**
         * The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT
         * numbers are verified against the international registry *VIES*.
         * 
         * The field can be omitted for merchants residing in other countries.
         */
        public Builder vatNumber(String vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = JsonNullable.of(vatNumber);
            return this;
        }

        /**
         * The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT
         * numbers are verified against the international registry *VIES*.
         * 
         * The field can be omitted for merchants residing in other countries.
         */
        public Builder vatNumber(JsonNullable<String> vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = vatNumber;
            return this;
        }

        /**
         * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in
         * The United Kingdom, and shifted VAT for merchants in the European Union.
         * 
         * The field can be omitted for merchants residing in other countries.
         */
        public Builder vatRegulation(VatRegulation vatRegulation) {
            Utils.checkNotNull(vatRegulation, "vatRegulation");
            this.vatRegulation = JsonNullable.of(vatRegulation);
            return this;
        }

        /**
         * Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in
         * The United Kingdom, and shifted VAT for merchants in the European Union.
         * 
         * The field can be omitted for merchants residing in other countries.
         */
        public Builder vatRegulation(JsonNullable<? extends VatRegulation> vatRegulation) {
            Utils.checkNotNull(vatRegulation, "vatRegulation");
            this.vatRegulation = vatRegulation;
            return this;
        }
        
        public Organization build() {
            return new Organization(
                name,
                address,
                registrationNumber,
                vatNumber,
                vatRegulation);
        }
    }
}

