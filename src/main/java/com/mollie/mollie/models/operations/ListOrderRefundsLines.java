/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListOrderRefundsLines {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderId")
    private Optional<String> orderId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<String> sku;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends ListOrderRefundsType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends ListOrderRefundsStatus> status;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends ListOrderRefundsRefundsMetadata> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isCancelable")
    private Optional<Boolean> isCancelable;

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * <p>Must be less than the number of items already refunded for this order line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<Long> quantity;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityShipped")
    private Optional<Long> quantityShipped;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountShipped")
    private Optional<? extends ListOrderRefundsAmountShipped> amountShipped;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityRefunded")
    private Optional<Long> quantityRefunded;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountRefunded")
    private Optional<? extends ListOrderRefundsAmountRefunded> amountRefunded;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityCanceled")
    private Optional<Long> quantityCanceled;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountCanceled")
    private Optional<? extends ListOrderRefundsAmountCanceled> amountCanceled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippableQuantity")
    private Optional<Long> shippableQuantity;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refundableQuantity")
    private Optional<Long> refundableQuantity;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancelableQuantity")
    private Optional<Long> cancelableQuantity;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitPrice")
    private Optional<? extends ListOrderRefundsUnitPrice> unitPrice;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private Optional<? extends ListOrderRefundsTotalAmount> totalAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatRate")
    private Optional<String> vatRate;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatAmount")
    private Optional<? extends ListOrderRefundsVatAmount> vatAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountedAmount")
    private Optional<? extends ListOrderRefundsDiscountedAmount> discountedAmount;

    @JsonCreator
    public ListOrderRefundsLines(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("orderId") Optional<String> orderId,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("sku") JsonNullable<String> sku,
            @JsonProperty("type") Optional<? extends ListOrderRefundsType> type,
            @JsonProperty("status") Optional<? extends ListOrderRefundsStatus> status,
            @JsonProperty("metadata") JsonNullable<? extends ListOrderRefundsRefundsMetadata> metadata,
            @JsonProperty("isCancelable") Optional<Boolean> isCancelable,
            @JsonProperty("quantity") Optional<Long> quantity,
            @JsonProperty("quantityShipped") Optional<Long> quantityShipped,
            @JsonProperty("amountShipped") Optional<? extends ListOrderRefundsAmountShipped> amountShipped,
            @JsonProperty("quantityRefunded") Optional<Long> quantityRefunded,
            @JsonProperty("amountRefunded") Optional<? extends ListOrderRefundsAmountRefunded> amountRefunded,
            @JsonProperty("quantityCanceled") Optional<Long> quantityCanceled,
            @JsonProperty("amountCanceled") Optional<? extends ListOrderRefundsAmountCanceled> amountCanceled,
            @JsonProperty("shippableQuantity") Optional<Long> shippableQuantity,
            @JsonProperty("refundableQuantity") Optional<Long> refundableQuantity,
            @JsonProperty("cancelableQuantity") Optional<Long> cancelableQuantity,
            @JsonProperty("unitPrice") Optional<? extends ListOrderRefundsUnitPrice> unitPrice,
            @JsonProperty("totalAmount") Optional<? extends ListOrderRefundsTotalAmount> totalAmount,
            @JsonProperty("vatRate") Optional<String> vatRate,
            @JsonProperty("vatAmount") Optional<? extends ListOrderRefundsVatAmount> vatAmount,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("discountedAmount") Optional<? extends ListOrderRefundsDiscountedAmount> discountedAmount) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(orderId, "orderId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(isCancelable, "isCancelable");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(quantityShipped, "quantityShipped");
        Utils.checkNotNull(amountShipped, "amountShipped");
        Utils.checkNotNull(quantityRefunded, "quantityRefunded");
        Utils.checkNotNull(amountRefunded, "amountRefunded");
        Utils.checkNotNull(quantityCanceled, "quantityCanceled");
        Utils.checkNotNull(amountCanceled, "amountCanceled");
        Utils.checkNotNull(shippableQuantity, "shippableQuantity");
        Utils.checkNotNull(refundableQuantity, "refundableQuantity");
        Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
        Utils.checkNotNull(unitPrice, "unitPrice");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(vatRate, "vatRate");
        Utils.checkNotNull(vatAmount, "vatAmount");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(discountedAmount, "discountedAmount");
        this.resource = resource;
        this.id = id;
        this.orderId = orderId;
        this.name = name;
        this.sku = sku;
        this.type = type;
        this.status = status;
        this.metadata = metadata;
        this.isCancelable = isCancelable;
        this.quantity = quantity;
        this.quantityShipped = quantityShipped;
        this.amountShipped = amountShipped;
        this.quantityRefunded = quantityRefunded;
        this.amountRefunded = amountRefunded;
        this.quantityCanceled = quantityCanceled;
        this.amountCanceled = amountCanceled;
        this.shippableQuantity = shippableQuantity;
        this.refundableQuantity = refundableQuantity;
        this.cancelableQuantity = cancelableQuantity;
        this.unitPrice = unitPrice;
        this.totalAmount = totalAmount;
        this.vatRate = vatRate;
        this.vatAmount = vatAmount;
        this.createdAt = createdAt;
        this.discountedAmount = discountedAmount;
    }
    
    public ListOrderRefundsLines() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> orderId() {
        return orderId;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public JsonNullable<String> sku() {
        return sku;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListOrderRefundsType> type() {
        return (Optional<ListOrderRefundsType>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListOrderRefundsStatus> status() {
        return (Optional<ListOrderRefundsStatus>) status;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ListOrderRefundsRefundsMetadata> metadata() {
        return (JsonNullable<ListOrderRefundsRefundsMetadata>) metadata;
    }

    @JsonIgnore
    public Optional<Boolean> isCancelable() {
        return isCancelable;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * <p>Must be less than the number of items already refunded for this order line.
     */
    @JsonIgnore
    public Optional<Long> quantity() {
        return quantity;
    }

    @JsonIgnore
    public Optional<Long> quantityShipped() {
        return quantityShipped;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListOrderRefundsAmountShipped> amountShipped() {
        return (Optional<ListOrderRefundsAmountShipped>) amountShipped;
    }

    @JsonIgnore
    public Optional<Long> quantityRefunded() {
        return quantityRefunded;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListOrderRefundsAmountRefunded> amountRefunded() {
        return (Optional<ListOrderRefundsAmountRefunded>) amountRefunded;
    }

    @JsonIgnore
    public Optional<Long> quantityCanceled() {
        return quantityCanceled;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListOrderRefundsAmountCanceled> amountCanceled() {
        return (Optional<ListOrderRefundsAmountCanceled>) amountCanceled;
    }

    @JsonIgnore
    public Optional<Long> shippableQuantity() {
        return shippableQuantity;
    }

    @JsonIgnore
    public Optional<Long> refundableQuantity() {
        return refundableQuantity;
    }

    @JsonIgnore
    public Optional<Long> cancelableQuantity() {
        return cancelableQuantity;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListOrderRefundsUnitPrice> unitPrice() {
        return (Optional<ListOrderRefundsUnitPrice>) unitPrice;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListOrderRefundsTotalAmount> totalAmount() {
        return (Optional<ListOrderRefundsTotalAmount>) totalAmount;
    }

    @JsonIgnore
    public Optional<String> vatRate() {
        return vatRate;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListOrderRefundsVatAmount> vatAmount() {
        return (Optional<ListOrderRefundsVatAmount>) vatAmount;
    }

    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListOrderRefundsDiscountedAmount> discountedAmount() {
        return (Optional<ListOrderRefundsDiscountedAmount>) discountedAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ListOrderRefundsLines withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    public ListOrderRefundsLines withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
     */
    public ListOrderRefundsLines withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
     */
    public ListOrderRefundsLines withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ListOrderRefundsLines withOrderId(String orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = Optional.ofNullable(orderId);
        return this;
    }

    public ListOrderRefundsLines withOrderId(Optional<String> orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = orderId;
        return this;
    }

    public ListOrderRefundsLines withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public ListOrderRefundsLines withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ListOrderRefundsLines withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = JsonNullable.of(sku);
        return this;
    }

    public ListOrderRefundsLines withSku(JsonNullable<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    public ListOrderRefundsLines withType(ListOrderRefundsType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public ListOrderRefundsLines withType(Optional<? extends ListOrderRefundsType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public ListOrderRefundsLines withStatus(ListOrderRefundsStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public ListOrderRefundsLines withStatus(Optional<? extends ListOrderRefundsStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public ListOrderRefundsLines withMetadata(ListOrderRefundsRefundsMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public ListOrderRefundsLines withMetadata(JsonNullable<? extends ListOrderRefundsRefundsMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public ListOrderRefundsLines withIsCancelable(boolean isCancelable) {
        Utils.checkNotNull(isCancelable, "isCancelable");
        this.isCancelable = Optional.ofNullable(isCancelable);
        return this;
    }

    public ListOrderRefundsLines withIsCancelable(Optional<Boolean> isCancelable) {
        Utils.checkNotNull(isCancelable, "isCancelable");
        this.isCancelable = isCancelable;
        return this;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * <p>Must be less than the number of items already refunded for this order line.
     */
    public ListOrderRefundsLines withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * <p>Must be less than the number of items already refunded for this order line.
     */
    public ListOrderRefundsLines withQuantity(Optional<Long> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    public ListOrderRefundsLines withQuantityShipped(long quantityShipped) {
        Utils.checkNotNull(quantityShipped, "quantityShipped");
        this.quantityShipped = Optional.ofNullable(quantityShipped);
        return this;
    }

    public ListOrderRefundsLines withQuantityShipped(Optional<Long> quantityShipped) {
        Utils.checkNotNull(quantityShipped, "quantityShipped");
        this.quantityShipped = quantityShipped;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withAmountShipped(ListOrderRefundsAmountShipped amountShipped) {
        Utils.checkNotNull(amountShipped, "amountShipped");
        this.amountShipped = Optional.ofNullable(amountShipped);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withAmountShipped(Optional<? extends ListOrderRefundsAmountShipped> amountShipped) {
        Utils.checkNotNull(amountShipped, "amountShipped");
        this.amountShipped = amountShipped;
        return this;
    }

    public ListOrderRefundsLines withQuantityRefunded(long quantityRefunded) {
        Utils.checkNotNull(quantityRefunded, "quantityRefunded");
        this.quantityRefunded = Optional.ofNullable(quantityRefunded);
        return this;
    }

    public ListOrderRefundsLines withQuantityRefunded(Optional<Long> quantityRefunded) {
        Utils.checkNotNull(quantityRefunded, "quantityRefunded");
        this.quantityRefunded = quantityRefunded;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withAmountRefunded(ListOrderRefundsAmountRefunded amountRefunded) {
        Utils.checkNotNull(amountRefunded, "amountRefunded");
        this.amountRefunded = Optional.ofNullable(amountRefunded);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withAmountRefunded(Optional<? extends ListOrderRefundsAmountRefunded> amountRefunded) {
        Utils.checkNotNull(amountRefunded, "amountRefunded");
        this.amountRefunded = amountRefunded;
        return this;
    }

    public ListOrderRefundsLines withQuantityCanceled(long quantityCanceled) {
        Utils.checkNotNull(quantityCanceled, "quantityCanceled");
        this.quantityCanceled = Optional.ofNullable(quantityCanceled);
        return this;
    }

    public ListOrderRefundsLines withQuantityCanceled(Optional<Long> quantityCanceled) {
        Utils.checkNotNull(quantityCanceled, "quantityCanceled");
        this.quantityCanceled = quantityCanceled;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withAmountCanceled(ListOrderRefundsAmountCanceled amountCanceled) {
        Utils.checkNotNull(amountCanceled, "amountCanceled");
        this.amountCanceled = Optional.ofNullable(amountCanceled);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withAmountCanceled(Optional<? extends ListOrderRefundsAmountCanceled> amountCanceled) {
        Utils.checkNotNull(amountCanceled, "amountCanceled");
        this.amountCanceled = amountCanceled;
        return this;
    }

    public ListOrderRefundsLines withShippableQuantity(long shippableQuantity) {
        Utils.checkNotNull(shippableQuantity, "shippableQuantity");
        this.shippableQuantity = Optional.ofNullable(shippableQuantity);
        return this;
    }

    public ListOrderRefundsLines withShippableQuantity(Optional<Long> shippableQuantity) {
        Utils.checkNotNull(shippableQuantity, "shippableQuantity");
        this.shippableQuantity = shippableQuantity;
        return this;
    }

    public ListOrderRefundsLines withRefundableQuantity(long refundableQuantity) {
        Utils.checkNotNull(refundableQuantity, "refundableQuantity");
        this.refundableQuantity = Optional.ofNullable(refundableQuantity);
        return this;
    }

    public ListOrderRefundsLines withRefundableQuantity(Optional<Long> refundableQuantity) {
        Utils.checkNotNull(refundableQuantity, "refundableQuantity");
        this.refundableQuantity = refundableQuantity;
        return this;
    }

    public ListOrderRefundsLines withCancelableQuantity(long cancelableQuantity) {
        Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
        this.cancelableQuantity = Optional.ofNullable(cancelableQuantity);
        return this;
    }

    public ListOrderRefundsLines withCancelableQuantity(Optional<Long> cancelableQuantity) {
        Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
        this.cancelableQuantity = cancelableQuantity;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withUnitPrice(ListOrderRefundsUnitPrice unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = Optional.ofNullable(unitPrice);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withUnitPrice(Optional<? extends ListOrderRefundsUnitPrice> unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = unitPrice;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withTotalAmount(ListOrderRefundsTotalAmount totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withTotalAmount(Optional<? extends ListOrderRefundsTotalAmount> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    public ListOrderRefundsLines withVatRate(String vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = Optional.ofNullable(vatRate);
        return this;
    }

    public ListOrderRefundsLines withVatRate(Optional<String> vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = vatRate;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withVatAmount(ListOrderRefundsVatAmount vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = Optional.ofNullable(vatAmount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withVatAmount(Optional<? extends ListOrderRefundsVatAmount> vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = vatAmount;
        return this;
    }

    public ListOrderRefundsLines withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public ListOrderRefundsLines withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withDiscountedAmount(ListOrderRefundsDiscountedAmount discountedAmount) {
        Utils.checkNotNull(discountedAmount, "discountedAmount");
        this.discountedAmount = Optional.ofNullable(discountedAmount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public ListOrderRefundsLines withDiscountedAmount(Optional<? extends ListOrderRefundsDiscountedAmount> discountedAmount) {
        Utils.checkNotNull(discountedAmount, "discountedAmount");
        this.discountedAmount = discountedAmount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListOrderRefundsLines other = (ListOrderRefundsLines) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.orderId, other.orderId) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.sku, other.sku) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.isCancelable, other.isCancelable) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.quantityShipped, other.quantityShipped) &&
            Objects.deepEquals(this.amountShipped, other.amountShipped) &&
            Objects.deepEquals(this.quantityRefunded, other.quantityRefunded) &&
            Objects.deepEquals(this.amountRefunded, other.amountRefunded) &&
            Objects.deepEquals(this.quantityCanceled, other.quantityCanceled) &&
            Objects.deepEquals(this.amountCanceled, other.amountCanceled) &&
            Objects.deepEquals(this.shippableQuantity, other.shippableQuantity) &&
            Objects.deepEquals(this.refundableQuantity, other.refundableQuantity) &&
            Objects.deepEquals(this.cancelableQuantity, other.cancelableQuantity) &&
            Objects.deepEquals(this.unitPrice, other.unitPrice) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.vatRate, other.vatRate) &&
            Objects.deepEquals(this.vatAmount, other.vatAmount) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.discountedAmount, other.discountedAmount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            orderId,
            name,
            sku,
            type,
            status,
            metadata,
            isCancelable,
            quantity,
            quantityShipped,
            amountShipped,
            quantityRefunded,
            amountRefunded,
            quantityCanceled,
            amountCanceled,
            shippableQuantity,
            refundableQuantity,
            cancelableQuantity,
            unitPrice,
            totalAmount,
            vatRate,
            vatAmount,
            createdAt,
            discountedAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListOrderRefundsLines.class,
                "resource", resource,
                "id", id,
                "orderId", orderId,
                "name", name,
                "sku", sku,
                "type", type,
                "status", status,
                "metadata", metadata,
                "isCancelable", isCancelable,
                "quantity", quantity,
                "quantityShipped", quantityShipped,
                "amountShipped", amountShipped,
                "quantityRefunded", quantityRefunded,
                "amountRefunded", amountRefunded,
                "quantityCanceled", quantityCanceled,
                "amountCanceled", amountCanceled,
                "shippableQuantity", shippableQuantity,
                "refundableQuantity", refundableQuantity,
                "cancelableQuantity", cancelableQuantity,
                "unitPrice", unitPrice,
                "totalAmount", totalAmount,
                "vatRate", vatRate,
                "vatAmount", vatAmount,
                "createdAt", createdAt,
                "discountedAmount", discountedAmount);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> orderId = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private JsonNullable<String> sku = JsonNullable.undefined();
 
        private Optional<? extends ListOrderRefundsType> type = Optional.empty();
 
        private Optional<? extends ListOrderRefundsStatus> status = Optional.empty();
 
        private JsonNullable<? extends ListOrderRefundsRefundsMetadata> metadata = JsonNullable.undefined();
 
        private Optional<Boolean> isCancelable = Optional.empty();
 
        private Optional<Long> quantity = Optional.empty();
 
        private Optional<Long> quantityShipped = Optional.empty();
 
        private Optional<? extends ListOrderRefundsAmountShipped> amountShipped = Optional.empty();
 
        private Optional<Long> quantityRefunded = Optional.empty();
 
        private Optional<? extends ListOrderRefundsAmountRefunded> amountRefunded = Optional.empty();
 
        private Optional<Long> quantityCanceled = Optional.empty();
 
        private Optional<? extends ListOrderRefundsAmountCanceled> amountCanceled = Optional.empty();
 
        private Optional<Long> shippableQuantity = Optional.empty();
 
        private Optional<Long> refundableQuantity = Optional.empty();
 
        private Optional<Long> cancelableQuantity = Optional.empty();
 
        private Optional<? extends ListOrderRefundsUnitPrice> unitPrice = Optional.empty();
 
        private Optional<? extends ListOrderRefundsTotalAmount> totalAmount = Optional.empty();
 
        private Optional<String> vatRate = Optional.empty();
 
        private Optional<? extends ListOrderRefundsVatAmount> vatAmount = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<? extends ListOrderRefundsDiscountedAmount> discountedAmount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder orderId(String orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        public Builder orderId(Optional<String> orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = orderId;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = JsonNullable.of(sku);
            return this;
        }

        public Builder sku(JsonNullable<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        public Builder type(ListOrderRefundsType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends ListOrderRefundsType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder status(ListOrderRefundsStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends ListOrderRefundsStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(ListOrderRefundsRefundsMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends ListOrderRefundsRefundsMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder isCancelable(boolean isCancelable) {
            Utils.checkNotNull(isCancelable, "isCancelable");
            this.isCancelable = Optional.ofNullable(isCancelable);
            return this;
        }

        public Builder isCancelable(Optional<Boolean> isCancelable) {
            Utils.checkNotNull(isCancelable, "isCancelable");
            this.isCancelable = isCancelable;
            return this;
        }

        /**
         * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
         * 
         * <p>Must be less than the number of items already refunded for this order line.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
         * 
         * <p>Must be less than the number of items already refunded for this order line.
         */
        public Builder quantity(Optional<Long> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        public Builder quantityShipped(long quantityShipped) {
            Utils.checkNotNull(quantityShipped, "quantityShipped");
            this.quantityShipped = Optional.ofNullable(quantityShipped);
            return this;
        }

        public Builder quantityShipped(Optional<Long> quantityShipped) {
            Utils.checkNotNull(quantityShipped, "quantityShipped");
            this.quantityShipped = quantityShipped;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountShipped(ListOrderRefundsAmountShipped amountShipped) {
            Utils.checkNotNull(amountShipped, "amountShipped");
            this.amountShipped = Optional.ofNullable(amountShipped);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountShipped(Optional<? extends ListOrderRefundsAmountShipped> amountShipped) {
            Utils.checkNotNull(amountShipped, "amountShipped");
            this.amountShipped = amountShipped;
            return this;
        }

        public Builder quantityRefunded(long quantityRefunded) {
            Utils.checkNotNull(quantityRefunded, "quantityRefunded");
            this.quantityRefunded = Optional.ofNullable(quantityRefunded);
            return this;
        }

        public Builder quantityRefunded(Optional<Long> quantityRefunded) {
            Utils.checkNotNull(quantityRefunded, "quantityRefunded");
            this.quantityRefunded = quantityRefunded;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountRefunded(ListOrderRefundsAmountRefunded amountRefunded) {
            Utils.checkNotNull(amountRefunded, "amountRefunded");
            this.amountRefunded = Optional.ofNullable(amountRefunded);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountRefunded(Optional<? extends ListOrderRefundsAmountRefunded> amountRefunded) {
            Utils.checkNotNull(amountRefunded, "amountRefunded");
            this.amountRefunded = amountRefunded;
            return this;
        }

        public Builder quantityCanceled(long quantityCanceled) {
            Utils.checkNotNull(quantityCanceled, "quantityCanceled");
            this.quantityCanceled = Optional.ofNullable(quantityCanceled);
            return this;
        }

        public Builder quantityCanceled(Optional<Long> quantityCanceled) {
            Utils.checkNotNull(quantityCanceled, "quantityCanceled");
            this.quantityCanceled = quantityCanceled;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountCanceled(ListOrderRefundsAmountCanceled amountCanceled) {
            Utils.checkNotNull(amountCanceled, "amountCanceled");
            this.amountCanceled = Optional.ofNullable(amountCanceled);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountCanceled(Optional<? extends ListOrderRefundsAmountCanceled> amountCanceled) {
            Utils.checkNotNull(amountCanceled, "amountCanceled");
            this.amountCanceled = amountCanceled;
            return this;
        }

        public Builder shippableQuantity(long shippableQuantity) {
            Utils.checkNotNull(shippableQuantity, "shippableQuantity");
            this.shippableQuantity = Optional.ofNullable(shippableQuantity);
            return this;
        }

        public Builder shippableQuantity(Optional<Long> shippableQuantity) {
            Utils.checkNotNull(shippableQuantity, "shippableQuantity");
            this.shippableQuantity = shippableQuantity;
            return this;
        }

        public Builder refundableQuantity(long refundableQuantity) {
            Utils.checkNotNull(refundableQuantity, "refundableQuantity");
            this.refundableQuantity = Optional.ofNullable(refundableQuantity);
            return this;
        }

        public Builder refundableQuantity(Optional<Long> refundableQuantity) {
            Utils.checkNotNull(refundableQuantity, "refundableQuantity");
            this.refundableQuantity = refundableQuantity;
            return this;
        }

        public Builder cancelableQuantity(long cancelableQuantity) {
            Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
            this.cancelableQuantity = Optional.ofNullable(cancelableQuantity);
            return this;
        }

        public Builder cancelableQuantity(Optional<Long> cancelableQuantity) {
            Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
            this.cancelableQuantity = cancelableQuantity;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder unitPrice(ListOrderRefundsUnitPrice unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = Optional.ofNullable(unitPrice);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder unitPrice(Optional<? extends ListOrderRefundsUnitPrice> unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = unitPrice;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder totalAmount(ListOrderRefundsTotalAmount totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder totalAmount(Optional<? extends ListOrderRefundsTotalAmount> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder vatRate(String vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = Optional.ofNullable(vatRate);
            return this;
        }

        public Builder vatRate(Optional<String> vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = vatRate;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder vatAmount(ListOrderRefundsVatAmount vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = Optional.ofNullable(vatAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder vatAmount(Optional<? extends ListOrderRefundsVatAmount> vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = vatAmount;
            return this;
        }

        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder discountedAmount(ListOrderRefundsDiscountedAmount discountedAmount) {
            Utils.checkNotNull(discountedAmount, "discountedAmount");
            this.discountedAmount = Optional.ofNullable(discountedAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder discountedAmount(Optional<? extends ListOrderRefundsDiscountedAmount> discountedAmount) {
            Utils.checkNotNull(discountedAmount, "discountedAmount");
            this.discountedAmount = discountedAmount;
            return this;
        }
        
        public ListOrderRefundsLines build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }
            return new ListOrderRefundsLines(
                resource,
                id,
                orderId,
                name,
                sku,
                type,
                status,
                metadata,
                isCancelable,
                quantity,
                quantityShipped,
                amountShipped,
                quantityRefunded,
                amountRefunded,
                quantityCanceled,
                amountCanceled,
                shippableQuantity,
                refundableQuantity,
                cancelableQuantity,
                unitPrice,
                totalAmount,
                vatRate,
                vatAmount,
                createdAt,
                discountedAmount);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"orderline\"",
                        new TypeReference<Optional<String>>() {});
    }
}
