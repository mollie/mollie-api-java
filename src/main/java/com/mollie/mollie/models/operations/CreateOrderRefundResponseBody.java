/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * CreateOrderRefundResponseBody
 * 
 * <p>The newly created refund object.
 */
public class CreateOrderRefundResponseBody {
    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<String> mode;

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends CreateOrderRefundRefundsResponseAmount> amount;

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
     * 
     * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
     * 
     * <p>To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementAmount")
    private JsonNullable<? extends CreateOrderRefundSettlementAmount> settlementAmount;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends CreateOrderRefundRefundsResponseMetadata> metadata;

    /**
     * The unique identifier of the order this refund was created for. For example: `ord_8wmqcHMN4U`. Not present if the refund was not created for an order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderId")
    private Optional<String> orderId;

    /**
     * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementId")
    private JsonNullable<String> settlementId;

    /**
     * Refunds may take some time to get confirmed.
     * 
     * <p>Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalReference")
    private Optional<? extends CreateOrderRefundRefundsExternalReference> externalReference;

    /**
     * A refund can optionally be linked to specific order lines.
     * 
     * <p>The lines will show the `quantity`, `discountAmount`, `vatAmount`, and `totalAmount` refunded. If the line was partially refunded, these values will be different from the values in response from the [Get payment](get-payment) endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    private Optional<? extends List<CreateOrderRefundLinesOutput>> lines;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends CreateOrderRefundLinks> links;

    @JsonCreator
    public CreateOrderRefundResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mode") Optional<String> mode,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("amount") Optional<? extends CreateOrderRefundRefundsResponseAmount> amount,
            @JsonProperty("settlementAmount") JsonNullable<? extends CreateOrderRefundSettlementAmount> settlementAmount,
            @JsonProperty("metadata") JsonNullable<? extends CreateOrderRefundRefundsResponseMetadata> metadata,
            @JsonProperty("orderId") Optional<String> orderId,
            @JsonProperty("settlementId") JsonNullable<String> settlementId,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("externalReference") Optional<? extends CreateOrderRefundRefundsExternalReference> externalReference,
            @JsonProperty("lines") Optional<? extends List<CreateOrderRefundLinesOutput>> lines,
            @JsonProperty("_links") Optional<? extends CreateOrderRefundLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(orderId, "orderId");
        Utils.checkNotNull(settlementId, "settlementId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(externalReference, "externalReference");
        Utils.checkNotNull(lines, "lines");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.description = description;
        this.amount = amount;
        this.settlementAmount = settlementAmount;
        this.metadata = metadata;
        this.orderId = orderId;
        this.settlementId = settlementId;
        this.status = status;
        this.createdAt = createdAt;
        this.externalReference = externalReference;
        this.lines = lines;
        this.links = links;
    }
    
    public CreateOrderRefundResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    @JsonIgnore
    public Optional<String> mode() {
        return mode;
    }

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundRefundsResponseAmount> amount() {
        return (Optional<CreateOrderRefundRefundsResponseAmount>) amount;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
     * 
     * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
     * 
     * <p>To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateOrderRefundSettlementAmount> settlementAmount() {
        return (JsonNullable<CreateOrderRefundSettlementAmount>) settlementAmount;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateOrderRefundRefundsResponseMetadata> metadata() {
        return (JsonNullable<CreateOrderRefundRefundsResponseMetadata>) metadata;
    }

    /**
     * The unique identifier of the order this refund was created for. For example: `ord_8wmqcHMN4U`. Not present if the refund was not created for an order.
     */
    @JsonIgnore
    public Optional<String> orderId() {
        return orderId;
    }

    /**
     * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
     */
    @JsonIgnore
    public JsonNullable<String> settlementId() {
        return settlementId;
    }

    /**
     * Refunds may take some time to get confirmed.
     * 
     * <p>Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundRefundsExternalReference> externalReference() {
        return (Optional<CreateOrderRefundRefundsExternalReference>) externalReference;
    }

    /**
     * A refund can optionally be linked to specific order lines.
     * 
     * <p>The lines will show the `quantity`, `discountAmount`, `vatAmount`, and `totalAmount` refunded. If the line was partially refunded, these values will be different from the values in response from the [Get payment](get-payment) endpoint.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CreateOrderRefundLinesOutput>> lines() {
        return (Optional<List<CreateOrderRefundLinesOutput>>) lines;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundLinks> links() {
        return (Optional<CreateOrderRefundLinks>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    public CreateOrderRefundResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    public CreateOrderRefundResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    public CreateOrderRefundResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    public CreateOrderRefundResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    public CreateOrderRefundResponseBody withMode(String mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }


    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    public CreateOrderRefundResponseBody withMode(Optional<String> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    public CreateOrderRefundResponseBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    public CreateOrderRefundResponseBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
     */
    public CreateOrderRefundResponseBody withAmount(CreateOrderRefundRefundsResponseAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
     */
    public CreateOrderRefundResponseBody withAmount(Optional<? extends CreateOrderRefundRefundsResponseAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
     * 
     * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
     * 
     * <p>To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    public CreateOrderRefundResponseBody withSettlementAmount(CreateOrderRefundSettlementAmount settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = JsonNullable.of(settlementAmount);
        return this;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
     * 
     * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
     * 
     * <p>To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    public CreateOrderRefundResponseBody withSettlementAmount(JsonNullable<? extends CreateOrderRefundSettlementAmount> settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = settlementAmount;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateOrderRefundResponseBody withMetadata(CreateOrderRefundRefundsResponseMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateOrderRefundResponseBody withMetadata(JsonNullable<? extends CreateOrderRefundRefundsResponseMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The unique identifier of the order this refund was created for. For example: `ord_8wmqcHMN4U`. Not present if the refund was not created for an order.
     */
    public CreateOrderRefundResponseBody withOrderId(String orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = Optional.ofNullable(orderId);
        return this;
    }


    /**
     * The unique identifier of the order this refund was created for. For example: `ord_8wmqcHMN4U`. Not present if the refund was not created for an order.
     */
    public CreateOrderRefundResponseBody withOrderId(Optional<String> orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = orderId;
        return this;
    }

    /**
     * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
     */
    public CreateOrderRefundResponseBody withSettlementId(String settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = JsonNullable.of(settlementId);
        return this;
    }

    /**
     * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
     */
    public CreateOrderRefundResponseBody withSettlementId(JsonNullable<String> settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = settlementId;
        return this;
    }

    /**
     * Refunds may take some time to get confirmed.
     * 
     * <p>Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
     */
    public CreateOrderRefundResponseBody withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * Refunds may take some time to get confirmed.
     * 
     * <p>Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
     */
    public CreateOrderRefundResponseBody withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public CreateOrderRefundResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public CreateOrderRefundResponseBody withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public CreateOrderRefundResponseBody withExternalReference(CreateOrderRefundRefundsExternalReference externalReference) {
        Utils.checkNotNull(externalReference, "externalReference");
        this.externalReference = Optional.ofNullable(externalReference);
        return this;
    }


    public CreateOrderRefundResponseBody withExternalReference(Optional<? extends CreateOrderRefundRefundsExternalReference> externalReference) {
        Utils.checkNotNull(externalReference, "externalReference");
        this.externalReference = externalReference;
        return this;
    }

    /**
     * A refund can optionally be linked to specific order lines.
     * 
     * <p>The lines will show the `quantity`, `discountAmount`, `vatAmount`, and `totalAmount` refunded. If the line was partially refunded, these values will be different from the values in response from the [Get payment](get-payment) endpoint.
     */
    public CreateOrderRefundResponseBody withLines(List<CreateOrderRefundLinesOutput> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = Optional.ofNullable(lines);
        return this;
    }


    /**
     * A refund can optionally be linked to specific order lines.
     * 
     * <p>The lines will show the `quantity`, `discountAmount`, `vatAmount`, and `totalAmount` refunded. If the line was partially refunded, these values will be different from the values in response from the [Get payment](get-payment) endpoint.
     */
    public CreateOrderRefundResponseBody withLines(Optional<? extends List<CreateOrderRefundLinesOutput>> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = lines;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public CreateOrderRefundResponseBody withLinks(CreateOrderRefundLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public CreateOrderRefundResponseBody withLinks(Optional<? extends CreateOrderRefundLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOrderRefundResponseBody other = (CreateOrderRefundResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.settlementAmount, other.settlementAmount) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.orderId, other.orderId) &&
            Utils.enhancedDeepEquals(this.settlementId, other.settlementId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.externalReference, other.externalReference) &&
            Utils.enhancedDeepEquals(this.lines, other.lines) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, mode,
            description, amount, settlementAmount,
            metadata, orderId, settlementId,
            status, createdAt, externalReference,
            lines, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOrderRefundResponseBody.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "description", description,
                "amount", amount,
                "settlementAmount", settlementAmount,
                "metadata", metadata,
                "orderId", orderId,
                "settlementId", settlementId,
                "status", status,
                "createdAt", createdAt,
                "externalReference", externalReference,
                "lines", lines,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource;

        private Optional<String> id = Optional.empty();

        private Optional<String> mode = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<? extends CreateOrderRefundRefundsResponseAmount> amount = Optional.empty();

        private JsonNullable<? extends CreateOrderRefundSettlementAmount> settlementAmount = JsonNullable.undefined();

        private JsonNullable<? extends CreateOrderRefundRefundsResponseMetadata> metadata = JsonNullable.undefined();

        private Optional<String> orderId = Optional.empty();

        private JsonNullable<String> settlementId = JsonNullable.undefined();

        private Optional<String> status = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<? extends CreateOrderRefundRefundsExternalReference> externalReference = Optional.empty();

        private Optional<? extends List<CreateOrderRefundLinesOutput>> lines = Optional.empty();

        private Optional<? extends CreateOrderRefundLinks> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * <p>Possible values: `live` `test`
         */
        public Builder mode(String mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * <p>Possible values: `live` `test`
         */
        public Builder mode(Optional<String> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * The description of the refund that may be shown to your customer, depending on the payment method used.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the refund that may be shown to your customer, depending on the payment method used.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
         */
        public Builder amount(CreateOrderRefundRefundsResponseAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
         */
        public Builder amount(Optional<? extends CreateOrderRefundRefundsResponseAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
         * 
         * <p>The amount is a **negative** amount.
         * 
         * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
         * 
         * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
         * 
         * <p>To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
         */
        public Builder settlementAmount(CreateOrderRefundSettlementAmount settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = JsonNullable.of(settlementAmount);
            return this;
        }

        /**
         * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
         * 
         * <p>The amount is a **negative** amount.
         * 
         * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
         * 
         * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
         * 
         * <p>To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
         */
        public Builder settlementAmount(JsonNullable<? extends CreateOrderRefundSettlementAmount> settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = settlementAmount;
            return this;
        }


        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(CreateOrderRefundRefundsResponseMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends CreateOrderRefundRefundsResponseMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * The unique identifier of the order this refund was created for. For example: `ord_8wmqcHMN4U`. Not present if the refund was not created for an order.
         */
        public Builder orderId(String orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        /**
         * The unique identifier of the order this refund was created for. For example: `ord_8wmqcHMN4U`. Not present if the refund was not created for an order.
         */
        public Builder orderId(Optional<String> orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = orderId;
            return this;
        }


        /**
         * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
         */
        public Builder settlementId(String settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = JsonNullable.of(settlementId);
            return this;
        }

        /**
         * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
         */
        public Builder settlementId(JsonNullable<String> settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = settlementId;
            return this;
        }


        /**
         * Refunds may take some time to get confirmed.
         * 
         * <p>Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Refunds may take some time to get confirmed.
         * 
         * <p>Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder externalReference(CreateOrderRefundRefundsExternalReference externalReference) {
            Utils.checkNotNull(externalReference, "externalReference");
            this.externalReference = Optional.ofNullable(externalReference);
            return this;
        }

        public Builder externalReference(Optional<? extends CreateOrderRefundRefundsExternalReference> externalReference) {
            Utils.checkNotNull(externalReference, "externalReference");
            this.externalReference = externalReference;
            return this;
        }


        /**
         * A refund can optionally be linked to specific order lines.
         * 
         * <p>The lines will show the `quantity`, `discountAmount`, `vatAmount`, and `totalAmount` refunded. If the line was partially refunded, these values will be different from the values in response from the [Get payment](get-payment) endpoint.
         */
        public Builder lines(List<CreateOrderRefundLinesOutput> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = Optional.ofNullable(lines);
            return this;
        }

        /**
         * A refund can optionally be linked to specific order lines.
         * 
         * <p>The lines will show the `quantity`, `discountAmount`, `vatAmount`, and `totalAmount` refunded. If the line was partially refunded, these values will be different from the values in response from the [Get payment](get-payment) endpoint.
         */
        public Builder lines(Optional<? extends List<CreateOrderRefundLinesOutput>> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = lines;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(CreateOrderRefundLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends CreateOrderRefundLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public CreateOrderRefundResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }

            return new CreateOrderRefundResponseBody(
                resource, id, mode,
                description, amount, settlementAmount,
                metadata, orderId, settlementId,
                status, createdAt, externalReference,
                lines, links);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"refund\"",
                        new TypeReference<Optional<String>>() {});
    }
}
