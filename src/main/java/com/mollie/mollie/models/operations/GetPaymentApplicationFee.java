/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
/**
 * GetPaymentApplicationFee - With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
 * 
 * If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
 * 
 * If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the `routing` parameter.
 */

public class GetPaymentApplicationFee {

    /**
     * The fee that you wish to charge.
     * 
     * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends GetPaymentPaymentsAmount> amount;

    /**
     * The description of the application fee. This will appear on settlement reports towards both you and the connected merchant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonCreator
    public GetPaymentApplicationFee(
            @JsonProperty("amount") Optional<? extends GetPaymentPaymentsAmount> amount,
            @JsonProperty("description") Optional<String> description) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        this.amount = amount;
        this.description = description;
    }
    
    public GetPaymentApplicationFee() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The fee that you wish to charge.
     * 
     * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetPaymentPaymentsAmount> amount() {
        return (Optional<GetPaymentPaymentsAmount>) amount;
    }

    /**
     * The description of the application fee. This will appear on settlement reports towards both you and the connected merchant.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The fee that you wish to charge.
     * 
     * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
     */
    public GetPaymentApplicationFee withAmount(GetPaymentPaymentsAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The fee that you wish to charge.
     * 
     * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
     */
    public GetPaymentApplicationFee withAmount(Optional<? extends GetPaymentPaymentsAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The description of the application fee. This will appear on settlement reports towards both you and the connected merchant.
     */
    public GetPaymentApplicationFee withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of the application fee. This will appear on settlement reports towards both you and the connected merchant.
     */
    public GetPaymentApplicationFee withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPaymentApplicationFee other = (GetPaymentApplicationFee) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.description, other.description);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            description);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPaymentApplicationFee.class,
                "amount", amount,
                "description", description);
    }
    
    public final static class Builder {
 
        private Optional<? extends GetPaymentPaymentsAmount> amount = Optional.empty();
 
        private Optional<String> description = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The fee that you wish to charge.
         * 
         * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
         */
        public Builder amount(GetPaymentPaymentsAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The fee that you wish to charge.
         * 
         * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
         */
        public Builder amount(Optional<? extends GetPaymentPaymentsAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The description of the application fee. This will appear on settlement reports towards both you and the connected merchant.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the application fee. This will appear on settlement reports towards both you and the connected merchant.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }
        
        public GetPaymentApplicationFee build() {
            return new GetPaymentApplicationFee(
                amount,
                description);
        }
    }
}

