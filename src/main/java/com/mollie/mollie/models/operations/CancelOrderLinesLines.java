/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class CancelOrderLinesLines {

    /**
     * The ID of the order line. For example: `odl_dgtxyl`.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The number of items that should be canceled for this order line. When this parameter is omitted, the whole order line will be canceled. When part of the line has been shipped, the remaining quantity will be canceled and the order line will be marked `completed`.
     * 
     * Must be less than the number of items already shipped or canceled for this order line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private JsonNullable<Long> quantity;

    /**
     * The amount that you want to cancel. In almost all cases, Mollie can determine the amount automatically.
     * 
     * The amount is required only if you are *partially* canceling an order line which has a non-zero `discountAmount`.
     * 
     * The amount you can cancel depends on various properties of the order line and the cancel order lines request. The maximum that can be canceled is `unit price x quantity to cancel`.
     * 
     * The minimum amount depends on the discount applied to the line, the quantity already shipped or canceled, the amounts already shipped or canceled and the quantity you want to cancel.
     * 
     * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<? extends CancelOrderLinesAmount> amount;

    @JsonCreator
    public CancelOrderLinesLines(
            @JsonProperty("id") String id,
            @JsonProperty("quantity") JsonNullable<Long> quantity,
            @JsonProperty("amount") JsonNullable<? extends CancelOrderLinesAmount> amount) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(amount, "amount");
        this.id = id;
        this.quantity = quantity;
        this.amount = amount;
    }
    
    public CancelOrderLinesLines(
            String id) {
        this(id, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The ID of the order line. For example: `odl_dgtxyl`.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The number of items that should be canceled for this order line. When this parameter is omitted, the whole order line will be canceled. When part of the line has been shipped, the remaining quantity will be canceled and the order line will be marked `completed`.
     * 
     * Must be less than the number of items already shipped or canceled for this order line.
     */
    @JsonIgnore
    public JsonNullable<Long> quantity() {
        return quantity;
    }

    /**
     * The amount that you want to cancel. In almost all cases, Mollie can determine the amount automatically.
     * 
     * The amount is required only if you are *partially* canceling an order line which has a non-zero `discountAmount`.
     * 
     * The amount you can cancel depends on various properties of the order line and the cancel order lines request. The maximum that can be canceled is `unit price x quantity to cancel`.
     * 
     * The minimum amount depends on the discount applied to the line, the quantity already shipped or canceled, the amounts already shipped or canceled and the quantity you want to cancel.
     * 
     * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CancelOrderLinesAmount> amount() {
        return (JsonNullable<CancelOrderLinesAmount>) amount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the order line. For example: `odl_dgtxyl`.
     */
    public CancelOrderLinesLines withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The number of items that should be canceled for this order line. When this parameter is omitted, the whole order line will be canceled. When part of the line has been shipped, the remaining quantity will be canceled and the order line will be marked `completed`.
     * 
     * Must be less than the number of items already shipped or canceled for this order line.
     */
    public CancelOrderLinesLines withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = JsonNullable.of(quantity);
        return this;
    }

    /**
     * The number of items that should be canceled for this order line. When this parameter is omitted, the whole order line will be canceled. When part of the line has been shipped, the remaining quantity will be canceled and the order line will be marked `completed`.
     * 
     * Must be less than the number of items already shipped or canceled for this order line.
     */
    public CancelOrderLinesLines withQuantity(JsonNullable<Long> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * The amount that you want to cancel. In almost all cases, Mollie can determine the amount automatically.
     * 
     * The amount is required only if you are *partially* canceling an order line which has a non-zero `discountAmount`.
     * 
     * The amount you can cancel depends on various properties of the order line and the cancel order lines request. The maximum that can be canceled is `unit price x quantity to cancel`.
     * 
     * The minimum amount depends on the discount applied to the line, the quantity already shipped or canceled, the amounts already shipped or canceled and the quantity you want to cancel.
     * 
     * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically.
     */
    public CancelOrderLinesLines withAmount(CancelOrderLinesAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * The amount that you want to cancel. In almost all cases, Mollie can determine the amount automatically.
     * 
     * The amount is required only if you are *partially* canceling an order line which has a non-zero `discountAmount`.
     * 
     * The amount you can cancel depends on various properties of the order line and the cancel order lines request. The maximum that can be canceled is `unit price x quantity to cancel`.
     * 
     * The minimum amount depends on the discount applied to the line, the quantity already shipped or canceled, the amounts already shipped or canceled and the quantity you want to cancel.
     * 
     * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically.
     */
    public CancelOrderLinesLines withAmount(JsonNullable<? extends CancelOrderLinesAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CancelOrderLinesLines other = (CancelOrderLinesLines) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            quantity,
            amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CancelOrderLinesLines.class,
                "id", id,
                "quantity", quantity,
                "amount", amount);
    }
    
    public final static class Builder {
 
        private String id;
 
        private JsonNullable<Long> quantity = JsonNullable.undefined();
 
        private JsonNullable<? extends CancelOrderLinesAmount> amount = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the order line. For example: `odl_dgtxyl`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The number of items that should be canceled for this order line. When this parameter is omitted, the whole order line will be canceled. When part of the line has been shipped, the remaining quantity will be canceled and the order line will be marked `completed`.
         * 
         * Must be less than the number of items already shipped or canceled for this order line.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = JsonNullable.of(quantity);
            return this;
        }

        /**
         * The number of items that should be canceled for this order line. When this parameter is omitted, the whole order line will be canceled. When part of the line has been shipped, the remaining quantity will be canceled and the order line will be marked `completed`.
         * 
         * Must be less than the number of items already shipped or canceled for this order line.
         */
        public Builder quantity(JsonNullable<Long> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * The amount that you want to cancel. In almost all cases, Mollie can determine the amount automatically.
         * 
         * The amount is required only if you are *partially* canceling an order line which has a non-zero `discountAmount`.
         * 
         * The amount you can cancel depends on various properties of the order line and the cancel order lines request. The maximum that can be canceled is `unit price x quantity to cancel`.
         * 
         * The minimum amount depends on the discount applied to the line, the quantity already shipped or canceled, the amounts already shipped or canceled and the quantity you want to cancel.
         * 
         * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically.
         */
        public Builder amount(CancelOrderLinesAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * The amount that you want to cancel. In almost all cases, Mollie can determine the amount automatically.
         * 
         * The amount is required only if you are *partially* canceling an order line which has a non-zero `discountAmount`.
         * 
         * The amount you can cancel depends on various properties of the order line and the cancel order lines request. The maximum that can be canceled is `unit price x quantity to cancel`.
         * 
         * The minimum amount depends on the discount applied to the line, the quantity already shipped or canceled, the amounts already shipped or canceled and the quantity you want to cancel.
         * 
         * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically.
         */
        public Builder amount(JsonNullable<? extends CancelOrderLinesAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }
        
        public CancelOrderLinesLines build() {
            return new CancelOrderLinesLines(
                id,
                quantity,
                amount);
        }
    }
}

