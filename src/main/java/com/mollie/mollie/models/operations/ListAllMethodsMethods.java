/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListAllMethodsMethods {

    /**
     * Indicates the response contains a payment method object. Will always contain the string `method` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The unique identifier of the payment method. When used during [payment creation](create-payment), the payment method selection screen will be skipped.
     * 
     * <p>Possible values: `alma` `applepay` `bacs` `bancomatpay` `bancontact` `banktransfer` `belfius` `billie` `blik` `creditcard` `directdebit` `eps` `giftcard` `ideal` `in3` `kbc` `klarna` `klarnapaylater` `klarnapaynow` `klarnasliceit` `mybank` `paypal` `paysafecard` `przelewy24` `riverty` `satispay` `trustly` `twint` `voucher`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The full name of the payment method.
     * 
     * <p>If a `locale` parameter is provided, the name is translated to the given locale if possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The minimum payment amount required to use this payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumAmount")
    private Optional<? extends ListAllMethodsMinimumAmount> minimumAmount;

    /**
     * The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null` is returned instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximumAmount")
    private JsonNullable<? extends ListAllMethodsMaximumAmount> maximumAmount;

    /**
     * URLs of images representing the payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    private Optional<? extends ListAllMethodsImage> image;

    /**
     * The payment method's activation status for this profile.
     * 
     * <p>Possible values: `activated` `pending-boarding` `pending-review` `pending-external` `rejected`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * **Optional include.** Array of objects describing the pricing configuration applicable for this payment method on your account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing")
    private Optional<? extends List<ListAllMethodsPricing>> pricing;

    /**
     * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant for iDEAL, KBC/CBC, gift cards, and vouchers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuers")
    private Optional<? extends List<ListAllMethodsIssuers>> issuers;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends ListAllMethodsMethodsLinks> links;

    @JsonCreator
    public ListAllMethodsMethods(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("minimumAmount") Optional<? extends ListAllMethodsMinimumAmount> minimumAmount,
            @JsonProperty("maximumAmount") JsonNullable<? extends ListAllMethodsMaximumAmount> maximumAmount,
            @JsonProperty("image") Optional<? extends ListAllMethodsImage> image,
            @JsonProperty("status") JsonNullable<String> status,
            @JsonProperty("pricing") Optional<? extends List<ListAllMethodsPricing>> pricing,
            @JsonProperty("issuers") Optional<? extends List<ListAllMethodsIssuers>> issuers,
            @JsonProperty("_links") Optional<? extends ListAllMethodsMethodsLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        Utils.checkNotNull(maximumAmount, "maximumAmount");
        Utils.checkNotNull(image, "image");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(pricing, "pricing");
        Utils.checkNotNull(issuers, "issuers");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.description = description;
        this.minimumAmount = minimumAmount;
        this.maximumAmount = maximumAmount;
        this.image = image;
        this.status = status;
        this.pricing = pricing;
        this.issuers = issuers;
        this.links = links;
    }
    
    public ListAllMethodsMethods() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a payment method object. Will always contain the string `method` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The unique identifier of the payment method. When used during [payment creation](create-payment), the payment method selection screen will be skipped.
     * 
     * <p>Possible values: `alma` `applepay` `bacs` `bancomatpay` `bancontact` `banktransfer` `belfius` `billie` `blik` `creditcard` `directdebit` `eps` `giftcard` `ideal` `in3` `kbc` `klarna` `klarnapaylater` `klarnapaynow` `klarnasliceit` `mybank` `paypal` `paysafecard` `przelewy24` `riverty` `satispay` `trustly` `twint` `voucher`
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The full name of the payment method.
     * 
     * <p>If a `locale` parameter is provided, the name is translated to the given locale if possible.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The minimum payment amount required to use this payment method.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListAllMethodsMinimumAmount> minimumAmount() {
        return (Optional<ListAllMethodsMinimumAmount>) minimumAmount;
    }

    /**
     * The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null` is returned instead.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ListAllMethodsMaximumAmount> maximumAmount() {
        return (JsonNullable<ListAllMethodsMaximumAmount>) maximumAmount;
    }

    /**
     * URLs of images representing the payment method.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListAllMethodsImage> image() {
        return (Optional<ListAllMethodsImage>) image;
    }

    /**
     * The payment method's activation status for this profile.
     * 
     * <p>Possible values: `activated` `pending-boarding` `pending-review` `pending-external` `rejected`
     */
    @JsonIgnore
    public JsonNullable<String> status() {
        return status;
    }

    /**
     * **Optional include.** Array of objects describing the pricing configuration applicable for this payment method on your account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ListAllMethodsPricing>> pricing() {
        return (Optional<List<ListAllMethodsPricing>>) pricing;
    }

    /**
     * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant for iDEAL, KBC/CBC, gift cards, and vouchers.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ListAllMethodsIssuers>> issuers() {
        return (Optional<List<ListAllMethodsIssuers>>) issuers;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListAllMethodsMethodsLinks> links() {
        return (Optional<ListAllMethodsMethodsLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Indicates the response contains a payment method object. Will always contain the string `method` for this endpoint.
     */
    public ListAllMethodsMethods withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a payment method object. Will always contain the string `method` for this endpoint.
     */
    public ListAllMethodsMethods withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The unique identifier of the payment method. When used during [payment creation](create-payment), the payment method selection screen will be skipped.
     * 
     * <p>Possible values: `alma` `applepay` `bacs` `bancomatpay` `bancontact` `banktransfer` `belfius` `billie` `blik` `creditcard` `directdebit` `eps` `giftcard` `ideal` `in3` `kbc` `klarna` `klarnapaylater` `klarnapaynow` `klarnasliceit` `mybank` `paypal` `paysafecard` `przelewy24` `riverty` `satispay` `trustly` `twint` `voucher`
     */
    public ListAllMethodsMethods withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The unique identifier of the payment method. When used during [payment creation](create-payment), the payment method selection screen will be skipped.
     * 
     * <p>Possible values: `alma` `applepay` `bacs` `bancomatpay` `bancontact` `banktransfer` `belfius` `billie` `blik` `creditcard` `directdebit` `eps` `giftcard` `ideal` `in3` `kbc` `klarna` `klarnapaylater` `klarnapaynow` `klarnasliceit` `mybank` `paypal` `paysafecard` `przelewy24` `riverty` `satispay` `trustly` `twint` `voucher`
     */
    public ListAllMethodsMethods withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The full name of the payment method.
     * 
     * <p>If a `locale` parameter is provided, the name is translated to the given locale if possible.
     */
    public ListAllMethodsMethods withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The full name of the payment method.
     * 
     * <p>If a `locale` parameter is provided, the name is translated to the given locale if possible.
     */
    public ListAllMethodsMethods withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The minimum payment amount required to use this payment method.
     */
    public ListAllMethodsMethods withMinimumAmount(ListAllMethodsMinimumAmount minimumAmount) {
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        this.minimumAmount = Optional.ofNullable(minimumAmount);
        return this;
    }

    /**
     * The minimum payment amount required to use this payment method.
     */
    public ListAllMethodsMethods withMinimumAmount(Optional<? extends ListAllMethodsMinimumAmount> minimumAmount) {
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        this.minimumAmount = minimumAmount;
        return this;
    }

    /**
     * The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null` is returned instead.
     */
    public ListAllMethodsMethods withMaximumAmount(ListAllMethodsMaximumAmount maximumAmount) {
        Utils.checkNotNull(maximumAmount, "maximumAmount");
        this.maximumAmount = JsonNullable.of(maximumAmount);
        return this;
    }

    /**
     * The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null` is returned instead.
     */
    public ListAllMethodsMethods withMaximumAmount(JsonNullable<? extends ListAllMethodsMaximumAmount> maximumAmount) {
        Utils.checkNotNull(maximumAmount, "maximumAmount");
        this.maximumAmount = maximumAmount;
        return this;
    }

    /**
     * URLs of images representing the payment method.
     */
    public ListAllMethodsMethods withImage(ListAllMethodsImage image) {
        Utils.checkNotNull(image, "image");
        this.image = Optional.ofNullable(image);
        return this;
    }

    /**
     * URLs of images representing the payment method.
     */
    public ListAllMethodsMethods withImage(Optional<? extends ListAllMethodsImage> image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
        return this;
    }

    /**
     * The payment method's activation status for this profile.
     * 
     * <p>Possible values: `activated` `pending-boarding` `pending-review` `pending-external` `rejected`
     */
    public ListAllMethodsMethods withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The payment method's activation status for this profile.
     * 
     * <p>Possible values: `activated` `pending-boarding` `pending-review` `pending-external` `rejected`
     */
    public ListAllMethodsMethods withStatus(JsonNullable<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * **Optional include.** Array of objects describing the pricing configuration applicable for this payment method on your account.
     */
    public ListAllMethodsMethods withPricing(List<ListAllMethodsPricing> pricing) {
        Utils.checkNotNull(pricing, "pricing");
        this.pricing = Optional.ofNullable(pricing);
        return this;
    }

    /**
     * **Optional include.** Array of objects describing the pricing configuration applicable for this payment method on your account.
     */
    public ListAllMethodsMethods withPricing(Optional<? extends List<ListAllMethodsPricing>> pricing) {
        Utils.checkNotNull(pricing, "pricing");
        this.pricing = pricing;
        return this;
    }

    /**
     * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant for iDEAL, KBC/CBC, gift cards, and vouchers.
     */
    public ListAllMethodsMethods withIssuers(List<ListAllMethodsIssuers> issuers) {
        Utils.checkNotNull(issuers, "issuers");
        this.issuers = Optional.ofNullable(issuers);
        return this;
    }

    /**
     * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant for iDEAL, KBC/CBC, gift cards, and vouchers.
     */
    public ListAllMethodsMethods withIssuers(Optional<? extends List<ListAllMethodsIssuers>> issuers) {
        Utils.checkNotNull(issuers, "issuers");
        this.issuers = issuers;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public ListAllMethodsMethods withLinks(ListAllMethodsMethodsLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public ListAllMethodsMethods withLinks(Optional<? extends ListAllMethodsMethodsLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllMethodsMethods other = (ListAllMethodsMethods) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.minimumAmount, other.minimumAmount) &&
            Objects.deepEquals(this.maximumAmount, other.maximumAmount) &&
            Objects.deepEquals(this.image, other.image) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.pricing, other.pricing) &&
            Objects.deepEquals(this.issuers, other.issuers) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            description,
            minimumAmount,
            maximumAmount,
            image,
            status,
            pricing,
            issuers,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAllMethodsMethods.class,
                "resource", resource,
                "id", id,
                "description", description,
                "minimumAmount", minimumAmount,
                "maximumAmount", maximumAmount,
                "image", image,
                "status", status,
                "pricing", pricing,
                "issuers", issuers,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<? extends ListAllMethodsMinimumAmount> minimumAmount = Optional.empty();
 
        private JsonNullable<? extends ListAllMethodsMaximumAmount> maximumAmount = JsonNullable.undefined();
 
        private Optional<? extends ListAllMethodsImage> image = Optional.empty();
 
        private JsonNullable<String> status = JsonNullable.undefined();
 
        private Optional<? extends List<ListAllMethodsPricing>> pricing = Optional.empty();
 
        private Optional<? extends List<ListAllMethodsIssuers>> issuers = Optional.empty();
 
        private Optional<? extends ListAllMethodsMethodsLinks> links = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a payment method object. Will always contain the string `method` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a payment method object. Will always contain the string `method` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The unique identifier of the payment method. When used during [payment creation](create-payment), the payment method selection screen will be skipped.
         * 
         * <p>Possible values: `alma` `applepay` `bacs` `bancomatpay` `bancontact` `banktransfer` `belfius` `billie` `blik` `creditcard` `directdebit` `eps` `giftcard` `ideal` `in3` `kbc` `klarna` `klarnapaylater` `klarnapaynow` `klarnasliceit` `mybank` `paypal` `paysafecard` `przelewy24` `riverty` `satispay` `trustly` `twint` `voucher`
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The unique identifier of the payment method. When used during [payment creation](create-payment), the payment method selection screen will be skipped.
         * 
         * <p>Possible values: `alma` `applepay` `bacs` `bancomatpay` `bancontact` `banktransfer` `belfius` `billie` `blik` `creditcard` `directdebit` `eps` `giftcard` `ideal` `in3` `kbc` `klarna` `klarnapaylater` `klarnapaynow` `klarnasliceit` `mybank` `paypal` `paysafecard` `przelewy24` `riverty` `satispay` `trustly` `twint` `voucher`
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The full name of the payment method.
         * 
         * <p>If a `locale` parameter is provided, the name is translated to the given locale if possible.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The full name of the payment method.
         * 
         * <p>If a `locale` parameter is provided, the name is translated to the given locale if possible.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The minimum payment amount required to use this payment method.
         */
        public Builder minimumAmount(ListAllMethodsMinimumAmount minimumAmount) {
            Utils.checkNotNull(minimumAmount, "minimumAmount");
            this.minimumAmount = Optional.ofNullable(minimumAmount);
            return this;
        }

        /**
         * The minimum payment amount required to use this payment method.
         */
        public Builder minimumAmount(Optional<? extends ListAllMethodsMinimumAmount> minimumAmount) {
            Utils.checkNotNull(minimumAmount, "minimumAmount");
            this.minimumAmount = minimumAmount;
            return this;
        }

        /**
         * The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null` is returned instead.
         */
        public Builder maximumAmount(ListAllMethodsMaximumAmount maximumAmount) {
            Utils.checkNotNull(maximumAmount, "maximumAmount");
            this.maximumAmount = JsonNullable.of(maximumAmount);
            return this;
        }

        /**
         * The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null` is returned instead.
         */
        public Builder maximumAmount(JsonNullable<? extends ListAllMethodsMaximumAmount> maximumAmount) {
            Utils.checkNotNull(maximumAmount, "maximumAmount");
            this.maximumAmount = maximumAmount;
            return this;
        }

        /**
         * URLs of images representing the payment method.
         */
        public Builder image(ListAllMethodsImage image) {
            Utils.checkNotNull(image, "image");
            this.image = Optional.ofNullable(image);
            return this;
        }

        /**
         * URLs of images representing the payment method.
         */
        public Builder image(Optional<? extends ListAllMethodsImage> image) {
            Utils.checkNotNull(image, "image");
            this.image = image;
            return this;
        }

        /**
         * The payment method's activation status for this profile.
         * 
         * <p>Possible values: `activated` `pending-boarding` `pending-review` `pending-external` `rejected`
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The payment method's activation status for this profile.
         * 
         * <p>Possible values: `activated` `pending-boarding` `pending-review` `pending-external` `rejected`
         */
        public Builder status(JsonNullable<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * **Optional include.** Array of objects describing the pricing configuration applicable for this payment method on your account.
         */
        public Builder pricing(List<ListAllMethodsPricing> pricing) {
            Utils.checkNotNull(pricing, "pricing");
            this.pricing = Optional.ofNullable(pricing);
            return this;
        }

        /**
         * **Optional include.** Array of objects describing the pricing configuration applicable for this payment method on your account.
         */
        public Builder pricing(Optional<? extends List<ListAllMethodsPricing>> pricing) {
            Utils.checkNotNull(pricing, "pricing");
            this.pricing = pricing;
            return this;
        }

        /**
         * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant for iDEAL, KBC/CBC, gift cards, and vouchers.
         */
        public Builder issuers(List<ListAllMethodsIssuers> issuers) {
            Utils.checkNotNull(issuers, "issuers");
            this.issuers = Optional.ofNullable(issuers);
            return this;
        }

        /**
         * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant for iDEAL, KBC/CBC, gift cards, and vouchers.
         */
        public Builder issuers(Optional<? extends List<ListAllMethodsIssuers>> issuers) {
            Utils.checkNotNull(issuers, "issuers");
            this.issuers = issuers;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(ListAllMethodsMethodsLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends ListAllMethodsMethodsLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public ListAllMethodsMethods build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }
            return new ListAllMethodsMethods(
                resource,
                id,
                description,
                minimumAmount,
                maximumAmount,
                image,
                status,
                pricing,
                issuers,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"method\"",
                        new TypeReference<Optional<String>>() {});
    }
}
