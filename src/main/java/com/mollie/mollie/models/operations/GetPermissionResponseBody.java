/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * GetPermissionResponseBody
 * 
 * <p>The permission object.
 */
public class GetPermissionResponseBody {
    /**
     * Indicates the response contains a permission object. Will always contain the string `permission` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this permission. Example: `payments.read`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * A short description of what kind of access the permission enables.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Whether this permission is granted to the app by the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("granted")
    private Optional<Boolean> granted;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends GetPermissionLinks> links;

    @JsonCreator
    public GetPermissionResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("granted") Optional<Boolean> granted,
            @JsonProperty("_links") Optional<? extends GetPermissionLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(granted, "granted");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.description = description;
        this.granted = granted;
        this.links = links;
    }
    
    public GetPermissionResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a permission object. Will always contain the string `permission` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this permission. Example: `payments.read`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * A short description of what kind of access the permission enables.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Whether this permission is granted to the app by the organization.
     */
    @JsonIgnore
    public Optional<Boolean> granted() {
        return granted;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetPermissionLinks> links() {
        return (Optional<GetPermissionLinks>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a permission object. Will always contain the string `permission` for this endpoint.
     */
    public GetPermissionResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains a permission object. Will always contain the string `permission` for this endpoint.
     */
    public GetPermissionResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this permission. Example: `payments.read`.
     */
    public GetPermissionResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * The identifier uniquely referring to this permission. Example: `payments.read`.
     */
    public GetPermissionResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A short description of what kind of access the permission enables.
     */
    public GetPermissionResponseBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * A short description of what kind of access the permission enables.
     */
    public GetPermissionResponseBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Whether this permission is granted to the app by the organization.
     */
    public GetPermissionResponseBody withGranted(boolean granted) {
        Utils.checkNotNull(granted, "granted");
        this.granted = Optional.ofNullable(granted);
        return this;
    }


    /**
     * Whether this permission is granted to the app by the organization.
     */
    public GetPermissionResponseBody withGranted(Optional<Boolean> granted) {
        Utils.checkNotNull(granted, "granted");
        this.granted = granted;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetPermissionResponseBody withLinks(GetPermissionLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetPermissionResponseBody withLinks(Optional<? extends GetPermissionLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPermissionResponseBody other = (GetPermissionResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.granted, other.granted) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, description,
            granted, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPermissionResponseBody.class,
                "resource", resource,
                "id", id,
                "description", description,
                "granted", granted,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource;

        private Optional<String> id = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<Boolean> granted = Optional.empty();

        private Optional<? extends GetPermissionLinks> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a permission object. Will always contain the string `permission` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a permission object. Will always contain the string `permission` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this permission. Example: `payments.read`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this permission. Example: `payments.read`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * A short description of what kind of access the permission enables.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A short description of what kind of access the permission enables.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * Whether this permission is granted to the app by the organization.
         */
        public Builder granted(boolean granted) {
            Utils.checkNotNull(granted, "granted");
            this.granted = Optional.ofNullable(granted);
            return this;
        }

        /**
         * Whether this permission is granted to the app by the organization.
         */
        public Builder granted(Optional<Boolean> granted) {
            Utils.checkNotNull(granted, "granted");
            this.granted = granted;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetPermissionLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends GetPermissionLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public GetPermissionResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }

            return new GetPermissionResponseBody(
                resource, id, description,
                granted, links);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"permission\"",
                        new TypeReference<Optional<String>>() {});
    }
}
