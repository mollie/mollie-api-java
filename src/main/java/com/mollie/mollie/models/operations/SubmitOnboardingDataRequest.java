/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class SubmitOnboardingDataRequest {
    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=idempotency-key")
    private Optional<String> idempotencyKey;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends SubmitOnboardingDataRequestBody> requestBody;

    @JsonCreator
    public SubmitOnboardingDataRequest(
            Optional<String> idempotencyKey,
            Optional<? extends SubmitOnboardingDataRequestBody> requestBody) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        Utils.checkNotNull(requestBody, "requestBody");
        this.idempotencyKey = idempotencyKey;
        this.requestBody = requestBody;
    }
    
    public SubmitOnboardingDataRequest() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SubmitOnboardingDataRequestBody> requestBody() {
        return (Optional<SubmitOnboardingDataRequestBody>) requestBody;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public SubmitOnboardingDataRequest withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }


    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public SubmitOnboardingDataRequest withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    public SubmitOnboardingDataRequest withRequestBody(SubmitOnboardingDataRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }


    public SubmitOnboardingDataRequest withRequestBody(Optional<? extends SubmitOnboardingDataRequestBody> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubmitOnboardingDataRequest other = (SubmitOnboardingDataRequest) o;
        return 
            Utils.enhancedDeepEquals(this.idempotencyKey, other.idempotencyKey) &&
            Utils.enhancedDeepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            idempotencyKey, requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SubmitOnboardingDataRequest.class,
                "idempotencyKey", idempotencyKey,
                "requestBody", requestBody);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> idempotencyKey = Optional.empty();

        private Optional<? extends SubmitOnboardingDataRequestBody> requestBody = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }


        public Builder requestBody(SubmitOnboardingDataRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends SubmitOnboardingDataRequestBody> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        public SubmitOnboardingDataRequest build() {

            return new SubmitOnboardingDataRequest(
                idempotencyKey, requestBody);
        }

    }
}
