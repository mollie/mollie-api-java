/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class Routes {
    /**
     * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this route. Mollie assigns this identifier at route creation time. Mollie
     * will always refer to the route by this ID. Example: `crt_dyARQ3JzCgtPDhU2Pbq3J`.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The unique identifier of the payment. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
     * The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonProperty("paymentId")
    private String paymentId;

    /**
     * The amount of the route.
     * That amount that will be routed to the specified destination.
     */
    @JsonProperty("amount")
    private PaymentListRoutesAmount amount;

    /**
     * The description of the route. This description is shown in the reports.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The destination of the route.
     */
    @JsonProperty("destination")
    private PaymentListRoutesDestination destination;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private PaymentListRoutesDelayedRoutingLinks links;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonProperty("createdAt")
    private String createdAt;

    @JsonCreator
    public Routes(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") String id,
            @JsonProperty("paymentId") String paymentId,
            @JsonProperty("amount") PaymentListRoutesAmount amount,
            @JsonProperty("description") String description,
            @JsonProperty("destination") PaymentListRoutesDestination destination,
            @JsonProperty("_links") PaymentListRoutesDelayedRoutingLinks links,
            @JsonProperty("createdAt") String createdAt) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(destination, "destination");
        Utils.checkNotNull(links, "links");
        Utils.checkNotNull(createdAt, "createdAt");
        this.resource = resource;
        this.id = id;
        this.paymentId = paymentId;
        this.amount = amount;
        this.description = description;
        this.destination = destination;
        this.links = links;
        this.createdAt = createdAt;
    }
    
    public Routes(
            String id,
            String paymentId,
            PaymentListRoutesAmount amount,
            String description,
            PaymentListRoutesDestination destination,
            PaymentListRoutesDelayedRoutingLinks links,
            String createdAt) {
        this(Optional.empty(), id, paymentId,
            amount, description, destination,
            links, createdAt);
    }

    /**
     * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this route. Mollie assigns this identifier at route creation time. Mollie
     * will always refer to the route by this ID. Example: `crt_dyARQ3JzCgtPDhU2Pbq3J`.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The unique identifier of the payment. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
     * The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonIgnore
    public String paymentId() {
        return paymentId;
    }

    /**
     * The amount of the route.
     * That amount that will be routed to the specified destination.
     */
    @JsonIgnore
    public PaymentListRoutesAmount amount() {
        return amount;
    }

    /**
     * The description of the route. This description is shown in the reports.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The destination of the route.
     */
    @JsonIgnore
    public PaymentListRoutesDestination destination() {
        return destination;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public PaymentListRoutesDelayedRoutingLinks links() {
        return links;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
     */
    public Routes withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
     */
    public Routes withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this route. Mollie assigns this identifier at route creation time. Mollie
     * will always refer to the route by this ID. Example: `crt_dyARQ3JzCgtPDhU2Pbq3J`.
     */
    public Routes withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The unique identifier of the payment. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
     * The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    public Routes withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    /**
     * The amount of the route.
     * That amount that will be routed to the specified destination.
     */
    public Routes withAmount(PaymentListRoutesAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The description of the route. This description is shown in the reports.
     */
    public Routes withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The destination of the route.
     */
    public Routes withDestination(PaymentListRoutesDestination destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = destination;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public Routes withLinks(PaymentListRoutesDelayedRoutingLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public Routes withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Routes other = (Routes) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.paymentId, other.paymentId) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.destination, other.destination) &&
            Utils.enhancedDeepEquals(this.links, other.links) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, paymentId,
            amount, description, destination,
            links, createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Routes.class,
                "resource", resource,
                "id", id,
                "paymentId", paymentId,
                "amount", amount,
                "description", description,
                "destination", destination,
                "links", links,
                "createdAt", createdAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource;

        private String id;

        private String paymentId;

        private PaymentListRoutesAmount amount;

        private String description;

        private PaymentListRoutesDestination destination;

        private PaymentListRoutesDelayedRoutingLinks links;

        private String createdAt;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this route. Mollie assigns this identifier at route creation time. Mollie
         * will always refer to the route by this ID. Example: `crt_dyARQ3JzCgtPDhU2Pbq3J`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The unique identifier of the payment. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
         * The full payment object can be retrieved via the payment URL in the `_links` object.
         */
        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }


        /**
         * The amount of the route.
         * That amount that will be routed to the specified destination.
         */
        public Builder amount(PaymentListRoutesAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * The description of the route. This description is shown in the reports.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The destination of the route.
         */
        public Builder destination(PaymentListRoutesDestination destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = destination;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(PaymentListRoutesDelayedRoutingLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Routes build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }

            return new Routes(
                resource, id, paymentId,
                amount, description, destination,
                links, createdAt);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"route\"",
                        new TypeReference<Optional<String>>() {});
    }
}
