/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * GetOpenSettlementPeriods
 * 
 * <p>For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
 * transactions are grouped into 'period' objects â€” one for each calendar month.
 * 
 * <p>For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
 * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
 * 
 * <p>Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
 * look as follows: `{"2024": {"04": {...}, "05": {...&rbrace;&rbrace;}`. The year and month in this documentation are referred as `&lt;year&gt;` and `&lt;month&gt;`.
 * 
 * <p>The example response should give a good idea of what this looks like in practise.
 */
public class GetOpenSettlementPeriods {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("<year>")
    private Optional<? extends GetOpenSettlementLessThanYearGreaterThan> lessThanYearGreaterThan;

    @JsonCreator
    public GetOpenSettlementPeriods(
            @JsonProperty("<year>") Optional<? extends GetOpenSettlementLessThanYearGreaterThan> lessThanYearGreaterThan) {
        Utils.checkNotNull(lessThanYearGreaterThan, "lessThanYearGreaterThan");
        this.lessThanYearGreaterThan = lessThanYearGreaterThan;
    }
    
    public GetOpenSettlementPeriods() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetOpenSettlementLessThanYearGreaterThan> lessThanYearGreaterThan() {
        return (Optional<GetOpenSettlementLessThanYearGreaterThan>) lessThanYearGreaterThan;
    }

    public static Builder builder() {
        return new Builder();
    }


    public GetOpenSettlementPeriods withLessThanYearGreaterThan(GetOpenSettlementLessThanYearGreaterThan lessThanYearGreaterThan) {
        Utils.checkNotNull(lessThanYearGreaterThan, "lessThanYearGreaterThan");
        this.lessThanYearGreaterThan = Optional.ofNullable(lessThanYearGreaterThan);
        return this;
    }


    public GetOpenSettlementPeriods withLessThanYearGreaterThan(Optional<? extends GetOpenSettlementLessThanYearGreaterThan> lessThanYearGreaterThan) {
        Utils.checkNotNull(lessThanYearGreaterThan, "lessThanYearGreaterThan");
        this.lessThanYearGreaterThan = lessThanYearGreaterThan;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetOpenSettlementPeriods other = (GetOpenSettlementPeriods) o;
        return 
            Utils.enhancedDeepEquals(this.lessThanYearGreaterThan, other.lessThanYearGreaterThan);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            lessThanYearGreaterThan);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetOpenSettlementPeriods.class,
                "lessThanYearGreaterThan", lessThanYearGreaterThan);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends GetOpenSettlementLessThanYearGreaterThan> lessThanYearGreaterThan = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder lessThanYearGreaterThan(GetOpenSettlementLessThanYearGreaterThan lessThanYearGreaterThan) {
            Utils.checkNotNull(lessThanYearGreaterThan, "lessThanYearGreaterThan");
            this.lessThanYearGreaterThan = Optional.ofNullable(lessThanYearGreaterThan);
            return this;
        }

        public Builder lessThanYearGreaterThan(Optional<? extends GetOpenSettlementLessThanYearGreaterThan> lessThanYearGreaterThan) {
            Utils.checkNotNull(lessThanYearGreaterThan, "lessThanYearGreaterThan");
            this.lessThanYearGreaterThan = lessThanYearGreaterThan;
            return this;
        }

        public GetOpenSettlementPeriods build() {

            return new GetOpenSettlementPeriods(
                lessThanYearGreaterThan);
        }

    }
}
