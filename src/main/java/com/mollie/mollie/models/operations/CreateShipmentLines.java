/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateShipmentLines {

    /**
     * The ID of the order line. For example: `odl_dgtxyl`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The number of items that should be shipped for this order line. When this parameter is omitted, all remaining unshipped items of this order line will be considered 'shipped'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private JsonNullable<Long> quantity;

    /**
     * The amount that you want to ship. In almost all cases, Mollie can determine the amount automatically.
     * 
     * The amount is required only if you are *partially* fulfilling an order line which has a non-zero `discountAmount`.
     * 
     * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<? extends CreateShipmentAmount> amount;

    @JsonCreator
    public CreateShipmentLines(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("quantity") JsonNullable<Long> quantity,
            @JsonProperty("amount") JsonNullable<? extends CreateShipmentAmount> amount) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(amount, "amount");
        this.id = id;
        this.quantity = quantity;
        this.amount = amount;
    }
    
    public CreateShipmentLines() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The ID of the order line. For example: `odl_dgtxyl`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The number of items that should be shipped for this order line. When this parameter is omitted, all remaining unshipped items of this order line will be considered 'shipped'.
     */
    @JsonIgnore
    public JsonNullable<Long> quantity() {
        return quantity;
    }

    /**
     * The amount that you want to ship. In almost all cases, Mollie can determine the amount automatically.
     * 
     * The amount is required only if you are *partially* fulfilling an order line which has a non-zero `discountAmount`.
     * 
     * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateShipmentAmount> amount() {
        return (JsonNullable<CreateShipmentAmount>) amount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the order line. For example: `odl_dgtxyl`.
     */
    public CreateShipmentLines withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The ID of the order line. For example: `odl_dgtxyl`.
     */
    public CreateShipmentLines withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The number of items that should be shipped for this order line. When this parameter is omitted, all remaining unshipped items of this order line will be considered 'shipped'.
     */
    public CreateShipmentLines withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = JsonNullable.of(quantity);
        return this;
    }

    /**
     * The number of items that should be shipped for this order line. When this parameter is omitted, all remaining unshipped items of this order line will be considered 'shipped'.
     */
    public CreateShipmentLines withQuantity(JsonNullable<Long> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * The amount that you want to ship. In almost all cases, Mollie can determine the amount automatically.
     * 
     * The amount is required only if you are *partially* fulfilling an order line which has a non-zero `discountAmount`.
     * 
     * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically.
     */
    public CreateShipmentLines withAmount(CreateShipmentAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * The amount that you want to ship. In almost all cases, Mollie can determine the amount automatically.
     * 
     * The amount is required only if you are *partially* fulfilling an order line which has a non-zero `discountAmount`.
     * 
     * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically.
     */
    public CreateShipmentLines withAmount(JsonNullable<? extends CreateShipmentAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateShipmentLines other = (CreateShipmentLines) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            quantity,
            amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateShipmentLines.class,
                "id", id,
                "quantity", quantity,
                "amount", amount);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private JsonNullable<Long> quantity = JsonNullable.undefined();
 
        private JsonNullable<? extends CreateShipmentAmount> amount = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the order line. For example: `odl_dgtxyl`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the order line. For example: `odl_dgtxyl`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The number of items that should be shipped for this order line. When this parameter is omitted, all remaining unshipped items of this order line will be considered 'shipped'.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = JsonNullable.of(quantity);
            return this;
        }

        /**
         * The number of items that should be shipped for this order line. When this parameter is omitted, all remaining unshipped items of this order line will be considered 'shipped'.
         */
        public Builder quantity(JsonNullable<Long> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * The amount that you want to ship. In almost all cases, Mollie can determine the amount automatically.
         * 
         * The amount is required only if you are *partially* fulfilling an order line which has a non-zero `discountAmount`.
         * 
         * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically.
         */
        public Builder amount(CreateShipmentAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * The amount that you want to ship. In almost all cases, Mollie can determine the amount automatically.
         * 
         * The amount is required only if you are *partially* fulfilling an order line which has a non-zero `discountAmount`.
         * 
         * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically.
         */
        public Builder amount(JsonNullable<? extends CreateShipmentAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }
        
        public CreateShipmentLines build() {
            return new CreateShipmentLines(
                id,
                quantity,
                amount);
        }
    }
}

