/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Settlements {
    /**
     * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
     * endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * The settlement's bank reference, as found in your Mollie account and on your bank statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;

    /**
     * The date on which the settlement was settled, in ISO 8601 format.
     * 
     * <p>For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
     * date is available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settledAt")
    private JsonNullable<String> settledAt;

    /**
     * The status of the settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends ListSettlementsStatus> status;

    /**
     * The total amount of the settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends ListSettlementsAmount> amount;

    /**
     * The balance token that the settlement was settled to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balanceId")
    private Optional<String> balanceId;

    /**
     * The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceId")
    private JsonNullable<String> invoiceId;

    /**
     * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
     * transactions are grouped into 'period' objects — one for each calendar month.
     * 
     * <p>For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
     * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
     * 
     * <p>Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
     * look as follows: `{"2024": {"04": {...}, "05": {...&rbrace;&rbrace;}`. The year and month in this documentation are referred as `&lt;year&gt;` and `&lt;month&gt;`.
     * 
     * <p>The example response should give a good idea of what this looks like in practise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("periods")
    private Optional<? extends Map<String, Object>> periods;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends ListSettlementsSettlementsLinks> links;

    @JsonCreator
    public Settlements(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("reference") JsonNullable<String> reference,
            @JsonProperty("settledAt") JsonNullable<String> settledAt,
            @JsonProperty("status") Optional<? extends ListSettlementsStatus> status,
            @JsonProperty("amount") Optional<? extends ListSettlementsAmount> amount,
            @JsonProperty("balanceId") Optional<String> balanceId,
            @JsonProperty("invoiceId") JsonNullable<String> invoiceId,
            @JsonProperty("periods") Optional<? extends Map<String, Object>> periods,
            @JsonProperty("_links") Optional<? extends ListSettlementsSettlementsLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(settledAt, "settledAt");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(balanceId, "balanceId");
        Utils.checkNotNull(invoiceId, "invoiceId");
        Utils.checkNotNull(periods, "periods");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.createdAt = createdAt;
        this.reference = reference;
        this.settledAt = settledAt;
        this.status = status;
        this.amount = amount;
        this.balanceId = balanceId;
        this.invoiceId = invoiceId;
        this.periods = periods;
        this.links = links;
    }
    
    public Settlements() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
     * endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this settlement.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * The settlement's bank reference, as found in your Mollie account and on your bank statement.
     */
    @JsonIgnore
    public JsonNullable<String> reference() {
        return reference;
    }

    /**
     * The date on which the settlement was settled, in ISO 8601 format.
     * 
     * <p>For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
     * date is available.
     */
    @JsonIgnore
    public JsonNullable<String> settledAt() {
        return settledAt;
    }

    /**
     * The status of the settlement.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListSettlementsStatus> status() {
        return (Optional<ListSettlementsStatus>) status;
    }

    /**
     * The total amount of the settlement.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListSettlementsAmount> amount() {
        return (Optional<ListSettlementsAmount>) amount;
    }

    /**
     * The balance token that the settlement was settled to.
     */
    @JsonIgnore
    public Optional<String> balanceId() {
        return balanceId;
    }

    /**
     * The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
     */
    @JsonIgnore
    public JsonNullable<String> invoiceId() {
        return invoiceId;
    }

    /**
     * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
     * transactions are grouped into 'period' objects — one for each calendar month.
     * 
     * <p>For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
     * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
     * 
     * <p>Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
     * look as follows: `{"2024": {"04": {...}, "05": {...&rbrace;&rbrace;}`. The year and month in this documentation are referred as `&lt;year&gt;` and `&lt;month&gt;`.
     * 
     * <p>The example response should give a good idea of what this looks like in practise.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> periods() {
        return (Optional<Map<String, Object>>) periods;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListSettlementsSettlementsLinks> links() {
        return (Optional<ListSettlementsSettlementsLinks>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
     * endpoint.
     */
    public Settlements withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
     * endpoint.
     */
    public Settlements withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this settlement.
     */
    public Settlements withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * The identifier uniquely referring to this settlement.
     */
    public Settlements withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public Settlements withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public Settlements withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The settlement's bank reference, as found in your Mollie account and on your bank statement.
     */
    public Settlements withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = JsonNullable.of(reference);
        return this;
    }

    /**
     * The settlement's bank reference, as found in your Mollie account and on your bank statement.
     */
    public Settlements withReference(JsonNullable<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * The date on which the settlement was settled, in ISO 8601 format.
     * 
     * <p>For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
     * date is available.
     */
    public Settlements withSettledAt(String settledAt) {
        Utils.checkNotNull(settledAt, "settledAt");
        this.settledAt = JsonNullable.of(settledAt);
        return this;
    }

    /**
     * The date on which the settlement was settled, in ISO 8601 format.
     * 
     * <p>For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
     * date is available.
     */
    public Settlements withSettledAt(JsonNullable<String> settledAt) {
        Utils.checkNotNull(settledAt, "settledAt");
        this.settledAt = settledAt;
        return this;
    }

    /**
     * The status of the settlement.
     */
    public Settlements withStatus(ListSettlementsStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * The status of the settlement.
     */
    public Settlements withStatus(Optional<? extends ListSettlementsStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The total amount of the settlement.
     */
    public Settlements withAmount(ListSettlementsAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * The total amount of the settlement.
     */
    public Settlements withAmount(Optional<? extends ListSettlementsAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The balance token that the settlement was settled to.
     */
    public Settlements withBalanceId(String balanceId) {
        Utils.checkNotNull(balanceId, "balanceId");
        this.balanceId = Optional.ofNullable(balanceId);
        return this;
    }


    /**
     * The balance token that the settlement was settled to.
     */
    public Settlements withBalanceId(Optional<String> balanceId) {
        Utils.checkNotNull(balanceId, "balanceId");
        this.balanceId = balanceId;
        return this;
    }

    /**
     * The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
     */
    public Settlements withInvoiceId(String invoiceId) {
        Utils.checkNotNull(invoiceId, "invoiceId");
        this.invoiceId = JsonNullable.of(invoiceId);
        return this;
    }

    /**
     * The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
     */
    public Settlements withInvoiceId(JsonNullable<String> invoiceId) {
        Utils.checkNotNull(invoiceId, "invoiceId");
        this.invoiceId = invoiceId;
        return this;
    }

    /**
     * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
     * transactions are grouped into 'period' objects — one for each calendar month.
     * 
     * <p>For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
     * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
     * 
     * <p>Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
     * look as follows: `{"2024": {"04": {...}, "05": {...&rbrace;&rbrace;}`. The year and month in this documentation are referred as `&lt;year&gt;` and `&lt;month&gt;`.
     * 
     * <p>The example response should give a good idea of what this looks like in practise.
     */
    public Settlements withPeriods(Map<String, Object> periods) {
        Utils.checkNotNull(periods, "periods");
        this.periods = Optional.ofNullable(periods);
        return this;
    }


    /**
     * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
     * transactions are grouped into 'period' objects — one for each calendar month.
     * 
     * <p>For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
     * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
     * 
     * <p>Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
     * look as follows: `{"2024": {"04": {...}, "05": {...&rbrace;&rbrace;}`. The year and month in this documentation are referred as `&lt;year&gt;` and `&lt;month&gt;`.
     * 
     * <p>The example response should give a good idea of what this looks like in practise.
     */
    public Settlements withPeriods(Optional<? extends Map<String, Object>> periods) {
        Utils.checkNotNull(periods, "periods");
        this.periods = periods;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public Settlements withLinks(ListSettlementsSettlementsLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public Settlements withLinks(Optional<? extends ListSettlementsSettlementsLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Settlements other = (Settlements) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.settledAt, other.settledAt) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.balanceId, other.balanceId) &&
            Utils.enhancedDeepEquals(this.invoiceId, other.invoiceId) &&
            Utils.enhancedDeepEquals(this.periods, other.periods) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, createdAt,
            reference, settledAt, status,
            amount, balanceId, invoiceId,
            periods, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Settlements.class,
                "resource", resource,
                "id", id,
                "createdAt", createdAt,
                "reference", reference,
                "settledAt", settledAt,
                "status", status,
                "amount", amount,
                "balanceId", balanceId,
                "invoiceId", invoiceId,
                "periods", periods,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private JsonNullable<String> reference = JsonNullable.undefined();

        private JsonNullable<String> settledAt = JsonNullable.undefined();

        private Optional<? extends ListSettlementsStatus> status = Optional.empty();

        private Optional<? extends ListSettlementsAmount> amount = Optional.empty();

        private Optional<String> balanceId = Optional.empty();

        private JsonNullable<String> invoiceId = JsonNullable.undefined();

        private Optional<? extends Map<String, Object>> periods = Optional.empty();

        private Optional<? extends ListSettlementsSettlementsLinks> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
         * endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a settlement object. Will always contain the string `settlement` for this
         * endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this settlement.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this settlement.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The settlement's bank reference, as found in your Mollie account and on your bank statement.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * The settlement's bank reference, as found in your Mollie account and on your bank statement.
         */
        public Builder reference(JsonNullable<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }


        /**
         * The date on which the settlement was settled, in ISO 8601 format.
         * 
         * <p>For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
         * date is available.
         */
        public Builder settledAt(String settledAt) {
            Utils.checkNotNull(settledAt, "settledAt");
            this.settledAt = JsonNullable.of(settledAt);
            return this;
        }

        /**
         * The date on which the settlement was settled, in ISO 8601 format.
         * 
         * <p>For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement
         * date is available.
         */
        public Builder settledAt(JsonNullable<String> settledAt) {
            Utils.checkNotNull(settledAt, "settledAt");
            this.settledAt = settledAt;
            return this;
        }


        /**
         * The status of the settlement.
         */
        public Builder status(ListSettlementsStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the settlement.
         */
        public Builder status(Optional<? extends ListSettlementsStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The total amount of the settlement.
         */
        public Builder amount(ListSettlementsAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The total amount of the settlement.
         */
        public Builder amount(Optional<? extends ListSettlementsAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * The balance token that the settlement was settled to.
         */
        public Builder balanceId(String balanceId) {
            Utils.checkNotNull(balanceId, "balanceId");
            this.balanceId = Optional.ofNullable(balanceId);
            return this;
        }

        /**
         * The balance token that the settlement was settled to.
         */
        public Builder balanceId(Optional<String> balanceId) {
            Utils.checkNotNull(balanceId, "balanceId");
            this.balanceId = balanceId;
            return this;
        }


        /**
         * The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
         */
        public Builder invoiceId(String invoiceId) {
            Utils.checkNotNull(invoiceId, "invoiceId");
            this.invoiceId = JsonNullable.of(invoiceId);
            return this;
        }

        /**
         * The ID of the oldest invoice created for all the periods, if the invoice has been created yet.
         */
        public Builder invoiceId(JsonNullable<String> invoiceId) {
            Utils.checkNotNull(invoiceId, "invoiceId");
            this.invoiceId = invoiceId;
            return this;
        }


        /**
         * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
         * transactions are grouped into 'period' objects — one for each calendar month.
         * 
         * <p>For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
         * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
         * 
         * <p>Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
         * look as follows: `{"2024": {"04": {...}, "05": {...&rbrace;&rbrace;}`. The year and month in this documentation are referred as `&lt;year&gt;` and `&lt;month&gt;`.
         * 
         * <p>The example response should give a good idea of what this looks like in practise.
         */
        public Builder periods(Map<String, Object> periods) {
            Utils.checkNotNull(periods, "periods");
            this.periods = Optional.ofNullable(periods);
            return this;
        }

        /**
         * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These
         * transactions are grouped into 'period' objects — one for each calendar month.
         * 
         * <p>For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for
         * all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
         * 
         * <p>Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will
         * look as follows: `{"2024": {"04": {...}, "05": {...&rbrace;&rbrace;}`. The year and month in this documentation are referred as `&lt;year&gt;` and `&lt;month&gt;`.
         * 
         * <p>The example response should give a good idea of what this looks like in practise.
         */
        public Builder periods(Optional<? extends Map<String, Object>> periods) {
            Utils.checkNotNull(periods, "periods");
            this.periods = periods;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(ListSettlementsSettlementsLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends ListSettlementsSettlementsLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public Settlements build() {

            return new Settlements(
                resource, id, createdAt,
                reference, settledAt, status,
                amount, balanceId, invoiceId,
                periods, links);
        }

    }
}
