/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * GetBalanceReportChargebacks
 * 
 * <p>Only available on `transaction-categories` grouping.
 */
public class GetBalanceReportChargebacks {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending")
    private Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonPending> pending;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("movedToAvailable")
    private Optional<? extends GetBalanceReportBalancesResponseMovedToAvailable> movedToAvailable;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("immediatelyAvailable")
    private Optional<? extends GetBalanceReportBalancesResponseImmediatelyAvailable> immediatelyAvailable;

    @JsonCreator
    public GetBalanceReportChargebacks(
            @JsonProperty("pending") Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonPending> pending,
            @JsonProperty("movedToAvailable") Optional<? extends GetBalanceReportBalancesResponseMovedToAvailable> movedToAvailable,
            @JsonProperty("immediatelyAvailable") Optional<? extends GetBalanceReportBalancesResponseImmediatelyAvailable> immediatelyAvailable) {
        Utils.checkNotNull(pending, "pending");
        Utils.checkNotNull(movedToAvailable, "movedToAvailable");
        Utils.checkNotNull(immediatelyAvailable, "immediatelyAvailable");
        this.pending = pending;
        this.movedToAvailable = movedToAvailable;
        this.immediatelyAvailable = immediatelyAvailable;
    }
    
    public GetBalanceReportChargebacks() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonPending> pending() {
        return (Optional<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonPending>) pending;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetBalanceReportBalancesResponseMovedToAvailable> movedToAvailable() {
        return (Optional<GetBalanceReportBalancesResponseMovedToAvailable>) movedToAvailable;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetBalanceReportBalancesResponseImmediatelyAvailable> immediatelyAvailable() {
        return (Optional<GetBalanceReportBalancesResponseImmediatelyAvailable>) immediatelyAvailable;
    }

    public static Builder builder() {
        return new Builder();
    }


    public GetBalanceReportChargebacks withPending(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonPending pending) {
        Utils.checkNotNull(pending, "pending");
        this.pending = Optional.ofNullable(pending);
        return this;
    }


    public GetBalanceReportChargebacks withPending(Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonPending> pending) {
        Utils.checkNotNull(pending, "pending");
        this.pending = pending;
        return this;
    }

    public GetBalanceReportChargebacks withMovedToAvailable(GetBalanceReportBalancesResponseMovedToAvailable movedToAvailable) {
        Utils.checkNotNull(movedToAvailable, "movedToAvailable");
        this.movedToAvailable = Optional.ofNullable(movedToAvailable);
        return this;
    }


    public GetBalanceReportChargebacks withMovedToAvailable(Optional<? extends GetBalanceReportBalancesResponseMovedToAvailable> movedToAvailable) {
        Utils.checkNotNull(movedToAvailable, "movedToAvailable");
        this.movedToAvailable = movedToAvailable;
        return this;
    }

    public GetBalanceReportChargebacks withImmediatelyAvailable(GetBalanceReportBalancesResponseImmediatelyAvailable immediatelyAvailable) {
        Utils.checkNotNull(immediatelyAvailable, "immediatelyAvailable");
        this.immediatelyAvailable = Optional.ofNullable(immediatelyAvailable);
        return this;
    }


    public GetBalanceReportChargebacks withImmediatelyAvailable(Optional<? extends GetBalanceReportBalancesResponseImmediatelyAvailable> immediatelyAvailable) {
        Utils.checkNotNull(immediatelyAvailable, "immediatelyAvailable");
        this.immediatelyAvailable = immediatelyAvailable;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetBalanceReportChargebacks other = (GetBalanceReportChargebacks) o;
        return 
            Utils.enhancedDeepEquals(this.pending, other.pending) &&
            Utils.enhancedDeepEquals(this.movedToAvailable, other.movedToAvailable) &&
            Utils.enhancedDeepEquals(this.immediatelyAvailable, other.immediatelyAvailable);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            pending, movedToAvailable, immediatelyAvailable);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetBalanceReportChargebacks.class,
                "pending", pending,
                "movedToAvailable", movedToAvailable,
                "immediatelyAvailable", immediatelyAvailable);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonPending> pending = Optional.empty();

        private Optional<? extends GetBalanceReportBalancesResponseMovedToAvailable> movedToAvailable = Optional.empty();

        private Optional<? extends GetBalanceReportBalancesResponseImmediatelyAvailable> immediatelyAvailable = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder pending(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonPending pending) {
            Utils.checkNotNull(pending, "pending");
            this.pending = Optional.ofNullable(pending);
            return this;
        }

        public Builder pending(Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonPending> pending) {
            Utils.checkNotNull(pending, "pending");
            this.pending = pending;
            return this;
        }


        public Builder movedToAvailable(GetBalanceReportBalancesResponseMovedToAvailable movedToAvailable) {
            Utils.checkNotNull(movedToAvailable, "movedToAvailable");
            this.movedToAvailable = Optional.ofNullable(movedToAvailable);
            return this;
        }

        public Builder movedToAvailable(Optional<? extends GetBalanceReportBalancesResponseMovedToAvailable> movedToAvailable) {
            Utils.checkNotNull(movedToAvailable, "movedToAvailable");
            this.movedToAvailable = movedToAvailable;
            return this;
        }


        public Builder immediatelyAvailable(GetBalanceReportBalancesResponseImmediatelyAvailable immediatelyAvailable) {
            Utils.checkNotNull(immediatelyAvailable, "immediatelyAvailable");
            this.immediatelyAvailable = Optional.ofNullable(immediatelyAvailable);
            return this;
        }

        public Builder immediatelyAvailable(Optional<? extends GetBalanceReportBalancesResponseImmediatelyAvailable> immediatelyAvailable) {
            Utils.checkNotNull(immediatelyAvailable, "immediatelyAvailable");
            this.immediatelyAvailable = immediatelyAvailable;
            return this;
        }

        public GetBalanceReportChargebacks build() {

            return new GetBalanceReportChargebacks(
                pending, movedToAvailable, immediatelyAvailable);
        }

    }
}
