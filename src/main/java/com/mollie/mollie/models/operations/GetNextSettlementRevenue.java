/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetNextSettlementRevenue {
    /**
     * A description of the revenue subtotal
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The payment method, if applicable
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private JsonNullable<? extends GetNextSettlementSettlementsMethod> method;

    /**
     * The number of payments
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    /**
     * The net total of received funds, i.e. excluding VAT
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountNet")
    private Optional<? extends GetNextSettlementSettlementsAmountNet> amountNet;

    /**
     * The applicable VAT
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountVat")
    private Optional<? extends GetNextSettlementSettlementsAmountVat> amountVat;

    /**
     * The gross total of received funds, i.e. including VAT
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountGross")
    private Optional<? extends GetNextSettlementSettlementsAmountGross> amountGross;

    @JsonCreator
    public GetNextSettlementRevenue(
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("method") JsonNullable<? extends GetNextSettlementSettlementsMethod> method,
            @JsonProperty("count") Optional<Long> count,
            @JsonProperty("amountNet") Optional<? extends GetNextSettlementSettlementsAmountNet> amountNet,
            @JsonProperty("amountVat") Optional<? extends GetNextSettlementSettlementsAmountVat> amountVat,
            @JsonProperty("amountGross") Optional<? extends GetNextSettlementSettlementsAmountGross> amountGross) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(amountNet, "amountNet");
        Utils.checkNotNull(amountVat, "amountVat");
        Utils.checkNotNull(amountGross, "amountGross");
        this.description = description;
        this.method = method;
        this.count = count;
        this.amountNet = amountNet;
        this.amountVat = amountVat;
        this.amountGross = amountGross;
    }
    
    public GetNextSettlementRevenue() {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A description of the revenue subtotal
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The payment method, if applicable
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetNextSettlementSettlementsMethod> method() {
        return (JsonNullable<GetNextSettlementSettlementsMethod>) method;
    }

    /**
     * The number of payments
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    /**
     * The net total of received funds, i.e. excluding VAT
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetNextSettlementSettlementsAmountNet> amountNet() {
        return (Optional<GetNextSettlementSettlementsAmountNet>) amountNet;
    }

    /**
     * The applicable VAT
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetNextSettlementSettlementsAmountVat> amountVat() {
        return (Optional<GetNextSettlementSettlementsAmountVat>) amountVat;
    }

    /**
     * The gross total of received funds, i.e. including VAT
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetNextSettlementSettlementsAmountGross> amountGross() {
        return (Optional<GetNextSettlementSettlementsAmountGross>) amountGross;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A description of the revenue subtotal
     */
    public GetNextSettlementRevenue withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * A description of the revenue subtotal
     */
    public GetNextSettlementRevenue withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The payment method, if applicable
     */
    public GetNextSettlementRevenue withMethod(GetNextSettlementSettlementsMethod method) {
        Utils.checkNotNull(method, "method");
        this.method = JsonNullable.of(method);
        return this;
    }

    /**
     * The payment method, if applicable
     */
    public GetNextSettlementRevenue withMethod(JsonNullable<? extends GetNextSettlementSettlementsMethod> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * The number of payments
     */
    public GetNextSettlementRevenue withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }


    /**
     * The number of payments
     */
    public GetNextSettlementRevenue withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * The net total of received funds, i.e. excluding VAT
     */
    public GetNextSettlementRevenue withAmountNet(GetNextSettlementSettlementsAmountNet amountNet) {
        Utils.checkNotNull(amountNet, "amountNet");
        this.amountNet = Optional.ofNullable(amountNet);
        return this;
    }


    /**
     * The net total of received funds, i.e. excluding VAT
     */
    public GetNextSettlementRevenue withAmountNet(Optional<? extends GetNextSettlementSettlementsAmountNet> amountNet) {
        Utils.checkNotNull(amountNet, "amountNet");
        this.amountNet = amountNet;
        return this;
    }

    /**
     * The applicable VAT
     */
    public GetNextSettlementRevenue withAmountVat(GetNextSettlementSettlementsAmountVat amountVat) {
        Utils.checkNotNull(amountVat, "amountVat");
        this.amountVat = Optional.ofNullable(amountVat);
        return this;
    }


    /**
     * The applicable VAT
     */
    public GetNextSettlementRevenue withAmountVat(Optional<? extends GetNextSettlementSettlementsAmountVat> amountVat) {
        Utils.checkNotNull(amountVat, "amountVat");
        this.amountVat = amountVat;
        return this;
    }

    /**
     * The gross total of received funds, i.e. including VAT
     */
    public GetNextSettlementRevenue withAmountGross(GetNextSettlementSettlementsAmountGross amountGross) {
        Utils.checkNotNull(amountGross, "amountGross");
        this.amountGross = Optional.ofNullable(amountGross);
        return this;
    }


    /**
     * The gross total of received funds, i.e. including VAT
     */
    public GetNextSettlementRevenue withAmountGross(Optional<? extends GetNextSettlementSettlementsAmountGross> amountGross) {
        Utils.checkNotNull(amountGross, "amountGross");
        this.amountGross = amountGross;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetNextSettlementRevenue other = (GetNextSettlementRevenue) o;
        return 
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.count, other.count) &&
            Utils.enhancedDeepEquals(this.amountNet, other.amountNet) &&
            Utils.enhancedDeepEquals(this.amountVat, other.amountVat) &&
            Utils.enhancedDeepEquals(this.amountGross, other.amountGross);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            description, method, count,
            amountNet, amountVat, amountGross);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetNextSettlementRevenue.class,
                "description", description,
                "method", method,
                "count", count,
                "amountNet", amountNet,
                "amountVat", amountVat,
                "amountGross", amountGross);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> description = Optional.empty();

        private JsonNullable<? extends GetNextSettlementSettlementsMethod> method = JsonNullable.undefined();

        private Optional<Long> count = Optional.empty();

        private Optional<? extends GetNextSettlementSettlementsAmountNet> amountNet = Optional.empty();

        private Optional<? extends GetNextSettlementSettlementsAmountVat> amountVat = Optional.empty();

        private Optional<? extends GetNextSettlementSettlementsAmountGross> amountGross = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A description of the revenue subtotal
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A description of the revenue subtotal
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The payment method, if applicable
         */
        public Builder method(GetNextSettlementSettlementsMethod method) {
            Utils.checkNotNull(method, "method");
            this.method = JsonNullable.of(method);
            return this;
        }

        /**
         * The payment method, if applicable
         */
        public Builder method(JsonNullable<? extends GetNextSettlementSettlementsMethod> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }


        /**
         * The number of payments
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * The number of payments
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }


        /**
         * The net total of received funds, i.e. excluding VAT
         */
        public Builder amountNet(GetNextSettlementSettlementsAmountNet amountNet) {
            Utils.checkNotNull(amountNet, "amountNet");
            this.amountNet = Optional.ofNullable(amountNet);
            return this;
        }

        /**
         * The net total of received funds, i.e. excluding VAT
         */
        public Builder amountNet(Optional<? extends GetNextSettlementSettlementsAmountNet> amountNet) {
            Utils.checkNotNull(amountNet, "amountNet");
            this.amountNet = amountNet;
            return this;
        }


        /**
         * The applicable VAT
         */
        public Builder amountVat(GetNextSettlementSettlementsAmountVat amountVat) {
            Utils.checkNotNull(amountVat, "amountVat");
            this.amountVat = Optional.ofNullable(amountVat);
            return this;
        }

        /**
         * The applicable VAT
         */
        public Builder amountVat(Optional<? extends GetNextSettlementSettlementsAmountVat> amountVat) {
            Utils.checkNotNull(amountVat, "amountVat");
            this.amountVat = amountVat;
            return this;
        }


        /**
         * The gross total of received funds, i.e. including VAT
         */
        public Builder amountGross(GetNextSettlementSettlementsAmountGross amountGross) {
            Utils.checkNotNull(amountGross, "amountGross");
            this.amountGross = Optional.ofNullable(amountGross);
            return this;
        }

        /**
         * The gross total of received funds, i.e. including VAT
         */
        public Builder amountGross(Optional<? extends GetNextSettlementSettlementsAmountGross> amountGross) {
            Utils.checkNotNull(amountGross, "amountGross");
            this.amountGross = amountGross;
            return this;
        }

        public GetNextSettlementRevenue build() {

            return new GetNextSettlementRevenue(
                description, method, count,
                amountNet, amountVat, amountGross);
        }

    }
}
