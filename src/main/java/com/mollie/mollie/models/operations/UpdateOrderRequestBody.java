/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class UpdateOrderRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderNumber")
    private JsonNullable<String> orderNumber;

    /**
     * Can be updated while the order is not yet finalized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirectUrl")
    private JsonNullable<String> redirectUrl;

    /**
     * Can be updated while the order is not yet finalized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancelUrl")
    private JsonNullable<String> cancelUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookUrl")
    private JsonNullable<String> webhookUrl;

    /**
     * If a payment method has already been selected, the original shipping address may have already been forwarded to the payment method provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingAddress")
    private JsonNullable<? extends UpdateOrderBillingAddress> billingAddress;

    /**
     * If a payment method has already been selected, the original billing address may have already been forwarded to the payment method provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippingAddress")
    private JsonNullable<? extends UpdateOrderShippingAddress> shippingAddress;

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public UpdateOrderRequestBody(
            @JsonProperty("orderNumber") JsonNullable<String> orderNumber,
            @JsonProperty("redirectUrl") JsonNullable<String> redirectUrl,
            @JsonProperty("cancelUrl") JsonNullable<String> cancelUrl,
            @JsonProperty("webhookUrl") JsonNullable<String> webhookUrl,
            @JsonProperty("billingAddress") JsonNullable<? extends UpdateOrderBillingAddress> billingAddress,
            @JsonProperty("shippingAddress") JsonNullable<? extends UpdateOrderShippingAddress> shippingAddress,
            @JsonProperty("testmode") JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(orderNumber, "orderNumber");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        Utils.checkNotNull(cancelUrl, "cancelUrl");
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        Utils.checkNotNull(billingAddress, "billingAddress");
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        Utils.checkNotNull(testmode, "testmode");
        this.orderNumber = orderNumber;
        this.redirectUrl = redirectUrl;
        this.cancelUrl = cancelUrl;
        this.webhookUrl = webhookUrl;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.testmode = testmode;
    }
    
    public UpdateOrderRequestBody() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> orderNumber() {
        return orderNumber;
    }

    /**
     * Can be updated while the order is not yet finalized.
     */
    @JsonIgnore
    public JsonNullable<String> redirectUrl() {
        return redirectUrl;
    }

    /**
     * Can be updated while the order is not yet finalized.
     */
    @JsonIgnore
    public JsonNullable<String> cancelUrl() {
        return cancelUrl;
    }

    @JsonIgnore
    public JsonNullable<String> webhookUrl() {
        return webhookUrl;
    }

    /**
     * If a payment method has already been selected, the original shipping address may have already been forwarded to the payment method provider.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<UpdateOrderBillingAddress> billingAddress() {
        return (JsonNullable<UpdateOrderBillingAddress>) billingAddress;
    }

    /**
     * If a payment method has already been selected, the original billing address may have already been forwarded to the payment method provider.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<UpdateOrderShippingAddress> shippingAddress() {
        return (JsonNullable<UpdateOrderShippingAddress>) shippingAddress;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateOrderRequestBody withOrderNumber(String orderNumber) {
        Utils.checkNotNull(orderNumber, "orderNumber");
        this.orderNumber = JsonNullable.of(orderNumber);
        return this;
    }

    public UpdateOrderRequestBody withOrderNumber(JsonNullable<String> orderNumber) {
        Utils.checkNotNull(orderNumber, "orderNumber");
        this.orderNumber = orderNumber;
        return this;
    }

    /**
     * Can be updated while the order is not yet finalized.
     */
    public UpdateOrderRequestBody withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = JsonNullable.of(redirectUrl);
        return this;
    }

    /**
     * Can be updated while the order is not yet finalized.
     */
    public UpdateOrderRequestBody withRedirectUrl(JsonNullable<String> redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    /**
     * Can be updated while the order is not yet finalized.
     */
    public UpdateOrderRequestBody withCancelUrl(String cancelUrl) {
        Utils.checkNotNull(cancelUrl, "cancelUrl");
        this.cancelUrl = JsonNullable.of(cancelUrl);
        return this;
    }

    /**
     * Can be updated while the order is not yet finalized.
     */
    public UpdateOrderRequestBody withCancelUrl(JsonNullable<String> cancelUrl) {
        Utils.checkNotNull(cancelUrl, "cancelUrl");
        this.cancelUrl = cancelUrl;
        return this;
    }

    public UpdateOrderRequestBody withWebhookUrl(String webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = JsonNullable.of(webhookUrl);
        return this;
    }

    public UpdateOrderRequestBody withWebhookUrl(JsonNullable<String> webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = webhookUrl;
        return this;
    }

    /**
     * If a payment method has already been selected, the original shipping address may have already been forwarded to the payment method provider.
     */
    public UpdateOrderRequestBody withBillingAddress(UpdateOrderBillingAddress billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = JsonNullable.of(billingAddress);
        return this;
    }

    /**
     * If a payment method has already been selected, the original shipping address may have already been forwarded to the payment method provider.
     */
    public UpdateOrderRequestBody withBillingAddress(JsonNullable<? extends UpdateOrderBillingAddress> billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = billingAddress;
        return this;
    }

    /**
     * If a payment method has already been selected, the original billing address may have already been forwarded to the payment method provider.
     */
    public UpdateOrderRequestBody withShippingAddress(UpdateOrderShippingAddress shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = JsonNullable.of(shippingAddress);
        return this;
    }

    /**
     * If a payment method has already been selected, the original billing address may have already been forwarded to the payment method provider.
     */
    public UpdateOrderRequestBody withShippingAddress(JsonNullable<? extends UpdateOrderShippingAddress> shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = shippingAddress;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public UpdateOrderRequestBody withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public UpdateOrderRequestBody withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateOrderRequestBody other = (UpdateOrderRequestBody) o;
        return 
            Objects.deepEquals(this.orderNumber, other.orderNumber) &&
            Objects.deepEquals(this.redirectUrl, other.redirectUrl) &&
            Objects.deepEquals(this.cancelUrl, other.cancelUrl) &&
            Objects.deepEquals(this.webhookUrl, other.webhookUrl) &&
            Objects.deepEquals(this.billingAddress, other.billingAddress) &&
            Objects.deepEquals(this.shippingAddress, other.shippingAddress) &&
            Objects.deepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            orderNumber,
            redirectUrl,
            cancelUrl,
            webhookUrl,
            billingAddress,
            shippingAddress,
            testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateOrderRequestBody.class,
                "orderNumber", orderNumber,
                "redirectUrl", redirectUrl,
                "cancelUrl", cancelUrl,
                "webhookUrl", webhookUrl,
                "billingAddress", billingAddress,
                "shippingAddress", shippingAddress,
                "testmode", testmode);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> orderNumber = JsonNullable.undefined();
 
        private JsonNullable<String> redirectUrl = JsonNullable.undefined();
 
        private JsonNullable<String> cancelUrl = JsonNullable.undefined();
 
        private JsonNullable<String> webhookUrl = JsonNullable.undefined();
 
        private JsonNullable<? extends UpdateOrderBillingAddress> billingAddress = JsonNullable.undefined();
 
        private JsonNullable<? extends UpdateOrderShippingAddress> shippingAddress = JsonNullable.undefined();
 
        private JsonNullable<Boolean> testmode;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder orderNumber(String orderNumber) {
            Utils.checkNotNull(orderNumber, "orderNumber");
            this.orderNumber = JsonNullable.of(orderNumber);
            return this;
        }

        public Builder orderNumber(JsonNullable<String> orderNumber) {
            Utils.checkNotNull(orderNumber, "orderNumber");
            this.orderNumber = orderNumber;
            return this;
        }

        /**
         * Can be updated while the order is not yet finalized.
         */
        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = JsonNullable.of(redirectUrl);
            return this;
        }

        /**
         * Can be updated while the order is not yet finalized.
         */
        public Builder redirectUrl(JsonNullable<String> redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * Can be updated while the order is not yet finalized.
         */
        public Builder cancelUrl(String cancelUrl) {
            Utils.checkNotNull(cancelUrl, "cancelUrl");
            this.cancelUrl = JsonNullable.of(cancelUrl);
            return this;
        }

        /**
         * Can be updated while the order is not yet finalized.
         */
        public Builder cancelUrl(JsonNullable<String> cancelUrl) {
            Utils.checkNotNull(cancelUrl, "cancelUrl");
            this.cancelUrl = cancelUrl;
            return this;
        }

        public Builder webhookUrl(String webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = JsonNullable.of(webhookUrl);
            return this;
        }

        public Builder webhookUrl(JsonNullable<String> webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = webhookUrl;
            return this;
        }

        /**
         * If a payment method has already been selected, the original shipping address may have already been forwarded to the payment method provider.
         */
        public Builder billingAddress(UpdateOrderBillingAddress billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = JsonNullable.of(billingAddress);
            return this;
        }

        /**
         * If a payment method has already been selected, the original shipping address may have already been forwarded to the payment method provider.
         */
        public Builder billingAddress(JsonNullable<? extends UpdateOrderBillingAddress> billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = billingAddress;
            return this;
        }

        /**
         * If a payment method has already been selected, the original billing address may have already been forwarded to the payment method provider.
         */
        public Builder shippingAddress(UpdateOrderShippingAddress shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = JsonNullable.of(shippingAddress);
            return this;
        }

        /**
         * If a payment method has already been selected, the original billing address may have already been forwarded to the payment method provider.
         */
        public Builder shippingAddress(JsonNullable<? extends UpdateOrderShippingAddress> shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = shippingAddress;
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
         * 
         * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
         * 
         * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }
        
        public UpdateOrderRequestBody build() {
            if (testmode == null) {
                testmode = _SINGLETON_VALUE_Testmode.value();
            }            return new UpdateOrderRequestBody(
                orderNumber,
                redirectUrl,
                cancelUrl,
                webhookUrl,
                billingAddress,
                shippingAddress,
                testmode);
        }

        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_Testmode =
                new LazySingletonValue<>(
                        "testmode",
                        "false",
                        new TypeReference<JsonNullable<Boolean>>() {});
    }
}

