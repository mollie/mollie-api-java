/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
/**
 * GetTerminalResponseBody - The terminal object.
 */

public class GetTerminalResponseBody {

    /**
     * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this terminal. Example: `term_7MgL4wea46qkRcoTZjWEH`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * Possible values: `live` `test`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<String> mode;

    /**
     * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it may be visible on the device itself depending on the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The status of the terminal:
     * 
     * * `pending`: The device has been linked to your account, but has not yet been activated. If you ordered a terminal from us, it may already become visible in your account with this status.
     * * `active`: The terminal is fully configured and ready to accept payments.
     * * `inactive`: The terminal has been deactivated. Deactivation happens for example if you returned the device to Mollie, or if you requested to move it to another profile or organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * The brand of the terminal. For example, `PAX`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brand")
    private JsonNullable<String> brand;

    /**
     * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    private JsonNullable<String> model;

    /**
     * The serial number of the terminal. The serial number is provided at terminal creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serialNumber")
    private JsonNullable<String> serialNumber;

    /**
     * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a specific currency, chosen during setup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<String> currency;

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileId")
    private JsonNullable<String> profileId;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends GetTerminalLinks> links;

    @JsonCreator
    public GetTerminalResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mode") Optional<String> mode,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("brand") JsonNullable<String> brand,
            @JsonProperty("model") JsonNullable<String> model,
            @JsonProperty("serialNumber") JsonNullable<String> serialNumber,
            @JsonProperty("currency") JsonNullable<String> currency,
            @JsonProperty("profileId") JsonNullable<String> profileId,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("_links") Optional<? extends GetTerminalLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(brand, "brand");
        Utils.checkNotNull(model, "model");
        Utils.checkNotNull(serialNumber, "serialNumber");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.description = description;
        this.status = status;
        this.brand = brand;
        this.model = model;
        this.serialNumber = serialNumber;
        this.currency = currency;
        this.profileId = profileId;
        this.createdAt = createdAt;
        this.links = links;
    }
    
    public GetTerminalResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this terminal. Example: `term_7MgL4wea46qkRcoTZjWEH`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * Possible values: `live` `test`
     */
    @JsonIgnore
    public Optional<String> mode() {
        return mode;
    }

    /**
     * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it may be visible on the device itself depending on the device.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The status of the terminal:
     * 
     * * `pending`: The device has been linked to your account, but has not yet been activated. If you ordered a terminal from us, it may already become visible in your account with this status.
     * * `active`: The terminal is fully configured and ready to accept payments.
     * * `inactive`: The terminal has been deactivated. Deactivation happens for example if you returned the device to Mollie, or if you requested to move it to another profile or organization.
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * The brand of the terminal. For example, `PAX`.
     */
    @JsonIgnore
    public JsonNullable<String> brand() {
        return brand;
    }

    /**
     * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
     */
    @JsonIgnore
    public JsonNullable<String> model() {
        return model;
    }

    /**
     * The serial number of the terminal. The serial number is provided at terminal creation time.
     */
    @JsonIgnore
    public JsonNullable<String> serialNumber() {
        return serialNumber;
    }

    /**
     * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a specific currency, chosen during setup.
     */
    @JsonIgnore
    public JsonNullable<String> currency() {
        return currency;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    @JsonIgnore
    public JsonNullable<String> profileId() {
        return profileId;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetTerminalLinks> links() {
        return (Optional<GetTerminalLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
     */
    public GetTerminalResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
     */
    public GetTerminalResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this terminal. Example: `term_7MgL4wea46qkRcoTZjWEH`.
     */
    public GetTerminalResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The identifier uniquely referring to this terminal. Example: `term_7MgL4wea46qkRcoTZjWEH`.
     */
    public GetTerminalResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * Possible values: `live` `test`
     */
    public GetTerminalResponseBody withMode(String mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * Possible values: `live` `test`
     */
    public GetTerminalResponseBody withMode(Optional<String> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it may be visible on the device itself depending on the device.
     */
    public GetTerminalResponseBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it may be visible on the device itself depending on the device.
     */
    public GetTerminalResponseBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The status of the terminal:
     * 
     * * `pending`: The device has been linked to your account, but has not yet been activated. If you ordered a terminal from us, it may already become visible in your account with this status.
     * * `active`: The terminal is fully configured and ready to accept payments.
     * * `inactive`: The terminal has been deactivated. Deactivation happens for example if you returned the device to Mollie, or if you requested to move it to another profile or organization.
     */
    public GetTerminalResponseBody withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the terminal:
     * 
     * * `pending`: The device has been linked to your account, but has not yet been activated. If you ordered a terminal from us, it may already become visible in your account with this status.
     * * `active`: The terminal is fully configured and ready to accept payments.
     * * `inactive`: The terminal has been deactivated. Deactivation happens for example if you returned the device to Mollie, or if you requested to move it to another profile or organization.
     */
    public GetTerminalResponseBody withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The brand of the terminal. For example, `PAX`.
     */
    public GetTerminalResponseBody withBrand(String brand) {
        Utils.checkNotNull(brand, "brand");
        this.brand = JsonNullable.of(brand);
        return this;
    }

    /**
     * The brand of the terminal. For example, `PAX`.
     */
    public GetTerminalResponseBody withBrand(JsonNullable<String> brand) {
        Utils.checkNotNull(brand, "brand");
        this.brand = brand;
        return this;
    }

    /**
     * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
     */
    public GetTerminalResponseBody withModel(String model) {
        Utils.checkNotNull(model, "model");
        this.model = JsonNullable.of(model);
        return this;
    }

    /**
     * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
     */
    public GetTerminalResponseBody withModel(JsonNullable<String> model) {
        Utils.checkNotNull(model, "model");
        this.model = model;
        return this;
    }

    /**
     * The serial number of the terminal. The serial number is provided at terminal creation time.
     */
    public GetTerminalResponseBody withSerialNumber(String serialNumber) {
        Utils.checkNotNull(serialNumber, "serialNumber");
        this.serialNumber = JsonNullable.of(serialNumber);
        return this;
    }

    /**
     * The serial number of the terminal. The serial number is provided at terminal creation time.
     */
    public GetTerminalResponseBody withSerialNumber(JsonNullable<String> serialNumber) {
        Utils.checkNotNull(serialNumber, "serialNumber");
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a specific currency, chosen during setup.
     */
    public GetTerminalResponseBody withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a specific currency, chosen during setup.
     */
    public GetTerminalResponseBody withCurrency(JsonNullable<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    public GetTerminalResponseBody withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = JsonNullable.of(profileId);
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    public GetTerminalResponseBody withProfileId(JsonNullable<String> profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetTerminalResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetTerminalResponseBody withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetTerminalResponseBody withLinks(GetTerminalLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetTerminalResponseBody withLinks(Optional<? extends GetTerminalLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetTerminalResponseBody other = (GetTerminalResponseBody) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.mode, other.mode) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.brand, other.brand) &&
            Objects.deepEquals(this.model, other.model) &&
            Objects.deepEquals(this.serialNumber, other.serialNumber) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.profileId, other.profileId) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            mode,
            description,
            status,
            brand,
            model,
            serialNumber,
            currency,
            profileId,
            createdAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetTerminalResponseBody.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "description", description,
                "status", status,
                "brand", brand,
                "model", model,
                "serialNumber", serialNumber,
                "currency", currency,
                "profileId", profileId,
                "createdAt", createdAt,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> mode = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> status = Optional.empty();
 
        private JsonNullable<String> brand = JsonNullable.undefined();
 
        private JsonNullable<String> model = JsonNullable.undefined();
 
        private JsonNullable<String> serialNumber = JsonNullable.undefined();
 
        private JsonNullable<String> currency = JsonNullable.undefined();
 
        private JsonNullable<String> profileId = JsonNullable.undefined();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<? extends GetTerminalLinks> links = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this terminal. Example: `term_7MgL4wea46qkRcoTZjWEH`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this terminal. Example: `term_7MgL4wea46qkRcoTZjWEH`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * Possible values: `live` `test`
         */
        public Builder mode(String mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * Possible values: `live` `test`
         */
        public Builder mode(Optional<String> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        /**
         * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it may be visible on the device itself depending on the device.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it may be visible on the device itself depending on the device.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The status of the terminal:
         * 
         * * `pending`: The device has been linked to your account, but has not yet been activated. If you ordered a terminal from us, it may already become visible in your account with this status.
         * * `active`: The terminal is fully configured and ready to accept payments.
         * * `inactive`: The terminal has been deactivated. Deactivation happens for example if you returned the device to Mollie, or if you requested to move it to another profile or organization.
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the terminal:
         * 
         * * `pending`: The device has been linked to your account, but has not yet been activated. If you ordered a terminal from us, it may already become visible in your account with this status.
         * * `active`: The terminal is fully configured and ready to accept payments.
         * * `inactive`: The terminal has been deactivated. Deactivation happens for example if you returned the device to Mollie, or if you requested to move it to another profile or organization.
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The brand of the terminal. For example, `PAX`.
         */
        public Builder brand(String brand) {
            Utils.checkNotNull(brand, "brand");
            this.brand = JsonNullable.of(brand);
            return this;
        }

        /**
         * The brand of the terminal. For example, `PAX`.
         */
        public Builder brand(JsonNullable<String> brand) {
            Utils.checkNotNull(brand, "brand");
            this.brand = brand;
            return this;
        }

        /**
         * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
         */
        public Builder model(String model) {
            Utils.checkNotNull(model, "model");
            this.model = JsonNullable.of(model);
            return this;
        }

        /**
         * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
         */
        public Builder model(JsonNullable<String> model) {
            Utils.checkNotNull(model, "model");
            this.model = model;
            return this;
        }

        /**
         * The serial number of the terminal. The serial number is provided at terminal creation time.
         */
        public Builder serialNumber(String serialNumber) {
            Utils.checkNotNull(serialNumber, "serialNumber");
            this.serialNumber = JsonNullable.of(serialNumber);
            return this;
        }

        /**
         * The serial number of the terminal. The serial number is provided at terminal creation time.
         */
        public Builder serialNumber(JsonNullable<String> serialNumber) {
            Utils.checkNotNull(serialNumber, "serialNumber");
            this.serialNumber = serialNumber;
            return this;
        }

        /**
         * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a specific currency, chosen during setup.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a specific currency, chosen during setup.
         */
        public Builder currency(JsonNullable<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = JsonNullable.of(profileId);
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
         */
        public Builder profileId(JsonNullable<String> profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetTerminalLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends GetTerminalLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public GetTerminalResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }            return new GetTerminalResponseBody(
                resource,
                id,
                mode,
                description,
                status,
                brand,
                model,
                serialNumber,
                currency,
                profileId,
                createdAt,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"terminal\"",
                        new TypeReference<Optional<String>>() {});
    }
}

