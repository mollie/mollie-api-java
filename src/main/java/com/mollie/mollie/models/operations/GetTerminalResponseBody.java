/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * GetTerminalResponseBody
 * 
 * <p>The terminal object.
 */
public class GetTerminalResponseBody {

    /**
     * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this terminal. Example: `term_7MgL4wea46qkRcoTZjWEH`.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    @JsonProperty("mode")
    private String mode;

    /**
     * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it may be visible on the device itself depending on the device.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The status of the terminal.
     * 
     * <p>Possible values: `pending` `active` `inactive`
     */
    @JsonProperty("status")
    private String status;

    /**
     * The brand of the terminal.
     * 
     * <p>Possible values: `PAX`
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("brand")
    private Optional<String> brand;

    /**
     * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
     * 
     * <p>Possible values: `A35` `A77` `A920` `A920 Pro` `IM30`
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("model")
    private Optional<String> model;

    /**
     * The serial number of the terminal. The serial number is provided at terminal creation time.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("serialNumber")
    private Optional<String> serialNumber;

    /**
     * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a specific currency, chosen during setup.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    @JsonProperty("profileId")
    private String profileId;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonProperty("createdAt")
    private String createdAt;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonProperty("updatedAt")
    private String updatedAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private GetTerminalLinks links;

    @JsonCreator
    public GetTerminalResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") String id,
            @JsonProperty("mode") String mode,
            @JsonProperty("description") String description,
            @JsonProperty("status") String status,
            @JsonProperty("brand") Optional<String> brand,
            @JsonProperty("model") Optional<String> model,
            @JsonProperty("serialNumber") Optional<String> serialNumber,
            @JsonProperty("currency") String currency,
            @JsonProperty("profileId") String profileId,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("updatedAt") String updatedAt,
            @JsonProperty("_links") GetTerminalLinks links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(brand, "brand");
        Utils.checkNotNull(model, "model");
        Utils.checkNotNull(serialNumber, "serialNumber");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.description = description;
        this.status = status;
        this.brand = brand;
        this.model = model;
        this.serialNumber = serialNumber;
        this.currency = currency;
        this.profileId = profileId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.links = links;
    }
    
    public GetTerminalResponseBody(
            String id,
            String mode,
            String description,
            String status,
            String currency,
            String profileId,
            String createdAt,
            String updatedAt,
            GetTerminalLinks links) {
        this(Optional.empty(), id, mode, description, status, Optional.empty(), Optional.empty(), Optional.empty(), currency, profileId, createdAt, updatedAt, links);
    }

    /**
     * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this terminal. Example: `term_7MgL4wea46qkRcoTZjWEH`.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    @JsonIgnore
    public String mode() {
        return mode;
    }

    /**
     * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it may be visible on the device itself depending on the device.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The status of the terminal.
     * 
     * <p>Possible values: `pending` `active` `inactive`
     */
    @JsonIgnore
    public String status() {
        return status;
    }

    /**
     * The brand of the terminal.
     * 
     * <p>Possible values: `PAX`
     */
    @JsonIgnore
    public Optional<String> brand() {
        return brand;
    }

    /**
     * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
     * 
     * <p>Possible values: `A35` `A77` `A920` `A920 Pro` `IM30`
     */
    @JsonIgnore
    public Optional<String> model() {
        return model;
    }

    /**
     * The serial number of the terminal. The serial number is provided at terminal creation time.
     */
    @JsonIgnore
    public Optional<String> serialNumber() {
        return serialNumber;
    }

    /**
     * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a specific currency, chosen during setup.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    @JsonIgnore
    public String profileId() {
        return profileId;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public String updatedAt() {
        return updatedAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public GetTerminalLinks links() {
        return links;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
     */
    public GetTerminalResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
     */
    public GetTerminalResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this terminal. Example: `term_7MgL4wea46qkRcoTZjWEH`.
     */
    public GetTerminalResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    public GetTerminalResponseBody withMode(String mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it may be visible on the device itself depending on the device.
     */
    public GetTerminalResponseBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The status of the terminal.
     * 
     * <p>Possible values: `pending` `active` `inactive`
     */
    public GetTerminalResponseBody withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The brand of the terminal.
     * 
     * <p>Possible values: `PAX`
     */
    public GetTerminalResponseBody withBrand(String brand) {
        Utils.checkNotNull(brand, "brand");
        this.brand = Optional.ofNullable(brand);
        return this;
    }

    /**
     * The brand of the terminal.
     * 
     * <p>Possible values: `PAX`
     */
    public GetTerminalResponseBody withBrand(Optional<String> brand) {
        Utils.checkNotNull(brand, "brand");
        this.brand = brand;
        return this;
    }

    /**
     * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
     * 
     * <p>Possible values: `A35` `A77` `A920` `A920 Pro` `IM30`
     */
    public GetTerminalResponseBody withModel(String model) {
        Utils.checkNotNull(model, "model");
        this.model = Optional.ofNullable(model);
        return this;
    }

    /**
     * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
     * 
     * <p>Possible values: `A35` `A77` `A920` `A920 Pro` `IM30`
     */
    public GetTerminalResponseBody withModel(Optional<String> model) {
        Utils.checkNotNull(model, "model");
        this.model = model;
        return this;
    }

    /**
     * The serial number of the terminal. The serial number is provided at terminal creation time.
     */
    public GetTerminalResponseBody withSerialNumber(String serialNumber) {
        Utils.checkNotNull(serialNumber, "serialNumber");
        this.serialNumber = Optional.ofNullable(serialNumber);
        return this;
    }

    /**
     * The serial number of the terminal. The serial number is provided at terminal creation time.
     */
    public GetTerminalResponseBody withSerialNumber(Optional<String> serialNumber) {
        Utils.checkNotNull(serialNumber, "serialNumber");
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a specific currency, chosen during setup.
     */
    public GetTerminalResponseBody withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    public GetTerminalResponseBody withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetTerminalResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetTerminalResponseBody withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetTerminalResponseBody withLinks(GetTerminalLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetTerminalResponseBody other = (GetTerminalResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.brand, other.brand) &&
            Utils.enhancedDeepEquals(this.model, other.model) &&
            Utils.enhancedDeepEquals(this.serialNumber, other.serialNumber) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.profileId, other.profileId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource,
            id,
            mode,
            description,
            status,
            brand,
            model,
            serialNumber,
            currency,
            profileId,
            createdAt,
            updatedAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetTerminalResponseBody.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "description", description,
                "status", status,
                "brand", brand,
                "model", model,
                "serialNumber", serialNumber,
                "currency", currency,
                "profileId", profileId,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private String id;
 
        private String mode;
 
        private String description;
 
        private String status;
 
        private Optional<String> brand = Optional.empty();
 
        private Optional<String> model = Optional.empty();
 
        private Optional<String> serialNumber = Optional.empty();
 
        private String currency;
 
        private String profileId;
 
        private String createdAt;
 
        private String updatedAt;
 
        private GetTerminalLinks links;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this terminal. Example: `term_7MgL4wea46qkRcoTZjWEH`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * <p>Possible values: `live` `test`
         */
        public Builder mode(String mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        /**
         * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it may be visible on the device itself depending on the device.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The status of the terminal.
         * 
         * <p>Possible values: `pending` `active` `inactive`
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The brand of the terminal.
         * 
         * <p>Possible values: `PAX`
         */
        public Builder brand(String brand) {
            Utils.checkNotNull(brand, "brand");
            this.brand = Optional.ofNullable(brand);
            return this;
        }

        /**
         * The brand of the terminal.
         * 
         * <p>Possible values: `PAX`
         */
        public Builder brand(Optional<String> brand) {
            Utils.checkNotNull(brand, "brand");
            this.brand = brand;
            return this;
        }

        /**
         * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
         * 
         * <p>Possible values: `A35` `A77` `A920` `A920 Pro` `IM30`
         */
        public Builder model(String model) {
            Utils.checkNotNull(model, "model");
            this.model = Optional.ofNullable(model);
            return this;
        }

        /**
         * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
         * 
         * <p>Possible values: `A35` `A77` `A920` `A920 Pro` `IM30`
         */
        public Builder model(Optional<String> model) {
            Utils.checkNotNull(model, "model");
            this.model = model;
            return this;
        }

        /**
         * The serial number of the terminal. The serial number is provided at terminal creation time.
         */
        public Builder serialNumber(String serialNumber) {
            Utils.checkNotNull(serialNumber, "serialNumber");
            this.serialNumber = Optional.ofNullable(serialNumber);
            return this;
        }

        /**
         * The serial number of the terminal. The serial number is provided at terminal creation time.
         */
        public Builder serialNumber(Optional<String> serialNumber) {
            Utils.checkNotNull(serialNumber, "serialNumber");
            this.serialNumber = serialNumber;
            return this;
        }

        /**
         * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a specific currency, chosen during setup.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetTerminalLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public GetTerminalResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }
            return new GetTerminalResponseBody(
                resource,
                id,
                mode,
                description,
                status,
                brand,
                model,
                serialNumber,
                currency,
                profileId,
                createdAt,
                updatedAt,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"terminal\"",
                        new TypeReference<Optional<String>>() {});
    }
}
