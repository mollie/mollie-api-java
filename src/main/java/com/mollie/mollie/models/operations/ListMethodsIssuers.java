/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class ListMethodsIssuers {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The full name of the issuer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * URLs of images representing the issuer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    private Optional<? extends ListMethodsMethodsImage> image;

    @JsonCreator
    public ListMethodsIssuers(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("image") Optional<? extends ListMethodsMethodsImage> image) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(image, "image");
        this.resource = resource;
        this.id = id;
        this.name = name;
        this.image = image;
    }
    
    public ListMethodsIssuers() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The full name of the issuer.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * URLs of images representing the issuer.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListMethodsMethodsImage> image() {
        return (Optional<ListMethodsMethodsImage>) image;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ListMethodsIssuers withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    public ListMethodsIssuers withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public ListMethodsIssuers withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public ListMethodsIssuers withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The full name of the issuer.
     */
    public ListMethodsIssuers withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The full name of the issuer.
     */
    public ListMethodsIssuers withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * URLs of images representing the issuer.
     */
    public ListMethodsIssuers withImage(ListMethodsMethodsImage image) {
        Utils.checkNotNull(image, "image");
        this.image = Optional.ofNullable(image);
        return this;
    }

    /**
     * URLs of images representing the issuer.
     */
    public ListMethodsIssuers withImage(Optional<? extends ListMethodsMethodsImage> image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListMethodsIssuers other = (ListMethodsIssuers) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.image, other.image);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            name,
            image);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListMethodsIssuers.class,
                "resource", resource,
                "id", id,
                "name", name,
                "image", image);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends ListMethodsMethodsImage> image = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The full name of the issuer.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The full name of the issuer.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * URLs of images representing the issuer.
         */
        public Builder image(ListMethodsMethodsImage image) {
            Utils.checkNotNull(image, "image");
            this.image = Optional.ofNullable(image);
            return this;
        }

        /**
         * URLs of images representing the issuer.
         */
        public Builder image(Optional<? extends ListMethodsMethodsImage> image) {
            Utils.checkNotNull(image, "image");
            this.image = image;
            return this;
        }
        
        public ListMethodsIssuers build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }
            return new ListMethodsIssuers(
                resource,
                id,
                name,
                image);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"issuer\"",
                        new TypeReference<Optional<String>>() {});
    }
}
