/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Context
 * 
 * <p>Depending on the type of the balance transaction, we will try to give more context about the specific event that triggered it. For example, the context object for a payment transaction will look like `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo"}`.
 * 
 * <p>Below is a complete list of the context values that each type of transaction will have.
 * 
 * <p>* Type `payment`: `paymentId`
 * * Type `capture`: `paymentId` `captureId`
 * * Type `unauthorized-direct-debit`: `paymentId`
 * * Type `failed-payment`: `paymentId`
 * * Type `refund`: `paymentId` `refundId`
 * * Type `returned-refund`: `paymentId` `refundId`
 * * Type `chargeback`: `paymentId` `chargebackId`
 * * Type `chargeback-reversal`: `paymentId`
 * * Type `outgoing-transfer`: `settlementId` `transferId`
 * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
 * * Type `returned-transfer`: `settlementId` `transferId`
 * * Type `invoice-compensation`: `invoiceId`
 * * Type `balance-correction`: none
 * * Type `application-fee`: `paymentId`
 * * Type `split-payment`: `paymentId`
 * * Type `platform-payment-refund`: `paymentId` `refundId`
 * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`
 */
public class Context {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment")
    private JsonNullable<String> payment;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capture")
    private JsonNullable<? extends Capture> capture;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unauthorized-direct-debit")
    private JsonNullable<String> unauthorizedDirectDebit;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failed-payment")
    private JsonNullable<String> failedPayment;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund")
    private JsonNullable<String> refund;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returned-refund")
    private JsonNullable<? extends ReturnedRefund> returnedRefund;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeback")
    private JsonNullable<? extends Chargeback> chargeback;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeback-reversal")
    private JsonNullable<String> chargebackReversal;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outgoing-transfer")
    private JsonNullable<? extends OutgoingTransfer> outgoingTransfer;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canceled-outgoing-transfer")
    private JsonNullable<? extends CanceledOutgoingTransfer> canceledOutgoingTransfer;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returned-transfer")
    private JsonNullable<? extends ReturnedTransfer> returnedTransfer;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice-compensation")
    private JsonNullable<String> invoiceCompensation;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application-fee")
    private JsonNullable<String> applicationFee;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("split-payment")
    private JsonNullable<String> splitPayment;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platform-payment-refund")
    private JsonNullable<? extends PlatformPaymentRefund> platformPaymentRefund;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platform-payment-chargeback")
    private JsonNullable<? extends PlatformPaymentChargeback> platformPaymentChargeback;

    @JsonCreator
    public Context(
            @JsonProperty("payment") JsonNullable<String> payment,
            @JsonProperty("capture") JsonNullable<? extends Capture> capture,
            @JsonProperty("unauthorized-direct-debit") JsonNullable<String> unauthorizedDirectDebit,
            @JsonProperty("failed-payment") JsonNullable<String> failedPayment,
            @JsonProperty("refund") JsonNullable<String> refund,
            @JsonProperty("returned-refund") JsonNullable<? extends ReturnedRefund> returnedRefund,
            @JsonProperty("chargeback") JsonNullable<? extends Chargeback> chargeback,
            @JsonProperty("chargeback-reversal") JsonNullable<String> chargebackReversal,
            @JsonProperty("outgoing-transfer") JsonNullable<? extends OutgoingTransfer> outgoingTransfer,
            @JsonProperty("canceled-outgoing-transfer") JsonNullable<? extends CanceledOutgoingTransfer> canceledOutgoingTransfer,
            @JsonProperty("returned-transfer") JsonNullable<? extends ReturnedTransfer> returnedTransfer,
            @JsonProperty("invoice-compensation") JsonNullable<String> invoiceCompensation,
            @JsonProperty("application-fee") JsonNullable<String> applicationFee,
            @JsonProperty("split-payment") JsonNullable<String> splitPayment,
            @JsonProperty("platform-payment-refund") JsonNullable<? extends PlatformPaymentRefund> platformPaymentRefund,
            @JsonProperty("platform-payment-chargeback") JsonNullable<? extends PlatformPaymentChargeback> platformPaymentChargeback) {
        Utils.checkNotNull(payment, "payment");
        Utils.checkNotNull(capture, "capture");
        Utils.checkNotNull(unauthorizedDirectDebit, "unauthorizedDirectDebit");
        Utils.checkNotNull(failedPayment, "failedPayment");
        Utils.checkNotNull(refund, "refund");
        Utils.checkNotNull(returnedRefund, "returnedRefund");
        Utils.checkNotNull(chargeback, "chargeback");
        Utils.checkNotNull(chargebackReversal, "chargebackReversal");
        Utils.checkNotNull(outgoingTransfer, "outgoingTransfer");
        Utils.checkNotNull(canceledOutgoingTransfer, "canceledOutgoingTransfer");
        Utils.checkNotNull(returnedTransfer, "returnedTransfer");
        Utils.checkNotNull(invoiceCompensation, "invoiceCompensation");
        Utils.checkNotNull(applicationFee, "applicationFee");
        Utils.checkNotNull(splitPayment, "splitPayment");
        Utils.checkNotNull(platformPaymentRefund, "platformPaymentRefund");
        Utils.checkNotNull(platformPaymentChargeback, "platformPaymentChargeback");
        this.payment = payment;
        this.capture = capture;
        this.unauthorizedDirectDebit = unauthorizedDirectDebit;
        this.failedPayment = failedPayment;
        this.refund = refund;
        this.returnedRefund = returnedRefund;
        this.chargeback = chargeback;
        this.chargebackReversal = chargebackReversal;
        this.outgoingTransfer = outgoingTransfer;
        this.canceledOutgoingTransfer = canceledOutgoingTransfer;
        this.returnedTransfer = returnedTransfer;
        this.invoiceCompensation = invoiceCompensation;
        this.applicationFee = applicationFee;
        this.splitPayment = splitPayment;
        this.platformPaymentRefund = platformPaymentRefund;
        this.platformPaymentChargeback = platformPaymentChargeback;
    }
    
    public Context() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> payment() {
        return payment;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Capture> capture() {
        return (JsonNullable<Capture>) capture;
    }

    @JsonIgnore
    public JsonNullable<String> unauthorizedDirectDebit() {
        return unauthorizedDirectDebit;
    }

    @JsonIgnore
    public JsonNullable<String> failedPayment() {
        return failedPayment;
    }

    @JsonIgnore
    public JsonNullable<String> refund() {
        return refund;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ReturnedRefund> returnedRefund() {
        return (JsonNullable<ReturnedRefund>) returnedRefund;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Chargeback> chargeback() {
        return (JsonNullable<Chargeback>) chargeback;
    }

    @JsonIgnore
    public JsonNullable<String> chargebackReversal() {
        return chargebackReversal;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<OutgoingTransfer> outgoingTransfer() {
        return (JsonNullable<OutgoingTransfer>) outgoingTransfer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CanceledOutgoingTransfer> canceledOutgoingTransfer() {
        return (JsonNullable<CanceledOutgoingTransfer>) canceledOutgoingTransfer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ReturnedTransfer> returnedTransfer() {
        return (JsonNullable<ReturnedTransfer>) returnedTransfer;
    }

    @JsonIgnore
    public JsonNullable<String> invoiceCompensation() {
        return invoiceCompensation;
    }

    @JsonIgnore
    public JsonNullable<String> applicationFee() {
        return applicationFee;
    }

    @JsonIgnore
    public JsonNullable<String> splitPayment() {
        return splitPayment;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PlatformPaymentRefund> platformPaymentRefund() {
        return (JsonNullable<PlatformPaymentRefund>) platformPaymentRefund;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PlatformPaymentChargeback> platformPaymentChargeback() {
        return (JsonNullable<PlatformPaymentChargeback>) platformPaymentChargeback;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Context withPayment(String payment) {
        Utils.checkNotNull(payment, "payment");
        this.payment = JsonNullable.of(payment);
        return this;
    }

    public Context withPayment(JsonNullable<String> payment) {
        Utils.checkNotNull(payment, "payment");
        this.payment = payment;
        return this;
    }

    public Context withCapture(Capture capture) {
        Utils.checkNotNull(capture, "capture");
        this.capture = JsonNullable.of(capture);
        return this;
    }

    public Context withCapture(JsonNullable<? extends Capture> capture) {
        Utils.checkNotNull(capture, "capture");
        this.capture = capture;
        return this;
    }

    public Context withUnauthorizedDirectDebit(String unauthorizedDirectDebit) {
        Utils.checkNotNull(unauthorizedDirectDebit, "unauthorizedDirectDebit");
        this.unauthorizedDirectDebit = JsonNullable.of(unauthorizedDirectDebit);
        return this;
    }

    public Context withUnauthorizedDirectDebit(JsonNullable<String> unauthorizedDirectDebit) {
        Utils.checkNotNull(unauthorizedDirectDebit, "unauthorizedDirectDebit");
        this.unauthorizedDirectDebit = unauthorizedDirectDebit;
        return this;
    }

    public Context withFailedPayment(String failedPayment) {
        Utils.checkNotNull(failedPayment, "failedPayment");
        this.failedPayment = JsonNullable.of(failedPayment);
        return this;
    }

    public Context withFailedPayment(JsonNullable<String> failedPayment) {
        Utils.checkNotNull(failedPayment, "failedPayment");
        this.failedPayment = failedPayment;
        return this;
    }

    public Context withRefund(String refund) {
        Utils.checkNotNull(refund, "refund");
        this.refund = JsonNullable.of(refund);
        return this;
    }

    public Context withRefund(JsonNullable<String> refund) {
        Utils.checkNotNull(refund, "refund");
        this.refund = refund;
        return this;
    }

    public Context withReturnedRefund(ReturnedRefund returnedRefund) {
        Utils.checkNotNull(returnedRefund, "returnedRefund");
        this.returnedRefund = JsonNullable.of(returnedRefund);
        return this;
    }

    public Context withReturnedRefund(JsonNullable<? extends ReturnedRefund> returnedRefund) {
        Utils.checkNotNull(returnedRefund, "returnedRefund");
        this.returnedRefund = returnedRefund;
        return this;
    }

    public Context withChargeback(Chargeback chargeback) {
        Utils.checkNotNull(chargeback, "chargeback");
        this.chargeback = JsonNullable.of(chargeback);
        return this;
    }

    public Context withChargeback(JsonNullable<? extends Chargeback> chargeback) {
        Utils.checkNotNull(chargeback, "chargeback");
        this.chargeback = chargeback;
        return this;
    }

    public Context withChargebackReversal(String chargebackReversal) {
        Utils.checkNotNull(chargebackReversal, "chargebackReversal");
        this.chargebackReversal = JsonNullable.of(chargebackReversal);
        return this;
    }

    public Context withChargebackReversal(JsonNullable<String> chargebackReversal) {
        Utils.checkNotNull(chargebackReversal, "chargebackReversal");
        this.chargebackReversal = chargebackReversal;
        return this;
    }

    public Context withOutgoingTransfer(OutgoingTransfer outgoingTransfer) {
        Utils.checkNotNull(outgoingTransfer, "outgoingTransfer");
        this.outgoingTransfer = JsonNullable.of(outgoingTransfer);
        return this;
    }

    public Context withOutgoingTransfer(JsonNullable<? extends OutgoingTransfer> outgoingTransfer) {
        Utils.checkNotNull(outgoingTransfer, "outgoingTransfer");
        this.outgoingTransfer = outgoingTransfer;
        return this;
    }

    public Context withCanceledOutgoingTransfer(CanceledOutgoingTransfer canceledOutgoingTransfer) {
        Utils.checkNotNull(canceledOutgoingTransfer, "canceledOutgoingTransfer");
        this.canceledOutgoingTransfer = JsonNullable.of(canceledOutgoingTransfer);
        return this;
    }

    public Context withCanceledOutgoingTransfer(JsonNullable<? extends CanceledOutgoingTransfer> canceledOutgoingTransfer) {
        Utils.checkNotNull(canceledOutgoingTransfer, "canceledOutgoingTransfer");
        this.canceledOutgoingTransfer = canceledOutgoingTransfer;
        return this;
    }

    public Context withReturnedTransfer(ReturnedTransfer returnedTransfer) {
        Utils.checkNotNull(returnedTransfer, "returnedTransfer");
        this.returnedTransfer = JsonNullable.of(returnedTransfer);
        return this;
    }

    public Context withReturnedTransfer(JsonNullable<? extends ReturnedTransfer> returnedTransfer) {
        Utils.checkNotNull(returnedTransfer, "returnedTransfer");
        this.returnedTransfer = returnedTransfer;
        return this;
    }

    public Context withInvoiceCompensation(String invoiceCompensation) {
        Utils.checkNotNull(invoiceCompensation, "invoiceCompensation");
        this.invoiceCompensation = JsonNullable.of(invoiceCompensation);
        return this;
    }

    public Context withInvoiceCompensation(JsonNullable<String> invoiceCompensation) {
        Utils.checkNotNull(invoiceCompensation, "invoiceCompensation");
        this.invoiceCompensation = invoiceCompensation;
        return this;
    }

    public Context withApplicationFee(String applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = JsonNullable.of(applicationFee);
        return this;
    }

    public Context withApplicationFee(JsonNullable<String> applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = applicationFee;
        return this;
    }

    public Context withSplitPayment(String splitPayment) {
        Utils.checkNotNull(splitPayment, "splitPayment");
        this.splitPayment = JsonNullable.of(splitPayment);
        return this;
    }

    public Context withSplitPayment(JsonNullable<String> splitPayment) {
        Utils.checkNotNull(splitPayment, "splitPayment");
        this.splitPayment = splitPayment;
        return this;
    }

    public Context withPlatformPaymentRefund(PlatformPaymentRefund platformPaymentRefund) {
        Utils.checkNotNull(platformPaymentRefund, "platformPaymentRefund");
        this.platformPaymentRefund = JsonNullable.of(platformPaymentRefund);
        return this;
    }

    public Context withPlatformPaymentRefund(JsonNullable<? extends PlatformPaymentRefund> platformPaymentRefund) {
        Utils.checkNotNull(platformPaymentRefund, "platformPaymentRefund");
        this.platformPaymentRefund = platformPaymentRefund;
        return this;
    }

    public Context withPlatformPaymentChargeback(PlatformPaymentChargeback platformPaymentChargeback) {
        Utils.checkNotNull(platformPaymentChargeback, "platformPaymentChargeback");
        this.platformPaymentChargeback = JsonNullable.of(platformPaymentChargeback);
        return this;
    }

    public Context withPlatformPaymentChargeback(JsonNullable<? extends PlatformPaymentChargeback> platformPaymentChargeback) {
        Utils.checkNotNull(platformPaymentChargeback, "platformPaymentChargeback");
        this.platformPaymentChargeback = platformPaymentChargeback;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Context other = (Context) o;
        return 
            Utils.enhancedDeepEquals(this.payment, other.payment) &&
            Utils.enhancedDeepEquals(this.capture, other.capture) &&
            Utils.enhancedDeepEquals(this.unauthorizedDirectDebit, other.unauthorizedDirectDebit) &&
            Utils.enhancedDeepEquals(this.failedPayment, other.failedPayment) &&
            Utils.enhancedDeepEquals(this.refund, other.refund) &&
            Utils.enhancedDeepEquals(this.returnedRefund, other.returnedRefund) &&
            Utils.enhancedDeepEquals(this.chargeback, other.chargeback) &&
            Utils.enhancedDeepEquals(this.chargebackReversal, other.chargebackReversal) &&
            Utils.enhancedDeepEquals(this.outgoingTransfer, other.outgoingTransfer) &&
            Utils.enhancedDeepEquals(this.canceledOutgoingTransfer, other.canceledOutgoingTransfer) &&
            Utils.enhancedDeepEquals(this.returnedTransfer, other.returnedTransfer) &&
            Utils.enhancedDeepEquals(this.invoiceCompensation, other.invoiceCompensation) &&
            Utils.enhancedDeepEquals(this.applicationFee, other.applicationFee) &&
            Utils.enhancedDeepEquals(this.splitPayment, other.splitPayment) &&
            Utils.enhancedDeepEquals(this.platformPaymentRefund, other.platformPaymentRefund) &&
            Utils.enhancedDeepEquals(this.platformPaymentChargeback, other.platformPaymentChargeback);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            payment, capture, unauthorizedDirectDebit,
            failedPayment, refund, returnedRefund,
            chargeback, chargebackReversal, outgoingTransfer,
            canceledOutgoingTransfer, returnedTransfer, invoiceCompensation,
            applicationFee, splitPayment, platformPaymentRefund,
            platformPaymentChargeback);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Context.class,
                "payment", payment,
                "capture", capture,
                "unauthorizedDirectDebit", unauthorizedDirectDebit,
                "failedPayment", failedPayment,
                "refund", refund,
                "returnedRefund", returnedRefund,
                "chargeback", chargeback,
                "chargebackReversal", chargebackReversal,
                "outgoingTransfer", outgoingTransfer,
                "canceledOutgoingTransfer", canceledOutgoingTransfer,
                "returnedTransfer", returnedTransfer,
                "invoiceCompensation", invoiceCompensation,
                "applicationFee", applicationFee,
                "splitPayment", splitPayment,
                "platformPaymentRefund", platformPaymentRefund,
                "platformPaymentChargeback", platformPaymentChargeback);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> payment = JsonNullable.undefined();

        private JsonNullable<? extends Capture> capture = JsonNullable.undefined();

        private JsonNullable<String> unauthorizedDirectDebit = JsonNullable.undefined();

        private JsonNullable<String> failedPayment = JsonNullable.undefined();

        private JsonNullable<String> refund = JsonNullable.undefined();

        private JsonNullable<? extends ReturnedRefund> returnedRefund = JsonNullable.undefined();

        private JsonNullable<? extends Chargeback> chargeback = JsonNullable.undefined();

        private JsonNullable<String> chargebackReversal = JsonNullable.undefined();

        private JsonNullable<? extends OutgoingTransfer> outgoingTransfer = JsonNullable.undefined();

        private JsonNullable<? extends CanceledOutgoingTransfer> canceledOutgoingTransfer = JsonNullable.undefined();

        private JsonNullable<? extends ReturnedTransfer> returnedTransfer = JsonNullable.undefined();

        private JsonNullable<String> invoiceCompensation = JsonNullable.undefined();

        private JsonNullable<String> applicationFee = JsonNullable.undefined();

        private JsonNullable<String> splitPayment = JsonNullable.undefined();

        private JsonNullable<? extends PlatformPaymentRefund> platformPaymentRefund = JsonNullable.undefined();

        private JsonNullable<? extends PlatformPaymentChargeback> platformPaymentChargeback = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder payment(String payment) {
            Utils.checkNotNull(payment, "payment");
            this.payment = JsonNullable.of(payment);
            return this;
        }

        public Builder payment(JsonNullable<String> payment) {
            Utils.checkNotNull(payment, "payment");
            this.payment = payment;
            return this;
        }


        public Builder capture(Capture capture) {
            Utils.checkNotNull(capture, "capture");
            this.capture = JsonNullable.of(capture);
            return this;
        }

        public Builder capture(JsonNullable<? extends Capture> capture) {
            Utils.checkNotNull(capture, "capture");
            this.capture = capture;
            return this;
        }


        public Builder unauthorizedDirectDebit(String unauthorizedDirectDebit) {
            Utils.checkNotNull(unauthorizedDirectDebit, "unauthorizedDirectDebit");
            this.unauthorizedDirectDebit = JsonNullable.of(unauthorizedDirectDebit);
            return this;
        }

        public Builder unauthorizedDirectDebit(JsonNullable<String> unauthorizedDirectDebit) {
            Utils.checkNotNull(unauthorizedDirectDebit, "unauthorizedDirectDebit");
            this.unauthorizedDirectDebit = unauthorizedDirectDebit;
            return this;
        }


        public Builder failedPayment(String failedPayment) {
            Utils.checkNotNull(failedPayment, "failedPayment");
            this.failedPayment = JsonNullable.of(failedPayment);
            return this;
        }

        public Builder failedPayment(JsonNullable<String> failedPayment) {
            Utils.checkNotNull(failedPayment, "failedPayment");
            this.failedPayment = failedPayment;
            return this;
        }


        public Builder refund(String refund) {
            Utils.checkNotNull(refund, "refund");
            this.refund = JsonNullable.of(refund);
            return this;
        }

        public Builder refund(JsonNullable<String> refund) {
            Utils.checkNotNull(refund, "refund");
            this.refund = refund;
            return this;
        }


        public Builder returnedRefund(ReturnedRefund returnedRefund) {
            Utils.checkNotNull(returnedRefund, "returnedRefund");
            this.returnedRefund = JsonNullable.of(returnedRefund);
            return this;
        }

        public Builder returnedRefund(JsonNullable<? extends ReturnedRefund> returnedRefund) {
            Utils.checkNotNull(returnedRefund, "returnedRefund");
            this.returnedRefund = returnedRefund;
            return this;
        }


        public Builder chargeback(Chargeback chargeback) {
            Utils.checkNotNull(chargeback, "chargeback");
            this.chargeback = JsonNullable.of(chargeback);
            return this;
        }

        public Builder chargeback(JsonNullable<? extends Chargeback> chargeback) {
            Utils.checkNotNull(chargeback, "chargeback");
            this.chargeback = chargeback;
            return this;
        }


        public Builder chargebackReversal(String chargebackReversal) {
            Utils.checkNotNull(chargebackReversal, "chargebackReversal");
            this.chargebackReversal = JsonNullable.of(chargebackReversal);
            return this;
        }

        public Builder chargebackReversal(JsonNullable<String> chargebackReversal) {
            Utils.checkNotNull(chargebackReversal, "chargebackReversal");
            this.chargebackReversal = chargebackReversal;
            return this;
        }


        public Builder outgoingTransfer(OutgoingTransfer outgoingTransfer) {
            Utils.checkNotNull(outgoingTransfer, "outgoingTransfer");
            this.outgoingTransfer = JsonNullable.of(outgoingTransfer);
            return this;
        }

        public Builder outgoingTransfer(JsonNullable<? extends OutgoingTransfer> outgoingTransfer) {
            Utils.checkNotNull(outgoingTransfer, "outgoingTransfer");
            this.outgoingTransfer = outgoingTransfer;
            return this;
        }


        public Builder canceledOutgoingTransfer(CanceledOutgoingTransfer canceledOutgoingTransfer) {
            Utils.checkNotNull(canceledOutgoingTransfer, "canceledOutgoingTransfer");
            this.canceledOutgoingTransfer = JsonNullable.of(canceledOutgoingTransfer);
            return this;
        }

        public Builder canceledOutgoingTransfer(JsonNullable<? extends CanceledOutgoingTransfer> canceledOutgoingTransfer) {
            Utils.checkNotNull(canceledOutgoingTransfer, "canceledOutgoingTransfer");
            this.canceledOutgoingTransfer = canceledOutgoingTransfer;
            return this;
        }


        public Builder returnedTransfer(ReturnedTransfer returnedTransfer) {
            Utils.checkNotNull(returnedTransfer, "returnedTransfer");
            this.returnedTransfer = JsonNullable.of(returnedTransfer);
            return this;
        }

        public Builder returnedTransfer(JsonNullable<? extends ReturnedTransfer> returnedTransfer) {
            Utils.checkNotNull(returnedTransfer, "returnedTransfer");
            this.returnedTransfer = returnedTransfer;
            return this;
        }


        public Builder invoiceCompensation(String invoiceCompensation) {
            Utils.checkNotNull(invoiceCompensation, "invoiceCompensation");
            this.invoiceCompensation = JsonNullable.of(invoiceCompensation);
            return this;
        }

        public Builder invoiceCompensation(JsonNullable<String> invoiceCompensation) {
            Utils.checkNotNull(invoiceCompensation, "invoiceCompensation");
            this.invoiceCompensation = invoiceCompensation;
            return this;
        }


        public Builder applicationFee(String applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = JsonNullable.of(applicationFee);
            return this;
        }

        public Builder applicationFee(JsonNullable<String> applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = applicationFee;
            return this;
        }


        public Builder splitPayment(String splitPayment) {
            Utils.checkNotNull(splitPayment, "splitPayment");
            this.splitPayment = JsonNullable.of(splitPayment);
            return this;
        }

        public Builder splitPayment(JsonNullable<String> splitPayment) {
            Utils.checkNotNull(splitPayment, "splitPayment");
            this.splitPayment = splitPayment;
            return this;
        }


        public Builder platformPaymentRefund(PlatformPaymentRefund platformPaymentRefund) {
            Utils.checkNotNull(platformPaymentRefund, "platformPaymentRefund");
            this.platformPaymentRefund = JsonNullable.of(platformPaymentRefund);
            return this;
        }

        public Builder platformPaymentRefund(JsonNullable<? extends PlatformPaymentRefund> platformPaymentRefund) {
            Utils.checkNotNull(platformPaymentRefund, "platformPaymentRefund");
            this.platformPaymentRefund = platformPaymentRefund;
            return this;
        }


        public Builder platformPaymentChargeback(PlatformPaymentChargeback platformPaymentChargeback) {
            Utils.checkNotNull(platformPaymentChargeback, "platformPaymentChargeback");
            this.platformPaymentChargeback = JsonNullable.of(platformPaymentChargeback);
            return this;
        }

        public Builder platformPaymentChargeback(JsonNullable<? extends PlatformPaymentChargeback> platformPaymentChargeback) {
            Utils.checkNotNull(platformPaymentChargeback, "platformPaymentChargeback");
            this.platformPaymentChargeback = platformPaymentChargeback;
            return this;
        }

        public Context build() {

            return new Context(
                payment, capture, unauthorizedDirectDebit,
                failedPayment, refund, returnedRefund,
                chargeback, chargebackReversal, outgoingTransfer,
                canceledOutgoingTransfer, returnedTransfer, invoiceCompensation,
                applicationFee, splitPayment, platformPaymentRefund,
                platformPaymentChargeback);
        }

    }
}
