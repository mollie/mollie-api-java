/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
/**
 * Context - Depending on the type of the balance transaction, we will try to give more context about the specific event that triggered it. For example, the context object for a payment transaction will look like `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo"}`.
 * 
 * Below is a complete list of the context values that each type of transaction will have.
 * 
 * * Type `payment: `paymentId`
 * * Type `capture`: `paymentId` `captureId`
 * * Type `unauthorized-direct-debit`: `paymentId`
 * * Type `failed-payment`: `paymentId`
 * * Type `refund`: `paymentId` `refundId`
 * * Type `returned-refund`: `paymentId` `refundId`
 * * Type `chargeback`: `paymentId` `chargebackId`
 * * Type `chargeback-reversal`: `paymentId`
 * * Type `outgoing-transfer`: `settlementId` `transferId`
 * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
 * * Type `returned-transfer`: `settlementId` `transferId`
 * * Type `invoice-compensation`: `invoiceId`
 * * Type `balance-correction`: none
 * * Type `application-fee`: `paymentId`
 * * Type `split-payment`: `paymentId`
 * * Type `platform-payment-refund`: `paymentId` `refundId`
 * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`
 */

public class Context {

    @JsonCreator
    public Context() {
        
        
    }

    public final static Builder builder() {
        return new Builder();
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return true;
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            );
    }
    
    @Override
    public String toString() {
        return Utils.toString(Context.class);
    }
    
    public final static class Builder {  
        
        private Builder() {
          // force use of static builder() method
        }
        
        public Context build() {
            return new Context(
                );
        }
    }
}

