/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetOrderLines {

    /**
     * Indicates the response contains an order line object. Will always contain the string `orderline`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this order line. Mollie assigns this identifier at order line creation time. Example: `odl_jp31jz`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The type of product purchased. For example, a physical or a digital product.
     * 
     * Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` (default: `physical`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * A description of the line item. For example *LEGO 4440 Forest Police Station*.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The number of items.
     */
    @JsonProperty("quantity")
    private long quantity;

    /**
     * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityUnit")
    private Optional<String> quantityUnit;

    /**
     * The price of a single item including VAT.
     * 
     * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
     * 
     * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
     * 
     * The unit price can be zero in case of free items.
     */
    @JsonProperty("unitPrice")
    private GetOrderUnitPrice unitPrice;

    /**
     * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountAmount")
    private Optional<? extends GetOrderDiscountAmount> discountAmount;

    /**
     * The total amount of the line, including VAT and discounts.
     * 
     * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
     * 
     * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
     */
    @JsonProperty("totalAmount")
    private GetOrderTotalAmount totalAmount;

    /**
     * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatRate")
    private Optional<String> vatRate;

    /**
     * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
     * 
     * Any deviations from this will result in an error.
     * 
     * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatAmount")
    private Optional<? extends GetOrderVatAmount> vatAmount;

    /**
     * The SKU, EAN, ISBN or UPC of the product sold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private Optional<String> sku;

    /**
     * The voucher category, in case of an order line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
     * 
     * Possible values: `meal` `eco` `gift` `sport_culture`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    private JsonNullable<String> category;

    /**
     * The status of the order line.
     * 
     * Possible values: `created` `authorized` `paid` `shipping` `completed` `canceled`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * Whether the order line can still be canceled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isCancelable")
    private Optional<Boolean> isCancelable;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends GetOrderOrdersAPIMetadata> metadata;

    /**
     * The unique identifier of the order this order line belongs to. For example: `ord_8wmqcHMN4U`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderId")
    private Optional<String> orderId;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends GetOrderOrdersAPILinks> links;

    @JsonCreator
    public GetOrderLines(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("name") String name,
            @JsonProperty("quantity") long quantity,
            @JsonProperty("quantityUnit") Optional<String> quantityUnit,
            @JsonProperty("unitPrice") GetOrderUnitPrice unitPrice,
            @JsonProperty("discountAmount") Optional<? extends GetOrderDiscountAmount> discountAmount,
            @JsonProperty("totalAmount") GetOrderTotalAmount totalAmount,
            @JsonProperty("vatRate") Optional<String> vatRate,
            @JsonProperty("vatAmount") Optional<? extends GetOrderVatAmount> vatAmount,
            @JsonProperty("sku") Optional<String> sku,
            @JsonProperty("category") JsonNullable<String> category,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("isCancelable") Optional<Boolean> isCancelable,
            @JsonProperty("metadata") JsonNullable<? extends GetOrderOrdersAPIMetadata> metadata,
            @JsonProperty("orderId") Optional<String> orderId,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("_links") Optional<? extends GetOrderOrdersAPILinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(quantityUnit, "quantityUnit");
        Utils.checkNotNull(unitPrice, "unitPrice");
        Utils.checkNotNull(discountAmount, "discountAmount");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(vatRate, "vatRate");
        Utils.checkNotNull(vatAmount, "vatAmount");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(category, "category");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(isCancelable, "isCancelable");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(orderId, "orderId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.type = type;
        this.name = name;
        this.quantity = quantity;
        this.quantityUnit = quantityUnit;
        this.unitPrice = unitPrice;
        this.discountAmount = discountAmount;
        this.totalAmount = totalAmount;
        this.vatRate = vatRate;
        this.vatAmount = vatAmount;
        this.sku = sku;
        this.category = category;
        this.status = status;
        this.isCancelable = isCancelable;
        this.metadata = metadata;
        this.orderId = orderId;
        this.createdAt = createdAt;
        this.links = links;
    }
    
    public GetOrderLines(
            String name,
            long quantity,
            GetOrderUnitPrice unitPrice,
            GetOrderTotalAmount totalAmount) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), name, quantity, Optional.empty(), unitPrice, Optional.empty(), totalAmount, Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains an order line object. Will always contain the string `orderline`.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this order line. Mollie assigns this identifier at order line creation time. Example: `odl_jp31jz`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The type of product purchased. For example, a physical or a digital product.
     * 
     * Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` (default: `physical`)
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * A description of the line item. For example *LEGO 4440 Forest Police Station*.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The number of items.
     */
    @JsonIgnore
    public long quantity() {
        return quantity;
    }

    /**
     * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
     */
    @JsonIgnore
    public Optional<String> quantityUnit() {
        return quantityUnit;
    }

    /**
     * The price of a single item including VAT.
     * 
     * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
     * 
     * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
     * 
     * The unit price can be zero in case of free items.
     */
    @JsonIgnore
    public GetOrderUnitPrice unitPrice() {
        return unitPrice;
    }

    /**
     * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetOrderDiscountAmount> discountAmount() {
        return (Optional<GetOrderDiscountAmount>) discountAmount;
    }

    /**
     * The total amount of the line, including VAT and discounts.
     * 
     * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
     * 
     * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
     */
    @JsonIgnore
    public GetOrderTotalAmount totalAmount() {
        return totalAmount;
    }

    /**
     * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
     */
    @JsonIgnore
    public Optional<String> vatRate() {
        return vatRate;
    }

    /**
     * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
     * 
     * Any deviations from this will result in an error.
     * 
     * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetOrderVatAmount> vatAmount() {
        return (Optional<GetOrderVatAmount>) vatAmount;
    }

    /**
     * The SKU, EAN, ISBN or UPC of the product sold.
     */
    @JsonIgnore
    public Optional<String> sku() {
        return sku;
    }

    /**
     * The voucher category, in case of an order line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
     * 
     * Possible values: `meal` `eco` `gift` `sport_culture`
     */
    @JsonIgnore
    public JsonNullable<String> category() {
        return category;
    }

    /**
     * The status of the order line.
     * 
     * Possible values: `created` `authorized` `paid` `shipping` `completed` `canceled`
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * Whether the order line can still be canceled.
     */
    @JsonIgnore
    public Optional<Boolean> isCancelable() {
        return isCancelable;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetOrderOrdersAPIMetadata> metadata() {
        return (JsonNullable<GetOrderOrdersAPIMetadata>) metadata;
    }

    /**
     * The unique identifier of the order this order line belongs to. For example: `ord_8wmqcHMN4U`.
     */
    @JsonIgnore
    public Optional<String> orderId() {
        return orderId;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetOrderOrdersAPILinks> links() {
        return (Optional<GetOrderOrdersAPILinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates the response contains an order line object. Will always contain the string `orderline`.
     */
    public GetOrderLines withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains an order line object. Will always contain the string `orderline`.
     */
    public GetOrderLines withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this order line. Mollie assigns this identifier at order line creation time. Example: `odl_jp31jz`.
     */
    public GetOrderLines withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The identifier uniquely referring to this order line. Mollie assigns this identifier at order line creation time. Example: `odl_jp31jz`.
     */
    public GetOrderLines withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The type of product purchased. For example, a physical or a digital product.
     * 
     * Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` (default: `physical`)
     */
    public GetOrderLines withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of product purchased. For example, a physical or a digital product.
     * 
     * Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` (default: `physical`)
     */
    public GetOrderLines withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * A description of the line item. For example *LEGO 4440 Forest Police Station*.
     */
    public GetOrderLines withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The number of items.
     */
    public GetOrderLines withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
     */
    public GetOrderLines withQuantityUnit(String quantityUnit) {
        Utils.checkNotNull(quantityUnit, "quantityUnit");
        this.quantityUnit = Optional.ofNullable(quantityUnit);
        return this;
    }

    /**
     * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
     */
    public GetOrderLines withQuantityUnit(Optional<String> quantityUnit) {
        Utils.checkNotNull(quantityUnit, "quantityUnit");
        this.quantityUnit = quantityUnit;
        return this;
    }

    /**
     * The price of a single item including VAT.
     * 
     * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
     * 
     * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
     * 
     * The unit price can be zero in case of free items.
     */
    public GetOrderLines withUnitPrice(GetOrderUnitPrice unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = unitPrice;
        return this;
    }

    /**
     * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
     */
    public GetOrderLines withDiscountAmount(GetOrderDiscountAmount discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = Optional.ofNullable(discountAmount);
        return this;
    }

    /**
     * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
     */
    public GetOrderLines withDiscountAmount(Optional<? extends GetOrderDiscountAmount> discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = discountAmount;
        return this;
    }

    /**
     * The total amount of the line, including VAT and discounts.
     * 
     * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
     * 
     * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
     */
    public GetOrderLines withTotalAmount(GetOrderTotalAmount totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
     */
    public GetOrderLines withVatRate(String vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = Optional.ofNullable(vatRate);
        return this;
    }

    /**
     * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
     */
    public GetOrderLines withVatRate(Optional<String> vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = vatRate;
        return this;
    }

    /**
     * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
     * 
     * Any deviations from this will result in an error.
     * 
     * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
     */
    public GetOrderLines withVatAmount(GetOrderVatAmount vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = Optional.ofNullable(vatAmount);
        return this;
    }

    /**
     * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
     * 
     * Any deviations from this will result in an error.
     * 
     * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
     */
    public GetOrderLines withVatAmount(Optional<? extends GetOrderVatAmount> vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = vatAmount;
        return this;
    }

    /**
     * The SKU, EAN, ISBN or UPC of the product sold.
     */
    public GetOrderLines withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = Optional.ofNullable(sku);
        return this;
    }

    /**
     * The SKU, EAN, ISBN or UPC of the product sold.
     */
    public GetOrderLines withSku(Optional<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * The voucher category, in case of an order line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
     * 
     * Possible values: `meal` `eco` `gift` `sport_culture`
     */
    public GetOrderLines withCategory(String category) {
        Utils.checkNotNull(category, "category");
        this.category = JsonNullable.of(category);
        return this;
    }

    /**
     * The voucher category, in case of an order line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
     * 
     * Possible values: `meal` `eco` `gift` `sport_culture`
     */
    public GetOrderLines withCategory(JsonNullable<String> category) {
        Utils.checkNotNull(category, "category");
        this.category = category;
        return this;
    }

    /**
     * The status of the order line.
     * 
     * Possible values: `created` `authorized` `paid` `shipping` `completed` `canceled`
     */
    public GetOrderLines withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the order line.
     * 
     * Possible values: `created` `authorized` `paid` `shipping` `completed` `canceled`
     */
    public GetOrderLines withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Whether the order line can still be canceled.
     */
    public GetOrderLines withIsCancelable(boolean isCancelable) {
        Utils.checkNotNull(isCancelable, "isCancelable");
        this.isCancelable = Optional.ofNullable(isCancelable);
        return this;
    }

    /**
     * Whether the order line can still be canceled.
     */
    public GetOrderLines withIsCancelable(Optional<Boolean> isCancelable) {
        Utils.checkNotNull(isCancelable, "isCancelable");
        this.isCancelable = isCancelable;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public GetOrderLines withMetadata(GetOrderOrdersAPIMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public GetOrderLines withMetadata(JsonNullable<? extends GetOrderOrdersAPIMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The unique identifier of the order this order line belongs to. For example: `ord_8wmqcHMN4U`.
     */
    public GetOrderLines withOrderId(String orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = Optional.ofNullable(orderId);
        return this;
    }

    /**
     * The unique identifier of the order this order line belongs to. For example: `ord_8wmqcHMN4U`.
     */
    public GetOrderLines withOrderId(Optional<String> orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = orderId;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetOrderLines withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetOrderLines withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetOrderLines withLinks(GetOrderOrdersAPILinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetOrderLines withLinks(Optional<? extends GetOrderOrdersAPILinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetOrderLines other = (GetOrderLines) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.quantityUnit, other.quantityUnit) &&
            Objects.deepEquals(this.unitPrice, other.unitPrice) &&
            Objects.deepEquals(this.discountAmount, other.discountAmount) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.vatRate, other.vatRate) &&
            Objects.deepEquals(this.vatAmount, other.vatAmount) &&
            Objects.deepEquals(this.sku, other.sku) &&
            Objects.deepEquals(this.category, other.category) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.isCancelable, other.isCancelable) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.orderId, other.orderId) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            type,
            name,
            quantity,
            quantityUnit,
            unitPrice,
            discountAmount,
            totalAmount,
            vatRate,
            vatAmount,
            sku,
            category,
            status,
            isCancelable,
            metadata,
            orderId,
            createdAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetOrderLines.class,
                "resource", resource,
                "id", id,
                "type", type,
                "name", name,
                "quantity", quantity,
                "quantityUnit", quantityUnit,
                "unitPrice", unitPrice,
                "discountAmount", discountAmount,
                "totalAmount", totalAmount,
                "vatRate", vatRate,
                "vatAmount", vatAmount,
                "sku", sku,
                "category", category,
                "status", status,
                "isCancelable", isCancelable,
                "metadata", metadata,
                "orderId", orderId,
                "createdAt", createdAt,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> type = Optional.empty();
 
        private String name;
 
        private Long quantity;
 
        private Optional<String> quantityUnit = Optional.empty();
 
        private GetOrderUnitPrice unitPrice;
 
        private Optional<? extends GetOrderDiscountAmount> discountAmount = Optional.empty();
 
        private GetOrderTotalAmount totalAmount;
 
        private Optional<String> vatRate = Optional.empty();
 
        private Optional<? extends GetOrderVatAmount> vatAmount = Optional.empty();
 
        private Optional<String> sku = Optional.empty();
 
        private JsonNullable<String> category = JsonNullable.undefined();
 
        private Optional<String> status = Optional.empty();
 
        private Optional<Boolean> isCancelable = Optional.empty();
 
        private JsonNullable<? extends GetOrderOrdersAPIMetadata> metadata = JsonNullable.undefined();
 
        private Optional<String> orderId = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<? extends GetOrderOrdersAPILinks> links = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains an order line object. Will always contain the string `orderline`.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains an order line object. Will always contain the string `orderline`.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this order line. Mollie assigns this identifier at order line creation time. Example: `odl_jp31jz`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this order line. Mollie assigns this identifier at order line creation time. Example: `odl_jp31jz`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The type of product purchased. For example, a physical or a digital product.
         * 
         * Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` (default: `physical`)
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of product purchased. For example, a physical or a digital product.
         * 
         * Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` (default: `physical`)
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * A description of the line item. For example *LEGO 4440 Forest Police Station*.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The number of items.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
         */
        public Builder quantityUnit(String quantityUnit) {
            Utils.checkNotNull(quantityUnit, "quantityUnit");
            this.quantityUnit = Optional.ofNullable(quantityUnit);
            return this;
        }

        /**
         * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
         */
        public Builder quantityUnit(Optional<String> quantityUnit) {
            Utils.checkNotNull(quantityUnit, "quantityUnit");
            this.quantityUnit = quantityUnit;
            return this;
        }

        /**
         * The price of a single item including VAT.
         * 
         * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
         * 
         * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
         * 
         * The unit price can be zero in case of free items.
         */
        public Builder unitPrice(GetOrderUnitPrice unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = unitPrice;
            return this;
        }

        /**
         * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
         */
        public Builder discountAmount(GetOrderDiscountAmount discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = Optional.ofNullable(discountAmount);
            return this;
        }

        /**
         * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
         */
        public Builder discountAmount(Optional<? extends GetOrderDiscountAmount> discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = discountAmount;
            return this;
        }

        /**
         * The total amount of the line, including VAT and discounts.
         * 
         * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
         * 
         * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
         */
        public Builder totalAmount(GetOrderTotalAmount totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
         */
        public Builder vatRate(String vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = Optional.ofNullable(vatRate);
            return this;
        }

        /**
         * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
         */
        public Builder vatRate(Optional<String> vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = vatRate;
            return this;
        }

        /**
         * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
         * 
         * Any deviations from this will result in an error.
         * 
         * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
         */
        public Builder vatAmount(GetOrderVatAmount vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = Optional.ofNullable(vatAmount);
            return this;
        }

        /**
         * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
         * 
         * Any deviations from this will result in an error.
         * 
         * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
         */
        public Builder vatAmount(Optional<? extends GetOrderVatAmount> vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = vatAmount;
            return this;
        }

        /**
         * The SKU, EAN, ISBN or UPC of the product sold.
         */
        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = Optional.ofNullable(sku);
            return this;
        }

        /**
         * The SKU, EAN, ISBN or UPC of the product sold.
         */
        public Builder sku(Optional<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        /**
         * The voucher category, in case of an order line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
         * 
         * Possible values: `meal` `eco` `gift` `sport_culture`
         */
        public Builder category(String category) {
            Utils.checkNotNull(category, "category");
            this.category = JsonNullable.of(category);
            return this;
        }

        /**
         * The voucher category, in case of an order line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
         * 
         * Possible values: `meal` `eco` `gift` `sport_culture`
         */
        public Builder category(JsonNullable<String> category) {
            Utils.checkNotNull(category, "category");
            this.category = category;
            return this;
        }

        /**
         * The status of the order line.
         * 
         * Possible values: `created` `authorized` `paid` `shipping` `completed` `canceled`
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the order line.
         * 
         * Possible values: `created` `authorized` `paid` `shipping` `completed` `canceled`
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Whether the order line can still be canceled.
         */
        public Builder isCancelable(boolean isCancelable) {
            Utils.checkNotNull(isCancelable, "isCancelable");
            this.isCancelable = Optional.ofNullable(isCancelable);
            return this;
        }

        /**
         * Whether the order line can still be canceled.
         */
        public Builder isCancelable(Optional<Boolean> isCancelable) {
            Utils.checkNotNull(isCancelable, "isCancelable");
            this.isCancelable = isCancelable;
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(GetOrderOrdersAPIMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends GetOrderOrdersAPIMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * The unique identifier of the order this order line belongs to. For example: `ord_8wmqcHMN4U`.
         */
        public Builder orderId(String orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        /**
         * The unique identifier of the order this order line belongs to. For example: `ord_8wmqcHMN4U`.
         */
        public Builder orderId(Optional<String> orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = orderId;
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetOrderOrdersAPILinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends GetOrderOrdersAPILinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public GetOrderLines build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }            return new GetOrderLines(
                resource,
                id,
                type,
                name,
                quantity,
                quantityUnit,
                unitPrice,
                discountAmount,
                totalAmount,
                vatRate,
                vatAmount,
                sku,
                category,
                status,
                isCancelable,
                metadata,
                orderId,
                createdAt,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"orderline\"",
                        new TypeReference<Optional<String>>() {});
    }
}

