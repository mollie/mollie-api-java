/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;
/**
 * Data - Operation data depending on the type of operation.
 * 
 * For an `add` operation, provide the fields for the new order line in the same format as in the [Create order](create-order) endpoint.
 * 
 * For an `update` operation, provide the `id` of the order line, along with any fields you would like to update.
 * 
 * For a `cancel` operation, provide the `id` of the order line. Optionally, a `quantity` or `amount` can be provided to only partially cancel an order line.
 */

public class Data {

    /**
     * Required for `update` and `cancel` operations. For example: `odl_dgtxyl`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private JsonNullable<Long> quantity;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<? extends ManageOrderLinesAmount> amount;

    @JsonCreator
    public Data(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("quantity") JsonNullable<Long> quantity,
            @JsonProperty("amount") JsonNullable<? extends ManageOrderLinesAmount> amount) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(amount, "amount");
        this.id = id;
        this.quantity = quantity;
        this.amount = amount;
    }
    
    public Data() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Required for `update` and `cancel` operations. For example: `odl_dgtxyl`.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    @JsonIgnore
    public JsonNullable<Long> quantity() {
        return quantity;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ManageOrderLinesAmount> amount() {
        return (JsonNullable<ManageOrderLinesAmount>) amount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Required for `update` and `cancel` operations. For example: `odl_dgtxyl`.
     */
    public Data withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Required for `update` and `cancel` operations. For example: `odl_dgtxyl`.
     */
    public Data withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Data withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = JsonNullable.of(quantity);
        return this;
    }

    public Data withQuantity(JsonNullable<Long> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public Data withAmount(ManageOrderLinesAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public Data withAmount(JsonNullable<? extends ManageOrderLinesAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Data other = (Data) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            quantity,
            amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Data.class,
                "id", id,
                "quantity", quantity,
                "amount", amount);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<Long> quantity = JsonNullable.undefined();
 
        private JsonNullable<? extends ManageOrderLinesAmount> amount = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Required for `update` and `cancel` operations. For example: `odl_dgtxyl`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Required for `update` and `cancel` operations. For example: `odl_dgtxyl`.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = JsonNullable.of(quantity);
            return this;
        }

        public Builder quantity(JsonNullable<Long> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(ManageOrderLinesAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(JsonNullable<? extends ManageOrderLinesAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }
        
        public Data build() {
            return new Data(
                id,
                quantity,
                amount);
        }
    }
}

