/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
/**
 * Totals - Totals are grouped according to the chosen grouping rule. The example response should give a good idea of what a typical grouping looks like.
 * 
 * If grouping `status-balances` is chosen, the main grouping is as follows:
 * 
 * * `pendingBalance` containing an `open`, `pending`, `movedToAvailable`, and `close` sub-group
 * * `availableBalance` containing an `open`, `movedFromPending`, `immediatelyAvailable`, and `close` sub-group
 * 
 * If grouping `transaction-categories` is chosen, the main grouping is as follows:
 * 
 * * `open` and `close` groups, each containing a `pending` and `available` sub-group
 * * Transaction type groups such as `payments` or `refunds`, each containing a `pending`, `movedToAvailable`, and `immediatelyAvailable` sub-group
 * 
 * Each sub-group typically has:
 * 
 * * An `amount` object containing the group's total amount
 * * A `count` integer if relevant (for example, counting the number of refunds)
 * * A `subtotals` array containing more sub-group objects if applicable
 */

public class Totals {

    @JsonCreator
    public Totals() {
        
        
    }

    public final static Builder builder() {
        return new Builder();
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return true;
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            );
    }
    
    @Override
    public String toString() {
        return Utils.toString(Totals.class);
    }
    
    public final static class Builder {  
        
        private Builder() {
          // force use of static builder() method
        }
        
        public Totals build() {
            return new Totals(
                );
        }
    }
}

