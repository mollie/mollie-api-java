/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.models.components.Sorting;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ListAllRefundsRequest {
    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you
     * to paginate the
     * result set.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=from")
    private Optional<String> from;

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private JsonNullable<Long> limit;

    /**
     * Used for setting the direction of the result set. Defaults to descending order, meaning the results
     * are ordered from
     * newest to oldest.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    private Optional<? extends Sorting> sort;

    /**
     * This endpoint allows embedding related API items by appending the following values via the `embed`
     * query string
     * parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=embed")
    private JsonNullable<String> embed;

    /**
     * The identifier referring to the [profile](get-profile) you wish to
     * retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted.
     * For
     * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=profileId")
    private Optional<String> profileId;

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the
     * `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
     * enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=testmode")
    private Optional<Boolean> testmode;

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=idempotency-key")
    private Optional<String> idempotencyKey;

    @JsonCreator
    public ListAllRefundsRequest(
            Optional<String> from,
            JsonNullable<Long> limit,
            Optional<? extends Sorting> sort,
            JsonNullable<String> embed,
            Optional<String> profileId,
            Optional<Boolean> testmode,
            Optional<String> idempotencyKey) {
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(sort, "sort");
        Utils.checkNotNull(embed, "embed");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(testmode, "testmode");
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.from = from;
        this.limit = limit;
        this.sort = sort;
        this.embed = embed;
        this.profileId = profileId;
        this.testmode = testmode;
        this.idempotencyKey = idempotencyKey;
    }
    
    public ListAllRefundsRequest() {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you
     * to paginate the
     * result set.
     */
    @JsonIgnore
    public Optional<String> from() {
        return from;
    }

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    @JsonIgnore
    public JsonNullable<Long> limit() {
        return limit;
    }

    /**
     * Used for setting the direction of the result set. Defaults to descending order, meaning the results
     * are ordered from
     * newest to oldest.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Sorting> sort() {
        return (Optional<Sorting>) sort;
    }

    /**
     * This endpoint allows embedding related API items by appending the following values via the `embed`
     * query string
     * parameter.
     */
    @JsonIgnore
    public JsonNullable<String> embed() {
        return embed;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to
     * retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted.
     * For
     * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @JsonIgnore
    public Optional<String> profileId() {
        return profileId;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the
     * `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
     * enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public Optional<Boolean> testmode() {
        return testmode;
    }

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you
     * to paginate the
     * result set.
     */
    public ListAllRefundsRequest withFrom(String from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }


    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you
     * to paginate the
     * result set.
     */
    public ListAllRefundsRequest withFrom(Optional<String> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    public ListAllRefundsRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = JsonNullable.of(limit);
        return this;
    }

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    public ListAllRefundsRequest withLimit(JsonNullable<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Used for setting the direction of the result set. Defaults to descending order, meaning the results
     * are ordered from
     * newest to oldest.
     */
    public ListAllRefundsRequest withSort(Sorting sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = Optional.ofNullable(sort);
        return this;
    }


    /**
     * Used for setting the direction of the result set. Defaults to descending order, meaning the results
     * are ordered from
     * newest to oldest.
     */
    public ListAllRefundsRequest withSort(Optional<? extends Sorting> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }

    /**
     * This endpoint allows embedding related API items by appending the following values via the `embed`
     * query string
     * parameter.
     */
    public ListAllRefundsRequest withEmbed(String embed) {
        Utils.checkNotNull(embed, "embed");
        this.embed = JsonNullable.of(embed);
        return this;
    }

    /**
     * This endpoint allows embedding related API items by appending the following values via the `embed`
     * query string
     * parameter.
     */
    public ListAllRefundsRequest withEmbed(JsonNullable<String> embed) {
        Utils.checkNotNull(embed, "embed");
        this.embed = embed;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to
     * retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted.
     * For
     * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    public ListAllRefundsRequest withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = Optional.ofNullable(profileId);
        return this;
    }


    /**
     * The identifier referring to the [profile](get-profile) you wish to
     * retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted.
     * For
     * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    public ListAllRefundsRequest withProfileId(Optional<String> profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the
     * `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
     * enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public ListAllRefundsRequest withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = Optional.ofNullable(testmode);
        return this;
    }


    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the
     * `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
     * enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public ListAllRefundsRequest withTestmode(Optional<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public ListAllRefundsRequest withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }


    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public ListAllRefundsRequest withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllRefundsRequest other = (ListAllRefundsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.from, other.from) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.sort, other.sort) &&
            Utils.enhancedDeepEquals(this.embed, other.embed) &&
            Utils.enhancedDeepEquals(this.profileId, other.profileId) &&
            Utils.enhancedDeepEquals(this.testmode, other.testmode) &&
            Utils.enhancedDeepEquals(this.idempotencyKey, other.idempotencyKey);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            from, limit, sort,
            embed, profileId, testmode,
            idempotencyKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAllRefundsRequest.class,
                "from", from,
                "limit", limit,
                "sort", sort,
                "embed", embed,
                "profileId", profileId,
                "testmode", testmode,
                "idempotencyKey", idempotencyKey);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> from = Optional.empty();

        private JsonNullable<Long> limit = JsonNullable.undefined();

        private Optional<? extends Sorting> sort = Optional.empty();

        private JsonNullable<String> embed = JsonNullable.undefined();

        private Optional<String> profileId = Optional.empty();

        private Optional<Boolean> testmode = Optional.empty();

        private Optional<String> idempotencyKey = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Provide an ID to start the result set from the item with the given ID and onwards. This allows you
         * to paginate the
         * result set.
         */
        public Builder from(String from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        /**
         * Provide an ID to start the result set from the item with the given ID and onwards. This allows you
         * to paginate the
         * result set.
         */
        public Builder from(Optional<String> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }


        /**
         * The maximum number of items to return. Defaults to 50 items.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = JsonNullable.of(limit);
            return this;
        }

        /**
         * The maximum number of items to return. Defaults to 50 items.
         */
        public Builder limit(JsonNullable<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }


        /**
         * Used for setting the direction of the result set. Defaults to descending order, meaning the results
         * are ordered from
         * newest to oldest.
         */
        public Builder sort(Sorting sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        /**
         * Used for setting the direction of the result set. Defaults to descending order, meaning the results
         * are ordered from
         * newest to oldest.
         */
        public Builder sort(Optional<? extends Sorting> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }


        /**
         * This endpoint allows embedding related API items by appending the following values via the `embed`
         * query string
         * parameter.
         */
        public Builder embed(String embed) {
            Utils.checkNotNull(embed, "embed");
            this.embed = JsonNullable.of(embed);
            return this;
        }

        /**
         * This endpoint allows embedding related API items by appending the following values via the `embed`
         * query string
         * parameter.
         */
        public Builder embed(JsonNullable<String> embed) {
            Utils.checkNotNull(embed, "embed");
            this.embed = embed;
            return this;
        }


        /**
         * The identifier referring to the [profile](get-profile) you wish to
         * retrieve the resources for.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted.
         * For
         * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
         * required.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = Optional.ofNullable(profileId);
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) you wish to
         * retrieve the resources for.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted.
         * For
         * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
         * required.
         */
        public Builder profileId(Optional<String> profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }


        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the
         * `testmode` query
         * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
         * enable test mode by
         * setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = Optional.ofNullable(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the
         * `testmode` query
         * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
         * enable test mode by
         * setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(Optional<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }


        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public ListAllRefundsRequest build() {

            return new ListAllRefundsRequest(
                from, limit, sort,
                embed, profileId, testmode,
                idempotencyKey);
        }

    }
}
