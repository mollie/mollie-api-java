/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations.async;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.SDKConfiguration;
import com.mollie.mollie.models.operations.ListProfilesRequest;
import com.mollie.mollie.operations.ListProfiles;
import com.mollie.mollie.utils.Options;
import com.mollie.mollie.utils.RetryConfig;
import com.mollie.mollie.utils.Utils;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListProfilesRequestBuilder {

    private JsonNullable<String> from = JsonNullable.undefined();
    private JsonNullable<Long> limit = JsonNullable.undefined();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public ListProfilesRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public ListProfilesRequestBuilder from(String from) {
        Utils.checkNotNull(from, "from");
        this.from = JsonNullable.of(from);
        return this;
    }

    public ListProfilesRequestBuilder from(JsonNullable<String> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    public ListProfilesRequestBuilder limit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = JsonNullable.of(limit);
        return this;
    }

    public ListProfilesRequestBuilder limit(JsonNullable<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }
                
    public ListProfilesRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public ListProfilesRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private ListProfilesRequest buildRequest() {

        ListProfilesRequest request = new ListProfilesRequest(from,
            limit);

        return request;
    }

    public CompletableFuture<ListProfilesResponse> call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        AsyncRequestOperation<ListProfilesRequest, ListProfilesResponse> operation
              = new ListProfiles.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        ListProfilesRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
