/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GetCurrentProfileResponseBody - The current profile object. For a complete reference of the profile object, refer to the [Get profile](get-profile) endpoint documentation.
 */

public class GetCurrentProfileResponseBody {

    /**
     * Indicates the response contains a profile object. Will always contain the string `profile` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this profile. Example: `pfl_v9hTwCvYqw`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * Possible values: `live` `test`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<String> mode;

    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    private Optional<String> website;

    /**
     * The email address associated with the profile's trade name or brand.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<String> phone;

    /**
     * The products or services offered by the profile's website or application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * A list of countries where you expect that the majority of the profile's customers reside, in ISO 3166-1 alpha-2 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countriesOfActivity")
    private Optional<? extends List<Object>> countriesOfActivity;

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessCategory")
    private Optional<String> businessCategory;

    /**
     * The profile status determines whether the profile is able to receive live payments.
     * 
     * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
     * * `verified`: The profile has been verified and can be used to create live payments and test payments.
     * * `blocked`: The profile is blocked and can no longer be used or changed.
     * 
     * Possible values: `unverified` `verified` `blocked`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved automatically, unless a switch to a live profile has been requested. The review object will therefore usually be `null` in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("review")
    private JsonNullable<? extends GetCurrentProfileReview> review;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends GetCurrentProfileLinks> links;

    @JsonCreator
    public GetCurrentProfileResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mode") Optional<String> mode,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("website") Optional<String> website,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("phone") Optional<String> phone,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("countriesOfActivity") Optional<? extends List<Object>> countriesOfActivity,
            @JsonProperty("businessCategory") Optional<String> businessCategory,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("review") JsonNullable<? extends GetCurrentProfileReview> review,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("_links") Optional<? extends GetCurrentProfileLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(website, "website");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
        Utils.checkNotNull(businessCategory, "businessCategory");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(review, "review");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.name = name;
        this.website = website;
        this.email = email;
        this.phone = phone;
        this.description = description;
        this.countriesOfActivity = countriesOfActivity;
        this.businessCategory = businessCategory;
        this.status = status;
        this.review = review;
        this.createdAt = createdAt;
        this.links = links;
    }
    
    public GetCurrentProfileResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a profile object. Will always contain the string `profile` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this profile. Example: `pfl_v9hTwCvYqw`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * Possible values: `live` `test`
     */
    @JsonIgnore
    public Optional<String> mode() {
        return mode;
    }

    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    @JsonIgnore
    public Optional<String> website() {
        return website;
    }

    /**
     * The email address associated with the profile's trade name or brand.
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    @JsonIgnore
    public Optional<String> phone() {
        return phone;
    }

    /**
     * The products or services offered by the profile's website or application.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * A list of countries where you expect that the majority of the profile's customers reside, in ISO 3166-1 alpha-2 format.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> countriesOfActivity() {
        return (Optional<List<Object>>) countriesOfActivity;
    }

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
     */
    @JsonIgnore
    public Optional<String> businessCategory() {
        return businessCategory;
    }

    /**
     * The profile status determines whether the profile is able to receive live payments.
     * 
     * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
     * * `verified`: The profile has been verified and can be used to create live payments and test payments.
     * * `blocked`: The profile is blocked and can no longer be used or changed.
     * 
     * Possible values: `unverified` `verified` `blocked`
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved automatically, unless a switch to a live profile has been requested. The review object will therefore usually be `null` in test mode.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetCurrentProfileReview> review() {
        return (JsonNullable<GetCurrentProfileReview>) review;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetCurrentProfileLinks> links() {
        return (Optional<GetCurrentProfileLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates the response contains a profile object. Will always contain the string `profile` for this endpoint.
     */
    public GetCurrentProfileResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a profile object. Will always contain the string `profile` for this endpoint.
     */
    public GetCurrentProfileResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this profile. Example: `pfl_v9hTwCvYqw`.
     */
    public GetCurrentProfileResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The identifier uniquely referring to this profile. Example: `pfl_v9hTwCvYqw`.
     */
    public GetCurrentProfileResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * Possible values: `live` `test`
     */
    public GetCurrentProfileResponseBody withMode(String mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * Possible values: `live` `test`
     */
    public GetCurrentProfileResponseBody withMode(Optional<String> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    public GetCurrentProfileResponseBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    public GetCurrentProfileResponseBody withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    public GetCurrentProfileResponseBody withWebsite(String website) {
        Utils.checkNotNull(website, "website");
        this.website = Optional.ofNullable(website);
        return this;
    }

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    public GetCurrentProfileResponseBody withWebsite(Optional<String> website) {
        Utils.checkNotNull(website, "website");
        this.website = website;
        return this;
    }

    /**
     * The email address associated with the profile's trade name or brand.
     */
    public GetCurrentProfileResponseBody withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * The email address associated with the profile's trade name or brand.
     */
    public GetCurrentProfileResponseBody withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    public GetCurrentProfileResponseBody withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    public GetCurrentProfileResponseBody withPhone(Optional<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * The products or services offered by the profile's website or application.
     */
    public GetCurrentProfileResponseBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * The products or services offered by the profile's website or application.
     */
    public GetCurrentProfileResponseBody withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * A list of countries where you expect that the majority of the profile's customers reside, in ISO 3166-1 alpha-2 format.
     */
    public GetCurrentProfileResponseBody withCountriesOfActivity(List<Object> countriesOfActivity) {
        Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
        this.countriesOfActivity = Optional.ofNullable(countriesOfActivity);
        return this;
    }

    /**
     * A list of countries where you expect that the majority of the profile's customers reside, in ISO 3166-1 alpha-2 format.
     */
    public GetCurrentProfileResponseBody withCountriesOfActivity(Optional<? extends List<Object>> countriesOfActivity) {
        Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
        this.countriesOfActivity = countriesOfActivity;
        return this;
    }

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
     */
    public GetCurrentProfileResponseBody withBusinessCategory(String businessCategory) {
        Utils.checkNotNull(businessCategory, "businessCategory");
        this.businessCategory = Optional.ofNullable(businessCategory);
        return this;
    }

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
     */
    public GetCurrentProfileResponseBody withBusinessCategory(Optional<String> businessCategory) {
        Utils.checkNotNull(businessCategory, "businessCategory");
        this.businessCategory = businessCategory;
        return this;
    }

    /**
     * The profile status determines whether the profile is able to receive live payments.
     * 
     * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
     * * `verified`: The profile has been verified and can be used to create live payments and test payments.
     * * `blocked`: The profile is blocked and can no longer be used or changed.
     * 
     * Possible values: `unverified` `verified` `blocked`
     */
    public GetCurrentProfileResponseBody withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The profile status determines whether the profile is able to receive live payments.
     * 
     * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
     * * `verified`: The profile has been verified and can be used to create live payments and test payments.
     * * `blocked`: The profile is blocked and can no longer be used or changed.
     * 
     * Possible values: `unverified` `verified` `blocked`
     */
    public GetCurrentProfileResponseBody withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved automatically, unless a switch to a live profile has been requested. The review object will therefore usually be `null` in test mode.
     */
    public GetCurrentProfileResponseBody withReview(GetCurrentProfileReview review) {
        Utils.checkNotNull(review, "review");
        this.review = JsonNullable.of(review);
        return this;
    }

    /**
     * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved automatically, unless a switch to a live profile has been requested. The review object will therefore usually be `null` in test mode.
     */
    public GetCurrentProfileResponseBody withReview(JsonNullable<? extends GetCurrentProfileReview> review) {
        Utils.checkNotNull(review, "review");
        this.review = review;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetCurrentProfileResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetCurrentProfileResponseBody withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetCurrentProfileResponseBody withLinks(GetCurrentProfileLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetCurrentProfileResponseBody withLinks(Optional<? extends GetCurrentProfileLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCurrentProfileResponseBody other = (GetCurrentProfileResponseBody) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.mode, other.mode) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.website, other.website) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.countriesOfActivity, other.countriesOfActivity) &&
            Objects.deepEquals(this.businessCategory, other.businessCategory) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.review, other.review) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            mode,
            name,
            website,
            email,
            phone,
            description,
            countriesOfActivity,
            businessCategory,
            status,
            review,
            createdAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetCurrentProfileResponseBody.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "name", name,
                "website", website,
                "email", email,
                "phone", phone,
                "description", description,
                "countriesOfActivity", countriesOfActivity,
                "businessCategory", businessCategory,
                "status", status,
                "review", review,
                "createdAt", createdAt,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> mode = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> website = Optional.empty();
 
        private Optional<String> email = Optional.empty();
 
        private Optional<String> phone = Optional.empty();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private Optional<? extends List<Object>> countriesOfActivity = Optional.empty();
 
        private Optional<String> businessCategory = Optional.empty();
 
        private Optional<String> status = Optional.empty();
 
        private JsonNullable<? extends GetCurrentProfileReview> review = JsonNullable.undefined();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<? extends GetCurrentProfileLinks> links = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a profile object. Will always contain the string `profile` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a profile object. Will always contain the string `profile` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this profile. Example: `pfl_v9hTwCvYqw`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this profile. Example: `pfl_v9hTwCvYqw`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * Possible values: `live` `test`
         */
        public Builder mode(String mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * Possible values: `live` `test`
         */
        public Builder mode(Optional<String> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        /**
         * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
         */
        public Builder website(String website) {
            Utils.checkNotNull(website, "website");
            this.website = Optional.ofNullable(website);
            return this;
        }

        /**
         * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
         */
        public Builder website(Optional<String> website) {
            Utils.checkNotNull(website, "website");
            this.website = website;
            return this;
        }

        /**
         * The email address associated with the profile's trade name or brand.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * The email address associated with the profile's trade name or brand.
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The phone number associated with the profile's trade name or brand.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * The phone number associated with the profile's trade name or brand.
         */
        public Builder phone(Optional<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * The products or services offered by the profile's website or application.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The products or services offered by the profile's website or application.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * A list of countries where you expect that the majority of the profile's customers reside, in ISO 3166-1 alpha-2 format.
         */
        public Builder countriesOfActivity(List<Object> countriesOfActivity) {
            Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
            this.countriesOfActivity = Optional.ofNullable(countriesOfActivity);
            return this;
        }

        /**
         * A list of countries where you expect that the majority of the profile's customers reside, in ISO 3166-1 alpha-2 format.
         */
        public Builder countriesOfActivity(Optional<? extends List<Object>> countriesOfActivity) {
            Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
            this.countriesOfActivity = countriesOfActivity;
            return this;
        }

        /**
         * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
         */
        public Builder businessCategory(String businessCategory) {
            Utils.checkNotNull(businessCategory, "businessCategory");
            this.businessCategory = Optional.ofNullable(businessCategory);
            return this;
        }

        /**
         * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
         */
        public Builder businessCategory(Optional<String> businessCategory) {
            Utils.checkNotNull(businessCategory, "businessCategory");
            this.businessCategory = businessCategory;
            return this;
        }

        /**
         * The profile status determines whether the profile is able to receive live payments.
         * 
         * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
         * * `verified`: The profile has been verified and can be used to create live payments and test payments.
         * * `blocked`: The profile is blocked and can no longer be used or changed.
         * 
         * Possible values: `unverified` `verified` `blocked`
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The profile status determines whether the profile is able to receive live payments.
         * 
         * * `unverified`: The profile has not been verified yet and can only be used to create test payments.
         * * `verified`: The profile has been verified and can be used to create live payments and test payments.
         * * `blocked`: The profile is blocked and can no longer be used or changed.
         * 
         * Possible values: `unverified` `verified` `blocked`
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved automatically, unless a switch to a live profile has been requested. The review object will therefore usually be `null` in test mode.
         */
        public Builder review(GetCurrentProfileReview review) {
            Utils.checkNotNull(review, "review");
            this.review = JsonNullable.of(review);
            return this;
        }

        /**
         * Present if changes have been made that have not yet been approved by Mollie. Changes to test profiles are approved automatically, unless a switch to a live profile has been requested. The review object will therefore usually be `null` in test mode.
         */
        public Builder review(JsonNullable<? extends GetCurrentProfileReview> review) {
            Utils.checkNotNull(review, "review");
            this.review = review;
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetCurrentProfileLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends GetCurrentProfileLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public GetCurrentProfileResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }            return new GetCurrentProfileResponseBody(
                resource,
                id,
                mode,
                name,
                website,
                email,
                phone,
                description,
                countriesOfActivity,
                businessCategory,
                status,
                review,
                createdAt,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"profile\"",
                        new TypeReference<Optional<String>>() {});
    }
}

