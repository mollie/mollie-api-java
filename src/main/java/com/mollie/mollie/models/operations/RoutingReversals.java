/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class RoutingReversals {

    /**
     * The amount that will be pulled back.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends CreateRefundRefundsAPIAmount> amount;

    /**
     * Where the funds will be pulled back from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<? extends Source> source;

    @JsonCreator
    public RoutingReversals(
            @JsonProperty("amount") Optional<? extends CreateRefundRefundsAPIAmount> amount,
            @JsonProperty("source") Optional<? extends Source> source) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(source, "source");
        this.amount = amount;
        this.source = source;
    }
    
    public RoutingReversals() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The amount that will be pulled back.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateRefundRefundsAPIAmount> amount() {
        return (Optional<CreateRefundRefundsAPIAmount>) amount;
    }

    /**
     * Where the funds will be pulled back from.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Source> source() {
        return (Optional<Source>) source;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The amount that will be pulled back.
     */
    public RoutingReversals withAmount(CreateRefundRefundsAPIAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The amount that will be pulled back.
     */
    public RoutingReversals withAmount(Optional<? extends CreateRefundRefundsAPIAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Where the funds will be pulled back from.
     */
    public RoutingReversals withSource(Source source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }

    /**
     * Where the funds will be pulled back from.
     */
    public RoutingReversals withSource(Optional<? extends Source> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RoutingReversals other = (RoutingReversals) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.source, other.source);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            source);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RoutingReversals.class,
                "amount", amount,
                "source", source);
    }
    
    public final static class Builder {
 
        private Optional<? extends CreateRefundRefundsAPIAmount> amount = Optional.empty();
 
        private Optional<? extends Source> source = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The amount that will be pulled back.
         */
        public Builder amount(CreateRefundRefundsAPIAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount that will be pulled back.
         */
        public Builder amount(Optional<? extends CreateRefundRefundsAPIAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * Where the funds will be pulled back from.
         */
        public Builder source(Source source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * Where the funds will be pulled back from.
         */
        public Builder source(Optional<? extends Source> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }
        
        public RoutingReversals build() {
            return new RoutingReversals(
                amount,
                source);
        }
    }
}

