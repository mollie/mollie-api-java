/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Routing {

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    @JsonProperty("amount")
    private CreatePaymentPaymentsRequestAmount amount;

    /**
     * The destination of this portion of the payment.
     */
    @JsonProperty("destination")
    private Destination destination;

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
     * 
     * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("releaseDate")
    private JsonNullable<String> releaseDate;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends Links> links;

    @JsonCreator
    public Routing(
            @JsonProperty("amount") CreatePaymentPaymentsRequestAmount amount,
            @JsonProperty("destination") Destination destination,
            @JsonProperty("releaseDate") JsonNullable<String> releaseDate,
            @JsonProperty("_links") Optional<? extends Links> links) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(destination, "destination");
        Utils.checkNotNull(releaseDate, "releaseDate");
        Utils.checkNotNull(links, "links");
        this.amount = amount;
        this.destination = destination;
        this.releaseDate = releaseDate;
        this.links = links;
    }
    
    public Routing(
            CreatePaymentPaymentsRequestAmount amount,
            Destination destination) {
        this(amount, destination, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    @JsonIgnore
    public CreatePaymentPaymentsRequestAmount amount() {
        return amount;
    }

    /**
     * The destination of this portion of the payment.
     */
    @JsonIgnore
    public Destination destination() {
        return destination;
    }

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
     * 
     * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    @JsonIgnore
    public JsonNullable<String> releaseDate() {
        return releaseDate;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Links> links() {
        return (Optional<Links>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    public Routing withAmount(CreatePaymentPaymentsRequestAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The destination of this portion of the payment.
     */
    public Routing withDestination(Destination destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = destination;
        return this;
    }

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
     * 
     * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    public Routing withReleaseDate(String releaseDate) {
        Utils.checkNotNull(releaseDate, "releaseDate");
        this.releaseDate = JsonNullable.of(releaseDate);
        return this;
    }

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
     * 
     * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    public Routing withReleaseDate(JsonNullable<String> releaseDate) {
        Utils.checkNotNull(releaseDate, "releaseDate");
        this.releaseDate = releaseDate;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public Routing withLinks(Links links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public Routing withLinks(Optional<? extends Links> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Routing other = (Routing) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.destination, other.destination) &&
            Objects.deepEquals(this.releaseDate, other.releaseDate) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            destination,
            releaseDate,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Routing.class,
                "amount", amount,
                "destination", destination,
                "releaseDate", releaseDate,
                "links", links);
    }
    
    public final static class Builder {
 
        private CreatePaymentPaymentsRequestAmount amount;
 
        private Destination destination;
 
        private JsonNullable<String> releaseDate = JsonNullable.undefined();
 
        private Optional<? extends Links> links = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
         */
        public Builder amount(CreatePaymentPaymentsRequestAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The destination of this portion of the payment.
         */
        public Builder destination(Destination destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = destination;
            return this;
        }

        /**
         * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
         * 
         * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
         */
        public Builder releaseDate(String releaseDate) {
            Utils.checkNotNull(releaseDate, "releaseDate");
            this.releaseDate = JsonNullable.of(releaseDate);
            return this;
        }

        /**
         * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
         * 
         * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
         */
        public Builder releaseDate(JsonNullable<String> releaseDate) {
            Utils.checkNotNull(releaseDate, "releaseDate");
            this.releaseDate = releaseDate;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Links links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends Links> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public Routing build() {
            return new Routing(
                amount,
                destination,
                releaseDate,
                links);
        }
    }
}
