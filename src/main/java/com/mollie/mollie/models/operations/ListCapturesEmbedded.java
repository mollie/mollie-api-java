/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.models.components.CaptureResponse;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;


public class ListCapturesEmbedded {
    /**
     * An array of capture objects.
     */
    @JsonProperty("captures")
    private List<CaptureResponse> captures;

    @JsonCreator
    public ListCapturesEmbedded(
            @JsonProperty("captures") List<CaptureResponse> captures) {
        Utils.checkNotNull(captures, "captures");
        this.captures = captures;
    }

    /**
     * An array of capture objects.
     */
    @JsonIgnore
    public List<CaptureResponse> captures() {
        return captures;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An array of capture objects.
     */
    public ListCapturesEmbedded withCaptures(List<CaptureResponse> captures) {
        Utils.checkNotNull(captures, "captures");
        this.captures = captures;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListCapturesEmbedded other = (ListCapturesEmbedded) o;
        return 
            Utils.enhancedDeepEquals(this.captures, other.captures);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            captures);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListCapturesEmbedded.class,
                "captures", captures);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<CaptureResponse> captures;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * An array of capture objects.
         */
        public Builder captures(List<CaptureResponse> captures) {
            Utils.checkNotNull(captures, "captures");
            this.captures = captures;
            return this;
        }

        public ListCapturesEmbedded build() {

            return new ListCapturesEmbedded(
                captures);
        }

    }
}
