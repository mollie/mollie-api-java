/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.models.components.EntityMandate;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class CreateMandateRequest {
    /**
     * Provide the ID of the related customer.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=customerId")
    private String customerId;

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=idempotency-key")
    private Optional<String> idempotencyKey;


    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends EntityMandate> entityMandate;

    @JsonCreator
    public CreateMandateRequest(
            String customerId,
            Optional<String> idempotencyKey,
            Optional<? extends EntityMandate> entityMandate) {
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        Utils.checkNotNull(entityMandate, "entityMandate");
        this.customerId = customerId;
        this.idempotencyKey = idempotencyKey;
        this.entityMandate = entityMandate;
    }
    
    public CreateMandateRequest(
            String customerId) {
        this(customerId, Optional.empty(), Optional.empty());
    }

    /**
     * Provide the ID of the related customer.
     */
    @JsonIgnore
    public String customerId() {
        return customerId;
    }

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EntityMandate> entityMandate() {
        return (Optional<EntityMandate>) entityMandate;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Provide the ID of the related customer.
     */
    public CreateMandateRequest withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public CreateMandateRequest withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }


    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public CreateMandateRequest withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    public CreateMandateRequest withEntityMandate(EntityMandate entityMandate) {
        Utils.checkNotNull(entityMandate, "entityMandate");
        this.entityMandate = Optional.ofNullable(entityMandate);
        return this;
    }


    public CreateMandateRequest withEntityMandate(Optional<? extends EntityMandate> entityMandate) {
        Utils.checkNotNull(entityMandate, "entityMandate");
        this.entityMandate = entityMandate;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateMandateRequest other = (CreateMandateRequest) o;
        return 
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.idempotencyKey, other.idempotencyKey) &&
            Utils.enhancedDeepEquals(this.entityMandate, other.entityMandate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            customerId, idempotencyKey, entityMandate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateMandateRequest.class,
                "customerId", customerId,
                "idempotencyKey", idempotencyKey,
                "entityMandate", entityMandate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String customerId;

        private Optional<String> idempotencyKey = Optional.empty();

        private Optional<? extends EntityMandate> entityMandate = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Provide the ID of the related customer.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }


        public Builder entityMandate(EntityMandate entityMandate) {
            Utils.checkNotNull(entityMandate, "entityMandate");
            this.entityMandate = Optional.ofNullable(entityMandate);
            return this;
        }

        public Builder entityMandate(Optional<? extends EntityMandate> entityMandate) {
            Utils.checkNotNull(entityMandate, "entityMandate");
            this.entityMandate = entityMandate;
            return this;
        }

        public CreateMandateRequest build() {

            return new CreateMandateRequest(
                customerId, idempotencyKey, entityMandate);
        }

    }
}
