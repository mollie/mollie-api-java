/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GetPartnerStatusResponseBody - The partner status object.
 */

public class GetPartnerStatusResponseBody {

    /**
     * Indicates the response contains a partner status object. Will always contain the string `partner` for
     * this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * Indicates the type of partner. Will be `null` if the currently authenticated organization is not
     * enrolled as a partner.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("partnerType")
    private Optional<? extends PartnerType> partnerType;

    /**
     * Whether the current organization is receiving commissions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isCommissionPartner")
    private Optional<Boolean> isCommissionPartner;

    /**
     * Array of User-Agent token objects. Present if the organization is a partner of type `useragent`, or if
     * they were in the past.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userAgentTokens")
    private Optional<? extends List<UserAgentTokens>> userAgentTokens;

    /**
     * The date the partner contract was signed, in ISO 8601 format. Omitted if no contract has been signed
     * (yet).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partnerContractSignedAt")
    private JsonNullable<String> partnerContractSignedAt;

    /**
     * Whether an update to the partner contract is available and requiring the organization's agreement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partnerContractUpdateAvailable")
    private Optional<Boolean> partnerContractUpdateAvailable;

    /**
     * The expiration date of the signed partner contract, in ISO 8601 format. Omitted if contract has no
     * expiration date (yet).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partnerContractExpiresAt")
    private Optional<String> partnerContractExpiresAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends GetPartnerStatusLinks> links;

    @JsonCreator
    public GetPartnerStatusResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("partnerType") Optional<? extends PartnerType> partnerType,
            @JsonProperty("isCommissionPartner") Optional<Boolean> isCommissionPartner,
            @JsonProperty("userAgentTokens") Optional<? extends List<UserAgentTokens>> userAgentTokens,
            @JsonProperty("partnerContractSignedAt") JsonNullable<String> partnerContractSignedAt,
            @JsonProperty("partnerContractUpdateAvailable") Optional<Boolean> partnerContractUpdateAvailable,
            @JsonProperty("partnerContractExpiresAt") Optional<String> partnerContractExpiresAt,
            @JsonProperty("_links") Optional<? extends GetPartnerStatusLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(partnerType, "partnerType");
        Utils.checkNotNull(isCommissionPartner, "isCommissionPartner");
        Utils.checkNotNull(userAgentTokens, "userAgentTokens");
        Utils.checkNotNull(partnerContractSignedAt, "partnerContractSignedAt");
        Utils.checkNotNull(partnerContractUpdateAvailable, "partnerContractUpdateAvailable");
        Utils.checkNotNull(partnerContractExpiresAt, "partnerContractExpiresAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.partnerType = partnerType;
        this.isCommissionPartner = isCommissionPartner;
        this.userAgentTokens = userAgentTokens;
        this.partnerContractSignedAt = partnerContractSignedAt;
        this.partnerContractUpdateAvailable = partnerContractUpdateAvailable;
        this.partnerContractExpiresAt = partnerContractExpiresAt;
        this.links = links;
    }
    
    public GetPartnerStatusResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a partner status object. Will always contain the string `partner` for
     * this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * Indicates the type of partner. Will be `null` if the currently authenticated organization is not
     * enrolled as a partner.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PartnerType> partnerType() {
        return (Optional<PartnerType>) partnerType;
    }

    /**
     * Whether the current organization is receiving commissions.
     */
    @JsonIgnore
    public Optional<Boolean> isCommissionPartner() {
        return isCommissionPartner;
    }

    /**
     * Array of User-Agent token objects. Present if the organization is a partner of type `useragent`, or if
     * they were in the past.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UserAgentTokens>> userAgentTokens() {
        return (Optional<List<UserAgentTokens>>) userAgentTokens;
    }

    /**
     * The date the partner contract was signed, in ISO 8601 format. Omitted if no contract has been signed
     * (yet).
     */
    @JsonIgnore
    public JsonNullable<String> partnerContractSignedAt() {
        return partnerContractSignedAt;
    }

    /**
     * Whether an update to the partner contract is available and requiring the organization's agreement.
     */
    @JsonIgnore
    public Optional<Boolean> partnerContractUpdateAvailable() {
        return partnerContractUpdateAvailable;
    }

    /**
     * The expiration date of the signed partner contract, in ISO 8601 format. Omitted if contract has no
     * expiration date (yet).
     */
    @JsonIgnore
    public Optional<String> partnerContractExpiresAt() {
        return partnerContractExpiresAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetPartnerStatusLinks> links() {
        return (Optional<GetPartnerStatusLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates the response contains a partner status object. Will always contain the string `partner` for
     * this endpoint.
     */
    public GetPartnerStatusResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a partner status object. Will always contain the string `partner` for
     * this endpoint.
     */
    public GetPartnerStatusResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * Indicates the type of partner. Will be `null` if the currently authenticated organization is not
     * enrolled as a partner.
     */
    public GetPartnerStatusResponseBody withPartnerType(PartnerType partnerType) {
        Utils.checkNotNull(partnerType, "partnerType");
        this.partnerType = Optional.ofNullable(partnerType);
        return this;
    }

    /**
     * Indicates the type of partner. Will be `null` if the currently authenticated organization is not
     * enrolled as a partner.
     */
    public GetPartnerStatusResponseBody withPartnerType(Optional<? extends PartnerType> partnerType) {
        Utils.checkNotNull(partnerType, "partnerType");
        this.partnerType = partnerType;
        return this;
    }

    /**
     * Whether the current organization is receiving commissions.
     */
    public GetPartnerStatusResponseBody withIsCommissionPartner(boolean isCommissionPartner) {
        Utils.checkNotNull(isCommissionPartner, "isCommissionPartner");
        this.isCommissionPartner = Optional.ofNullable(isCommissionPartner);
        return this;
    }

    /**
     * Whether the current organization is receiving commissions.
     */
    public GetPartnerStatusResponseBody withIsCommissionPartner(Optional<Boolean> isCommissionPartner) {
        Utils.checkNotNull(isCommissionPartner, "isCommissionPartner");
        this.isCommissionPartner = isCommissionPartner;
        return this;
    }

    /**
     * Array of User-Agent token objects. Present if the organization is a partner of type `useragent`, or if
     * they were in the past.
     */
    public GetPartnerStatusResponseBody withUserAgentTokens(List<UserAgentTokens> userAgentTokens) {
        Utils.checkNotNull(userAgentTokens, "userAgentTokens");
        this.userAgentTokens = Optional.ofNullable(userAgentTokens);
        return this;
    }

    /**
     * Array of User-Agent token objects. Present if the organization is a partner of type `useragent`, or if
     * they were in the past.
     */
    public GetPartnerStatusResponseBody withUserAgentTokens(Optional<? extends List<UserAgentTokens>> userAgentTokens) {
        Utils.checkNotNull(userAgentTokens, "userAgentTokens");
        this.userAgentTokens = userAgentTokens;
        return this;
    }

    /**
     * The date the partner contract was signed, in ISO 8601 format. Omitted if no contract has been signed
     * (yet).
     */
    public GetPartnerStatusResponseBody withPartnerContractSignedAt(String partnerContractSignedAt) {
        Utils.checkNotNull(partnerContractSignedAt, "partnerContractSignedAt");
        this.partnerContractSignedAt = JsonNullable.of(partnerContractSignedAt);
        return this;
    }

    /**
     * The date the partner contract was signed, in ISO 8601 format. Omitted if no contract has been signed
     * (yet).
     */
    public GetPartnerStatusResponseBody withPartnerContractSignedAt(JsonNullable<String> partnerContractSignedAt) {
        Utils.checkNotNull(partnerContractSignedAt, "partnerContractSignedAt");
        this.partnerContractSignedAt = partnerContractSignedAt;
        return this;
    }

    /**
     * Whether an update to the partner contract is available and requiring the organization's agreement.
     */
    public GetPartnerStatusResponseBody withPartnerContractUpdateAvailable(boolean partnerContractUpdateAvailable) {
        Utils.checkNotNull(partnerContractUpdateAvailable, "partnerContractUpdateAvailable");
        this.partnerContractUpdateAvailable = Optional.ofNullable(partnerContractUpdateAvailable);
        return this;
    }

    /**
     * Whether an update to the partner contract is available and requiring the organization's agreement.
     */
    public GetPartnerStatusResponseBody withPartnerContractUpdateAvailable(Optional<Boolean> partnerContractUpdateAvailable) {
        Utils.checkNotNull(partnerContractUpdateAvailable, "partnerContractUpdateAvailable");
        this.partnerContractUpdateAvailable = partnerContractUpdateAvailable;
        return this;
    }

    /**
     * The expiration date of the signed partner contract, in ISO 8601 format. Omitted if contract has no
     * expiration date (yet).
     */
    public GetPartnerStatusResponseBody withPartnerContractExpiresAt(String partnerContractExpiresAt) {
        Utils.checkNotNull(partnerContractExpiresAt, "partnerContractExpiresAt");
        this.partnerContractExpiresAt = Optional.ofNullable(partnerContractExpiresAt);
        return this;
    }

    /**
     * The expiration date of the signed partner contract, in ISO 8601 format. Omitted if contract has no
     * expiration date (yet).
     */
    public GetPartnerStatusResponseBody withPartnerContractExpiresAt(Optional<String> partnerContractExpiresAt) {
        Utils.checkNotNull(partnerContractExpiresAt, "partnerContractExpiresAt");
        this.partnerContractExpiresAt = partnerContractExpiresAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetPartnerStatusResponseBody withLinks(GetPartnerStatusLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetPartnerStatusResponseBody withLinks(Optional<? extends GetPartnerStatusLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPartnerStatusResponseBody other = (GetPartnerStatusResponseBody) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.partnerType, other.partnerType) &&
            Objects.deepEquals(this.isCommissionPartner, other.isCommissionPartner) &&
            Objects.deepEquals(this.userAgentTokens, other.userAgentTokens) &&
            Objects.deepEquals(this.partnerContractSignedAt, other.partnerContractSignedAt) &&
            Objects.deepEquals(this.partnerContractUpdateAvailable, other.partnerContractUpdateAvailable) &&
            Objects.deepEquals(this.partnerContractExpiresAt, other.partnerContractExpiresAt) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            partnerType,
            isCommissionPartner,
            userAgentTokens,
            partnerContractSignedAt,
            partnerContractUpdateAvailable,
            partnerContractExpiresAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPartnerStatusResponseBody.class,
                "resource", resource,
                "partnerType", partnerType,
                "isCommissionPartner", isCommissionPartner,
                "userAgentTokens", userAgentTokens,
                "partnerContractSignedAt", partnerContractSignedAt,
                "partnerContractUpdateAvailable", partnerContractUpdateAvailable,
                "partnerContractExpiresAt", partnerContractExpiresAt,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<? extends PartnerType> partnerType = Optional.empty();
 
        private Optional<Boolean> isCommissionPartner = Optional.empty();
 
        private Optional<? extends List<UserAgentTokens>> userAgentTokens = Optional.empty();
 
        private JsonNullable<String> partnerContractSignedAt = JsonNullable.undefined();
 
        private Optional<Boolean> partnerContractUpdateAvailable = Optional.empty();
 
        private Optional<String> partnerContractExpiresAt = Optional.empty();
 
        private Optional<? extends GetPartnerStatusLinks> links = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a partner status object. Will always contain the string `partner` for
         * this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a partner status object. Will always contain the string `partner` for
         * this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * Indicates the type of partner. Will be `null` if the currently authenticated organization is not
         * enrolled as a partner.
         */
        public Builder partnerType(PartnerType partnerType) {
            Utils.checkNotNull(partnerType, "partnerType");
            this.partnerType = Optional.ofNullable(partnerType);
            return this;
        }

        /**
         * Indicates the type of partner. Will be `null` if the currently authenticated organization is not
         * enrolled as a partner.
         */
        public Builder partnerType(Optional<? extends PartnerType> partnerType) {
            Utils.checkNotNull(partnerType, "partnerType");
            this.partnerType = partnerType;
            return this;
        }

        /**
         * Whether the current organization is receiving commissions.
         */
        public Builder isCommissionPartner(boolean isCommissionPartner) {
            Utils.checkNotNull(isCommissionPartner, "isCommissionPartner");
            this.isCommissionPartner = Optional.ofNullable(isCommissionPartner);
            return this;
        }

        /**
         * Whether the current organization is receiving commissions.
         */
        public Builder isCommissionPartner(Optional<Boolean> isCommissionPartner) {
            Utils.checkNotNull(isCommissionPartner, "isCommissionPartner");
            this.isCommissionPartner = isCommissionPartner;
            return this;
        }

        /**
         * Array of User-Agent token objects. Present if the organization is a partner of type `useragent`, or if
         * they were in the past.
         */
        public Builder userAgentTokens(List<UserAgentTokens> userAgentTokens) {
            Utils.checkNotNull(userAgentTokens, "userAgentTokens");
            this.userAgentTokens = Optional.ofNullable(userAgentTokens);
            return this;
        }

        /**
         * Array of User-Agent token objects. Present if the organization is a partner of type `useragent`, or if
         * they were in the past.
         */
        public Builder userAgentTokens(Optional<? extends List<UserAgentTokens>> userAgentTokens) {
            Utils.checkNotNull(userAgentTokens, "userAgentTokens");
            this.userAgentTokens = userAgentTokens;
            return this;
        }

        /**
         * The date the partner contract was signed, in ISO 8601 format. Omitted if no contract has been signed
         * (yet).
         */
        public Builder partnerContractSignedAt(String partnerContractSignedAt) {
            Utils.checkNotNull(partnerContractSignedAt, "partnerContractSignedAt");
            this.partnerContractSignedAt = JsonNullable.of(partnerContractSignedAt);
            return this;
        }

        /**
         * The date the partner contract was signed, in ISO 8601 format. Omitted if no contract has been signed
         * (yet).
         */
        public Builder partnerContractSignedAt(JsonNullable<String> partnerContractSignedAt) {
            Utils.checkNotNull(partnerContractSignedAt, "partnerContractSignedAt");
            this.partnerContractSignedAt = partnerContractSignedAt;
            return this;
        }

        /**
         * Whether an update to the partner contract is available and requiring the organization's agreement.
         */
        public Builder partnerContractUpdateAvailable(boolean partnerContractUpdateAvailable) {
            Utils.checkNotNull(partnerContractUpdateAvailable, "partnerContractUpdateAvailable");
            this.partnerContractUpdateAvailable = Optional.ofNullable(partnerContractUpdateAvailable);
            return this;
        }

        /**
         * Whether an update to the partner contract is available and requiring the organization's agreement.
         */
        public Builder partnerContractUpdateAvailable(Optional<Boolean> partnerContractUpdateAvailable) {
            Utils.checkNotNull(partnerContractUpdateAvailable, "partnerContractUpdateAvailable");
            this.partnerContractUpdateAvailable = partnerContractUpdateAvailable;
            return this;
        }

        /**
         * The expiration date of the signed partner contract, in ISO 8601 format. Omitted if contract has no
         * expiration date (yet).
         */
        public Builder partnerContractExpiresAt(String partnerContractExpiresAt) {
            Utils.checkNotNull(partnerContractExpiresAt, "partnerContractExpiresAt");
            this.partnerContractExpiresAt = Optional.ofNullable(partnerContractExpiresAt);
            return this;
        }

        /**
         * The expiration date of the signed partner contract, in ISO 8601 format. Omitted if contract has no
         * expiration date (yet).
         */
        public Builder partnerContractExpiresAt(Optional<String> partnerContractExpiresAt) {
            Utils.checkNotNull(partnerContractExpiresAt, "partnerContractExpiresAt");
            this.partnerContractExpiresAt = partnerContractExpiresAt;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetPartnerStatusLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends GetPartnerStatusLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public GetPartnerStatusResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }            return new GetPartnerStatusResponseBody(
                resource,
                partnerType,
                isCommissionPartner,
                userAgentTokens,
                partnerContractSignedAt,
                partnerContractUpdateAvailable,
                partnerContractExpiresAt,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"partner\"",
                        new TypeReference<Optional<String>>() {});
    }
}

