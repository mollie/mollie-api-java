/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.models.components.CustomerResponse;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;


public class ListCustomersEmbedded {
    /**
     * An array of customer objects.
     */
    @JsonProperty("customers")
    private List<CustomerResponse> customers;

    @JsonCreator
    public ListCustomersEmbedded(
            @JsonProperty("customers") List<CustomerResponse> customers) {
        Utils.checkNotNull(customers, "customers");
        this.customers = customers;
    }

    /**
     * An array of customer objects.
     */
    @JsonIgnore
    public List<CustomerResponse> customers() {
        return customers;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An array of customer objects.
     */
    public ListCustomersEmbedded withCustomers(List<CustomerResponse> customers) {
        Utils.checkNotNull(customers, "customers");
        this.customers = customers;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListCustomersEmbedded other = (ListCustomersEmbedded) o;
        return 
            Utils.enhancedDeepEquals(this.customers, other.customers);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            customers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListCustomersEmbedded.class,
                "customers", customers);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<CustomerResponse> customers;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * An array of customer objects.
         */
        public Builder customers(List<CustomerResponse> customers) {
            Utils.checkNotNull(customers, "customers");
            this.customers = customers;
            return this;
        }

        public ListCustomersEmbedded build() {

            return new ListCustomersEmbedded(
                customers);
        }

    }
}
