/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * GetOrganizationAddress
 * 
 * <p>The address of the organization.
 */
public class GetOrganizationAddress {

    /**
     * A street and street number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streetAndNumber")
    private Optional<String> streetAndNumber;

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postalCode")
    private Optional<String> postalCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<String> city;

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<String> country;

    @JsonCreator
    public GetOrganizationAddress(
            @JsonProperty("streetAndNumber") Optional<String> streetAndNumber,
            @JsonProperty("postalCode") Optional<String> postalCode,
            @JsonProperty("city") Optional<String> city,
            @JsonProperty("country") Optional<String> country) {
        Utils.checkNotNull(streetAndNumber, "streetAndNumber");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(country, "country");
        this.streetAndNumber = streetAndNumber;
        this.postalCode = postalCode;
        this.city = city;
        this.country = country;
    }
    
    public GetOrganizationAddress() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A street and street number.
     */
    @JsonIgnore
    public Optional<String> streetAndNumber() {
        return streetAndNumber;
    }

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     */
    @JsonIgnore
    public Optional<String> postalCode() {
        return postalCode;
    }

    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A street and street number.
     */
    public GetOrganizationAddress withStreetAndNumber(String streetAndNumber) {
        Utils.checkNotNull(streetAndNumber, "streetAndNumber");
        this.streetAndNumber = Optional.ofNullable(streetAndNumber);
        return this;
    }

    /**
     * A street and street number.
     */
    public GetOrganizationAddress withStreetAndNumber(Optional<String> streetAndNumber) {
        Utils.checkNotNull(streetAndNumber, "streetAndNumber");
        this.streetAndNumber = streetAndNumber;
        return this;
    }

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     */
    public GetOrganizationAddress withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = Optional.ofNullable(postalCode);
        return this;
    }

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     */
    public GetOrganizationAddress withPostalCode(Optional<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    public GetOrganizationAddress withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    public GetOrganizationAddress withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    public GetOrganizationAddress withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    public GetOrganizationAddress withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetOrganizationAddress other = (GetOrganizationAddress) o;
        return 
            Objects.deepEquals(this.streetAndNumber, other.streetAndNumber) &&
            Objects.deepEquals(this.postalCode, other.postalCode) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.country, other.country);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            streetAndNumber,
            postalCode,
            city,
            country);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetOrganizationAddress.class,
                "streetAndNumber", streetAndNumber,
                "postalCode", postalCode,
                "city", city,
                "country", country);
    }
    
    public final static class Builder {
 
        private Optional<String> streetAndNumber = Optional.empty();
 
        private Optional<String> postalCode = Optional.empty();
 
        private Optional<String> city = Optional.empty();
 
        private Optional<String> country = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A street and street number.
         */
        public Builder streetAndNumber(String streetAndNumber) {
            Utils.checkNotNull(streetAndNumber, "streetAndNumber");
            this.streetAndNumber = Optional.ofNullable(streetAndNumber);
            return this;
        }

        /**
         * A street and street number.
         */
        public Builder streetAndNumber(Optional<String> streetAndNumber) {
            Utils.checkNotNull(streetAndNumber, "streetAndNumber");
            this.streetAndNumber = streetAndNumber;
            return this;
        }

        /**
         * A postal code. This field may be required if the provided country has a postal code system.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        /**
         * A postal code. This field may be required if the provided country has a postal code system.
         */
        public Builder postalCode(Optional<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         */
        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }
        
        public GetOrganizationAddress build() {
            return new GetOrganizationAddress(
                streetAndNumber,
                postalCode,
                city,
                country);
        }
    }
}
