/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListAllMethodsRequest {

    /**
     * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=locale")
    private Optional<String> locale;

    /**
     * If supplied, only payment methods that support the amount and currency are returned.
     * 
     * <p>Example: `/v2/methods/all?amount[value]=100.00&amp;amount[currency]=USD`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=amount")
    private Optional<? extends ListAllMethodsQueryParamAmount> amount;

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include")
    private JsonNullable<? extends ListAllMethodsQueryParamInclude> include;

    /**
     * Set this parameter to `first` to only return the methods that can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
     * 
     * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sequenceType")
    private Optional<String> sequenceType;

    @JsonCreator
    public ListAllMethodsRequest(
            Optional<String> locale,
            Optional<? extends ListAllMethodsQueryParamAmount> amount,
            JsonNullable<? extends ListAllMethodsQueryParamInclude> include,
            Optional<String> sequenceType) {
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(include, "include");
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.locale = locale;
        this.amount = amount;
        this.include = include;
        this.sequenceType = sequenceType;
    }
    
    public ListAllMethodsRequest() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
     */
    @JsonIgnore
    public Optional<String> locale() {
        return locale;
    }

    /**
     * If supplied, only payment methods that support the amount and currency are returned.
     * 
     * <p>Example: `/v2/methods/all?amount[value]=100.00&amp;amount[currency]=USD`
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListAllMethodsQueryParamAmount> amount() {
        return (Optional<ListAllMethodsQueryParamAmount>) amount;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ListAllMethodsQueryParamInclude> include() {
        return (JsonNullable<ListAllMethodsQueryParamInclude>) include;
    }

    /**
     * Set this parameter to `first` to only return the methods that can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
     * 
     * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
     */
    @JsonIgnore
    public Optional<String> sequenceType() {
        return sequenceType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
     */
    public ListAllMethodsRequest withLocale(String locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = Optional.ofNullable(locale);
        return this;
    }

    /**
     * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
     */
    public ListAllMethodsRequest withLocale(Optional<String> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    /**
     * If supplied, only payment methods that support the amount and currency are returned.
     * 
     * <p>Example: `/v2/methods/all?amount[value]=100.00&amp;amount[currency]=USD`
     */
    public ListAllMethodsRequest withAmount(ListAllMethodsQueryParamAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * If supplied, only payment methods that support the amount and currency are returned.
     * 
     * <p>Example: `/v2/methods/all?amount[value]=100.00&amp;amount[currency]=USD`
     */
    public ListAllMethodsRequest withAmount(Optional<? extends ListAllMethodsQueryParamAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    public ListAllMethodsRequest withInclude(ListAllMethodsQueryParamInclude include) {
        Utils.checkNotNull(include, "include");
        this.include = JsonNullable.of(include);
        return this;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    public ListAllMethodsRequest withInclude(JsonNullable<? extends ListAllMethodsQueryParamInclude> include) {
        Utils.checkNotNull(include, "include");
        this.include = include;
        return this;
    }

    /**
     * Set this parameter to `first` to only return the methods that can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
     * 
     * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
     */
    public ListAllMethodsRequest withSequenceType(String sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = Optional.ofNullable(sequenceType);
        return this;
    }

    /**
     * Set this parameter to `first` to only return the methods that can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
     * 
     * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
     */
    public ListAllMethodsRequest withSequenceType(Optional<String> sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = sequenceType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllMethodsRequest other = (ListAllMethodsRequest) o;
        return 
            Objects.deepEquals(this.locale, other.locale) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.include, other.include) &&
            Objects.deepEquals(this.sequenceType, other.sequenceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            locale,
            amount,
            include,
            sequenceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAllMethodsRequest.class,
                "locale", locale,
                "amount", amount,
                "include", include,
                "sequenceType", sequenceType);
    }
    
    public final static class Builder {
 
        private Optional<String> locale = Optional.empty();
 
        private Optional<? extends ListAllMethodsQueryParamAmount> amount = Optional.empty();
 
        private JsonNullable<? extends ListAllMethodsQueryParamInclude> include = JsonNullable.undefined();
 
        private Optional<String> sequenceType = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
         */
        public Builder locale(String locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = Optional.ofNullable(locale);
            return this;
        }

        /**
         * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
         */
        public Builder locale(Optional<String> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }

        /**
         * If supplied, only payment methods that support the amount and currency are returned.
         * 
         * <p>Example: `/v2/methods/all?amount[value]=100.00&amp;amount[currency]=USD`
         */
        public Builder amount(ListAllMethodsQueryParamAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * If supplied, only payment methods that support the amount and currency are returned.
         * 
         * <p>Example: `/v2/methods/all?amount[value]=100.00&amp;amount[currency]=USD`
         */
        public Builder amount(Optional<? extends ListAllMethodsQueryParamAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * This endpoint allows you to include additional information via the `include` query string parameter.
         */
        public Builder include(ListAllMethodsQueryParamInclude include) {
            Utils.checkNotNull(include, "include");
            this.include = JsonNullable.of(include);
            return this;
        }

        /**
         * This endpoint allows you to include additional information via the `include` query string parameter.
         */
        public Builder include(JsonNullable<? extends ListAllMethodsQueryParamInclude> include) {
            Utils.checkNotNull(include, "include");
            this.include = include;
            return this;
        }

        /**
         * Set this parameter to `first` to only return the methods that can be used for the first payment of a recurring sequence.
         * 
         * <p>Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
         * 
         * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
         */
        public Builder sequenceType(String sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = Optional.ofNullable(sequenceType);
            return this;
        }

        /**
         * Set this parameter to `first` to only return the methods that can be used for the first payment of a recurring sequence.
         * 
         * <p>Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
         * 
         * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
         */
        public Builder sequenceType(Optional<String> sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = sequenceType;
            return this;
        }
        
        public ListAllMethodsRequest build() {
            return new ListAllMethodsRequest(
                locale,
                amount,
                include,
                sequenceType);
        }
    }
}
