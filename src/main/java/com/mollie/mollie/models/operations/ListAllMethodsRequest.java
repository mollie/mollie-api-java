/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.models.components.Amount;
import com.mollie.mollie.models.components.Locale;
import com.mollie.mollie.models.components.SequenceType;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ListAllMethodsRequest {
    /**
     * Response language
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=locale")
    private JsonNullable<? extends Locale> locale;

    /**
     * If supplied, only payment methods that support the amount and currency
     * are returned.
     * 
     * <p>Example: `/v2/methods/all?amount[value]=100.00&amp;amount[currency]=USD`
     */
    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=amount")
    private Optional<? extends Amount> amount;

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include")
    private JsonNullable<String> include;

    /**
     * Set this parameter to `first` to only return the methods that
     * can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return methods that can be used for recurring payments or
     * subscriptions.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sequenceType")
    private Optional<? extends SequenceType> sequenceType;

    /**
     * The identifier referring to the [profile](get-profile) you wish to
     * retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted.
     * For
     * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=profileId")
    private Optional<String> profileId;

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the
     * `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
     * enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=testmode")
    private JsonNullable<Boolean> testmode;

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=idempotency-key")
    private Optional<String> idempotencyKey;

    @JsonCreator
    public ListAllMethodsRequest(
            JsonNullable<? extends Locale> locale,
            Optional<? extends Amount> amount,
            JsonNullable<String> include,
            Optional<? extends SequenceType> sequenceType,
            Optional<String> profileId,
            JsonNullable<Boolean> testmode,
            Optional<String> idempotencyKey) {
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(include, "include");
        Utils.checkNotNull(sequenceType, "sequenceType");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(testmode, "testmode");
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.locale = locale;
        this.amount = amount;
        this.include = include;
        this.sequenceType = sequenceType;
        this.profileId = profileId;
        this.testmode = testmode;
        this.idempotencyKey = idempotencyKey;
    }
    
    public ListAllMethodsRequest() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * Response language
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Locale> locale() {
        return (JsonNullable<Locale>) locale;
    }

    /**
     * If supplied, only payment methods that support the amount and currency
     * are returned.
     * 
     * <p>Example: `/v2/methods/all?amount[value]=100.00&amp;amount[currency]=USD`
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> amount() {
        return (Optional<Amount>) amount;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    @JsonIgnore
    public JsonNullable<String> include() {
        return include;
    }

    /**
     * Set this parameter to `first` to only return the methods that
     * can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return methods that can be used for recurring payments or
     * subscriptions.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SequenceType> sequenceType() {
        return (Optional<SequenceType>) sequenceType;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to
     * retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted.
     * For
     * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @JsonIgnore
    public Optional<String> profileId() {
        return profileId;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the
     * `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
     * enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Response language
     */
    public ListAllMethodsRequest withLocale(Locale locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = JsonNullable.of(locale);
        return this;
    }

    /**
     * Response language
     */
    public ListAllMethodsRequest withLocale(JsonNullable<? extends Locale> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    /**
     * If supplied, only payment methods that support the amount and currency
     * are returned.
     * 
     * <p>Example: `/v2/methods/all?amount[value]=100.00&amp;amount[currency]=USD`
     */
    public ListAllMethodsRequest withAmount(Amount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * If supplied, only payment methods that support the amount and currency
     * are returned.
     * 
     * <p>Example: `/v2/methods/all?amount[value]=100.00&amp;amount[currency]=USD`
     */
    public ListAllMethodsRequest withAmount(Optional<? extends Amount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    public ListAllMethodsRequest withInclude(String include) {
        Utils.checkNotNull(include, "include");
        this.include = JsonNullable.of(include);
        return this;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    public ListAllMethodsRequest withInclude(JsonNullable<String> include) {
        Utils.checkNotNull(include, "include");
        this.include = include;
        return this;
    }

    /**
     * Set this parameter to `first` to only return the methods that
     * can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return methods that can be used for recurring payments or
     * subscriptions.
     */
    public ListAllMethodsRequest withSequenceType(SequenceType sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = Optional.ofNullable(sequenceType);
        return this;
    }


    /**
     * Set this parameter to `first` to only return the methods that
     * can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return methods that can be used for recurring payments or
     * subscriptions.
     */
    public ListAllMethodsRequest withSequenceType(Optional<? extends SequenceType> sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = sequenceType;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to
     * retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted.
     * For
     * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    public ListAllMethodsRequest withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = Optional.ofNullable(profileId);
        return this;
    }


    /**
     * The identifier referring to the [profile](get-profile) you wish to
     * retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted.
     * For
     * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    public ListAllMethodsRequest withProfileId(Optional<String> profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the
     * `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
     * enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public ListAllMethodsRequest withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the
     * `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
     * enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public ListAllMethodsRequest withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public ListAllMethodsRequest withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }


    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public ListAllMethodsRequest withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllMethodsRequest other = (ListAllMethodsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.locale, other.locale) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.include, other.include) &&
            Utils.enhancedDeepEquals(this.sequenceType, other.sequenceType) &&
            Utils.enhancedDeepEquals(this.profileId, other.profileId) &&
            Utils.enhancedDeepEquals(this.testmode, other.testmode) &&
            Utils.enhancedDeepEquals(this.idempotencyKey, other.idempotencyKey);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            locale, amount, include,
            sequenceType, profileId, testmode,
            idempotencyKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAllMethodsRequest.class,
                "locale", locale,
                "amount", amount,
                "include", include,
                "sequenceType", sequenceType,
                "profileId", profileId,
                "testmode", testmode,
                "idempotencyKey", idempotencyKey);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends Locale> locale = JsonNullable.undefined();

        private Optional<? extends Amount> amount = Optional.empty();

        private JsonNullable<String> include = JsonNullable.undefined();

        private Optional<? extends SequenceType> sequenceType = Optional.empty();

        private Optional<String> profileId = Optional.empty();

        private JsonNullable<Boolean> testmode = JsonNullable.undefined();

        private Optional<String> idempotencyKey = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Response language
         */
        public Builder locale(Locale locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = JsonNullable.of(locale);
            return this;
        }

        /**
         * Response language
         */
        public Builder locale(JsonNullable<? extends Locale> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }


        /**
         * If supplied, only payment methods that support the amount and currency
         * are returned.
         * 
         * <p>Example: `/v2/methods/all?amount[value]=100.00&amp;amount[currency]=USD`
         */
        public Builder amount(Amount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * If supplied, only payment methods that support the amount and currency
         * are returned.
         * 
         * <p>Example: `/v2/methods/all?amount[value]=100.00&amp;amount[currency]=USD`
         */
        public Builder amount(Optional<? extends Amount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * This endpoint allows you to include additional information via the `include` query string parameter.
         */
        public Builder include(String include) {
            Utils.checkNotNull(include, "include");
            this.include = JsonNullable.of(include);
            return this;
        }

        /**
         * This endpoint allows you to include additional information via the `include` query string parameter.
         */
        public Builder include(JsonNullable<String> include) {
            Utils.checkNotNull(include, "include");
            this.include = include;
            return this;
        }


        /**
         * Set this parameter to `first` to only return the methods that
         * can be used for the first payment of a recurring sequence.
         * 
         * <p>Set it to `recurring` to only return methods that can be used for recurring payments or
         * subscriptions.
         */
        public Builder sequenceType(SequenceType sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = Optional.ofNullable(sequenceType);
            return this;
        }

        /**
         * Set this parameter to `first` to only return the methods that
         * can be used for the first payment of a recurring sequence.
         * 
         * <p>Set it to `recurring` to only return methods that can be used for recurring payments or
         * subscriptions.
         */
        public Builder sequenceType(Optional<? extends SequenceType> sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = sequenceType;
            return this;
        }


        /**
         * The identifier referring to the [profile](get-profile) you wish to
         * retrieve the resources for.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted.
         * For
         * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
         * required.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = Optional.ofNullable(profileId);
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) you wish to
         * retrieve the resources for.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted.
         * For
         * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
         * required.
         */
        public Builder profileId(Optional<String> profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }


        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the
         * `testmode` query
         * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
         * enable test mode by
         * setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the
         * `testmode` query
         * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
         * enable test mode by
         * setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }


        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public ListAllMethodsRequest build() {

            return new ListAllMethodsRequest(
                locale, amount, include,
                sequenceType, profileId, testmode,
                idempotencyKey);
        }

    }
}
