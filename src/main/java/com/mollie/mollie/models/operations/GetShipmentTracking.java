/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * GetShipmentTracking - Shipment tracking details. Can be omitted if tracking details are not available or not applicable.
 */

public class GetShipmentTracking {

    /**
     * The name of the postal carrier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier")
    private Optional<String> carrier;

    /**
     * The track-and-trace code for the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<String> code;

    /**
     * The URL where your customer can track the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonCreator
    public GetShipmentTracking(
            @JsonProperty("carrier") Optional<String> carrier,
            @JsonProperty("code") Optional<String> code,
            @JsonProperty("url") Optional<String> url) {
        Utils.checkNotNull(carrier, "carrier");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(url, "url");
        this.carrier = carrier;
        this.code = code;
        this.url = url;
    }
    
    public GetShipmentTracking() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The name of the postal carrier.
     */
    @JsonIgnore
    public Optional<String> carrier() {
        return carrier;
    }

    /**
     * The track-and-trace code for the shipment.
     */
    @JsonIgnore
    public Optional<String> code() {
        return code;
    }

    /**
     * The URL where your customer can track the shipment.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the postal carrier.
     */
    public GetShipmentTracking withCarrier(String carrier) {
        Utils.checkNotNull(carrier, "carrier");
        this.carrier = Optional.ofNullable(carrier);
        return this;
    }

    /**
     * The name of the postal carrier.
     */
    public GetShipmentTracking withCarrier(Optional<String> carrier) {
        Utils.checkNotNull(carrier, "carrier");
        this.carrier = carrier;
        return this;
    }

    /**
     * The track-and-trace code for the shipment.
     */
    public GetShipmentTracking withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    /**
     * The track-and-trace code for the shipment.
     */
    public GetShipmentTracking withCode(Optional<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * The URL where your customer can track the shipment.
     */
    public GetShipmentTracking withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * The URL where your customer can track the shipment.
     */
    public GetShipmentTracking withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetShipmentTracking other = (GetShipmentTracking) o;
        return 
            Objects.deepEquals(this.carrier, other.carrier) &&
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            carrier,
            code,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetShipmentTracking.class,
                "carrier", carrier,
                "code", code,
                "url", url);
    }
    
    public final static class Builder {
 
        private Optional<String> carrier = Optional.empty();
 
        private Optional<String> code = Optional.empty();
 
        private Optional<String> url = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the postal carrier.
         */
        public Builder carrier(String carrier) {
            Utils.checkNotNull(carrier, "carrier");
            this.carrier = Optional.ofNullable(carrier);
            return this;
        }

        /**
         * The name of the postal carrier.
         */
        public Builder carrier(Optional<String> carrier) {
            Utils.checkNotNull(carrier, "carrier");
            this.carrier = carrier;
            return this;
        }

        /**
         * The track-and-trace code for the shipment.
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * The track-and-trace code for the shipment.
         */
        public Builder code(Optional<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        /**
         * The URL where your customer can track the shipment.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The URL where your customer can track the shipment.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public GetShipmentTracking build() {
            return new GetShipmentTracking(
                carrier,
                code,
                url);
        }
    }
}

