/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * ListChargebacksReason
 * 
 * <p>Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
 */
public class ListChargebacksReason {

    /**
     * Technical code provided by the bank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<String> code;

    /**
     * A more detailed human-friendly description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonCreator
    public ListChargebacksReason(
            @JsonProperty("code") Optional<String> code,
            @JsonProperty("description") Optional<String> description) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(description, "description");
        this.code = code;
        this.description = description;
    }
    
    public ListChargebacksReason() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Technical code provided by the bank.
     */
    @JsonIgnore
    public Optional<String> code() {
        return code;
    }

    /**
     * A more detailed human-friendly description.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Technical code provided by the bank.
     */
    public ListChargebacksReason withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    /**
     * Technical code provided by the bank.
     */
    public ListChargebacksReason withCode(Optional<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * A more detailed human-friendly description.
     */
    public ListChargebacksReason withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A more detailed human-friendly description.
     */
    public ListChargebacksReason withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListChargebacksReason other = (ListChargebacksReason) o;
        return 
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.description, other.description);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            code,
            description);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListChargebacksReason.class,
                "code", code,
                "description", description);
    }
    
    public final static class Builder {
 
        private Optional<String> code = Optional.empty();
 
        private Optional<String> description = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Technical code provided by the bank.
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * Technical code provided by the bank.
         */
        public Builder code(Optional<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        /**
         * A more detailed human-friendly description.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A more detailed human-friendly description.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }
        
        public ListChargebacksReason build() {
            return new ListChargebacksReason(
                code,
                description);
        }
    }
}
