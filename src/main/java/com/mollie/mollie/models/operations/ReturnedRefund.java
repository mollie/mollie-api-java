/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ReturnedRefund {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentId")
    private Optional<String> paymentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refundId")
    private Optional<String> refundId;

    @JsonCreator
    public ReturnedRefund(
            @JsonProperty("paymentId") Optional<String> paymentId,
            @JsonProperty("refundId") Optional<String> refundId) {
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(refundId, "refundId");
        this.paymentId = paymentId;
        this.refundId = refundId;
    }
    
    public ReturnedRefund() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> paymentId() {
        return paymentId;
    }

    @JsonIgnore
    public Optional<String> refundId() {
        return refundId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ReturnedRefund withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = Optional.ofNullable(paymentId);
        return this;
    }

    public ReturnedRefund withPaymentId(Optional<String> paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    public ReturnedRefund withRefundId(String refundId) {
        Utils.checkNotNull(refundId, "refundId");
        this.refundId = Optional.ofNullable(refundId);
        return this;
    }

    public ReturnedRefund withRefundId(Optional<String> refundId) {
        Utils.checkNotNull(refundId, "refundId");
        this.refundId = refundId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReturnedRefund other = (ReturnedRefund) o;
        return 
            Objects.deepEquals(this.paymentId, other.paymentId) &&
            Objects.deepEquals(this.refundId, other.refundId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            paymentId,
            refundId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReturnedRefund.class,
                "paymentId", paymentId,
                "refundId", refundId);
    }
    
    public final static class Builder {
 
        private Optional<String> paymentId = Optional.empty();
 
        private Optional<String> refundId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        public Builder paymentId(Optional<String> paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }

        public Builder refundId(String refundId) {
            Utils.checkNotNull(refundId, "refundId");
            this.refundId = Optional.ofNullable(refundId);
            return this;
        }

        public Builder refundId(Optional<String> refundId) {
            Utils.checkNotNull(refundId, "refundId");
            this.refundId = refundId;
            return this;
        }
        
        public ReturnedRefund build() {
            return new ReturnedRefund(
                paymentId,
                refundId);
        }
    }
}
