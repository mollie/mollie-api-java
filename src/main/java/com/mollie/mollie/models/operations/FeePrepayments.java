/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * FeePrepayments
 * 
 * <p>Only available on `transaction-categories` grouping.
 */
public class FeePrepayments {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending")
    private Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsPending> pending;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("movedToAvailable")
    private Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyMovedToAvailable> movedToAvailable;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("immediatelyAvailable")
    private Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyImmediatelyAvailable> immediatelyAvailable;

    @JsonCreator
    public FeePrepayments(
            @JsonProperty("pending") Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsPending> pending,
            @JsonProperty("movedToAvailable") Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyMovedToAvailable> movedToAvailable,
            @JsonProperty("immediatelyAvailable") Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyImmediatelyAvailable> immediatelyAvailable) {
        Utils.checkNotNull(pending, "pending");
        Utils.checkNotNull(movedToAvailable, "movedToAvailable");
        Utils.checkNotNull(immediatelyAvailable, "immediatelyAvailable");
        this.pending = pending;
        this.movedToAvailable = movedToAvailable;
        this.immediatelyAvailable = immediatelyAvailable;
    }
    
    public FeePrepayments() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsPending> pending() {
        return (Optional<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsPending>) pending;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyMovedToAvailable> movedToAvailable() {
        return (Optional<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyMovedToAvailable>) movedToAvailable;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyImmediatelyAvailable> immediatelyAvailable() {
        return (Optional<GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyImmediatelyAvailable>) immediatelyAvailable;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public FeePrepayments withPending(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsPending pending) {
        Utils.checkNotNull(pending, "pending");
        this.pending = Optional.ofNullable(pending);
        return this;
    }

    public FeePrepayments withPending(Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsPending> pending) {
        Utils.checkNotNull(pending, "pending");
        this.pending = pending;
        return this;
    }

    public FeePrepayments withMovedToAvailable(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyMovedToAvailable movedToAvailable) {
        Utils.checkNotNull(movedToAvailable, "movedToAvailable");
        this.movedToAvailable = Optional.ofNullable(movedToAvailable);
        return this;
    }

    public FeePrepayments withMovedToAvailable(Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyMovedToAvailable> movedToAvailable) {
        Utils.checkNotNull(movedToAvailable, "movedToAvailable");
        this.movedToAvailable = movedToAvailable;
        return this;
    }

    public FeePrepayments withImmediatelyAvailable(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyImmediatelyAvailable immediatelyAvailable) {
        Utils.checkNotNull(immediatelyAvailable, "immediatelyAvailable");
        this.immediatelyAvailable = Optional.ofNullable(immediatelyAvailable);
        return this;
    }

    public FeePrepayments withImmediatelyAvailable(Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyImmediatelyAvailable> immediatelyAvailable) {
        Utils.checkNotNull(immediatelyAvailable, "immediatelyAvailable");
        this.immediatelyAvailable = immediatelyAvailable;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeePrepayments other = (FeePrepayments) o;
        return 
            Utils.enhancedDeepEquals(this.pending, other.pending) &&
            Utils.enhancedDeepEquals(this.movedToAvailable, other.movedToAvailable) &&
            Utils.enhancedDeepEquals(this.immediatelyAvailable, other.immediatelyAvailable);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            pending,
            movedToAvailable,
            immediatelyAvailable);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FeePrepayments.class,
                "pending", pending,
                "movedToAvailable", movedToAvailable,
                "immediatelyAvailable", immediatelyAvailable);
    }
    
    public final static class Builder {
 
        private Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsPending> pending = Optional.empty();
 
        private Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyMovedToAvailable> movedToAvailable = Optional.empty();
 
        private Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyImmediatelyAvailable> immediatelyAvailable = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder pending(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsPending pending) {
            Utils.checkNotNull(pending, "pending");
            this.pending = Optional.ofNullable(pending);
            return this;
        }

        public Builder pending(Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyTotalsFeePrepaymentsPending> pending) {
            Utils.checkNotNull(pending, "pending");
            this.pending = pending;
            return this;
        }

        public Builder movedToAvailable(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyMovedToAvailable movedToAvailable) {
            Utils.checkNotNull(movedToAvailable, "movedToAvailable");
            this.movedToAvailable = Optional.ofNullable(movedToAvailable);
            return this;
        }

        public Builder movedToAvailable(Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyMovedToAvailable> movedToAvailable) {
            Utils.checkNotNull(movedToAvailable, "movedToAvailable");
            this.movedToAvailable = movedToAvailable;
            return this;
        }

        public Builder immediatelyAvailable(GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyImmediatelyAvailable immediatelyAvailable) {
            Utils.checkNotNull(immediatelyAvailable, "immediatelyAvailable");
            this.immediatelyAvailable = Optional.ofNullable(immediatelyAvailable);
            return this;
        }

        public Builder immediatelyAvailable(Optional<? extends GetBalanceReportBalancesResponse200ApplicationHalPlusJsonResponseBodyImmediatelyAvailable> immediatelyAvailable) {
            Utils.checkNotNull(immediatelyAvailable, "immediatelyAvailable");
            this.immediatelyAvailable = immediatelyAvailable;
            return this;
        }
        
        public FeePrepayments build() {
            return new FeePrepayments(
                pending,
                movedToAvailable,
                immediatelyAvailable);
        }
    }
}
