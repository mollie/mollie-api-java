/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * ListSettlementsLinks - Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */

public class ListSettlementsLinks {

    /**
     * The URL to the current set of items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("self")
    private Optional<? extends ListSettlementsSelf> self;

    /**
     * The previous set of items, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previous")
    private JsonNullable<? extends ListSettlementsPrevious> previous;

    /**
     * The next set of items, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next")
    private JsonNullable<? extends ListSettlementsNext> next;

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentation")
    private Optional<? extends ListSettlementsDocumentation> documentation;

    @JsonCreator
    public ListSettlementsLinks(
            @JsonProperty("self") Optional<? extends ListSettlementsSelf> self,
            @JsonProperty("previous") JsonNullable<? extends ListSettlementsPrevious> previous,
            @JsonProperty("next") JsonNullable<? extends ListSettlementsNext> next,
            @JsonProperty("documentation") Optional<? extends ListSettlementsDocumentation> documentation) {
        Utils.checkNotNull(self, "self");
        Utils.checkNotNull(previous, "previous");
        Utils.checkNotNull(next, "next");
        Utils.checkNotNull(documentation, "documentation");
        this.self = self;
        this.previous = previous;
        this.next = next;
        this.documentation = documentation;
    }
    
    public ListSettlementsLinks() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The URL to the current set of items.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListSettlementsSelf> self() {
        return (Optional<ListSettlementsSelf>) self;
    }

    /**
     * The previous set of items, if available.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ListSettlementsPrevious> previous() {
        return (JsonNullable<ListSettlementsPrevious>) previous;
    }

    /**
     * The next set of items, if available.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ListSettlementsNext> next() {
        return (JsonNullable<ListSettlementsNext>) next;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListSettlementsDocumentation> documentation() {
        return (Optional<ListSettlementsDocumentation>) documentation;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The URL to the current set of items.
     */
    public ListSettlementsLinks withSelf(ListSettlementsSelf self) {
        Utils.checkNotNull(self, "self");
        this.self = Optional.ofNullable(self);
        return this;
    }

    /**
     * The URL to the current set of items.
     */
    public ListSettlementsLinks withSelf(Optional<? extends ListSettlementsSelf> self) {
        Utils.checkNotNull(self, "self");
        this.self = self;
        return this;
    }

    /**
     * The previous set of items, if available.
     */
    public ListSettlementsLinks withPrevious(ListSettlementsPrevious previous) {
        Utils.checkNotNull(previous, "previous");
        this.previous = JsonNullable.of(previous);
        return this;
    }

    /**
     * The previous set of items, if available.
     */
    public ListSettlementsLinks withPrevious(JsonNullable<? extends ListSettlementsPrevious> previous) {
        Utils.checkNotNull(previous, "previous");
        this.previous = previous;
        return this;
    }

    /**
     * The next set of items, if available.
     */
    public ListSettlementsLinks withNext(ListSettlementsNext next) {
        Utils.checkNotNull(next, "next");
        this.next = JsonNullable.of(next);
        return this;
    }

    /**
     * The next set of items, if available.
     */
    public ListSettlementsLinks withNext(JsonNullable<? extends ListSettlementsNext> next) {
        Utils.checkNotNull(next, "next");
        this.next = next;
        return this;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public ListSettlementsLinks withDocumentation(ListSettlementsDocumentation documentation) {
        Utils.checkNotNull(documentation, "documentation");
        this.documentation = Optional.ofNullable(documentation);
        return this;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public ListSettlementsLinks withDocumentation(Optional<? extends ListSettlementsDocumentation> documentation) {
        Utils.checkNotNull(documentation, "documentation");
        this.documentation = documentation;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListSettlementsLinks other = (ListSettlementsLinks) o;
        return 
            Objects.deepEquals(this.self, other.self) &&
            Objects.deepEquals(this.previous, other.previous) &&
            Objects.deepEquals(this.next, other.next) &&
            Objects.deepEquals(this.documentation, other.documentation);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            self,
            previous,
            next,
            documentation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListSettlementsLinks.class,
                "self", self,
                "previous", previous,
                "next", next,
                "documentation", documentation);
    }
    
    public final static class Builder {
 
        private Optional<? extends ListSettlementsSelf> self = Optional.empty();
 
        private JsonNullable<? extends ListSettlementsPrevious> previous = JsonNullable.undefined();
 
        private JsonNullable<? extends ListSettlementsNext> next = JsonNullable.undefined();
 
        private Optional<? extends ListSettlementsDocumentation> documentation = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The URL to the current set of items.
         */
        public Builder self(ListSettlementsSelf self) {
            Utils.checkNotNull(self, "self");
            this.self = Optional.ofNullable(self);
            return this;
        }

        /**
         * The URL to the current set of items.
         */
        public Builder self(Optional<? extends ListSettlementsSelf> self) {
            Utils.checkNotNull(self, "self");
            this.self = self;
            return this;
        }

        /**
         * The previous set of items, if available.
         */
        public Builder previous(ListSettlementsPrevious previous) {
            Utils.checkNotNull(previous, "previous");
            this.previous = JsonNullable.of(previous);
            return this;
        }

        /**
         * The previous set of items, if available.
         */
        public Builder previous(JsonNullable<? extends ListSettlementsPrevious> previous) {
            Utils.checkNotNull(previous, "previous");
            this.previous = previous;
            return this;
        }

        /**
         * The next set of items, if available.
         */
        public Builder next(ListSettlementsNext next) {
            Utils.checkNotNull(next, "next");
            this.next = JsonNullable.of(next);
            return this;
        }

        /**
         * The next set of items, if available.
         */
        public Builder next(JsonNullable<? extends ListSettlementsNext> next) {
            Utils.checkNotNull(next, "next");
            this.next = next;
            return this;
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder documentation(ListSettlementsDocumentation documentation) {
            Utils.checkNotNull(documentation, "documentation");
            this.documentation = Optional.ofNullable(documentation);
            return this;
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder documentation(Optional<? extends ListSettlementsDocumentation> documentation) {
            Utils.checkNotNull(documentation, "documentation");
            this.documentation = documentation;
            return this;
        }
        
        public ListSettlementsLinks build() {
            return new ListSettlementsLinks(
                self,
                previous,
                next,
                documentation);
        }
    }
}

