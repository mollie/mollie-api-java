/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
/**
 * EnableMethodIssuerResponseBody - The payment method issuer object.
 */

public class EnableMethodIssuerResponseBody {

    /**
     * Indicates the response contains a payment method issuer object. Will always contain the string `issuer` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The unique identifier of the payment method issuer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The full name of the payment method issuer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Information regarding the *contractor*. Only relevant for `voucher` issuers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractor")
    private Optional<? extends Contractor> contractor;

    /**
     * The status of the issuer. Only relevant for `voucher` issuers.
     * 
     * If the status is `pending-issuer`, an additional action from your side may be required with the issuer.
     * 
     * Possible values: `activated` `pending-issuer`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * URLs of images representing the payment method issuer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    private Optional<? extends EnableMethodIssuerImage> image;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends EnableMethodIssuerLinks> links;

    @JsonCreator
    public EnableMethodIssuerResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("contractor") Optional<? extends Contractor> contractor,
            @JsonProperty("status") JsonNullable<String> status,
            @JsonProperty("image") Optional<? extends EnableMethodIssuerImage> image,
            @JsonProperty("_links") Optional<? extends EnableMethodIssuerLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(contractor, "contractor");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(image, "image");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.description = description;
        this.contractor = contractor;
        this.status = status;
        this.image = image;
        this.links = links;
    }
    
    public EnableMethodIssuerResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a payment method issuer object. Will always contain the string `issuer` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The unique identifier of the payment method issuer.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The full name of the payment method issuer.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Information regarding the *contractor*. Only relevant for `voucher` issuers.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Contractor> contractor() {
        return (Optional<Contractor>) contractor;
    }

    /**
     * The status of the issuer. Only relevant for `voucher` issuers.
     * 
     * If the status is `pending-issuer`, an additional action from your side may be required with the issuer.
     * 
     * Possible values: `activated` `pending-issuer`
     */
    @JsonIgnore
    public JsonNullable<String> status() {
        return status;
    }

    /**
     * URLs of images representing the payment method issuer.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EnableMethodIssuerImage> image() {
        return (Optional<EnableMethodIssuerImage>) image;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EnableMethodIssuerLinks> links() {
        return (Optional<EnableMethodIssuerLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates the response contains a payment method issuer object. Will always contain the string `issuer` for this endpoint.
     */
    public EnableMethodIssuerResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a payment method issuer object. Will always contain the string `issuer` for this endpoint.
     */
    public EnableMethodIssuerResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The unique identifier of the payment method issuer.
     */
    public EnableMethodIssuerResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The unique identifier of the payment method issuer.
     */
    public EnableMethodIssuerResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The full name of the payment method issuer.
     */
    public EnableMethodIssuerResponseBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The full name of the payment method issuer.
     */
    public EnableMethodIssuerResponseBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Information regarding the *contractor*. Only relevant for `voucher` issuers.
     */
    public EnableMethodIssuerResponseBody withContractor(Contractor contractor) {
        Utils.checkNotNull(contractor, "contractor");
        this.contractor = Optional.ofNullable(contractor);
        return this;
    }

    /**
     * Information regarding the *contractor*. Only relevant for `voucher` issuers.
     */
    public EnableMethodIssuerResponseBody withContractor(Optional<? extends Contractor> contractor) {
        Utils.checkNotNull(contractor, "contractor");
        this.contractor = contractor;
        return this;
    }

    /**
     * The status of the issuer. Only relevant for `voucher` issuers.
     * 
     * If the status is `pending-issuer`, an additional action from your side may be required with the issuer.
     * 
     * Possible values: `activated` `pending-issuer`
     */
    public EnableMethodIssuerResponseBody withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The status of the issuer. Only relevant for `voucher` issuers.
     * 
     * If the status is `pending-issuer`, an additional action from your side may be required with the issuer.
     * 
     * Possible values: `activated` `pending-issuer`
     */
    public EnableMethodIssuerResponseBody withStatus(JsonNullable<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * URLs of images representing the payment method issuer.
     */
    public EnableMethodIssuerResponseBody withImage(EnableMethodIssuerImage image) {
        Utils.checkNotNull(image, "image");
        this.image = Optional.ofNullable(image);
        return this;
    }

    /**
     * URLs of images representing the payment method issuer.
     */
    public EnableMethodIssuerResponseBody withImage(Optional<? extends EnableMethodIssuerImage> image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EnableMethodIssuerResponseBody withLinks(EnableMethodIssuerLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EnableMethodIssuerResponseBody withLinks(Optional<? extends EnableMethodIssuerLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EnableMethodIssuerResponseBody other = (EnableMethodIssuerResponseBody) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.contractor, other.contractor) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.image, other.image) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            description,
            contractor,
            status,
            image,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EnableMethodIssuerResponseBody.class,
                "resource", resource,
                "id", id,
                "description", description,
                "contractor", contractor,
                "status", status,
                "image", image,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<? extends Contractor> contractor = Optional.empty();
 
        private JsonNullable<String> status = JsonNullable.undefined();
 
        private Optional<? extends EnableMethodIssuerImage> image = Optional.empty();
 
        private Optional<? extends EnableMethodIssuerLinks> links = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a payment method issuer object. Will always contain the string `issuer` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a payment method issuer object. Will always contain the string `issuer` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The unique identifier of the payment method issuer.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The unique identifier of the payment method issuer.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The full name of the payment method issuer.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The full name of the payment method issuer.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Information regarding the *contractor*. Only relevant for `voucher` issuers.
         */
        public Builder contractor(Contractor contractor) {
            Utils.checkNotNull(contractor, "contractor");
            this.contractor = Optional.ofNullable(contractor);
            return this;
        }

        /**
         * Information regarding the *contractor*. Only relevant for `voucher` issuers.
         */
        public Builder contractor(Optional<? extends Contractor> contractor) {
            Utils.checkNotNull(contractor, "contractor");
            this.contractor = contractor;
            return this;
        }

        /**
         * The status of the issuer. Only relevant for `voucher` issuers.
         * 
         * If the status is `pending-issuer`, an additional action from your side may be required with the issuer.
         * 
         * Possible values: `activated` `pending-issuer`
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The status of the issuer. Only relevant for `voucher` issuers.
         * 
         * If the status is `pending-issuer`, an additional action from your side may be required with the issuer.
         * 
         * Possible values: `activated` `pending-issuer`
         */
        public Builder status(JsonNullable<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * URLs of images representing the payment method issuer.
         */
        public Builder image(EnableMethodIssuerImage image) {
            Utils.checkNotNull(image, "image");
            this.image = Optional.ofNullable(image);
            return this;
        }

        /**
         * URLs of images representing the payment method issuer.
         */
        public Builder image(Optional<? extends EnableMethodIssuerImage> image) {
            Utils.checkNotNull(image, "image");
            this.image = image;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(EnableMethodIssuerLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends EnableMethodIssuerLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public EnableMethodIssuerResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }            return new EnableMethodIssuerResponseBody(
                resource,
                id,
                description,
                contractor,
                status,
                image,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"issuer\"",
                        new TypeReference<Optional<String>>() {});
    }
}

