/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.SDKConfiguration;
import com.mollie.mollie.models.components.EntityRefund;
import com.mollie.mollie.operations.CreateRefund;
import com.mollie.mollie.utils.Options;
import com.mollie.mollie.utils.RetryConfig;
import com.mollie.mollie.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class CreateRefundRequestBuilder {

    private String paymentId;
    private Optional<String> idempotencyKey = Optional.empty();
    private Optional<? extends EntityRefund> entityRefund = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public CreateRefundRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreateRefundRequestBuilder paymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }
                
    public CreateRefundRequestBuilder idempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.of(idempotencyKey);
        return this;
    }

    public CreateRefundRequestBuilder idempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }
                
    public CreateRefundRequestBuilder entityRefund(EntityRefund entityRefund) {
        Utils.checkNotNull(entityRefund, "entityRefund");
        this.entityRefund = Optional.of(entityRefund);
        return this;
    }

    public CreateRefundRequestBuilder entityRefund(Optional<? extends EntityRefund> entityRefund) {
        Utils.checkNotNull(entityRefund, "entityRefund");
        this.entityRefund = entityRefund;
        return this;
    }
                
    public CreateRefundRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public CreateRefundRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private CreateRefundRequest buildRequest() {

        CreateRefundRequest request = new CreateRefundRequest(paymentId,
            idempotencyKey,
            entityRefund);

        return request;
    }

    public CreateRefundResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<CreateRefundRequest, CreateRefundResponse> operation
              = new CreateRefund.Sync(sdkConfiguration, options);
        CreateRefundRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
