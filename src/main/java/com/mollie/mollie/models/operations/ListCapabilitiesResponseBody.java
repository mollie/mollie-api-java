/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
/**
 * ListCapabilitiesResponseBody - A list of capabilities.
 */

public class ListCapabilitiesResponseBody {

    /**
     * The number of items in this result set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_embedded")
    private Optional<? extends ListCapabilitiesEmbedded> embedded;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends ListCapabilitiesLinks> links;

    @JsonCreator
    public ListCapabilitiesResponseBody(
            @JsonProperty("count") Optional<Long> count,
            @JsonProperty("_embedded") Optional<? extends ListCapabilitiesEmbedded> embedded,
            @JsonProperty("_links") Optional<? extends ListCapabilitiesLinks> links) {
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(embedded, "embedded");
        Utils.checkNotNull(links, "links");
        this.count = count;
        this.embedded = embedded;
        this.links = links;
    }
    
    public ListCapabilitiesResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The number of items in this result set.
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListCapabilitiesEmbedded> embedded() {
        return (Optional<ListCapabilitiesEmbedded>) embedded;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListCapabilitiesLinks> links() {
        return (Optional<ListCapabilitiesLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The number of items in this result set.
     */
    public ListCapabilitiesResponseBody withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    /**
     * The number of items in this result set.
     */
    public ListCapabilitiesResponseBody withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    public ListCapabilitiesResponseBody withEmbedded(ListCapabilitiesEmbedded embedded) {
        Utils.checkNotNull(embedded, "embedded");
        this.embedded = Optional.ofNullable(embedded);
        return this;
    }

    public ListCapabilitiesResponseBody withEmbedded(Optional<? extends ListCapabilitiesEmbedded> embedded) {
        Utils.checkNotNull(embedded, "embedded");
        this.embedded = embedded;
        return this;
    }

    public ListCapabilitiesResponseBody withLinks(ListCapabilitiesLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    public ListCapabilitiesResponseBody withLinks(Optional<? extends ListCapabilitiesLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListCapabilitiesResponseBody other = (ListCapabilitiesResponseBody) o;
        return 
            Objects.deepEquals(this.count, other.count) &&
            Objects.deepEquals(this.embedded, other.embedded) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            count,
            embedded,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListCapabilitiesResponseBody.class,
                "count", count,
                "embedded", embedded,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<Long> count = Optional.empty();
 
        private Optional<? extends ListCapabilitiesEmbedded> embedded = Optional.empty();
 
        private Optional<? extends ListCapabilitiesLinks> links = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The number of items in this result set.
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * The number of items in this result set.
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        public Builder embedded(ListCapabilitiesEmbedded embedded) {
            Utils.checkNotNull(embedded, "embedded");
            this.embedded = Optional.ofNullable(embedded);
            return this;
        }

        public Builder embedded(Optional<? extends ListCapabilitiesEmbedded> embedded) {
            Utils.checkNotNull(embedded, "embedded");
            this.embedded = embedded;
            return this;
        }

        public Builder links(ListCapabilitiesLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        public Builder links(Optional<? extends ListCapabilitiesLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public ListCapabilitiesResponseBody build() {
            return new ListCapabilitiesResponseBody(
                count,
                embedded,
                links);
        }
    }
}

