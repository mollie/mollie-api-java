/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class UpdateProfileRequestBody {

    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    private JsonNullable<String> website;

    /**
     * The email address associated with the profile's trade name or brand.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<String> email;

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private JsonNullable<String> phone;

    /**
     * The products or services offered by the profile's website or application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countriesOfActivity")
    private JsonNullable<? extends List<String>> countriesOfActivity;

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessCategory")
    private JsonNullable<String> businessCategory;

    /**
     * Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review the profile before it can start accepting payments.
     * 
     * <p>Possible values: `live` `test`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private JsonNullable<String> mode;

    @JsonCreator
    public UpdateProfileRequestBody(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("website") JsonNullable<String> website,
            @JsonProperty("email") JsonNullable<String> email,
            @JsonProperty("phone") JsonNullable<String> phone,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("countriesOfActivity") JsonNullable<? extends List<String>> countriesOfActivity,
            @JsonProperty("businessCategory") JsonNullable<String> businessCategory,
            @JsonProperty("mode") JsonNullable<String> mode) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(website, "website");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
        Utils.checkNotNull(businessCategory, "businessCategory");
        Utils.checkNotNull(mode, "mode");
        this.name = name;
        this.website = website;
        this.email = email;
        this.phone = phone;
        this.description = description;
        this.countriesOfActivity = countriesOfActivity;
        this.businessCategory = businessCategory;
        this.mode = mode;
    }
    
    public UpdateProfileRequestBody() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    @JsonIgnore
    public JsonNullable<String> website() {
        return website;
    }

    /**
     * The email address associated with the profile's trade name or brand.
     */
    @JsonIgnore
    public JsonNullable<String> email() {
        return email;
    }

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    @JsonIgnore
    public JsonNullable<String> phone() {
        return phone;
    }

    /**
     * The products or services offered by the profile's website or application.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> countriesOfActivity() {
        return (JsonNullable<List<String>>) countriesOfActivity;
    }

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
     */
    @JsonIgnore
    public JsonNullable<String> businessCategory() {
        return businessCategory;
    }

    /**
     * Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review the profile before it can start accepting payments.
     * 
     * <p>Possible values: `live` `test`
     */
    @JsonIgnore
    public JsonNullable<String> mode() {
        return mode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    public UpdateProfileRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    public UpdateProfileRequestBody withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    public UpdateProfileRequestBody withWebsite(String website) {
        Utils.checkNotNull(website, "website");
        this.website = JsonNullable.of(website);
        return this;
    }

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    public UpdateProfileRequestBody withWebsite(JsonNullable<String> website) {
        Utils.checkNotNull(website, "website");
        this.website = website;
        return this;
    }

    /**
     * The email address associated with the profile's trade name or brand.
     */
    public UpdateProfileRequestBody withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = JsonNullable.of(email);
        return this;
    }

    /**
     * The email address associated with the profile's trade name or brand.
     */
    public UpdateProfileRequestBody withEmail(JsonNullable<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    public UpdateProfileRequestBody withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = JsonNullable.of(phone);
        return this;
    }

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    public UpdateProfileRequestBody withPhone(JsonNullable<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * The products or services offered by the profile's website or application.
     */
    public UpdateProfileRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * The products or services offered by the profile's website or application.
     */
    public UpdateProfileRequestBody withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    public UpdateProfileRequestBody withCountriesOfActivity(List<String> countriesOfActivity) {
        Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
        this.countriesOfActivity = JsonNullable.of(countriesOfActivity);
        return this;
    }

    /**
     * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    public UpdateProfileRequestBody withCountriesOfActivity(JsonNullable<? extends List<String>> countriesOfActivity) {
        Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
        this.countriesOfActivity = countriesOfActivity;
        return this;
    }

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
     */
    public UpdateProfileRequestBody withBusinessCategory(String businessCategory) {
        Utils.checkNotNull(businessCategory, "businessCategory");
        this.businessCategory = JsonNullable.of(businessCategory);
        return this;
    }

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
     */
    public UpdateProfileRequestBody withBusinessCategory(JsonNullable<String> businessCategory) {
        Utils.checkNotNull(businessCategory, "businessCategory");
        this.businessCategory = businessCategory;
        return this;
    }

    /**
     * Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review the profile before it can start accepting payments.
     * 
     * <p>Possible values: `live` `test`
     */
    public UpdateProfileRequestBody withMode(String mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = JsonNullable.of(mode);
        return this;
    }

    /**
     * Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review the profile before it can start accepting payments.
     * 
     * <p>Possible values: `live` `test`
     */
    public UpdateProfileRequestBody withMode(JsonNullable<String> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateProfileRequestBody other = (UpdateProfileRequestBody) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.website, other.website) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.countriesOfActivity, other.countriesOfActivity) &&
            Objects.deepEquals(this.businessCategory, other.businessCategory) &&
            Objects.deepEquals(this.mode, other.mode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            website,
            email,
            phone,
            description,
            countriesOfActivity,
            businessCategory,
            mode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateProfileRequestBody.class,
                "name", name,
                "website", website,
                "email", email,
                "phone", phone,
                "description", description,
                "countriesOfActivity", countriesOfActivity,
                "businessCategory", businessCategory,
                "mode", mode);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> website = JsonNullable.undefined();
 
        private JsonNullable<String> email = JsonNullable.undefined();
 
        private JsonNullable<String> phone = JsonNullable.undefined();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> countriesOfActivity = JsonNullable.undefined();
 
        private JsonNullable<String> businessCategory = JsonNullable.undefined();
 
        private JsonNullable<String> mode = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
         */
        public Builder website(String website) {
            Utils.checkNotNull(website, "website");
            this.website = JsonNullable.of(website);
            return this;
        }

        /**
         * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
         */
        public Builder website(JsonNullable<String> website) {
            Utils.checkNotNull(website, "website");
            this.website = website;
            return this;
        }

        /**
         * The email address associated with the profile's trade name or brand.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = JsonNullable.of(email);
            return this;
        }

        /**
         * The email address associated with the profile's trade name or brand.
         */
        public Builder email(JsonNullable<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The phone number associated with the profile's trade name or brand.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = JsonNullable.of(phone);
            return this;
        }

        /**
         * The phone number associated with the profile's trade name or brand.
         */
        public Builder phone(JsonNullable<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * The products or services offered by the profile's website or application.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The products or services offered by the profile's website or application.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         */
        public Builder countriesOfActivity(List<String> countriesOfActivity) {
            Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
            this.countriesOfActivity = JsonNullable.of(countriesOfActivity);
            return this;
        }

        /**
         * A list of countries where you expect that the majority of the profile's customers reside, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         */
        public Builder countriesOfActivity(JsonNullable<? extends List<String>> countriesOfActivity) {
            Utils.checkNotNull(countriesOfActivity, "countriesOfActivity");
            this.countriesOfActivity = countriesOfActivity;
            return this;
        }

        /**
         * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
         */
        public Builder businessCategory(String businessCategory) {
            Utils.checkNotNull(businessCategory, "businessCategory");
            this.businessCategory = JsonNullable.of(businessCategory);
            return this;
        }

        /**
         * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
         */
        public Builder businessCategory(JsonNullable<String> businessCategory) {
            Utils.checkNotNull(businessCategory, "businessCategory");
            this.businessCategory = businessCategory;
            return this;
        }

        /**
         * Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review the profile before it can start accepting payments.
         * 
         * <p>Possible values: `live` `test`
         */
        public Builder mode(String mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = JsonNullable.of(mode);
            return this;
        }

        /**
         * Updating a profile from `test` mode to `live` mode will trigger a verification process, where we review the profile before it can start accepting payments.
         * 
         * <p>Possible values: `live` `test`
         */
        public Builder mode(JsonNullable<String> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }
        
        public UpdateProfileRequestBody build() {
            return new UpdateProfileRequestBody(
                name,
                website,
                email,
                phone,
                description,
                countriesOfActivity,
                businessCategory,
                mode);
        }
    }
}
