/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * GetPaymentQrCode
 * 
 * <p>Optional include. If a QR code was requested during payment creation for a QR-compatible payment method,
 * the QR code details will be available in this object.
 * 
 * <p>The QR code can be scanned by the customer to complete the payment on their mobile device. For example,
 * Bancontact QR payments can be completed by the customer using the Bancontact app.
 */
public class GetPaymentQrCode {
    /**
     * The height of the QR code image in pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    private Optional<Long> height;

    /**
     * The width of the QR code image in pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    private Optional<Long> width;

    /**
     * The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
     * downloaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("src")
    private Optional<String> src;

    @JsonCreator
    public GetPaymentQrCode(
            @JsonProperty("height") Optional<Long> height,
            @JsonProperty("width") Optional<Long> width,
            @JsonProperty("src") Optional<String> src) {
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(width, "width");
        Utils.checkNotNull(src, "src");
        this.height = height;
        this.width = width;
        this.src = src;
    }
    
    public GetPaymentQrCode() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The height of the QR code image in pixels.
     */
    @JsonIgnore
    public Optional<Long> height() {
        return height;
    }

    /**
     * The width of the QR code image in pixels.
     */
    @JsonIgnore
    public Optional<Long> width() {
        return width;
    }

    /**
     * The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
     * downloaded.
     */
    @JsonIgnore
    public Optional<String> src() {
        return src;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The height of the QR code image in pixels.
     */
    public GetPaymentQrCode withHeight(long height) {
        Utils.checkNotNull(height, "height");
        this.height = Optional.ofNullable(height);
        return this;
    }


    /**
     * The height of the QR code image in pixels.
     */
    public GetPaymentQrCode withHeight(Optional<Long> height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    /**
     * The width of the QR code image in pixels.
     */
    public GetPaymentQrCode withWidth(long width) {
        Utils.checkNotNull(width, "width");
        this.width = Optional.ofNullable(width);
        return this;
    }


    /**
     * The width of the QR code image in pixels.
     */
    public GetPaymentQrCode withWidth(Optional<Long> width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }

    /**
     * The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
     * downloaded.
     */
    public GetPaymentQrCode withSrc(String src) {
        Utils.checkNotNull(src, "src");
        this.src = Optional.ofNullable(src);
        return this;
    }


    /**
     * The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
     * downloaded.
     */
    public GetPaymentQrCode withSrc(Optional<String> src) {
        Utils.checkNotNull(src, "src");
        this.src = src;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPaymentQrCode other = (GetPaymentQrCode) o;
        return 
            Utils.enhancedDeepEquals(this.height, other.height) &&
            Utils.enhancedDeepEquals(this.width, other.width) &&
            Utils.enhancedDeepEquals(this.src, other.src);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            height, width, src);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPaymentQrCode.class,
                "height", height,
                "width", width,
                "src", src);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Long> height = Optional.empty();

        private Optional<Long> width = Optional.empty();

        private Optional<String> src = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The height of the QR code image in pixels.
         */
        public Builder height(long height) {
            Utils.checkNotNull(height, "height");
            this.height = Optional.ofNullable(height);
            return this;
        }

        /**
         * The height of the QR code image in pixels.
         */
        public Builder height(Optional<Long> height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }


        /**
         * The width of the QR code image in pixels.
         */
        public Builder width(long width) {
            Utils.checkNotNull(width, "width");
            this.width = Optional.ofNullable(width);
            return this;
        }

        /**
         * The width of the QR code image in pixels.
         */
        public Builder width(Optional<Long> width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }


        /**
         * The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
         * downloaded.
         */
        public Builder src(String src) {
            Utils.checkNotNull(src, "src");
            this.src = Optional.ofNullable(src);
            return this;
        }

        /**
         * The URL to the QR code image. The image is a PNG file, and can be displayed directly in the browser or
         * downloaded.
         */
        public Builder src(Optional<String> src) {
            Utils.checkNotNull(src, "src");
            this.src = src;
            return this;
        }

        public GetPaymentQrCode build() {

            return new GetPaymentQrCode(
                height, width, src);
        }

    }
}
