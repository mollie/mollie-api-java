/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * ListCustomerPaymentsCaptureDelay
 * 
 * <p>**Only relevant if you wish to manage authorization and capturing separately.**
 * 
 * <p>Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a
 * later point either be 'captured' or canceled.
 * 
 * <p>By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a
 * capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For
 * example `8 hours` or `2 days`.
 * 
 * <p>To schedule an automatic capture, the `captureMode` must be set to `automatic`.
 * 
 * <p>The maximum delay is 7 days (168 hours).
 */
public enum ListCustomerPaymentsCaptureDelay {
    DOT_DOT_DOT_HOURS("... hours"),
    DOT_DOT_DOT_DAYS("... days");

    @JsonValue
    private final String value;

    ListCustomerPaymentsCaptureDelay(String value) {
        this.value = value;
    }
    
    public String value() {
        return value;
    }
    
    public static Optional<ListCustomerPaymentsCaptureDelay> fromValue(String value) {
        for (ListCustomerPaymentsCaptureDelay o: ListCustomerPaymentsCaptureDelay.values()) {
            if (Objects.deepEquals(o.value, value)) {
                return Optional.of(o);
            }
        }
        return Optional.empty();
    }
}

