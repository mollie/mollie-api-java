/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * CreateCustomerPaymentCustomersLinks
 * 
 * <p>An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
public class CreateCustomerPaymentCustomersLinks {
    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonProperty("self")
    private CreateCustomerPaymentCustomersSelf self;

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkout")
    private Optional<? extends CreateCustomerPaymentCheckout> checkout;

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobileAppCheckout")
    private Optional<? extends CreateCustomerPaymentMobileAppCheckout> mobileAppCheckout;

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different
     * payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
     * payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
     * chargeback for the test payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("changePaymentState")
    private Optional<? extends CreateCustomerPaymentChangePaymentState> changePaymentState;

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    @JsonProperty("dashboard")
    private CreateCustomerPaymentDashboard dashboard;

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunds")
    private Optional<? extends CreateCustomerPaymentRefunds> refunds;

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
     * payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargebacks")
    private Optional<? extends CreateCustomerPaymentChargebacks> chargebacks;

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("captures")
    private Optional<? extends CreateCustomerPaymentCaptures> captures;

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
     * Not present if not yet settled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement")
    private Optional<? extends CreateCustomerPaymentSettlement> settlement;

    /**
     * The API resource URL of the [customer](get-customer).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private Optional<? extends CreateCustomerPaymentCustomer> customer;

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandate")
    private Optional<? extends CreateCustomerPaymentMandate> mandate;

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription")
    private Optional<? extends CreateCustomerPaymentSubscription> subscription;

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
     * order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order")
    private Optional<? extends CreateCustomerPaymentOrder> order;

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
     * point-of-sale payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terminal")
    private Optional<? extends CreateCustomerPaymentTerminal> terminal;

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentation")
    private Optional<? extends CreateCustomerPaymentDocumentation> documentation;

    /**
     * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
     * successful).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends CreateCustomerPaymentCustomersStatus> status;

    /**
     * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
     * bank transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payOnline")
    private Optional<? extends CreateCustomerPaymentPayOnline> payOnline;

    @JsonCreator
    public CreateCustomerPaymentCustomersLinks(
            @JsonProperty("self") CreateCustomerPaymentCustomersSelf self,
            @JsonProperty("checkout") Optional<? extends CreateCustomerPaymentCheckout> checkout,
            @JsonProperty("mobileAppCheckout") Optional<? extends CreateCustomerPaymentMobileAppCheckout> mobileAppCheckout,
            @JsonProperty("changePaymentState") Optional<? extends CreateCustomerPaymentChangePaymentState> changePaymentState,
            @JsonProperty("dashboard") CreateCustomerPaymentDashboard dashboard,
            @JsonProperty("refunds") Optional<? extends CreateCustomerPaymentRefunds> refunds,
            @JsonProperty("chargebacks") Optional<? extends CreateCustomerPaymentChargebacks> chargebacks,
            @JsonProperty("captures") Optional<? extends CreateCustomerPaymentCaptures> captures,
            @JsonProperty("settlement") Optional<? extends CreateCustomerPaymentSettlement> settlement,
            @JsonProperty("customer") Optional<? extends CreateCustomerPaymentCustomer> customer,
            @JsonProperty("mandate") Optional<? extends CreateCustomerPaymentMandate> mandate,
            @JsonProperty("subscription") Optional<? extends CreateCustomerPaymentSubscription> subscription,
            @JsonProperty("order") Optional<? extends CreateCustomerPaymentOrder> order,
            @JsonProperty("terminal") Optional<? extends CreateCustomerPaymentTerminal> terminal,
            @JsonProperty("documentation") Optional<? extends CreateCustomerPaymentDocumentation> documentation,
            @JsonProperty("status") Optional<? extends CreateCustomerPaymentCustomersStatus> status,
            @JsonProperty("payOnline") Optional<? extends CreateCustomerPaymentPayOnline> payOnline) {
        Utils.checkNotNull(self, "self");
        Utils.checkNotNull(checkout, "checkout");
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        Utils.checkNotNull(dashboard, "dashboard");
        Utils.checkNotNull(refunds, "refunds");
        Utils.checkNotNull(chargebacks, "chargebacks");
        Utils.checkNotNull(captures, "captures");
        Utils.checkNotNull(settlement, "settlement");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(mandate, "mandate");
        Utils.checkNotNull(subscription, "subscription");
        Utils.checkNotNull(order, "order");
        Utils.checkNotNull(terminal, "terminal");
        Utils.checkNotNull(documentation, "documentation");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(payOnline, "payOnline");
        this.self = self;
        this.checkout = checkout;
        this.mobileAppCheckout = mobileAppCheckout;
        this.changePaymentState = changePaymentState;
        this.dashboard = dashboard;
        this.refunds = refunds;
        this.chargebacks = chargebacks;
        this.captures = captures;
        this.settlement = settlement;
        this.customer = customer;
        this.mandate = mandate;
        this.subscription = subscription;
        this.order = order;
        this.terminal = terminal;
        this.documentation = documentation;
        this.status = status;
        this.payOnline = payOnline;
    }
    
    public CreateCustomerPaymentCustomersLinks(
            CreateCustomerPaymentCustomersSelf self,
            CreateCustomerPaymentDashboard dashboard) {
        this(self, Optional.empty(), Optional.empty(),
            Optional.empty(), dashboard, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonIgnore
    public CreateCustomerPaymentCustomersSelf self() {
        return self;
    }

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentCheckout> checkout() {
        return (Optional<CreateCustomerPaymentCheckout>) checkout;
    }

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentMobileAppCheckout> mobileAppCheckout() {
        return (Optional<CreateCustomerPaymentMobileAppCheckout>) mobileAppCheckout;
    }

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different
     * payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
     * payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
     * chargeback for the test payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentChangePaymentState> changePaymentState() {
        return (Optional<CreateCustomerPaymentChangePaymentState>) changePaymentState;
    }

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    @JsonIgnore
    public CreateCustomerPaymentDashboard dashboard() {
        return dashboard;
    }

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentRefunds> refunds() {
        return (Optional<CreateCustomerPaymentRefunds>) refunds;
    }

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
     * payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentChargebacks> chargebacks() {
        return (Optional<CreateCustomerPaymentChargebacks>) chargebacks;
    }

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentCaptures> captures() {
        return (Optional<CreateCustomerPaymentCaptures>) captures;
    }

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
     * Not present if not yet settled.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentSettlement> settlement() {
        return (Optional<CreateCustomerPaymentSettlement>) settlement;
    }

    /**
     * The API resource URL of the [customer](get-customer).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentCustomer> customer() {
        return (Optional<CreateCustomerPaymentCustomer>) customer;
    }

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentMandate> mandate() {
        return (Optional<CreateCustomerPaymentMandate>) mandate;
    }

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentSubscription> subscription() {
        return (Optional<CreateCustomerPaymentSubscription>) subscription;
    }

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
     * order.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentOrder> order() {
        return (Optional<CreateCustomerPaymentOrder>) order;
    }

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
     * point-of-sale payments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentTerminal> terminal() {
        return (Optional<CreateCustomerPaymentTerminal>) terminal;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentDocumentation> documentation() {
        return (Optional<CreateCustomerPaymentDocumentation>) documentation;
    }

    /**
     * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
     * successful).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentCustomersStatus> status() {
        return (Optional<CreateCustomerPaymentCustomersStatus>) status;
    }

    /**
     * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
     * bank transfer.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentPayOnline> payOnline() {
        return (Optional<CreateCustomerPaymentPayOnline>) payOnline;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public CreateCustomerPaymentCustomersLinks withSelf(CreateCustomerPaymentCustomersSelf self) {
        Utils.checkNotNull(self, "self");
        this.self = self;
        return this;
    }

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    public CreateCustomerPaymentCustomersLinks withCheckout(CreateCustomerPaymentCheckout checkout) {
        Utils.checkNotNull(checkout, "checkout");
        this.checkout = Optional.ofNullable(checkout);
        return this;
    }


    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    public CreateCustomerPaymentCustomersLinks withCheckout(Optional<? extends CreateCustomerPaymentCheckout> checkout) {
        Utils.checkNotNull(checkout, "checkout");
        this.checkout = checkout;
        return this;
    }

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    public CreateCustomerPaymentCustomersLinks withMobileAppCheckout(CreateCustomerPaymentMobileAppCheckout mobileAppCheckout) {
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        this.mobileAppCheckout = Optional.ofNullable(mobileAppCheckout);
        return this;
    }


    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    public CreateCustomerPaymentCustomersLinks withMobileAppCheckout(Optional<? extends CreateCustomerPaymentMobileAppCheckout> mobileAppCheckout) {
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        this.mobileAppCheckout = mobileAppCheckout;
        return this;
    }

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different
     * payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
     * payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
     * chargeback for the test payment.
     */
    public CreateCustomerPaymentCustomersLinks withChangePaymentState(CreateCustomerPaymentChangePaymentState changePaymentState) {
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        this.changePaymentState = Optional.ofNullable(changePaymentState);
        return this;
    }


    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different
     * payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
     * payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
     * chargeback for the test payment.
     */
    public CreateCustomerPaymentCustomersLinks withChangePaymentState(Optional<? extends CreateCustomerPaymentChangePaymentState> changePaymentState) {
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        this.changePaymentState = changePaymentState;
        return this;
    }

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    public CreateCustomerPaymentCustomersLinks withDashboard(CreateCustomerPaymentDashboard dashboard) {
        Utils.checkNotNull(dashboard, "dashboard");
        this.dashboard = dashboard;
        return this;
    }

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    public CreateCustomerPaymentCustomersLinks withRefunds(CreateCustomerPaymentRefunds refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = Optional.ofNullable(refunds);
        return this;
    }


    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    public CreateCustomerPaymentCustomersLinks withRefunds(Optional<? extends CreateCustomerPaymentRefunds> refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = refunds;
        return this;
    }

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
     * payment.
     */
    public CreateCustomerPaymentCustomersLinks withChargebacks(CreateCustomerPaymentChargebacks chargebacks) {
        Utils.checkNotNull(chargebacks, "chargebacks");
        this.chargebacks = Optional.ofNullable(chargebacks);
        return this;
    }


    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
     * payment.
     */
    public CreateCustomerPaymentCustomersLinks withChargebacks(Optional<? extends CreateCustomerPaymentChargebacks> chargebacks) {
        Utils.checkNotNull(chargebacks, "chargebacks");
        this.chargebacks = chargebacks;
        return this;
    }

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    public CreateCustomerPaymentCustomersLinks withCaptures(CreateCustomerPaymentCaptures captures) {
        Utils.checkNotNull(captures, "captures");
        this.captures = Optional.ofNullable(captures);
        return this;
    }


    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    public CreateCustomerPaymentCustomersLinks withCaptures(Optional<? extends CreateCustomerPaymentCaptures> captures) {
        Utils.checkNotNull(captures, "captures");
        this.captures = captures;
        return this;
    }

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
     * Not present if not yet settled.
     */
    public CreateCustomerPaymentCustomersLinks withSettlement(CreateCustomerPaymentSettlement settlement) {
        Utils.checkNotNull(settlement, "settlement");
        this.settlement = Optional.ofNullable(settlement);
        return this;
    }


    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
     * Not present if not yet settled.
     */
    public CreateCustomerPaymentCustomersLinks withSettlement(Optional<? extends CreateCustomerPaymentSettlement> settlement) {
        Utils.checkNotNull(settlement, "settlement");
        this.settlement = settlement;
        return this;
    }

    /**
     * The API resource URL of the [customer](get-customer).
     */
    public CreateCustomerPaymentCustomersLinks withCustomer(CreateCustomerPaymentCustomer customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = Optional.ofNullable(customer);
        return this;
    }


    /**
     * The API resource URL of the [customer](get-customer).
     */
    public CreateCustomerPaymentCustomersLinks withCustomer(Optional<? extends CreateCustomerPaymentCustomer> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    public CreateCustomerPaymentCustomersLinks withMandate(CreateCustomerPaymentMandate mandate) {
        Utils.checkNotNull(mandate, "mandate");
        this.mandate = Optional.ofNullable(mandate);
        return this;
    }


    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    public CreateCustomerPaymentCustomersLinks withMandate(Optional<? extends CreateCustomerPaymentMandate> mandate) {
        Utils.checkNotNull(mandate, "mandate");
        this.mandate = mandate;
        return this;
    }

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    public CreateCustomerPaymentCustomersLinks withSubscription(CreateCustomerPaymentSubscription subscription) {
        Utils.checkNotNull(subscription, "subscription");
        this.subscription = Optional.ofNullable(subscription);
        return this;
    }


    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    public CreateCustomerPaymentCustomersLinks withSubscription(Optional<? extends CreateCustomerPaymentSubscription> subscription) {
        Utils.checkNotNull(subscription, "subscription");
        this.subscription = subscription;
        return this;
    }

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
     * order.
     */
    public CreateCustomerPaymentCustomersLinks withOrder(CreateCustomerPaymentOrder order) {
        Utils.checkNotNull(order, "order");
        this.order = Optional.ofNullable(order);
        return this;
    }


    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
     * order.
     */
    public CreateCustomerPaymentCustomersLinks withOrder(Optional<? extends CreateCustomerPaymentOrder> order) {
        Utils.checkNotNull(order, "order");
        this.order = order;
        return this;
    }

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
     * point-of-sale payments.
     */
    public CreateCustomerPaymentCustomersLinks withTerminal(CreateCustomerPaymentTerminal terminal) {
        Utils.checkNotNull(terminal, "terminal");
        this.terminal = Optional.ofNullable(terminal);
        return this;
    }


    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
     * point-of-sale payments.
     */
    public CreateCustomerPaymentCustomersLinks withTerminal(Optional<? extends CreateCustomerPaymentTerminal> terminal) {
        Utils.checkNotNull(terminal, "terminal");
        this.terminal = terminal;
        return this;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public CreateCustomerPaymentCustomersLinks withDocumentation(CreateCustomerPaymentDocumentation documentation) {
        Utils.checkNotNull(documentation, "documentation");
        this.documentation = Optional.ofNullable(documentation);
        return this;
    }


    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public CreateCustomerPaymentCustomersLinks withDocumentation(Optional<? extends CreateCustomerPaymentDocumentation> documentation) {
        Utils.checkNotNull(documentation, "documentation");
        this.documentation = documentation;
        return this;
    }

    /**
     * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
     * successful).
     */
    public CreateCustomerPaymentCustomersLinks withStatus(CreateCustomerPaymentCustomersStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
     * successful).
     */
    public CreateCustomerPaymentCustomersLinks withStatus(Optional<? extends CreateCustomerPaymentCustomersStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
     * bank transfer.
     */
    public CreateCustomerPaymentCustomersLinks withPayOnline(CreateCustomerPaymentPayOnline payOnline) {
        Utils.checkNotNull(payOnline, "payOnline");
        this.payOnline = Optional.ofNullable(payOnline);
        return this;
    }


    /**
     * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
     * bank transfer.
     */
    public CreateCustomerPaymentCustomersLinks withPayOnline(Optional<? extends CreateCustomerPaymentPayOnline> payOnline) {
        Utils.checkNotNull(payOnline, "payOnline");
        this.payOnline = payOnline;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCustomerPaymentCustomersLinks other = (CreateCustomerPaymentCustomersLinks) o;
        return 
            Utils.enhancedDeepEquals(this.self, other.self) &&
            Utils.enhancedDeepEquals(this.checkout, other.checkout) &&
            Utils.enhancedDeepEquals(this.mobileAppCheckout, other.mobileAppCheckout) &&
            Utils.enhancedDeepEquals(this.changePaymentState, other.changePaymentState) &&
            Utils.enhancedDeepEquals(this.dashboard, other.dashboard) &&
            Utils.enhancedDeepEquals(this.refunds, other.refunds) &&
            Utils.enhancedDeepEquals(this.chargebacks, other.chargebacks) &&
            Utils.enhancedDeepEquals(this.captures, other.captures) &&
            Utils.enhancedDeepEquals(this.settlement, other.settlement) &&
            Utils.enhancedDeepEquals(this.customer, other.customer) &&
            Utils.enhancedDeepEquals(this.mandate, other.mandate) &&
            Utils.enhancedDeepEquals(this.subscription, other.subscription) &&
            Utils.enhancedDeepEquals(this.order, other.order) &&
            Utils.enhancedDeepEquals(this.terminal, other.terminal) &&
            Utils.enhancedDeepEquals(this.documentation, other.documentation) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.payOnline, other.payOnline);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            self, checkout, mobileAppCheckout,
            changePaymentState, dashboard, refunds,
            chargebacks, captures, settlement,
            customer, mandate, subscription,
            order, terminal, documentation,
            status, payOnline);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCustomerPaymentCustomersLinks.class,
                "self", self,
                "checkout", checkout,
                "mobileAppCheckout", mobileAppCheckout,
                "changePaymentState", changePaymentState,
                "dashboard", dashboard,
                "refunds", refunds,
                "chargebacks", chargebacks,
                "captures", captures,
                "settlement", settlement,
                "customer", customer,
                "mandate", mandate,
                "subscription", subscription,
                "order", order,
                "terminal", terminal,
                "documentation", documentation,
                "status", status,
                "payOnline", payOnline);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CreateCustomerPaymentCustomersSelf self;

        private Optional<? extends CreateCustomerPaymentCheckout> checkout = Optional.empty();

        private Optional<? extends CreateCustomerPaymentMobileAppCheckout> mobileAppCheckout = Optional.empty();

        private Optional<? extends CreateCustomerPaymentChangePaymentState> changePaymentState = Optional.empty();

        private CreateCustomerPaymentDashboard dashboard;

        private Optional<? extends CreateCustomerPaymentRefunds> refunds = Optional.empty();

        private Optional<? extends CreateCustomerPaymentChargebacks> chargebacks = Optional.empty();

        private Optional<? extends CreateCustomerPaymentCaptures> captures = Optional.empty();

        private Optional<? extends CreateCustomerPaymentSettlement> settlement = Optional.empty();

        private Optional<? extends CreateCustomerPaymentCustomer> customer = Optional.empty();

        private Optional<? extends CreateCustomerPaymentMandate> mandate = Optional.empty();

        private Optional<? extends CreateCustomerPaymentSubscription> subscription = Optional.empty();

        private Optional<? extends CreateCustomerPaymentOrder> order = Optional.empty();

        private Optional<? extends CreateCustomerPaymentTerminal> terminal = Optional.empty();

        private Optional<? extends CreateCustomerPaymentDocumentation> documentation = Optional.empty();

        private Optional<? extends CreateCustomerPaymentCustomersStatus> status = Optional.empty();

        private Optional<? extends CreateCustomerPaymentPayOnline> payOnline = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder self(CreateCustomerPaymentCustomersSelf self) {
            Utils.checkNotNull(self, "self");
            this.self = self;
            return this;
        }


        /**
         * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
         */
        public Builder checkout(CreateCustomerPaymentCheckout checkout) {
            Utils.checkNotNull(checkout, "checkout");
            this.checkout = Optional.ofNullable(checkout);
            return this;
        }

        /**
         * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
         */
        public Builder checkout(Optional<? extends CreateCustomerPaymentCheckout> checkout) {
            Utils.checkNotNull(checkout, "checkout");
            this.checkout = checkout;
            return this;
        }


        /**
         * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
         */
        public Builder mobileAppCheckout(CreateCustomerPaymentMobileAppCheckout mobileAppCheckout) {
            Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
            this.mobileAppCheckout = Optional.ofNullable(mobileAppCheckout);
            return this;
        }

        /**
         * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
         */
        public Builder mobileAppCheckout(Optional<? extends CreateCustomerPaymentMobileAppCheckout> mobileAppCheckout) {
            Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
            this.mobileAppCheckout = mobileAppCheckout;
            return this;
        }


        /**
         * For test mode payments in certain scenarios, a hosted interface is available to help you test different
         * payment states.
         * 
         * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
         * payments are executed without any user interaction.
         * 
         * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
         * chargeback for the test payment.
         */
        public Builder changePaymentState(CreateCustomerPaymentChangePaymentState changePaymentState) {
            Utils.checkNotNull(changePaymentState, "changePaymentState");
            this.changePaymentState = Optional.ofNullable(changePaymentState);
            return this;
        }

        /**
         * For test mode payments in certain scenarios, a hosted interface is available to help you test different
         * payment states.
         * 
         * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
         * payments are executed without any user interaction.
         * 
         * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
         * chargeback for the test payment.
         */
        public Builder changePaymentState(Optional<? extends CreateCustomerPaymentChangePaymentState> changePaymentState) {
            Utils.checkNotNull(changePaymentState, "changePaymentState");
            this.changePaymentState = changePaymentState;
            return this;
        }


        /**
         * Direct link to the payment in the Mollie Dashboard.
         */
        public Builder dashboard(CreateCustomerPaymentDashboard dashboard) {
            Utils.checkNotNull(dashboard, "dashboard");
            this.dashboard = dashboard;
            return this;
        }


        /**
         * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
         */
        public Builder refunds(CreateCustomerPaymentRefunds refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = Optional.ofNullable(refunds);
            return this;
        }

        /**
         * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
         */
        public Builder refunds(Optional<? extends CreateCustomerPaymentRefunds> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = refunds;
            return this;
        }


        /**
         * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
         * payment.
         */
        public Builder chargebacks(CreateCustomerPaymentChargebacks chargebacks) {
            Utils.checkNotNull(chargebacks, "chargebacks");
            this.chargebacks = Optional.ofNullable(chargebacks);
            return this;
        }

        /**
         * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
         * payment.
         */
        public Builder chargebacks(Optional<? extends CreateCustomerPaymentChargebacks> chargebacks) {
            Utils.checkNotNull(chargebacks, "chargebacks");
            this.chargebacks = chargebacks;
            return this;
        }


        /**
         * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
         */
        public Builder captures(CreateCustomerPaymentCaptures captures) {
            Utils.checkNotNull(captures, "captures");
            this.captures = Optional.ofNullable(captures);
            return this;
        }

        /**
         * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
         */
        public Builder captures(Optional<? extends CreateCustomerPaymentCaptures> captures) {
            Utils.checkNotNull(captures, "captures");
            this.captures = captures;
            return this;
        }


        /**
         * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
         * Not present if not yet settled.
         */
        public Builder settlement(CreateCustomerPaymentSettlement settlement) {
            Utils.checkNotNull(settlement, "settlement");
            this.settlement = Optional.ofNullable(settlement);
            return this;
        }

        /**
         * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
         * Not present if not yet settled.
         */
        public Builder settlement(Optional<? extends CreateCustomerPaymentSettlement> settlement) {
            Utils.checkNotNull(settlement, "settlement");
            this.settlement = settlement;
            return this;
        }


        /**
         * The API resource URL of the [customer](get-customer).
         */
        public Builder customer(CreateCustomerPaymentCustomer customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        /**
         * The API resource URL of the [customer](get-customer).
         */
        public Builder customer(Optional<? extends CreateCustomerPaymentCustomer> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }


        /**
         * The API resource URL of the [mandate](get-mandate).
         */
        public Builder mandate(CreateCustomerPaymentMandate mandate) {
            Utils.checkNotNull(mandate, "mandate");
            this.mandate = Optional.ofNullable(mandate);
            return this;
        }

        /**
         * The API resource URL of the [mandate](get-mandate).
         */
        public Builder mandate(Optional<? extends CreateCustomerPaymentMandate> mandate) {
            Utils.checkNotNull(mandate, "mandate");
            this.mandate = mandate;
            return this;
        }


        /**
         * The API resource URL of the [subscription](get-subscription).
         */
        public Builder subscription(CreateCustomerPaymentSubscription subscription) {
            Utils.checkNotNull(subscription, "subscription");
            this.subscription = Optional.ofNullable(subscription);
            return this;
        }

        /**
         * The API resource URL of the [subscription](get-subscription).
         */
        public Builder subscription(Optional<? extends CreateCustomerPaymentSubscription> subscription) {
            Utils.checkNotNull(subscription, "subscription");
            this.subscription = subscription;
            return this;
        }


        /**
         * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
         * order.
         */
        public Builder order(CreateCustomerPaymentOrder order) {
            Utils.checkNotNull(order, "order");
            this.order = Optional.ofNullable(order);
            return this;
        }

        /**
         * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
         * order.
         */
        public Builder order(Optional<? extends CreateCustomerPaymentOrder> order) {
            Utils.checkNotNull(order, "order");
            this.order = order;
            return this;
        }


        /**
         * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
         * point-of-sale payments.
         */
        public Builder terminal(CreateCustomerPaymentTerminal terminal) {
            Utils.checkNotNull(terminal, "terminal");
            this.terminal = Optional.ofNullable(terminal);
            return this;
        }

        /**
         * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
         * point-of-sale payments.
         */
        public Builder terminal(Optional<? extends CreateCustomerPaymentTerminal> terminal) {
            Utils.checkNotNull(terminal, "terminal");
            this.terminal = terminal;
            return this;
        }


        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder documentation(CreateCustomerPaymentDocumentation documentation) {
            Utils.checkNotNull(documentation, "documentation");
            this.documentation = Optional.ofNullable(documentation);
            return this;
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder documentation(Optional<? extends CreateCustomerPaymentDocumentation> documentation) {
            Utils.checkNotNull(documentation, "documentation");
            this.documentation = documentation;
            return this;
        }


        /**
         * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
         * successful).
         */
        public Builder status(CreateCustomerPaymentCustomersStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
         * successful).
         */
        public Builder status(Optional<? extends CreateCustomerPaymentCustomersStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
         * bank transfer.
         */
        public Builder payOnline(CreateCustomerPaymentPayOnline payOnline) {
            Utils.checkNotNull(payOnline, "payOnline");
            this.payOnline = Optional.ofNullable(payOnline);
            return this;
        }

        /**
         * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
         * bank transfer.
         */
        public Builder payOnline(Optional<? extends CreateCustomerPaymentPayOnline> payOnline) {
            Utils.checkNotNull(payOnline, "payOnline");
            this.payOnline = payOnline;
            return this;
        }

        public CreateCustomerPaymentCustomersLinks build() {

            return new CreateCustomerPaymentCustomersLinks(
                self, checkout, mobileAppCheckout,
                changePaymentState, dashboard, refunds,
                chargebacks, captures, settlement,
                customer, mandate, subscription,
                order, terminal, documentation,
                status, payOnline);
        }

    }
}
