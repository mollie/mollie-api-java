/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListSettlementsRequest {

    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=from")
    private Optional<String> from;

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private JsonNullable<Long> limit;

    /**
     * Provide the token of the balance to filter the settlements by. This is the balance token that the settlement was settled to.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=balanceId")
    private JsonNullable<String> balanceId;

    @JsonCreator
    public ListSettlementsRequest(
            Optional<String> from,
            JsonNullable<Long> limit,
            JsonNullable<String> balanceId) {
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(balanceId, "balanceId");
        this.from = from;
        this.limit = limit;
        this.balanceId = balanceId;
    }
    
    public ListSettlementsRequest() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
     */
    @JsonIgnore
    public Optional<String> from() {
        return from;
    }

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    @JsonIgnore
    public JsonNullable<Long> limit() {
        return limit;
    }

    /**
     * Provide the token of the balance to filter the settlements by. This is the balance token that the settlement was settled to.
     */
    @JsonIgnore
    public JsonNullable<String> balanceId() {
        return balanceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
     */
    public ListSettlementsRequest withFrom(String from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }

    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
     */
    public ListSettlementsRequest withFrom(Optional<String> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    public ListSettlementsRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = JsonNullable.of(limit);
        return this;
    }

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    public ListSettlementsRequest withLimit(JsonNullable<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Provide the token of the balance to filter the settlements by. This is the balance token that the settlement was settled to.
     */
    public ListSettlementsRequest withBalanceId(String balanceId) {
        Utils.checkNotNull(balanceId, "balanceId");
        this.balanceId = JsonNullable.of(balanceId);
        return this;
    }

    /**
     * Provide the token of the balance to filter the settlements by. This is the balance token that the settlement was settled to.
     */
    public ListSettlementsRequest withBalanceId(JsonNullable<String> balanceId) {
        Utils.checkNotNull(balanceId, "balanceId");
        this.balanceId = balanceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListSettlementsRequest other = (ListSettlementsRequest) o;
        return 
            Objects.deepEquals(this.from, other.from) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.balanceId, other.balanceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            from,
            limit,
            balanceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListSettlementsRequest.class,
                "from", from,
                "limit", limit,
                "balanceId", balanceId);
    }
    
    public final static class Builder {
 
        private Optional<String> from = Optional.empty();
 
        private JsonNullable<Long> limit;
 
        private JsonNullable<String> balanceId = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
         */
        public Builder from(String from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        /**
         * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
         */
        public Builder from(Optional<String> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        /**
         * The maximum number of items to return. Defaults to 50 items.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = JsonNullable.of(limit);
            return this;
        }

        /**
         * The maximum number of items to return. Defaults to 50 items.
         */
        public Builder limit(JsonNullable<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * Provide the token of the balance to filter the settlements by. This is the balance token that the settlement was settled to.
         */
        public Builder balanceId(String balanceId) {
            Utils.checkNotNull(balanceId, "balanceId");
            this.balanceId = JsonNullable.of(balanceId);
            return this;
        }

        /**
         * Provide the token of the balance to filter the settlements by. This is the balance token that the settlement was settled to.
         */
        public Builder balanceId(JsonNullable<String> balanceId) {
            Utils.checkNotNull(balanceId, "balanceId");
            this.balanceId = balanceId;
            return this;
        }
        
        public ListSettlementsRequest build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }            return new ListSettlementsRequest(
                from,
                limit,
                balanceId);
        }

        private static final LazySingletonValue<JsonNullable<Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "50",
                        new TypeReference<JsonNullable<Long>>() {});
    }
}

