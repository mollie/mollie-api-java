/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Profile {

    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    private Optional<String> website;

    /**
     * The email address associated with the profile's trade name or brand.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<String> phone;

    /**
     * The products or services offered by the profile's website or application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessCategory")
    private Optional<String> businessCategory;

    @JsonCreator
    public Profile(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("website") Optional<String> website,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("phone") Optional<String> phone,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("businessCategory") Optional<String> businessCategory) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(website, "website");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(businessCategory, "businessCategory");
        this.name = name;
        this.website = website;
        this.email = email;
        this.phone = phone;
        this.description = description;
        this.businessCategory = businessCategory;
    }
    
    public Profile() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    @JsonIgnore
    public Optional<String> website() {
        return website;
    }

    /**
     * The email address associated with the profile's trade name or brand.
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    @JsonIgnore
    public Optional<String> phone() {
        return phone;
    }

    /**
     * The products or services offered by the profile's website or application.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
     */
    @JsonIgnore
    public Optional<String> businessCategory() {
        return businessCategory;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    public Profile withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
     */
    public Profile withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    public Profile withWebsite(String website) {
        Utils.checkNotNull(website, "website");
        this.website = Optional.ofNullable(website);
        return this;
    }

    /**
     * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
     */
    public Profile withWebsite(Optional<String> website) {
        Utils.checkNotNull(website, "website");
        this.website = website;
        return this;
    }

    /**
     * The email address associated with the profile's trade name or brand.
     */
    public Profile withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * The email address associated with the profile's trade name or brand.
     */
    public Profile withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    public Profile withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    /**
     * The phone number associated with the profile's trade name or brand.
     */
    public Profile withPhone(Optional<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * The products or services offered by the profile's website or application.
     */
    public Profile withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * The products or services offered by the profile's website or application.
     */
    public Profile withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
     */
    public Profile withBusinessCategory(String businessCategory) {
        Utils.checkNotNull(businessCategory, "businessCategory");
        this.businessCategory = Optional.ofNullable(businessCategory);
        return this;
    }

    /**
     * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
     */
    public Profile withBusinessCategory(Optional<String> businessCategory) {
        Utils.checkNotNull(businessCategory, "businessCategory");
        this.businessCategory = businessCategory;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Profile other = (Profile) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.website, other.website) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.businessCategory, other.businessCategory);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            website,
            email,
            phone,
            description,
            businessCategory);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Profile.class,
                "name", name,
                "website", website,
                "email", email,
                "phone", phone,
                "description", description,
                "businessCategory", businessCategory);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> website = Optional.empty();
 
        private Optional<String> email = Optional.empty();
 
        private Optional<String> phone = Optional.empty();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private Optional<String> businessCategory = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The profile's name, this will usually reflect the trade name or brand name of the profile's website or application.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
         */
        public Builder website(String website) {
            Utils.checkNotNull(website, "website");
            this.website = Optional.ofNullable(website);
            return this;
        }

        /**
         * The URL to the profile's website or application. Only `https` or `http` URLs are allowed. No `@` signs are allowed.
         */
        public Builder website(Optional<String> website) {
            Utils.checkNotNull(website, "website");
            this.website = website;
            return this;
        }

        /**
         * The email address associated with the profile's trade name or brand.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * The email address associated with the profile's trade name or brand.
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The phone number associated with the profile's trade name or brand.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * The phone number associated with the profile's trade name or brand.
         */
        public Builder phone(Optional<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * The products or services offered by the profile's website or application.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The products or services offered by the profile's website or application.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
         */
        public Builder businessCategory(String businessCategory) {
            Utils.checkNotNull(businessCategory, "businessCategory");
            this.businessCategory = Optional.ofNullable(businessCategory);
            return this;
        }

        /**
         * The industry associated with the profile's trade name or brand. Please refer to the [business category list](common-data-types) for all possible options.
         */
        public Builder businessCategory(Optional<String> businessCategory) {
            Utils.checkNotNull(businessCategory, "businessCategory");
            this.businessCategory = businessCategory;
            return this;
        }
        
        public Profile build() {
            return new Profile(
                name,
                website,
                email,
                phone,
                description,
                businessCategory);
        }
    }
}
