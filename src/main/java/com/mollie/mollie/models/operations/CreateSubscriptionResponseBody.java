/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * CreateSubscriptionResponseBody
 * 
 * <p>The newly created subscription object.
 */
public class CreateSubscriptionResponseBody {
    /**
     * Indicates the response contains a subscription object. Will always contain the string `subscription` for this
     * endpoint.
     */
    @JsonProperty("resource")
    private String resource;

    /**
     * The identifier uniquely referring to this subscription. Example: `sub_rVKGtNd6s3`.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonProperty("mode")
    private CreateSubscriptionMode mode;

    /**
     * The subscription's current status is directly related to the status of the underlying customer or mandate that is
     * enabling the subscription.
     */
    @JsonProperty("status")
    private CreateSubscriptionStatus status;

    /**
     * The amount for each individual payment that is charged with this subscription. For example, for a monthly
     * subscription of €10, the subscription amount should be set to €10.
     */
    @JsonProperty("amount")
    private CreateSubscriptionSubscriptionsResponseAmount amount;

    /**
     * Total number of payments for the subscription. Once this number of payments is reached, the subscription is
     * considered completed.
     * 
     * <p>Test mode subscriptions will get canceled automatically after 10 payments.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("times")
    private Optional<Long> times;

    /**
     * Number of payments left for the subscription.
     */
    @JsonProperty("timesRemaining")
    private long timesRemaining;

    /**
     * Interval to wait between payments, for example `1 month` or `14 days`.
     * 
     * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
     */
    @JsonProperty("interval")
    private CreateSubscriptionSubscriptionsInterval interval;

    /**
     * The start date of the subscription in `YYYY-MM-DD` format.
     */
    @JsonProperty("startDate")
    private String startDate;

    /**
     * The date of the next scheduled payment in `YYYY-MM-DD` format. If the subscription has been completed or canceled,
     * this parameter will not be returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextPaymentDate")
    private JsonNullable<String> nextPaymentDate;

    /**
     * The subscription's description will be used as the description of the resulting individual payments and so showing
     * up on the bank statement of the consumer.
     * 
     * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("method")
    private Optional<? extends CreateSubscriptionSubscriptionsMethod> method;

    /**
     * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
     * 
     * <p>Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
     * information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationFee")
    private Optional<? extends CreateSubscriptionSubscriptionsApplicationFee> applicationFee;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
     * Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
     * 1kB.
     * 
     * <p>Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("metadata")
    private Optional<? extends CreateSubscriptionSubscriptionsMetadata> metadata;

    /**
     * We will call this URL for any payment status changes of payments resulting from this subscription.
     * 
     * <p>This webhook will receive **all** events for the subscription's payments. This may include payment failures as
     * well. Be sure to verify the payment's subscription ID and its status.
     */
    @JsonProperty("webhookUrl")
    private String webhookUrl;

    /**
     * The customer this subscription belongs to.
     */
    @JsonProperty("customerId")
    private String customerId;

    /**
     * The mandate used for this subscription, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandateId")
    private JsonNullable<String> mandateId;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonProperty("createdAt")
    private String createdAt;

    /**
     * The subscription's date and time of cancellation, in ISO 8601 format. This parameter is omitted if the
     * subscription is not canceled (yet).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canceledAt")
    private JsonNullable<String> canceledAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends CreateSubscriptionLinks> links;

    @JsonCreator
    public CreateSubscriptionResponseBody(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") String id,
            @JsonProperty("mode") CreateSubscriptionMode mode,
            @JsonProperty("status") CreateSubscriptionStatus status,
            @JsonProperty("amount") CreateSubscriptionSubscriptionsResponseAmount amount,
            @JsonProperty("times") Optional<Long> times,
            @JsonProperty("timesRemaining") long timesRemaining,
            @JsonProperty("interval") CreateSubscriptionSubscriptionsInterval interval,
            @JsonProperty("startDate") String startDate,
            @JsonProperty("nextPaymentDate") JsonNullable<String> nextPaymentDate,
            @JsonProperty("description") String description,
            @JsonProperty("method") Optional<? extends CreateSubscriptionSubscriptionsMethod> method,
            @JsonProperty("applicationFee") Optional<? extends CreateSubscriptionSubscriptionsApplicationFee> applicationFee,
            @JsonProperty("metadata") Optional<? extends CreateSubscriptionSubscriptionsMetadata> metadata,
            @JsonProperty("webhookUrl") String webhookUrl,
            @JsonProperty("customerId") String customerId,
            @JsonProperty("mandateId") JsonNullable<String> mandateId,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("canceledAt") JsonNullable<String> canceledAt,
            @JsonProperty("_links") Optional<? extends CreateSubscriptionLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(times, "times");
        Utils.checkNotNull(timesRemaining, "timesRemaining");
        Utils.checkNotNull(interval, "interval");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(nextPaymentDate, "nextPaymentDate");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(applicationFee, "applicationFee");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(mandateId, "mandateId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(canceledAt, "canceledAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.status = status;
        this.amount = amount;
        this.times = times;
        this.timesRemaining = timesRemaining;
        this.interval = interval;
        this.startDate = startDate;
        this.nextPaymentDate = nextPaymentDate;
        this.description = description;
        this.method = method;
        this.applicationFee = applicationFee;
        this.metadata = metadata;
        this.webhookUrl = webhookUrl;
        this.customerId = customerId;
        this.mandateId = mandateId;
        this.createdAt = createdAt;
        this.canceledAt = canceledAt;
        this.links = links;
    }
    
    public CreateSubscriptionResponseBody(
            String resource,
            String id,
            CreateSubscriptionMode mode,
            CreateSubscriptionStatus status,
            CreateSubscriptionSubscriptionsResponseAmount amount,
            long timesRemaining,
            CreateSubscriptionSubscriptionsInterval interval,
            String startDate,
            String description,
            String webhookUrl,
            String customerId,
            String createdAt) {
        this(resource, id, mode,
            status, amount, Optional.empty(),
            timesRemaining, interval, startDate,
            JsonNullable.undefined(), description, Optional.empty(),
            Optional.empty(), Optional.empty(), webhookUrl,
            customerId, JsonNullable.undefined(), createdAt,
            JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Indicates the response contains a subscription object. Will always contain the string `subscription` for this
     * endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this subscription. Example: `sub_rVKGtNd6s3`.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonIgnore
    public CreateSubscriptionMode mode() {
        return mode;
    }

    /**
     * The subscription's current status is directly related to the status of the underlying customer or mandate that is
     * enabling the subscription.
     */
    @JsonIgnore
    public CreateSubscriptionStatus status() {
        return status;
    }

    /**
     * The amount for each individual payment that is charged with this subscription. For example, for a monthly
     * subscription of €10, the subscription amount should be set to €10.
     */
    @JsonIgnore
    public CreateSubscriptionSubscriptionsResponseAmount amount() {
        return amount;
    }

    /**
     * Total number of payments for the subscription. Once this number of payments is reached, the subscription is
     * considered completed.
     * 
     * <p>Test mode subscriptions will get canceled automatically after 10 payments.
     */
    @JsonIgnore
    public Optional<Long> times() {
        return times;
    }

    /**
     * Number of payments left for the subscription.
     */
    @JsonIgnore
    public long timesRemaining() {
        return timesRemaining;
    }

    /**
     * Interval to wait between payments, for example `1 month` or `14 days`.
     * 
     * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
     */
    @JsonIgnore
    public CreateSubscriptionSubscriptionsInterval interval() {
        return interval;
    }

    /**
     * The start date of the subscription in `YYYY-MM-DD` format.
     */
    @JsonIgnore
    public String startDate() {
        return startDate;
    }

    /**
     * The date of the next scheduled payment in `YYYY-MM-DD` format. If the subscription has been completed or canceled,
     * this parameter will not be returned.
     */
    @JsonIgnore
    public JsonNullable<String> nextPaymentDate() {
        return nextPaymentDate;
    }

    /**
     * The subscription's description will be used as the description of the resulting individual payments and so showing
     * up on the bank statement of the consumer.
     * 
     * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateSubscriptionSubscriptionsMethod> method() {
        return (Optional<CreateSubscriptionSubscriptionsMethod>) method;
    }

    /**
     * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
     * 
     * <p>Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
     * information.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateSubscriptionSubscriptionsApplicationFee> applicationFee() {
        return (Optional<CreateSubscriptionSubscriptionsApplicationFee>) applicationFee;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
     * Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
     * 1kB.
     * 
     * <p>Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateSubscriptionSubscriptionsMetadata> metadata() {
        return (Optional<CreateSubscriptionSubscriptionsMetadata>) metadata;
    }

    /**
     * We will call this URL for any payment status changes of payments resulting from this subscription.
     * 
     * <p>This webhook will receive **all** events for the subscription's payments. This may include payment failures as
     * well. Be sure to verify the payment's subscription ID and its status.
     */
    @JsonIgnore
    public String webhookUrl() {
        return webhookUrl;
    }

    /**
     * The customer this subscription belongs to.
     */
    @JsonIgnore
    public String customerId() {
        return customerId;
    }

    /**
     * The mandate used for this subscription, if any.
     */
    @JsonIgnore
    public JsonNullable<String> mandateId() {
        return mandateId;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    /**
     * The subscription's date and time of cancellation, in ISO 8601 format. This parameter is omitted if the
     * subscription is not canceled (yet).
     */
    @JsonIgnore
    public JsonNullable<String> canceledAt() {
        return canceledAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateSubscriptionLinks> links() {
        return (Optional<CreateSubscriptionLinks>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a subscription object. Will always contain the string `subscription` for this
     * endpoint.
     */
    public CreateSubscriptionResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this subscription. Example: `sub_rVKGtNd6s3`.
     */
    public CreateSubscriptionResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public CreateSubscriptionResponseBody withMode(CreateSubscriptionMode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The subscription's current status is directly related to the status of the underlying customer or mandate that is
     * enabling the subscription.
     */
    public CreateSubscriptionResponseBody withStatus(CreateSubscriptionStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The amount for each individual payment that is charged with this subscription. For example, for a monthly
     * subscription of €10, the subscription amount should be set to €10.
     */
    public CreateSubscriptionResponseBody withAmount(CreateSubscriptionSubscriptionsResponseAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Total number of payments for the subscription. Once this number of payments is reached, the subscription is
     * considered completed.
     * 
     * <p>Test mode subscriptions will get canceled automatically after 10 payments.
     */
    public CreateSubscriptionResponseBody withTimes(long times) {
        Utils.checkNotNull(times, "times");
        this.times = Optional.ofNullable(times);
        return this;
    }


    /**
     * Total number of payments for the subscription. Once this number of payments is reached, the subscription is
     * considered completed.
     * 
     * <p>Test mode subscriptions will get canceled automatically after 10 payments.
     */
    public CreateSubscriptionResponseBody withTimes(Optional<Long> times) {
        Utils.checkNotNull(times, "times");
        this.times = times;
        return this;
    }

    /**
     * Number of payments left for the subscription.
     */
    public CreateSubscriptionResponseBody withTimesRemaining(long timesRemaining) {
        Utils.checkNotNull(timesRemaining, "timesRemaining");
        this.timesRemaining = timesRemaining;
        return this;
    }

    /**
     * Interval to wait between payments, for example `1 month` or `14 days`.
     * 
     * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
     */
    public CreateSubscriptionResponseBody withInterval(CreateSubscriptionSubscriptionsInterval interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = interval;
        return this;
    }

    /**
     * The start date of the subscription in `YYYY-MM-DD` format.
     */
    public CreateSubscriptionResponseBody withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The date of the next scheduled payment in `YYYY-MM-DD` format. If the subscription has been completed or canceled,
     * this parameter will not be returned.
     */
    public CreateSubscriptionResponseBody withNextPaymentDate(String nextPaymentDate) {
        Utils.checkNotNull(nextPaymentDate, "nextPaymentDate");
        this.nextPaymentDate = JsonNullable.of(nextPaymentDate);
        return this;
    }

    /**
     * The date of the next scheduled payment in `YYYY-MM-DD` format. If the subscription has been completed or canceled,
     * this parameter will not be returned.
     */
    public CreateSubscriptionResponseBody withNextPaymentDate(JsonNullable<String> nextPaymentDate) {
        Utils.checkNotNull(nextPaymentDate, "nextPaymentDate");
        this.nextPaymentDate = nextPaymentDate;
        return this;
    }

    /**
     * The subscription's description will be used as the description of the resulting individual payments and so showing
     * up on the bank statement of the consumer.
     * 
     * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
     */
    public CreateSubscriptionResponseBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
     */
    public CreateSubscriptionResponseBody withMethod(CreateSubscriptionSubscriptionsMethod method) {
        Utils.checkNotNull(method, "method");
        this.method = Optional.ofNullable(method);
        return this;
    }


    /**
     * The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
     */
    public CreateSubscriptionResponseBody withMethod(Optional<? extends CreateSubscriptionSubscriptionsMethod> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
     * 
     * <p>Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
     * information.
     */
    public CreateSubscriptionResponseBody withApplicationFee(CreateSubscriptionSubscriptionsApplicationFee applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = Optional.ofNullable(applicationFee);
        return this;
    }


    /**
     * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
     * 
     * <p>Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
     * information.
     */
    public CreateSubscriptionResponseBody withApplicationFee(Optional<? extends CreateSubscriptionSubscriptionsApplicationFee> applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = applicationFee;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
     * Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
     * 1kB.
     * 
     * <p>Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
     */
    public CreateSubscriptionResponseBody withMetadata(CreateSubscriptionSubscriptionsMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }


    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
     * Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
     * 1kB.
     * 
     * <p>Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
     */
    public CreateSubscriptionResponseBody withMetadata(Optional<? extends CreateSubscriptionSubscriptionsMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * We will call this URL for any payment status changes of payments resulting from this subscription.
     * 
     * <p>This webhook will receive **all** events for the subscription's payments. This may include payment failures as
     * well. Be sure to verify the payment's subscription ID and its status.
     */
    public CreateSubscriptionResponseBody withWebhookUrl(String webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = webhookUrl;
        return this;
    }

    /**
     * The customer this subscription belongs to.
     */
    public CreateSubscriptionResponseBody withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * The mandate used for this subscription, if any.
     */
    public CreateSubscriptionResponseBody withMandateId(String mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = JsonNullable.of(mandateId);
        return this;
    }

    /**
     * The mandate used for this subscription, if any.
     */
    public CreateSubscriptionResponseBody withMandateId(JsonNullable<String> mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = mandateId;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public CreateSubscriptionResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The subscription's date and time of cancellation, in ISO 8601 format. This parameter is omitted if the
     * subscription is not canceled (yet).
     */
    public CreateSubscriptionResponseBody withCanceledAt(String canceledAt) {
        Utils.checkNotNull(canceledAt, "canceledAt");
        this.canceledAt = JsonNullable.of(canceledAt);
        return this;
    }

    /**
     * The subscription's date and time of cancellation, in ISO 8601 format. This parameter is omitted if the
     * subscription is not canceled (yet).
     */
    public CreateSubscriptionResponseBody withCanceledAt(JsonNullable<String> canceledAt) {
        Utils.checkNotNull(canceledAt, "canceledAt");
        this.canceledAt = canceledAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public CreateSubscriptionResponseBody withLinks(CreateSubscriptionLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public CreateSubscriptionResponseBody withLinks(Optional<? extends CreateSubscriptionLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateSubscriptionResponseBody other = (CreateSubscriptionResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.times, other.times) &&
            Utils.enhancedDeepEquals(this.timesRemaining, other.timesRemaining) &&
            Utils.enhancedDeepEquals(this.interval, other.interval) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.nextPaymentDate, other.nextPaymentDate) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.applicationFee, other.applicationFee) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.webhookUrl, other.webhookUrl) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.mandateId, other.mandateId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.canceledAt, other.canceledAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, mode,
            status, amount, times,
            timesRemaining, interval, startDate,
            nextPaymentDate, description, method,
            applicationFee, metadata, webhookUrl,
            customerId, mandateId, createdAt,
            canceledAt, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateSubscriptionResponseBody.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "status", status,
                "amount", amount,
                "times", times,
                "timesRemaining", timesRemaining,
                "interval", interval,
                "startDate", startDate,
                "nextPaymentDate", nextPaymentDate,
                "description", description,
                "method", method,
                "applicationFee", applicationFee,
                "metadata", metadata,
                "webhookUrl", webhookUrl,
                "customerId", customerId,
                "mandateId", mandateId,
                "createdAt", createdAt,
                "canceledAt", canceledAt,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private String id;

        private CreateSubscriptionMode mode;

        private CreateSubscriptionStatus status;

        private CreateSubscriptionSubscriptionsResponseAmount amount;

        private Optional<Long> times = Optional.empty();

        private Long timesRemaining;

        private CreateSubscriptionSubscriptionsInterval interval;

        private String startDate;

        private JsonNullable<String> nextPaymentDate = JsonNullable.undefined();

        private String description;

        private Optional<? extends CreateSubscriptionSubscriptionsMethod> method = Optional.empty();

        private Optional<? extends CreateSubscriptionSubscriptionsApplicationFee> applicationFee = Optional.empty();

        private Optional<? extends CreateSubscriptionSubscriptionsMetadata> metadata = Optional.empty();

        private String webhookUrl;

        private String customerId;

        private JsonNullable<String> mandateId = JsonNullable.undefined();

        private String createdAt;

        private JsonNullable<String> canceledAt = JsonNullable.undefined();

        private Optional<? extends CreateSubscriptionLinks> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a subscription object. Will always contain the string `subscription` for this
         * endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this subscription. Example: `sub_rVKGtNd6s3`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(CreateSubscriptionMode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * The subscription's current status is directly related to the status of the underlying customer or mandate that is
         * enabling the subscription.
         */
        public Builder status(CreateSubscriptionStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The amount for each individual payment that is charged with this subscription. For example, for a monthly
         * subscription of €10, the subscription amount should be set to €10.
         */
        public Builder amount(CreateSubscriptionSubscriptionsResponseAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Total number of payments for the subscription. Once this number of payments is reached, the subscription is
         * considered completed.
         * 
         * <p>Test mode subscriptions will get canceled automatically after 10 payments.
         */
        public Builder times(long times) {
            Utils.checkNotNull(times, "times");
            this.times = Optional.ofNullable(times);
            return this;
        }

        /**
         * Total number of payments for the subscription. Once this number of payments is reached, the subscription is
         * considered completed.
         * 
         * <p>Test mode subscriptions will get canceled automatically after 10 payments.
         */
        public Builder times(Optional<Long> times) {
            Utils.checkNotNull(times, "times");
            this.times = times;
            return this;
        }


        /**
         * Number of payments left for the subscription.
         */
        public Builder timesRemaining(long timesRemaining) {
            Utils.checkNotNull(timesRemaining, "timesRemaining");
            this.timesRemaining = timesRemaining;
            return this;
        }


        /**
         * Interval to wait between payments, for example `1 month` or `14 days`.
         * 
         * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
         */
        public Builder interval(CreateSubscriptionSubscriptionsInterval interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = interval;
            return this;
        }


        /**
         * The start date of the subscription in `YYYY-MM-DD` format.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        /**
         * The date of the next scheduled payment in `YYYY-MM-DD` format. If the subscription has been completed or canceled,
         * this parameter will not be returned.
         */
        public Builder nextPaymentDate(String nextPaymentDate) {
            Utils.checkNotNull(nextPaymentDate, "nextPaymentDate");
            this.nextPaymentDate = JsonNullable.of(nextPaymentDate);
            return this;
        }

        /**
         * The date of the next scheduled payment in `YYYY-MM-DD` format. If the subscription has been completed or canceled,
         * this parameter will not be returned.
         */
        public Builder nextPaymentDate(JsonNullable<String> nextPaymentDate) {
            Utils.checkNotNull(nextPaymentDate, "nextPaymentDate");
            this.nextPaymentDate = nextPaymentDate;
            return this;
        }


        /**
         * The subscription's description will be used as the description of the resulting individual payments and so showing
         * up on the bank statement of the consumer.
         * 
         * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
         */
        public Builder method(CreateSubscriptionSubscriptionsMethod method) {
            Utils.checkNotNull(method, "method");
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
         */
        public Builder method(Optional<? extends CreateSubscriptionSubscriptionsMethod> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }


        /**
         * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
         * merchants.
         * 
         * <p>Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
         * 
         * <p>Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
         * information.
         */
        public Builder applicationFee(CreateSubscriptionSubscriptionsApplicationFee applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = Optional.ofNullable(applicationFee);
            return this;
        }

        /**
         * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
         * merchants.
         * 
         * <p>Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
         * 
         * <p>Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
         * information.
         */
        public Builder applicationFee(Optional<? extends CreateSubscriptionSubscriptionsApplicationFee> applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = applicationFee;
            return this;
        }


        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
         * Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
         * 1kB.
         * 
         * <p>Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
         */
        public Builder metadata(CreateSubscriptionSubscriptionsMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
         * Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
         * 1kB.
         * 
         * <p>Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
         */
        public Builder metadata(Optional<? extends CreateSubscriptionSubscriptionsMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * We will call this URL for any payment status changes of payments resulting from this subscription.
         * 
         * <p>This webhook will receive **all** events for the subscription's payments. This may include payment failures as
         * well. Be sure to verify the payment's subscription ID and its status.
         */
        public Builder webhookUrl(String webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = webhookUrl;
            return this;
        }


        /**
         * The customer this subscription belongs to.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * The mandate used for this subscription, if any.
         */
        public Builder mandateId(String mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = JsonNullable.of(mandateId);
            return this;
        }

        /**
         * The mandate used for this subscription, if any.
         */
        public Builder mandateId(JsonNullable<String> mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = mandateId;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The subscription's date and time of cancellation, in ISO 8601 format. This parameter is omitted if the
         * subscription is not canceled (yet).
         */
        public Builder canceledAt(String canceledAt) {
            Utils.checkNotNull(canceledAt, "canceledAt");
            this.canceledAt = JsonNullable.of(canceledAt);
            return this;
        }

        /**
         * The subscription's date and time of cancellation, in ISO 8601 format. This parameter is omitted if the
         * subscription is not canceled (yet).
         */
        public Builder canceledAt(JsonNullable<String> canceledAt) {
            Utils.checkNotNull(canceledAt, "canceledAt");
            this.canceledAt = canceledAt;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(CreateSubscriptionLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends CreateSubscriptionLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public CreateSubscriptionResponseBody build() {

            return new CreateSubscriptionResponseBody(
                resource, id, mode,
                status, amount, times,
                timesRemaining, interval, startDate,
                nextPaymentDate, description, method,
                applicationFee, metadata, webhookUrl,
                customerId, mandateId, createdAt,
                canceledAt, links);
        }

    }
}
