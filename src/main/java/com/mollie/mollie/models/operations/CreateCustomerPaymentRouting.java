/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateCustomerPaymentRouting {

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends CreateCustomerPaymentCustomersRequestRequestBodyAmount> amount;

    /**
     * The destination of this portion of the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination")
    private Optional<? extends CreateCustomerPaymentDestination> destination;

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
     * 
     * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("releaseDate")
    private JsonNullable<String> releaseDate;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private JsonNullable<? extends CreateCustomerPaymentLinks> links;

    @JsonCreator
    public CreateCustomerPaymentRouting(
            @JsonProperty("amount") Optional<? extends CreateCustomerPaymentCustomersRequestRequestBodyAmount> amount,
            @JsonProperty("destination") Optional<? extends CreateCustomerPaymentDestination> destination,
            @JsonProperty("releaseDate") JsonNullable<String> releaseDate,
            @JsonProperty("_links") JsonNullable<? extends CreateCustomerPaymentLinks> links) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(destination, "destination");
        Utils.checkNotNull(releaseDate, "releaseDate");
        Utils.checkNotNull(links, "links");
        this.amount = amount;
        this.destination = destination;
        this.releaseDate = releaseDate;
        this.links = links;
    }
    
    public CreateCustomerPaymentRouting() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentCustomersRequestRequestBodyAmount> amount() {
        return (Optional<CreateCustomerPaymentCustomersRequestRequestBodyAmount>) amount;
    }

    /**
     * The destination of this portion of the payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentDestination> destination() {
        return (Optional<CreateCustomerPaymentDestination>) destination;
    }

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
     * 
     * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    @JsonIgnore
    public JsonNullable<String> releaseDate() {
        return releaseDate;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateCustomerPaymentLinks> links() {
        return (JsonNullable<CreateCustomerPaymentLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    public CreateCustomerPaymentRouting withAmount(CreateCustomerPaymentCustomersRequestRequestBodyAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    public CreateCustomerPaymentRouting withAmount(Optional<? extends CreateCustomerPaymentCustomersRequestRequestBodyAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The destination of this portion of the payment.
     */
    public CreateCustomerPaymentRouting withDestination(CreateCustomerPaymentDestination destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = Optional.ofNullable(destination);
        return this;
    }

    /**
     * The destination of this portion of the payment.
     */
    public CreateCustomerPaymentRouting withDestination(Optional<? extends CreateCustomerPaymentDestination> destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = destination;
        return this;
    }

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
     * 
     * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    public CreateCustomerPaymentRouting withReleaseDate(String releaseDate) {
        Utils.checkNotNull(releaseDate, "releaseDate");
        this.releaseDate = JsonNullable.of(releaseDate);
        return this;
    }

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
     * 
     * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    public CreateCustomerPaymentRouting withReleaseDate(JsonNullable<String> releaseDate) {
        Utils.checkNotNull(releaseDate, "releaseDate");
        this.releaseDate = releaseDate;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public CreateCustomerPaymentRouting withLinks(CreateCustomerPaymentLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = JsonNullable.of(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public CreateCustomerPaymentRouting withLinks(JsonNullable<? extends CreateCustomerPaymentLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCustomerPaymentRouting other = (CreateCustomerPaymentRouting) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.destination, other.destination) &&
            Objects.deepEquals(this.releaseDate, other.releaseDate) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            destination,
            releaseDate,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCustomerPaymentRouting.class,
                "amount", amount,
                "destination", destination,
                "releaseDate", releaseDate,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<? extends CreateCustomerPaymentCustomersRequestRequestBodyAmount> amount = Optional.empty();
 
        private Optional<? extends CreateCustomerPaymentDestination> destination = Optional.empty();
 
        private JsonNullable<String> releaseDate = JsonNullable.undefined();
 
        private JsonNullable<? extends CreateCustomerPaymentLinks> links = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
         */
        public Builder amount(CreateCustomerPaymentCustomersRequestRequestBodyAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
         */
        public Builder amount(Optional<? extends CreateCustomerPaymentCustomersRequestRequestBodyAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The destination of this portion of the payment.
         */
        public Builder destination(CreateCustomerPaymentDestination destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = Optional.ofNullable(destination);
            return this;
        }

        /**
         * The destination of this portion of the payment.
         */
        public Builder destination(Optional<? extends CreateCustomerPaymentDestination> destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = destination;
            return this;
        }

        /**
         * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
         * 
         * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
         */
        public Builder releaseDate(String releaseDate) {
            Utils.checkNotNull(releaseDate, "releaseDate");
            this.releaseDate = JsonNullable.of(releaseDate);
            return this;
        }

        /**
         * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
         * 
         * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
         */
        public Builder releaseDate(JsonNullable<String> releaseDate) {
            Utils.checkNotNull(releaseDate, "releaseDate");
            this.releaseDate = releaseDate;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(CreateCustomerPaymentLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = JsonNullable.of(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(JsonNullable<? extends CreateCustomerPaymentLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public CreateCustomerPaymentRouting build() {
            return new CreateCustomerPaymentRouting(
                amount,
                destination,
                releaseDate,
                links);
        }
    }
}
