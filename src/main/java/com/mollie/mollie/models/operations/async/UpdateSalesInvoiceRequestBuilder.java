/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations.async;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.SDKConfiguration;
import com.mollie.mollie.models.operations.UpdateSalesInvoiceRequest;
import com.mollie.mollie.models.operations.UpdateSalesInvoiceRequestBody;
import com.mollie.mollie.operations.UpdateSalesInvoice;
import com.mollie.mollie.utils.Options;
import com.mollie.mollie.utils.RetryConfig;
import com.mollie.mollie.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class UpdateSalesInvoiceRequestBuilder {

    private String id;
    private Optional<? extends UpdateSalesInvoiceRequestBody> requestBody = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public UpdateSalesInvoiceRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public UpdateSalesInvoiceRequestBuilder id(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }
                
    public UpdateSalesInvoiceRequestBuilder requestBody(UpdateSalesInvoiceRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.of(requestBody);
        return this;
    }

    public UpdateSalesInvoiceRequestBuilder requestBody(Optional<? extends UpdateSalesInvoiceRequestBody> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
                
    public UpdateSalesInvoiceRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public UpdateSalesInvoiceRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private UpdateSalesInvoiceRequest buildRequest() {

        UpdateSalesInvoiceRequest request = new UpdateSalesInvoiceRequest(id,
            requestBody);

        return request;
    }

    public CompletableFuture<UpdateSalesInvoiceResponse> call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        AsyncRequestOperation<UpdateSalesInvoiceRequest, UpdateSalesInvoiceResponse> operation
              = new UpdateSalesInvoice.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        UpdateSalesInvoiceRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
