/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.SDKConfiguration;
import com.mollie.mollie.models.components.EntityCapture;
import com.mollie.mollie.operations.CreateCapture;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import com.mollie.mollie.utils.RetryConfig;
import com.mollie.mollie.utils.Utils;
import java.lang.String;
import java.util.Optional;

public class CreateCaptureRequestBuilder {

    private String paymentId;
    private Optional<String> idempotencyKey = Optional.empty();
    private Optional<? extends EntityCapture> entityCapture = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public CreateCaptureRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreateCaptureRequestBuilder paymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }
                
    public CreateCaptureRequestBuilder idempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.of(idempotencyKey);
        return this;
    }

    public CreateCaptureRequestBuilder idempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }
                
    public CreateCaptureRequestBuilder entityCapture(EntityCapture entityCapture) {
        Utils.checkNotNull(entityCapture, "entityCapture");
        this.entityCapture = Optional.of(entityCapture);
        return this;
    }

    public CreateCaptureRequestBuilder entityCapture(Optional<? extends EntityCapture> entityCapture) {
        Utils.checkNotNull(entityCapture, "entityCapture");
        this.entityCapture = entityCapture;
        return this;
    }
                
    public CreateCaptureRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public CreateCaptureRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private CreateCaptureRequest buildRequest() {

        CreateCaptureRequest request = new CreateCaptureRequest(paymentId,
            idempotencyKey,
            entityCapture);

        return request;
    }

    public CreateCaptureResponse call() {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<CreateCaptureRequest, CreateCaptureResponse> operation
              = new CreateCapture.Sync(sdkConfiguration, options, _headers);
        CreateCaptureRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
