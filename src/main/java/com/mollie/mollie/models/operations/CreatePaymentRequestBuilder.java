/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.SDKConfiguration;
import com.mollie.mollie.models.components.PaymentRequest;
import com.mollie.mollie.operations.CreatePayment;
import com.mollie.mollie.utils.Options;
import com.mollie.mollie.utils.RetryConfig;
import com.mollie.mollie.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreatePaymentRequestBuilder {

    private JsonNullable<String> include = JsonNullable.undefined();
    private Optional<? extends PaymentRequest> paymentRequest = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public CreatePaymentRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreatePaymentRequestBuilder include(String include) {
        Utils.checkNotNull(include, "include");
        this.include = JsonNullable.of(include);
        return this;
    }

    public CreatePaymentRequestBuilder include(JsonNullable<String> include) {
        Utils.checkNotNull(include, "include");
        this.include = include;
        return this;
    }
                
    public CreatePaymentRequestBuilder paymentRequest(PaymentRequest paymentRequest) {
        Utils.checkNotNull(paymentRequest, "paymentRequest");
        this.paymentRequest = Optional.of(paymentRequest);
        return this;
    }

    public CreatePaymentRequestBuilder paymentRequest(Optional<? extends PaymentRequest> paymentRequest) {
        Utils.checkNotNull(paymentRequest, "paymentRequest");
        this.paymentRequest = paymentRequest;
        return this;
    }
                
    public CreatePaymentRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public CreatePaymentRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private CreatePaymentRequest buildRequest() {

        CreatePaymentRequest request = new CreatePaymentRequest(include,
            paymentRequest);

        return request;
    }

    public CreatePaymentResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<CreatePaymentRequest, CreatePaymentResponse> operation
              = new CreatePayment.Sync(sdkConfiguration, options);
        CreatePaymentRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
