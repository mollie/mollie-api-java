/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class GetMethodRequest {

    /**
     * Provide the ID of the item you want to perform this operation on.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    /**
     * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=locale")
    private Optional<String> locale;

    /**
     * If provided, the `minimumAmount` and `maximumAmount` will be converted to the given currency. An error is returned if the currency is not supported by the payment method.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=currency")
    private Optional<String> currency;

    /**
     * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=profileId")
    private Optional<String> profileId;

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include")
    private JsonNullable<? extends GetMethodQueryParamInclude> include;

    /**
     * Set this parameter to `first` to only return the methods that can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
     * 
     * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sequenceType")
    private Optional<String> sequenceType;

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public GetMethodRequest(
            String id,
            Optional<String> locale,
            Optional<String> currency,
            Optional<String> profileId,
            JsonNullable<? extends GetMethodQueryParamInclude> include,
            Optional<String> sequenceType,
            JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(include, "include");
        Utils.checkNotNull(sequenceType, "sequenceType");
        Utils.checkNotNull(testmode, "testmode");
        this.id = id;
        this.locale = locale;
        this.currency = currency;
        this.profileId = profileId;
        this.include = include;
        this.sequenceType = sequenceType;
        this.testmode = testmode;
    }
    
    public GetMethodRequest(
            String id) {
        this(id, Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * Provide the ID of the item you want to perform this operation on.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
     */
    @JsonIgnore
    public Optional<String> locale() {
        return locale;
    }

    /**
     * If provided, the `minimumAmount` and `maximumAmount` will be converted to the given currency. An error is returned if the currency is not supported by the payment method.
     */
    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    @JsonIgnore
    public Optional<String> profileId() {
        return profileId;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetMethodQueryParamInclude> include() {
        return (JsonNullable<GetMethodQueryParamInclude>) include;
    }

    /**
     * Set this parameter to `first` to only return the methods that can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
     * 
     * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
     */
    @JsonIgnore
    public Optional<String> sequenceType() {
        return sequenceType;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Provide the ID of the item you want to perform this operation on.
     */
    public GetMethodRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
     */
    public GetMethodRequest withLocale(String locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = Optional.ofNullable(locale);
        return this;
    }

    /**
     * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
     */
    public GetMethodRequest withLocale(Optional<String> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    /**
     * If provided, the `minimumAmount` and `maximumAmount` will be converted to the given currency. An error is returned if the currency is not supported by the payment method.
     */
    public GetMethodRequest withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * If provided, the `minimumAmount` and `maximumAmount` will be converted to the given currency. An error is returned if the currency is not supported by the payment method.
     */
    public GetMethodRequest withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    public GetMethodRequest withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = Optional.ofNullable(profileId);
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    public GetMethodRequest withProfileId(Optional<String> profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    public GetMethodRequest withInclude(GetMethodQueryParamInclude include) {
        Utils.checkNotNull(include, "include");
        this.include = JsonNullable.of(include);
        return this;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    public GetMethodRequest withInclude(JsonNullable<? extends GetMethodQueryParamInclude> include) {
        Utils.checkNotNull(include, "include");
        this.include = include;
        return this;
    }

    /**
     * Set this parameter to `first` to only return the methods that can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
     * 
     * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
     */
    public GetMethodRequest withSequenceType(String sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = Optional.ofNullable(sequenceType);
        return this;
    }

    /**
     * Set this parameter to `first` to only return the methods that can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
     * 
     * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
     */
    public GetMethodRequest withSequenceType(Optional<String> sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = sequenceType;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public GetMethodRequest withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public GetMethodRequest withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetMethodRequest other = (GetMethodRequest) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.locale, other.locale) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.profileId, other.profileId) &&
            Utils.enhancedDeepEquals(this.include, other.include) &&
            Utils.enhancedDeepEquals(this.sequenceType, other.sequenceType) &&
            Utils.enhancedDeepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id,
            locale,
            currency,
            profileId,
            include,
            sequenceType,
            testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetMethodRequest.class,
                "id", id,
                "locale", locale,
                "currency", currency,
                "profileId", profileId,
                "include", include,
                "sequenceType", sequenceType,
                "testmode", testmode);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Optional<String> locale = Optional.empty();
 
        private Optional<String> currency = Optional.empty();
 
        private Optional<String> profileId = Optional.empty();
 
        private JsonNullable<? extends GetMethodQueryParamInclude> include = JsonNullable.undefined();
 
        private Optional<String> sequenceType = Optional.empty();
 
        private JsonNullable<Boolean> testmode = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Provide the ID of the item you want to perform this operation on.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
         */
        public Builder locale(String locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = Optional.ofNullable(locale);
            return this;
        }

        /**
         * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
         */
        public Builder locale(Optional<String> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }

        /**
         * If provided, the `minimumAmount` and `maximumAmount` will be converted to the given currency. An error is returned if the currency is not supported by the payment method.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * If provided, the `minimumAmount` and `maximumAmount` will be converted to the given currency. An error is returned if the currency is not supported by the payment method.
         */
        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = Optional.ofNullable(profileId);
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
         */
        public Builder profileId(Optional<String> profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }

        /**
         * This endpoint allows you to include additional information via the `include` query string parameter.
         */
        public Builder include(GetMethodQueryParamInclude include) {
            Utils.checkNotNull(include, "include");
            this.include = JsonNullable.of(include);
            return this;
        }

        /**
         * This endpoint allows you to include additional information via the `include` query string parameter.
         */
        public Builder include(JsonNullable<? extends GetMethodQueryParamInclude> include) {
            Utils.checkNotNull(include, "include");
            this.include = include;
            return this;
        }

        /**
         * Set this parameter to `first` to only return the methods that can be used for the first payment of a recurring sequence.
         * 
         * <p>Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
         * 
         * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
         */
        public Builder sequenceType(String sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = Optional.ofNullable(sequenceType);
            return this;
        }

        /**
         * Set this parameter to `first` to only return the methods that can be used for the first payment of a recurring sequence.
         * 
         * <p>Set it to `recurring` to only return methods that can be used for recurring payments or subscriptions.
         * 
         * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
         */
        public Builder sequenceType(Optional<String> sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = sequenceType;
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }
        
        public GetMethodRequest build() {
            return new GetMethodRequest(
                id,
                locale,
                currency,
                profileId,
                include,
                sequenceType,
                testmode);
        }
    }
}
