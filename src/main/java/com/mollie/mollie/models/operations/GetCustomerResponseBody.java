/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.models.components.EntityEvent;
import com.mollie.mollie.models.components.LocaleResponse;
import com.mollie.mollie.models.components.Metadata;
import com.mollie.mollie.models.components.Mode;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GetCustomerResponseBody
 * 
 * <p>The customer object.
 */
public class GetCustomerResponseBody {
    /**
     * Indicates the response contains a customer object. Will always contain the string `customer` for
     * this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<? extends Mode> mode;

    /**
     * The full name of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The email address of the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<String> email;

    /**
     * Allows you to preset the language to be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    private JsonNullable<? extends LocaleResponse> locale;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside
     * the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Metadata> metadata;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends GetCustomerLinks> links;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("events")
    private Optional<? extends List<EntityEvent>> events;

    @JsonCreator
    public GetCustomerResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mode") Optional<? extends Mode> mode,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("email") JsonNullable<String> email,
            @JsonProperty("locale") JsonNullable<? extends LocaleResponse> locale,
            @JsonProperty("metadata") JsonNullable<? extends Metadata> metadata,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("_links") Optional<? extends GetCustomerLinks> links,
            @JsonProperty("events") Optional<? extends List<EntityEvent>> events) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(links, "links");
        Utils.checkNotNull(events, "events");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.name = name;
        this.email = email;
        this.locale = locale;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.links = links;
        this.events = events;
    }
    
    public GetCustomerResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Indicates the response contains a customer object. Will always contain the string `customer` for
     * this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Mode> mode() {
        return (Optional<Mode>) mode;
    }

    /**
     * The full name of the customer.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The email address of the customer.
     */
    @JsonIgnore
    public JsonNullable<String> email() {
        return email;
    }

    /**
     * Allows you to preset the language to be used.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LocaleResponse> locale() {
        return (JsonNullable<LocaleResponse>) locale;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside
     * the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Metadata> metadata() {
        return (JsonNullable<Metadata>) metadata;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetCustomerLinks> links() {
        return (Optional<GetCustomerLinks>) links;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EntityEvent>> events() {
        return (Optional<List<EntityEvent>>) events;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a customer object. Will always contain the string `customer` for
     * this endpoint.
     */
    public GetCustomerResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains a customer object. Will always contain the string `customer` for
     * this endpoint.
     */
    public GetCustomerResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public GetCustomerResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public GetCustomerResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public GetCustomerResponseBody withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }


    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public GetCustomerResponseBody withMode(Optional<? extends Mode> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The full name of the customer.
     */
    public GetCustomerResponseBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The full name of the customer.
     */
    public GetCustomerResponseBody withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The email address of the customer.
     */
    public GetCustomerResponseBody withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = JsonNullable.of(email);
        return this;
    }

    /**
     * The email address of the customer.
     */
    public GetCustomerResponseBody withEmail(JsonNullable<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Allows you to preset the language to be used.
     */
    public GetCustomerResponseBody withLocale(LocaleResponse locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = JsonNullable.of(locale);
        return this;
    }

    /**
     * Allows you to preset the language to be used.
     */
    public GetCustomerResponseBody withLocale(JsonNullable<? extends LocaleResponse> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside
     * the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    public GetCustomerResponseBody withMetadata(Metadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside
     * the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    public GetCustomerResponseBody withMetadata(JsonNullable<? extends Metadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public GetCustomerResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public GetCustomerResponseBody withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetCustomerResponseBody withLinks(GetCustomerLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetCustomerResponseBody withLinks(Optional<? extends GetCustomerLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    public GetCustomerResponseBody withEvents(List<EntityEvent> events) {
        Utils.checkNotNull(events, "events");
        this.events = Optional.ofNullable(events);
        return this;
    }


    public GetCustomerResponseBody withEvents(Optional<? extends List<EntityEvent>> events) {
        Utils.checkNotNull(events, "events");
        this.events = events;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCustomerResponseBody other = (GetCustomerResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.locale, other.locale) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.links, other.links) &&
            Utils.enhancedDeepEquals(this.events, other.events);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, mode,
            name, email, locale,
            metadata, createdAt, links,
            events);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetCustomerResponseBody.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "name", name,
                "email", email,
                "locale", locale,
                "metadata", metadata,
                "createdAt", createdAt,
                "links", links,
                "events", events);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<? extends Mode> mode = Optional.empty();

        private JsonNullable<String> name = JsonNullable.undefined();

        private JsonNullable<String> email = JsonNullable.undefined();

        private JsonNullable<? extends LocaleResponse> locale = JsonNullable.undefined();

        private JsonNullable<? extends Metadata> metadata = JsonNullable.undefined();

        private Optional<String> createdAt = Optional.empty();

        private Optional<? extends GetCustomerLinks> links = Optional.empty();

        private Optional<? extends List<EntityEvent>> events = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a customer object. Will always contain the string `customer` for
         * this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a customer object. Will always contain the string `customer` for
         * this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(Optional<? extends Mode> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * The full name of the customer.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The full name of the customer.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The email address of the customer.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = JsonNullable.of(email);
            return this;
        }

        /**
         * The email address of the customer.
         */
        public Builder email(JsonNullable<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }


        /**
         * Allows you to preset the language to be used.
         */
        public Builder locale(LocaleResponse locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = JsonNullable.of(locale);
            return this;
        }

        /**
         * Allows you to preset the language to be used.
         */
        public Builder locale(JsonNullable<? extends LocaleResponse> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }


        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside
         * the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to
         * approximately 1kB.
         */
        public Builder metadata(Metadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside
         * the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to
         * approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends Metadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetCustomerLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends GetCustomerLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }


        public Builder events(List<EntityEvent> events) {
            Utils.checkNotNull(events, "events");
            this.events = Optional.ofNullable(events);
            return this;
        }

        public Builder events(Optional<? extends List<EntityEvent>> events) {
            Utils.checkNotNull(events, "events");
            this.events = events;
            return this;
        }

        public GetCustomerResponseBody build() {

            return new GetCustomerResponseBody(
                resource, id, mode,
                name, email, locale,
                metadata, createdAt, links,
                events);
        }

    }
}
