/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateOrderRequest {

    /**
     * This endpoint allows embedding related API items by appending the following values via the `embed` query string parameter.
     * 
     * * `payments`: Include all payments created for this order.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=embed")
    private JsonNullable<String> embed;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends CreateOrderRequestBody> requestBody;

    @JsonCreator
    public CreateOrderRequest(
            JsonNullable<String> embed,
            Optional<? extends CreateOrderRequestBody> requestBody) {
        Utils.checkNotNull(embed, "embed");
        Utils.checkNotNull(requestBody, "requestBody");
        this.embed = embed;
        this.requestBody = requestBody;
    }
    
    public CreateOrderRequest() {
        this(JsonNullable.undefined(), Optional.empty());
    }

    /**
     * This endpoint allows embedding related API items by appending the following values via the `embed` query string parameter.
     * 
     * * `payments`: Include all payments created for this order.
     */
    @JsonIgnore
    public JsonNullable<String> embed() {
        return embed;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRequestBody> requestBody() {
        return (Optional<CreateOrderRequestBody>) requestBody;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * This endpoint allows embedding related API items by appending the following values via the `embed` query string parameter.
     * 
     * * `payments`: Include all payments created for this order.
     */
    public CreateOrderRequest withEmbed(String embed) {
        Utils.checkNotNull(embed, "embed");
        this.embed = JsonNullable.of(embed);
        return this;
    }

    /**
     * This endpoint allows embedding related API items by appending the following values via the `embed` query string parameter.
     * 
     * * `payments`: Include all payments created for this order.
     */
    public CreateOrderRequest withEmbed(JsonNullable<String> embed) {
        Utils.checkNotNull(embed, "embed");
        this.embed = embed;
        return this;
    }

    public CreateOrderRequest withRequestBody(CreateOrderRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }

    public CreateOrderRequest withRequestBody(Optional<? extends CreateOrderRequestBody> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOrderRequest other = (CreateOrderRequest) o;
        return 
            Objects.deepEquals(this.embed, other.embed) &&
            Objects.deepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            embed,
            requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOrderRequest.class,
                "embed", embed,
                "requestBody", requestBody);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> embed = JsonNullable.undefined();
 
        private Optional<? extends CreateOrderRequestBody> requestBody = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * This endpoint allows embedding related API items by appending the following values via the `embed` query string parameter.
         * 
         * * `payments`: Include all payments created for this order.
         */
        public Builder embed(String embed) {
            Utils.checkNotNull(embed, "embed");
            this.embed = JsonNullable.of(embed);
            return this;
        }

        /**
         * This endpoint allows embedding related API items by appending the following values via the `embed` query string parameter.
         * 
         * * `payments`: Include all payments created for this order.
         */
        public Builder embed(JsonNullable<String> embed) {
            Utils.checkNotNull(embed, "embed");
            this.embed = embed;
            return this;
        }

        public Builder requestBody(CreateOrderRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends CreateOrderRequestBody> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }
        
        public CreateOrderRequest build() {
            return new CreateOrderRequest(
                embed,
                requestBody);
        }
    }
}

