/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class Operations {

    /**
     * Type of operation.
     * 
     * Possible values: `add` `update` `cancel`
     */
    @JsonProperty("operation")
    private String operation;

    /**
     * Operation data depending on the type of operation.
     * 
     * For an `add` operation, provide the fields for the new order line in the same format as in the [Create order](create-order) endpoint.
     * 
     * For an `update` operation, provide the `id` of the order line, along with any fields you would like to update.
     * 
     * For a `cancel` operation, provide the `id` of the order line. Optionally, a `quantity` or `amount` can be provided to only partially cancel an order line.
     */
    @JsonProperty("data")
    private Data data;

    @JsonCreator
    public Operations(
            @JsonProperty("operation") String operation,
            @JsonProperty("data") Data data) {
        Utils.checkNotNull(operation, "operation");
        Utils.checkNotNull(data, "data");
        this.operation = operation;
        this.data = data;
    }

    /**
     * Type of operation.
     * 
     * Possible values: `add` `update` `cancel`
     */
    @JsonIgnore
    public String operation() {
        return operation;
    }

    /**
     * Operation data depending on the type of operation.
     * 
     * For an `add` operation, provide the fields for the new order line in the same format as in the [Create order](create-order) endpoint.
     * 
     * For an `update` operation, provide the `id` of the order line, along with any fields you would like to update.
     * 
     * For a `cancel` operation, provide the `id` of the order line. Optionally, a `quantity` or `amount` can be provided to only partially cancel an order line.
     */
    @JsonIgnore
    public Data data() {
        return data;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Type of operation.
     * 
     * Possible values: `add` `update` `cancel`
     */
    public Operations withOperation(String operation) {
        Utils.checkNotNull(operation, "operation");
        this.operation = operation;
        return this;
    }

    /**
     * Operation data depending on the type of operation.
     * 
     * For an `add` operation, provide the fields for the new order line in the same format as in the [Create order](create-order) endpoint.
     * 
     * For an `update` operation, provide the `id` of the order line, along with any fields you would like to update.
     * 
     * For a `cancel` operation, provide the `id` of the order line. Optionally, a `quantity` or `amount` can be provided to only partially cancel an order line.
     */
    public Operations withData(Data data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Operations other = (Operations) o;
        return 
            Objects.deepEquals(this.operation, other.operation) &&
            Objects.deepEquals(this.data, other.data);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            operation,
            data);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Operations.class,
                "operation", operation,
                "data", data);
    }
    
    public final static class Builder {
 
        private String operation;
 
        private Data data;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Type of operation.
         * 
         * Possible values: `add` `update` `cancel`
         */
        public Builder operation(String operation) {
            Utils.checkNotNull(operation, "operation");
            this.operation = operation;
            return this;
        }

        /**
         * Operation data depending on the type of operation.
         * 
         * For an `add` operation, provide the fields for the new order line in the same format as in the [Create order](create-order) endpoint.
         * 
         * For an `update` operation, provide the `id` of the order line, along with any fields you would like to update.
         * 
         * For a `cancel` operation, provide the `id` of the order line. Optionally, a `quantity` or `amount` can be provided to only partially cancel an order line.
         */
        public Builder data(Data data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }
        
        public Operations build() {
            return new Operations(
                operation,
                data);
        }
    }
}

