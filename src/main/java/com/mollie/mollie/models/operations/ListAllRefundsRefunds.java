/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListAllRefundsRefunds {

    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<String> mode;

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends ListAllRefundsAmount> amount;

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
     * 
     * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
     * 
     * <p>To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementAmount")
    private JsonNullable<? extends ListAllRefundsSettlementAmount> settlementAmount;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends ListAllRefundsMetadata> metadata;

    /**
     * The unique identifier of the payment this refund was created for. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentId")
    private Optional<String> paymentId;

    /**
     * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementId")
    private JsonNullable<String> settlementId;

    /**
     * Refunds may take some time to get confirmed.
     * 
     * <p>Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalReference")
    private Optional<? extends ListAllRefundsExternalReference> externalReference;

    /**
     * *This feature is only available to marketplace operators.*
     * 
     * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
     * 
     * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount needs to be reversed from which merchant(s).
     * 
     * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routingReversals")
    private JsonNullable<? extends List<ListAllRefundsRoutingReversals>> routingReversals;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends ListAllRefundsRefundsLinks> links;

    @JsonCreator
    public ListAllRefundsRefunds(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mode") Optional<String> mode,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("amount") Optional<? extends ListAllRefundsAmount> amount,
            @JsonProperty("settlementAmount") JsonNullable<? extends ListAllRefundsSettlementAmount> settlementAmount,
            @JsonProperty("metadata") JsonNullable<? extends ListAllRefundsMetadata> metadata,
            @JsonProperty("paymentId") Optional<String> paymentId,
            @JsonProperty("settlementId") JsonNullable<String> settlementId,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("externalReference") Optional<? extends ListAllRefundsExternalReference> externalReference,
            @JsonProperty("routingReversals") JsonNullable<? extends List<ListAllRefundsRoutingReversals>> routingReversals,
            @JsonProperty("_links") Optional<? extends ListAllRefundsRefundsLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(settlementId, "settlementId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(externalReference, "externalReference");
        Utils.checkNotNull(routingReversals, "routingReversals");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.description = description;
        this.amount = amount;
        this.settlementAmount = settlementAmount;
        this.metadata = metadata;
        this.paymentId = paymentId;
        this.settlementId = settlementId;
        this.status = status;
        this.createdAt = createdAt;
        this.externalReference = externalReference;
        this.routingReversals = routingReversals;
        this.links = links;
    }
    
    public ListAllRefundsRefunds() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    @JsonIgnore
    public Optional<String> mode() {
        return mode;
    }

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListAllRefundsAmount> amount() {
        return (Optional<ListAllRefundsAmount>) amount;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
     * 
     * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
     * 
     * <p>To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ListAllRefundsSettlementAmount> settlementAmount() {
        return (JsonNullable<ListAllRefundsSettlementAmount>) settlementAmount;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ListAllRefundsMetadata> metadata() {
        return (JsonNullable<ListAllRefundsMetadata>) metadata;
    }

    /**
     * The unique identifier of the payment this refund was created for. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonIgnore
    public Optional<String> paymentId() {
        return paymentId;
    }

    /**
     * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
     */
    @JsonIgnore
    public JsonNullable<String> settlementId() {
        return settlementId;
    }

    /**
     * Refunds may take some time to get confirmed.
     * 
     * <p>Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListAllRefundsExternalReference> externalReference() {
        return (Optional<ListAllRefundsExternalReference>) externalReference;
    }

    /**
     * *This feature is only available to marketplace operators.*
     * 
     * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
     * 
     * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount needs to be reversed from which merchant(s).
     * 
     * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<ListAllRefundsRoutingReversals>> routingReversals() {
        return (JsonNullable<List<ListAllRefundsRoutingReversals>>) routingReversals;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListAllRefundsRefundsLinks> links() {
        return (Optional<ListAllRefundsRefundsLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    public ListAllRefundsRefunds withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    public ListAllRefundsRefunds withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    public ListAllRefundsRefunds withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    public ListAllRefundsRefunds withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    public ListAllRefundsRefunds withMode(String mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    public ListAllRefundsRefunds withMode(Optional<String> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    public ListAllRefundsRefunds withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    public ListAllRefundsRefunds withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
     */
    public ListAllRefundsRefunds withAmount(ListAllRefundsAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
     */
    public ListAllRefundsRefunds withAmount(Optional<? extends ListAllRefundsAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
     * 
     * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
     * 
     * <p>To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    public ListAllRefundsRefunds withSettlementAmount(ListAllRefundsSettlementAmount settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = JsonNullable.of(settlementAmount);
        return this;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
     * 
     * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
     * 
     * <p>To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    public ListAllRefundsRefunds withSettlementAmount(JsonNullable<? extends ListAllRefundsSettlementAmount> settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = settlementAmount;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public ListAllRefundsRefunds withMetadata(ListAllRefundsMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public ListAllRefundsRefunds withMetadata(JsonNullable<? extends ListAllRefundsMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The unique identifier of the payment this refund was created for. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    public ListAllRefundsRefunds withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = Optional.ofNullable(paymentId);
        return this;
    }

    /**
     * The unique identifier of the payment this refund was created for. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    public ListAllRefundsRefunds withPaymentId(Optional<String> paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    /**
     * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
     */
    public ListAllRefundsRefunds withSettlementId(String settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = JsonNullable.of(settlementId);
        return this;
    }

    /**
     * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
     */
    public ListAllRefundsRefunds withSettlementId(JsonNullable<String> settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = settlementId;
        return this;
    }

    /**
     * Refunds may take some time to get confirmed.
     * 
     * <p>Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
     */
    public ListAllRefundsRefunds withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Refunds may take some time to get confirmed.
     * 
     * <p>Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
     */
    public ListAllRefundsRefunds withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public ListAllRefundsRefunds withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public ListAllRefundsRefunds withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public ListAllRefundsRefunds withExternalReference(ListAllRefundsExternalReference externalReference) {
        Utils.checkNotNull(externalReference, "externalReference");
        this.externalReference = Optional.ofNullable(externalReference);
        return this;
    }

    public ListAllRefundsRefunds withExternalReference(Optional<? extends ListAllRefundsExternalReference> externalReference) {
        Utils.checkNotNull(externalReference, "externalReference");
        this.externalReference = externalReference;
        return this;
    }

    /**
     * *This feature is only available to marketplace operators.*
     * 
     * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
     * 
     * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount needs to be reversed from which merchant(s).
     * 
     * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
     */
    public ListAllRefundsRefunds withRoutingReversals(List<ListAllRefundsRoutingReversals> routingReversals) {
        Utils.checkNotNull(routingReversals, "routingReversals");
        this.routingReversals = JsonNullable.of(routingReversals);
        return this;
    }

    /**
     * *This feature is only available to marketplace operators.*
     * 
     * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
     * 
     * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount needs to be reversed from which merchant(s).
     * 
     * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
     */
    public ListAllRefundsRefunds withRoutingReversals(JsonNullable<? extends List<ListAllRefundsRoutingReversals>> routingReversals) {
        Utils.checkNotNull(routingReversals, "routingReversals");
        this.routingReversals = routingReversals;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public ListAllRefundsRefunds withLinks(ListAllRefundsRefundsLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public ListAllRefundsRefunds withLinks(Optional<? extends ListAllRefundsRefundsLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllRefundsRefunds other = (ListAllRefundsRefunds) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.settlementAmount, other.settlementAmount) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.paymentId, other.paymentId) &&
            Utils.enhancedDeepEquals(this.settlementId, other.settlementId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.externalReference, other.externalReference) &&
            Utils.enhancedDeepEquals(this.routingReversals, other.routingReversals) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource,
            id,
            mode,
            description,
            amount,
            settlementAmount,
            metadata,
            paymentId,
            settlementId,
            status,
            createdAt,
            externalReference,
            routingReversals,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAllRefundsRefunds.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "description", description,
                "amount", amount,
                "settlementAmount", settlementAmount,
                "metadata", metadata,
                "paymentId", paymentId,
                "settlementId", settlementId,
                "status", status,
                "createdAt", createdAt,
                "externalReference", externalReference,
                "routingReversals", routingReversals,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> mode = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<? extends ListAllRefundsAmount> amount = Optional.empty();
 
        private JsonNullable<? extends ListAllRefundsSettlementAmount> settlementAmount = JsonNullable.undefined();
 
        private JsonNullable<? extends ListAllRefundsMetadata> metadata = JsonNullable.undefined();
 
        private Optional<String> paymentId = Optional.empty();
 
        private JsonNullable<String> settlementId = JsonNullable.undefined();
 
        private Optional<String> status = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<? extends ListAllRefundsExternalReference> externalReference = Optional.empty();
 
        private JsonNullable<? extends List<ListAllRefundsRoutingReversals>> routingReversals = JsonNullable.undefined();
 
        private Optional<? extends ListAllRefundsRefundsLinks> links = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * <p>Possible values: `live` `test`
         */
        public Builder mode(String mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * <p>Possible values: `live` `test`
         */
        public Builder mode(Optional<String> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        /**
         * The description of the refund that may be shown to your customer, depending on the payment method used.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the refund that may be shown to your customer, depending on the payment method used.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
         */
        public Builder amount(ListAllRefundsAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
         */
        public Builder amount(Optional<? extends ListAllRefundsAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
         * 
         * <p>The amount is a **negative** amount.
         * 
         * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
         * 
         * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
         * 
         * <p>To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
         */
        public Builder settlementAmount(ListAllRefundsSettlementAmount settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = JsonNullable.of(settlementAmount);
            return this;
        }

        /**
         * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
         * 
         * <p>The amount is a **negative** amount.
         * 
         * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
         * 
         * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
         * 
         * <p>To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
         */
        public Builder settlementAmount(JsonNullable<? extends ListAllRefundsSettlementAmount> settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = settlementAmount;
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(ListAllRefundsMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends ListAllRefundsMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * The unique identifier of the payment this refund was created for. The full payment object can be retrieved via the payment URL in the `_links` object.
         */
        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        /**
         * The unique identifier of the payment this refund was created for. The full payment object can be retrieved via the payment URL in the `_links` object.
         */
        public Builder paymentId(Optional<String> paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }

        /**
         * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
         */
        public Builder settlementId(String settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = JsonNullable.of(settlementId);
            return this;
        }

        /**
         * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
         */
        public Builder settlementId(JsonNullable<String> settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = settlementId;
            return this;
        }

        /**
         * Refunds may take some time to get confirmed.
         * 
         * <p>Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Refunds may take some time to get confirmed.
         * 
         * <p>Possible values: `queued` `pending` `processing` `refunded` `failed` `canceled`
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder externalReference(ListAllRefundsExternalReference externalReference) {
            Utils.checkNotNull(externalReference, "externalReference");
            this.externalReference = Optional.ofNullable(externalReference);
            return this;
        }

        public Builder externalReference(Optional<? extends ListAllRefundsExternalReference> externalReference) {
            Utils.checkNotNull(externalReference, "externalReference");
            this.externalReference = externalReference;
            return this;
        }

        /**
         * *This feature is only available to marketplace operators.*
         * 
         * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
         * 
         * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount needs to be reversed from which merchant(s).
         * 
         * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
         */
        public Builder routingReversals(List<ListAllRefundsRoutingReversals> routingReversals) {
            Utils.checkNotNull(routingReversals, "routingReversals");
            this.routingReversals = JsonNullable.of(routingReversals);
            return this;
        }

        /**
         * *This feature is only available to marketplace operators.*
         * 
         * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
         * 
         * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount needs to be reversed from which merchant(s).
         * 
         * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
         */
        public Builder routingReversals(JsonNullable<? extends List<ListAllRefundsRoutingReversals>> routingReversals) {
            Utils.checkNotNull(routingReversals, "routingReversals");
            this.routingReversals = routingReversals;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(ListAllRefundsRefundsLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends ListAllRefundsRefundsLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public ListAllRefundsRefunds build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }
            return new ListAllRefundsRefunds(
                resource,
                id,
                mode,
                description,
                amount,
                settlementAmount,
                metadata,
                paymentId,
                settlementId,
                status,
                createdAt,
                externalReference,
                routingReversals,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"refund\"",
                        new TypeReference<Optional<String>>() {});
    }
}
