/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GetClientResponseBody - The client object.
 */

public class GetClientResponseBody {

    /**
     * Indicates the response contains a client object. Will always contain the string `client` for this resource type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this client. Example: `org_12345678`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The commission object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commission")
    private JsonNullable<? extends Commission> commission;

    /**
     * The date and time the client organization was created, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationCreatedAt")
    private Optional<String> organizationCreatedAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends GetClientLinks> links;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_embedded")
    private Optional<? extends GetClientEmbedded> embedded;

    @JsonCreator
    public GetClientResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("commission") JsonNullable<? extends Commission> commission,
            @JsonProperty("organizationCreatedAt") Optional<String> organizationCreatedAt,
            @JsonProperty("_links") Optional<? extends GetClientLinks> links,
            @JsonProperty("_embedded") Optional<? extends GetClientEmbedded> embedded) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(commission, "commission");
        Utils.checkNotNull(organizationCreatedAt, "organizationCreatedAt");
        Utils.checkNotNull(links, "links");
        Utils.checkNotNull(embedded, "embedded");
        this.resource = resource;
        this.id = id;
        this.commission = commission;
        this.organizationCreatedAt = organizationCreatedAt;
        this.links = links;
        this.embedded = embedded;
    }
    
    public GetClientResponseBody() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a client object. Will always contain the string `client` for this resource type.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this client. Example: `org_12345678`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The commission object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Commission> commission() {
        return (JsonNullable<Commission>) commission;
    }

    /**
     * The date and time the client organization was created, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonIgnore
    public Optional<String> organizationCreatedAt() {
        return organizationCreatedAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetClientLinks> links() {
        return (Optional<GetClientLinks>) links;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetClientEmbedded> embedded() {
        return (Optional<GetClientEmbedded>) embedded;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates the response contains a client object. Will always contain the string `client` for this resource type.
     */
    public GetClientResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a client object. Will always contain the string `client` for this resource type.
     */
    public GetClientResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this client. Example: `org_12345678`.
     */
    public GetClientResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The identifier uniquely referring to this client. Example: `org_12345678`.
     */
    public GetClientResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The commission object.
     */
    public GetClientResponseBody withCommission(Commission commission) {
        Utils.checkNotNull(commission, "commission");
        this.commission = JsonNullable.of(commission);
        return this;
    }

    /**
     * The commission object.
     */
    public GetClientResponseBody withCommission(JsonNullable<? extends Commission> commission) {
        Utils.checkNotNull(commission, "commission");
        this.commission = commission;
        return this;
    }

    /**
     * The date and time the client organization was created, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public GetClientResponseBody withOrganizationCreatedAt(String organizationCreatedAt) {
        Utils.checkNotNull(organizationCreatedAt, "organizationCreatedAt");
        this.organizationCreatedAt = Optional.ofNullable(organizationCreatedAt);
        return this;
    }

    /**
     * The date and time the client organization was created, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public GetClientResponseBody withOrganizationCreatedAt(Optional<String> organizationCreatedAt) {
        Utils.checkNotNull(organizationCreatedAt, "organizationCreatedAt");
        this.organizationCreatedAt = organizationCreatedAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetClientResponseBody withLinks(GetClientLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetClientResponseBody withLinks(Optional<? extends GetClientLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    public GetClientResponseBody withEmbedded(GetClientEmbedded embedded) {
        Utils.checkNotNull(embedded, "embedded");
        this.embedded = Optional.ofNullable(embedded);
        return this;
    }

    public GetClientResponseBody withEmbedded(Optional<? extends GetClientEmbedded> embedded) {
        Utils.checkNotNull(embedded, "embedded");
        this.embedded = embedded;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetClientResponseBody other = (GetClientResponseBody) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.commission, other.commission) &&
            Objects.deepEquals(this.organizationCreatedAt, other.organizationCreatedAt) &&
            Objects.deepEquals(this.links, other.links) &&
            Objects.deepEquals(this.embedded, other.embedded);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            commission,
            organizationCreatedAt,
            links,
            embedded);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetClientResponseBody.class,
                "resource", resource,
                "id", id,
                "commission", commission,
                "organizationCreatedAt", organizationCreatedAt,
                "links", links,
                "embedded", embedded);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private JsonNullable<? extends Commission> commission = JsonNullable.undefined();
 
        private Optional<String> organizationCreatedAt = Optional.empty();
 
        private Optional<? extends GetClientLinks> links = Optional.empty();
 
        private Optional<? extends GetClientEmbedded> embedded = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a client object. Will always contain the string `client` for this resource type.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a client object. Will always contain the string `client` for this resource type.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this client. Example: `org_12345678`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this client. Example: `org_12345678`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The commission object.
         */
        public Builder commission(Commission commission) {
            Utils.checkNotNull(commission, "commission");
            this.commission = JsonNullable.of(commission);
            return this;
        }

        /**
         * The commission object.
         */
        public Builder commission(JsonNullable<? extends Commission> commission) {
            Utils.checkNotNull(commission, "commission");
            this.commission = commission;
            return this;
        }

        /**
         * The date and time the client organization was created, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder organizationCreatedAt(String organizationCreatedAt) {
            Utils.checkNotNull(organizationCreatedAt, "organizationCreatedAt");
            this.organizationCreatedAt = Optional.ofNullable(organizationCreatedAt);
            return this;
        }

        /**
         * The date and time the client organization was created, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder organizationCreatedAt(Optional<String> organizationCreatedAt) {
            Utils.checkNotNull(organizationCreatedAt, "organizationCreatedAt");
            this.organizationCreatedAt = organizationCreatedAt;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetClientLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends GetClientLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public Builder embedded(GetClientEmbedded embedded) {
            Utils.checkNotNull(embedded, "embedded");
            this.embedded = Optional.ofNullable(embedded);
            return this;
        }

        public Builder embedded(Optional<? extends GetClientEmbedded> embedded) {
            Utils.checkNotNull(embedded, "embedded");
            this.embedded = embedded;
            return this;
        }
        
        public GetClientResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }            return new GetClientResponseBody(
                resource,
                id,
                commission,
                organizationCreatedAt,
                links,
                embedded);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"client\"",
                        new TypeReference<Optional<String>>() {});
    }
}

