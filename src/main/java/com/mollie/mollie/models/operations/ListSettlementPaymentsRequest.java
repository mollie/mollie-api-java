/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.models.components.ListSort;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ListSettlementPaymentsRequest {
    /**
     * Provide the ID of the related settlement.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=settlementId")
    private String settlementId;

    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate
     * the result set.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=from")
    private Optional<String> from;

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private JsonNullable<Long> limit;

    /**
     * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
     * newest to oldest.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    private JsonNullable<? extends ListSort> sort;

    /**
     * The identifier referring to the [profile](get-profile) you wish to
     * retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
     * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=profileId")
    private Optional<String> profileId;

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public ListSettlementPaymentsRequest(
            String settlementId,
            Optional<String> from,
            JsonNullable<Long> limit,
            JsonNullable<? extends ListSort> sort,
            Optional<String> profileId,
            JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(settlementId, "settlementId");
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(sort, "sort");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(testmode, "testmode");
        this.settlementId = settlementId;
        this.from = from;
        this.limit = limit;
        this.sort = sort;
        this.profileId = profileId;
        this.testmode = testmode;
    }
    
    public ListSettlementPaymentsRequest(
            String settlementId) {
        this(settlementId, Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * Provide the ID of the related settlement.
     */
    @JsonIgnore
    public String settlementId() {
        return settlementId;
    }

    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate
     * the result set.
     */
    @JsonIgnore
    public Optional<String> from() {
        return from;
    }

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    @JsonIgnore
    public JsonNullable<Long> limit() {
        return limit;
    }

    /**
     * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
     * newest to oldest.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ListSort> sort() {
        return (JsonNullable<ListSort>) sort;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to
     * retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
     * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    @JsonIgnore
    public Optional<String> profileId() {
        return profileId;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Provide the ID of the related settlement.
     */
    public ListSettlementPaymentsRequest withSettlementId(String settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = settlementId;
        return this;
    }

    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate
     * the result set.
     */
    public ListSettlementPaymentsRequest withFrom(String from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }


    /**
     * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate
     * the result set.
     */
    public ListSettlementPaymentsRequest withFrom(Optional<String> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    public ListSettlementPaymentsRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = JsonNullable.of(limit);
        return this;
    }

    /**
     * The maximum number of items to return. Defaults to 50 items.
     */
    public ListSettlementPaymentsRequest withLimit(JsonNullable<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
     * newest to oldest.
     */
    public ListSettlementPaymentsRequest withSort(ListSort sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = JsonNullable.of(sort);
        return this;
    }

    /**
     * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
     * newest to oldest.
     */
    public ListSettlementPaymentsRequest withSort(JsonNullable<? extends ListSort> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to
     * retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
     * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    public ListSettlementPaymentsRequest withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = Optional.ofNullable(profileId);
        return this;
    }


    /**
     * The identifier referring to the [profile](get-profile) you wish to
     * retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
     * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    public ListSettlementPaymentsRequest withProfileId(Optional<String> profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public ListSettlementPaymentsRequest withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public ListSettlementPaymentsRequest withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListSettlementPaymentsRequest other = (ListSettlementPaymentsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.settlementId, other.settlementId) &&
            Utils.enhancedDeepEquals(this.from, other.from) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.sort, other.sort) &&
            Utils.enhancedDeepEquals(this.profileId, other.profileId) &&
            Utils.enhancedDeepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            settlementId, from, limit,
            sort, profileId, testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListSettlementPaymentsRequest.class,
                "settlementId", settlementId,
                "from", from,
                "limit", limit,
                "sort", sort,
                "profileId", profileId,
                "testmode", testmode);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String settlementId;

        private Optional<String> from = Optional.empty();

        private JsonNullable<Long> limit = JsonNullable.undefined();

        private JsonNullable<? extends ListSort> sort = JsonNullable.undefined();

        private Optional<String> profileId = Optional.empty();

        private JsonNullable<Boolean> testmode = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Provide the ID of the related settlement.
         */
        public Builder settlementId(String settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = settlementId;
            return this;
        }


        /**
         * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate
         * the result set.
         */
        public Builder from(String from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        /**
         * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate
         * the result set.
         */
        public Builder from(Optional<String> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }


        /**
         * The maximum number of items to return. Defaults to 50 items.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = JsonNullable.of(limit);
            return this;
        }

        /**
         * The maximum number of items to return. Defaults to 50 items.
         */
        public Builder limit(JsonNullable<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }


        /**
         * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
         * newest to oldest.
         */
        public Builder sort(ListSort sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = JsonNullable.of(sort);
            return this;
        }

        /**
         * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from
         * newest to oldest.
         */
        public Builder sort(JsonNullable<? extends ListSort> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }


        /**
         * The identifier referring to the [profile](get-profile) you wish to
         * retrieve the resources for.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
         * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = Optional.ofNullable(profileId);
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) you wish to
         * retrieve the resources for.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For
         * organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
         */
        public Builder profileId(Optional<String> profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }


        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
         * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
         * setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
         * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
         * setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }

        public ListSettlementPaymentsRequest build() {

            return new ListSettlementPaymentsRequest(
                settlementId, from, limit,
                sort, profileId, testmode);
        }

    }
}
