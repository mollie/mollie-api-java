/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class GetPaymentLines {

    /**
     * The type of product purchased. For example, a physical or a digital product.
     * 
     * <p>The `tip` payment line type is not available when creating a payment.
     * 
     * <p>Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` `tip` (default: `physical`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * A description of the line item. For example *LEGO 4440 Forest Police Station*.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The number of items.
     */
    @JsonProperty("quantity")
    private long quantity;

    /**
     * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityUnit")
    private Optional<String> quantityUnit;

    /**
     * The price of a single item including VAT.
     * 
     * <p>For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
     * 
     * <p>For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
     * 
     * <p>The unit price can be zero in case of free items.
     */
    @JsonProperty("unitPrice")
    private GetPaymentUnitPrice unitPrice;

    /**
     * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountAmount")
    private Optional<? extends GetPaymentDiscountAmount> discountAmount;

    /**
     * The total amount of the line, including VAT and discounts.
     * 
     * <p>Should match the following formula: `(unitPrice × quantity) - discountAmount`.
     * 
     * <p>The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
     */
    @JsonProperty("totalAmount")
    private GetPaymentTotalAmount totalAmount;

    /**
     * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatRate")
    private Optional<String> vatRate;

    /**
     * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
     * 
     * <p>Any deviations from this will result in an error.
     * 
     * <p>For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatAmount")
    private Optional<? extends GetPaymentVatAmount> vatAmount;

    /**
     * The SKU, EAN, ISBN or UPC of the product sold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private Optional<String> sku;

    /**
     * An array with the voucher categories, in case of a line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    private Optional<? extends List<GetPaymentCategories>> categories;

    /**
     * A link pointing to an image of the product sold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageUrl")
    private Optional<String> imageUrl;

    /**
     * A link pointing to the product page in your web shop of the product sold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productUrl")
    private Optional<String> productUrl;

    /**
     * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurring")
    private Optional<? extends GetPaymentRecurring> recurring;

    @JsonCreator
    public GetPaymentLines(
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("description") String description,
            @JsonProperty("quantity") long quantity,
            @JsonProperty("quantityUnit") Optional<String> quantityUnit,
            @JsonProperty("unitPrice") GetPaymentUnitPrice unitPrice,
            @JsonProperty("discountAmount") Optional<? extends GetPaymentDiscountAmount> discountAmount,
            @JsonProperty("totalAmount") GetPaymentTotalAmount totalAmount,
            @JsonProperty("vatRate") Optional<String> vatRate,
            @JsonProperty("vatAmount") Optional<? extends GetPaymentVatAmount> vatAmount,
            @JsonProperty("sku") Optional<String> sku,
            @JsonProperty("categories") Optional<? extends List<GetPaymentCategories>> categories,
            @JsonProperty("imageUrl") Optional<String> imageUrl,
            @JsonProperty("productUrl") Optional<String> productUrl,
            @JsonProperty("recurring") Optional<? extends GetPaymentRecurring> recurring) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(quantityUnit, "quantityUnit");
        Utils.checkNotNull(unitPrice, "unitPrice");
        Utils.checkNotNull(discountAmount, "discountAmount");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(vatRate, "vatRate");
        Utils.checkNotNull(vatAmount, "vatAmount");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(productUrl, "productUrl");
        Utils.checkNotNull(recurring, "recurring");
        this.type = type;
        this.description = description;
        this.quantity = quantity;
        this.quantityUnit = quantityUnit;
        this.unitPrice = unitPrice;
        this.discountAmount = discountAmount;
        this.totalAmount = totalAmount;
        this.vatRate = vatRate;
        this.vatAmount = vatAmount;
        this.sku = sku;
        this.categories = categories;
        this.imageUrl = imageUrl;
        this.productUrl = productUrl;
        this.recurring = recurring;
    }
    
    public GetPaymentLines(
            String description,
            long quantity,
            GetPaymentUnitPrice unitPrice,
            GetPaymentTotalAmount totalAmount) {
        this(Optional.empty(), description, quantity, Optional.empty(), unitPrice, Optional.empty(), totalAmount, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The type of product purchased. For example, a physical or a digital product.
     * 
     * <p>The `tip` payment line type is not available when creating a payment.
     * 
     * <p>Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` `tip` (default: `physical`)
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * A description of the line item. For example *LEGO 4440 Forest Police Station*.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The number of items.
     */
    @JsonIgnore
    public long quantity() {
        return quantity;
    }

    /**
     * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
     */
    @JsonIgnore
    public Optional<String> quantityUnit() {
        return quantityUnit;
    }

    /**
     * The price of a single item including VAT.
     * 
     * <p>For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
     * 
     * <p>For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
     * 
     * <p>The unit price can be zero in case of free items.
     */
    @JsonIgnore
    public GetPaymentUnitPrice unitPrice() {
        return unitPrice;
    }

    /**
     * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetPaymentDiscountAmount> discountAmount() {
        return (Optional<GetPaymentDiscountAmount>) discountAmount;
    }

    /**
     * The total amount of the line, including VAT and discounts.
     * 
     * <p>Should match the following formula: `(unitPrice × quantity) - discountAmount`.
     * 
     * <p>The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
     */
    @JsonIgnore
    public GetPaymentTotalAmount totalAmount() {
        return totalAmount;
    }

    /**
     * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
     */
    @JsonIgnore
    public Optional<String> vatRate() {
        return vatRate;
    }

    /**
     * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
     * 
     * <p>Any deviations from this will result in an error.
     * 
     * <p>For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetPaymentVatAmount> vatAmount() {
        return (Optional<GetPaymentVatAmount>) vatAmount;
    }

    /**
     * The SKU, EAN, ISBN or UPC of the product sold.
     */
    @JsonIgnore
    public Optional<String> sku() {
        return sku;
    }

    /**
     * An array with the voucher categories, in case of a line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetPaymentCategories>> categories() {
        return (Optional<List<GetPaymentCategories>>) categories;
    }

    /**
     * A link pointing to an image of the product sold.
     */
    @JsonIgnore
    public Optional<String> imageUrl() {
        return imageUrl;
    }

    /**
     * A link pointing to the product page in your web shop of the product sold.
     */
    @JsonIgnore
    public Optional<String> productUrl() {
        return productUrl;
    }

    /**
     * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetPaymentRecurring> recurring() {
        return (Optional<GetPaymentRecurring>) recurring;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The type of product purchased. For example, a physical or a digital product.
     * 
     * <p>The `tip` payment line type is not available when creating a payment.
     * 
     * <p>Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` `tip` (default: `physical`)
     */
    public GetPaymentLines withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of product purchased. For example, a physical or a digital product.
     * 
     * <p>The `tip` payment line type is not available when creating a payment.
     * 
     * <p>Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` `tip` (default: `physical`)
     */
    public GetPaymentLines withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * A description of the line item. For example *LEGO 4440 Forest Police Station*.
     */
    public GetPaymentLines withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The number of items.
     */
    public GetPaymentLines withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
     */
    public GetPaymentLines withQuantityUnit(String quantityUnit) {
        Utils.checkNotNull(quantityUnit, "quantityUnit");
        this.quantityUnit = Optional.ofNullable(quantityUnit);
        return this;
    }

    /**
     * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
     */
    public GetPaymentLines withQuantityUnit(Optional<String> quantityUnit) {
        Utils.checkNotNull(quantityUnit, "quantityUnit");
        this.quantityUnit = quantityUnit;
        return this;
    }

    /**
     * The price of a single item including VAT.
     * 
     * <p>For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
     * 
     * <p>For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
     * 
     * <p>The unit price can be zero in case of free items.
     */
    public GetPaymentLines withUnitPrice(GetPaymentUnitPrice unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = unitPrice;
        return this;
    }

    /**
     * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
     */
    public GetPaymentLines withDiscountAmount(GetPaymentDiscountAmount discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = Optional.ofNullable(discountAmount);
        return this;
    }

    /**
     * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
     */
    public GetPaymentLines withDiscountAmount(Optional<? extends GetPaymentDiscountAmount> discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = discountAmount;
        return this;
    }

    /**
     * The total amount of the line, including VAT and discounts.
     * 
     * <p>Should match the following formula: `(unitPrice × quantity) - discountAmount`.
     * 
     * <p>The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
     */
    public GetPaymentLines withTotalAmount(GetPaymentTotalAmount totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
     */
    public GetPaymentLines withVatRate(String vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = Optional.ofNullable(vatRate);
        return this;
    }

    /**
     * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
     */
    public GetPaymentLines withVatRate(Optional<String> vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = vatRate;
        return this;
    }

    /**
     * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
     * 
     * <p>Any deviations from this will result in an error.
     * 
     * <p>For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
     */
    public GetPaymentLines withVatAmount(GetPaymentVatAmount vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = Optional.ofNullable(vatAmount);
        return this;
    }

    /**
     * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
     * 
     * <p>Any deviations from this will result in an error.
     * 
     * <p>For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
     */
    public GetPaymentLines withVatAmount(Optional<? extends GetPaymentVatAmount> vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = vatAmount;
        return this;
    }

    /**
     * The SKU, EAN, ISBN or UPC of the product sold.
     */
    public GetPaymentLines withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = Optional.ofNullable(sku);
        return this;
    }

    /**
     * The SKU, EAN, ISBN or UPC of the product sold.
     */
    public GetPaymentLines withSku(Optional<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * An array with the voucher categories, in case of a line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
     */
    public GetPaymentLines withCategories(List<GetPaymentCategories> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = Optional.ofNullable(categories);
        return this;
    }

    /**
     * An array with the voucher categories, in case of a line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
     */
    public GetPaymentLines withCategories(Optional<? extends List<GetPaymentCategories>> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    /**
     * A link pointing to an image of the product sold.
     */
    public GetPaymentLines withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = Optional.ofNullable(imageUrl);
        return this;
    }

    /**
     * A link pointing to an image of the product sold.
     */
    public GetPaymentLines withImageUrl(Optional<String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    /**
     * A link pointing to the product page in your web shop of the product sold.
     */
    public GetPaymentLines withProductUrl(String productUrl) {
        Utils.checkNotNull(productUrl, "productUrl");
        this.productUrl = Optional.ofNullable(productUrl);
        return this;
    }

    /**
     * A link pointing to the product page in your web shop of the product sold.
     */
    public GetPaymentLines withProductUrl(Optional<String> productUrl) {
        Utils.checkNotNull(productUrl, "productUrl");
        this.productUrl = productUrl;
        return this;
    }

    /**
     * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
     */
    public GetPaymentLines withRecurring(GetPaymentRecurring recurring) {
        Utils.checkNotNull(recurring, "recurring");
        this.recurring = Optional.ofNullable(recurring);
        return this;
    }

    /**
     * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
     */
    public GetPaymentLines withRecurring(Optional<? extends GetPaymentRecurring> recurring) {
        Utils.checkNotNull(recurring, "recurring");
        this.recurring = recurring;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPaymentLines other = (GetPaymentLines) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.quantityUnit, other.quantityUnit) &&
            Objects.deepEquals(this.unitPrice, other.unitPrice) &&
            Objects.deepEquals(this.discountAmount, other.discountAmount) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.vatRate, other.vatRate) &&
            Objects.deepEquals(this.vatAmount, other.vatAmount) &&
            Objects.deepEquals(this.sku, other.sku) &&
            Objects.deepEquals(this.categories, other.categories) &&
            Objects.deepEquals(this.imageUrl, other.imageUrl) &&
            Objects.deepEquals(this.productUrl, other.productUrl) &&
            Objects.deepEquals(this.recurring, other.recurring);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            description,
            quantity,
            quantityUnit,
            unitPrice,
            discountAmount,
            totalAmount,
            vatRate,
            vatAmount,
            sku,
            categories,
            imageUrl,
            productUrl,
            recurring);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPaymentLines.class,
                "type", type,
                "description", description,
                "quantity", quantity,
                "quantityUnit", quantityUnit,
                "unitPrice", unitPrice,
                "discountAmount", discountAmount,
                "totalAmount", totalAmount,
                "vatRate", vatRate,
                "vatAmount", vatAmount,
                "sku", sku,
                "categories", categories,
                "imageUrl", imageUrl,
                "productUrl", productUrl,
                "recurring", recurring);
    }
    
    public final static class Builder {
 
        private Optional<String> type = Optional.empty();
 
        private String description;
 
        private Long quantity;
 
        private Optional<String> quantityUnit = Optional.empty();
 
        private GetPaymentUnitPrice unitPrice;
 
        private Optional<? extends GetPaymentDiscountAmount> discountAmount = Optional.empty();
 
        private GetPaymentTotalAmount totalAmount;
 
        private Optional<String> vatRate = Optional.empty();
 
        private Optional<? extends GetPaymentVatAmount> vatAmount = Optional.empty();
 
        private Optional<String> sku = Optional.empty();
 
        private Optional<? extends List<GetPaymentCategories>> categories = Optional.empty();
 
        private Optional<String> imageUrl = Optional.empty();
 
        private Optional<String> productUrl = Optional.empty();
 
        private Optional<? extends GetPaymentRecurring> recurring = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of product purchased. For example, a physical or a digital product.
         * 
         * <p>The `tip` payment line type is not available when creating a payment.
         * 
         * <p>Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` `tip` (default: `physical`)
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of product purchased. For example, a physical or a digital product.
         * 
         * <p>The `tip` payment line type is not available when creating a payment.
         * 
         * <p>Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` `tip` (default: `physical`)
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * A description of the line item. For example *LEGO 4440 Forest Police Station*.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The number of items.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
         */
        public Builder quantityUnit(String quantityUnit) {
            Utils.checkNotNull(quantityUnit, "quantityUnit");
            this.quantityUnit = Optional.ofNullable(quantityUnit);
            return this;
        }

        /**
         * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
         */
        public Builder quantityUnit(Optional<String> quantityUnit) {
            Utils.checkNotNull(quantityUnit, "quantityUnit");
            this.quantityUnit = quantityUnit;
            return this;
        }

        /**
         * The price of a single item including VAT.
         * 
         * <p>For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
         * 
         * <p>For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
         * 
         * <p>The unit price can be zero in case of free items.
         */
        public Builder unitPrice(GetPaymentUnitPrice unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = unitPrice;
            return this;
        }

        /**
         * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
         */
        public Builder discountAmount(GetPaymentDiscountAmount discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = Optional.ofNullable(discountAmount);
            return this;
        }

        /**
         * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
         */
        public Builder discountAmount(Optional<? extends GetPaymentDiscountAmount> discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = discountAmount;
            return this;
        }

        /**
         * The total amount of the line, including VAT and discounts.
         * 
         * <p>Should match the following formula: `(unitPrice × quantity) - discountAmount`.
         * 
         * <p>The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
         */
        public Builder totalAmount(GetPaymentTotalAmount totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
         */
        public Builder vatRate(String vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = Optional.ofNullable(vatRate);
            return this;
        }

        /**
         * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
         */
        public Builder vatRate(Optional<String> vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = vatRate;
            return this;
        }

        /**
         * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
         * 
         * <p>Any deviations from this will result in an error.
         * 
         * <p>For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
         */
        public Builder vatAmount(GetPaymentVatAmount vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = Optional.ofNullable(vatAmount);
            return this;
        }

        /**
         * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
         * 
         * <p>Any deviations from this will result in an error.
         * 
         * <p>For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
         */
        public Builder vatAmount(Optional<? extends GetPaymentVatAmount> vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = vatAmount;
            return this;
        }

        /**
         * The SKU, EAN, ISBN or UPC of the product sold.
         */
        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = Optional.ofNullable(sku);
            return this;
        }

        /**
         * The SKU, EAN, ISBN or UPC of the product sold.
         */
        public Builder sku(Optional<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        /**
         * An array with the voucher categories, in case of a line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
         */
        public Builder categories(List<GetPaymentCategories> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        /**
         * An array with the voucher categories, in case of a line eligible for a voucher. See the [Integrating Vouchers](integrating-vouchers) guide for more information.
         */
        public Builder categories(Optional<? extends List<GetPaymentCategories>> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }

        /**
         * A link pointing to an image of the product sold.
         */
        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = Optional.ofNullable(imageUrl);
            return this;
        }

        /**
         * A link pointing to an image of the product sold.
         */
        public Builder imageUrl(Optional<String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }

        /**
         * A link pointing to the product page in your web shop of the product sold.
         */
        public Builder productUrl(String productUrl) {
            Utils.checkNotNull(productUrl, "productUrl");
            this.productUrl = Optional.ofNullable(productUrl);
            return this;
        }

        /**
         * A link pointing to the product page in your web shop of the product sold.
         */
        public Builder productUrl(Optional<String> productUrl) {
            Utils.checkNotNull(productUrl, "productUrl");
            this.productUrl = productUrl;
            return this;
        }

        /**
         * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
         */
        public Builder recurring(GetPaymentRecurring recurring) {
            Utils.checkNotNull(recurring, "recurring");
            this.recurring = Optional.ofNullable(recurring);
            return this;
        }

        /**
         * The details of subsequent recurring billing cycles. These parameters are used in the Mollie Checkout to inform the shopper of the details for recurring products in the payments.
         */
        public Builder recurring(Optional<? extends GetPaymentRecurring> recurring) {
            Utils.checkNotNull(recurring, "recurring");
            this.recurring = recurring;
            return this;
        }
        
        public GetPaymentLines build() {
            return new GetPaymentLines(
                type,
                description,
                quantity,
                quantityUnit,
                unitPrice,
                discountAmount,
                totalAmount,
                vatRate,
                vatAmount,
                sku,
                categories,
                imageUrl,
                productUrl,
                recurring);
        }
    }
}
