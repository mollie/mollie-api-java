/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class Details {

    /**
     * The customer's name. Available for SEPA Direct Debit and PayPal mandates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumerName")
    private JsonNullable<String> consumerName;

    /**
     * The customer's IBAN or email address. Available for SEPA Direct Debit and PayPal mandates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumerAccount")
    private JsonNullable<String> consumerAccount;

    /**
     * The BIC of the customer's bank. Available for SEPA Direct Debit mandates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumerBic")
    private JsonNullable<String> consumerBic;

    /**
     * The card holder's name. Available for card mandates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardHolder")
    private JsonNullable<String> cardHolder;

    /**
     * The last four digits of the card number. Available for card mandates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardNumber")
    private JsonNullable<String> cardNumber;

    /**
     * The card's expiry date in `YYYY-MM-DD` format. Available for card mandates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardExpiryDate")
    private JsonNullable<String> cardExpiryDate;

    /**
     * The card's label. Available for card mandates, if the card label could be detected.
     * 
     * <p>Possible values: `American Express` `Carta Si` `Carte Bleue` `Dankort` `Diners Club` `Discover` `JCB` `Laser` `Maestro` `Mastercard` `Unionpay` `Visa`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardLabel")
    private JsonNullable<String> cardLabel;

    /**
     * Unique alphanumeric representation of this specific card. Available for card mandates. Can be used to identify returning customers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardFingerprint")
    private JsonNullable<String> cardFingerprint;

    @JsonCreator
    public Details(
            @JsonProperty("consumerName") JsonNullable<String> consumerName,
            @JsonProperty("consumerAccount") JsonNullable<String> consumerAccount,
            @JsonProperty("consumerBic") JsonNullable<String> consumerBic,
            @JsonProperty("cardHolder") JsonNullable<String> cardHolder,
            @JsonProperty("cardNumber") JsonNullable<String> cardNumber,
            @JsonProperty("cardExpiryDate") JsonNullable<String> cardExpiryDate,
            @JsonProperty("cardLabel") JsonNullable<String> cardLabel,
            @JsonProperty("cardFingerprint") JsonNullable<String> cardFingerprint) {
        Utils.checkNotNull(consumerName, "consumerName");
        Utils.checkNotNull(consumerAccount, "consumerAccount");
        Utils.checkNotNull(consumerBic, "consumerBic");
        Utils.checkNotNull(cardHolder, "cardHolder");
        Utils.checkNotNull(cardNumber, "cardNumber");
        Utils.checkNotNull(cardExpiryDate, "cardExpiryDate");
        Utils.checkNotNull(cardLabel, "cardLabel");
        Utils.checkNotNull(cardFingerprint, "cardFingerprint");
        this.consumerName = consumerName;
        this.consumerAccount = consumerAccount;
        this.consumerBic = consumerBic;
        this.cardHolder = cardHolder;
        this.cardNumber = cardNumber;
        this.cardExpiryDate = cardExpiryDate;
        this.cardLabel = cardLabel;
        this.cardFingerprint = cardFingerprint;
    }
    
    public Details() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The customer's name. Available for SEPA Direct Debit and PayPal mandates.
     */
    @JsonIgnore
    public JsonNullable<String> consumerName() {
        return consumerName;
    }

    /**
     * The customer's IBAN or email address. Available for SEPA Direct Debit and PayPal mandates.
     */
    @JsonIgnore
    public JsonNullable<String> consumerAccount() {
        return consumerAccount;
    }

    /**
     * The BIC of the customer's bank. Available for SEPA Direct Debit mandates.
     */
    @JsonIgnore
    public JsonNullable<String> consumerBic() {
        return consumerBic;
    }

    /**
     * The card holder's name. Available for card mandates.
     */
    @JsonIgnore
    public JsonNullable<String> cardHolder() {
        return cardHolder;
    }

    /**
     * The last four digits of the card number. Available for card mandates.
     */
    @JsonIgnore
    public JsonNullable<String> cardNumber() {
        return cardNumber;
    }

    /**
     * The card's expiry date in `YYYY-MM-DD` format. Available for card mandates.
     */
    @JsonIgnore
    public JsonNullable<String> cardExpiryDate() {
        return cardExpiryDate;
    }

    /**
     * The card's label. Available for card mandates, if the card label could be detected.
     * 
     * <p>Possible values: `American Express` `Carta Si` `Carte Bleue` `Dankort` `Diners Club` `Discover` `JCB` `Laser` `Maestro` `Mastercard` `Unionpay` `Visa`
     */
    @JsonIgnore
    public JsonNullable<String> cardLabel() {
        return cardLabel;
    }

    /**
     * Unique alphanumeric representation of this specific card. Available for card mandates. Can be used to identify returning customers.
     */
    @JsonIgnore
    public JsonNullable<String> cardFingerprint() {
        return cardFingerprint;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The customer's name. Available for SEPA Direct Debit and PayPal mandates.
     */
    public Details withConsumerName(String consumerName) {
        Utils.checkNotNull(consumerName, "consumerName");
        this.consumerName = JsonNullable.of(consumerName);
        return this;
    }

    /**
     * The customer's name. Available for SEPA Direct Debit and PayPal mandates.
     */
    public Details withConsumerName(JsonNullable<String> consumerName) {
        Utils.checkNotNull(consumerName, "consumerName");
        this.consumerName = consumerName;
        return this;
    }

    /**
     * The customer's IBAN or email address. Available for SEPA Direct Debit and PayPal mandates.
     */
    public Details withConsumerAccount(String consumerAccount) {
        Utils.checkNotNull(consumerAccount, "consumerAccount");
        this.consumerAccount = JsonNullable.of(consumerAccount);
        return this;
    }

    /**
     * The customer's IBAN or email address. Available for SEPA Direct Debit and PayPal mandates.
     */
    public Details withConsumerAccount(JsonNullable<String> consumerAccount) {
        Utils.checkNotNull(consumerAccount, "consumerAccount");
        this.consumerAccount = consumerAccount;
        return this;
    }

    /**
     * The BIC of the customer's bank. Available for SEPA Direct Debit mandates.
     */
    public Details withConsumerBic(String consumerBic) {
        Utils.checkNotNull(consumerBic, "consumerBic");
        this.consumerBic = JsonNullable.of(consumerBic);
        return this;
    }

    /**
     * The BIC of the customer's bank. Available for SEPA Direct Debit mandates.
     */
    public Details withConsumerBic(JsonNullable<String> consumerBic) {
        Utils.checkNotNull(consumerBic, "consumerBic");
        this.consumerBic = consumerBic;
        return this;
    }

    /**
     * The card holder's name. Available for card mandates.
     */
    public Details withCardHolder(String cardHolder) {
        Utils.checkNotNull(cardHolder, "cardHolder");
        this.cardHolder = JsonNullable.of(cardHolder);
        return this;
    }

    /**
     * The card holder's name. Available for card mandates.
     */
    public Details withCardHolder(JsonNullable<String> cardHolder) {
        Utils.checkNotNull(cardHolder, "cardHolder");
        this.cardHolder = cardHolder;
        return this;
    }

    /**
     * The last four digits of the card number. Available for card mandates.
     */
    public Details withCardNumber(String cardNumber) {
        Utils.checkNotNull(cardNumber, "cardNumber");
        this.cardNumber = JsonNullable.of(cardNumber);
        return this;
    }

    /**
     * The last four digits of the card number. Available for card mandates.
     */
    public Details withCardNumber(JsonNullable<String> cardNumber) {
        Utils.checkNotNull(cardNumber, "cardNumber");
        this.cardNumber = cardNumber;
        return this;
    }

    /**
     * The card's expiry date in `YYYY-MM-DD` format. Available for card mandates.
     */
    public Details withCardExpiryDate(String cardExpiryDate) {
        Utils.checkNotNull(cardExpiryDate, "cardExpiryDate");
        this.cardExpiryDate = JsonNullable.of(cardExpiryDate);
        return this;
    }

    /**
     * The card's expiry date in `YYYY-MM-DD` format. Available for card mandates.
     */
    public Details withCardExpiryDate(JsonNullable<String> cardExpiryDate) {
        Utils.checkNotNull(cardExpiryDate, "cardExpiryDate");
        this.cardExpiryDate = cardExpiryDate;
        return this;
    }

    /**
     * The card's label. Available for card mandates, if the card label could be detected.
     * 
     * <p>Possible values: `American Express` `Carta Si` `Carte Bleue` `Dankort` `Diners Club` `Discover` `JCB` `Laser` `Maestro` `Mastercard` `Unionpay` `Visa`
     */
    public Details withCardLabel(String cardLabel) {
        Utils.checkNotNull(cardLabel, "cardLabel");
        this.cardLabel = JsonNullable.of(cardLabel);
        return this;
    }

    /**
     * The card's label. Available for card mandates, if the card label could be detected.
     * 
     * <p>Possible values: `American Express` `Carta Si` `Carte Bleue` `Dankort` `Diners Club` `Discover` `JCB` `Laser` `Maestro` `Mastercard` `Unionpay` `Visa`
     */
    public Details withCardLabel(JsonNullable<String> cardLabel) {
        Utils.checkNotNull(cardLabel, "cardLabel");
        this.cardLabel = cardLabel;
        return this;
    }

    /**
     * Unique alphanumeric representation of this specific card. Available for card mandates. Can be used to identify returning customers.
     */
    public Details withCardFingerprint(String cardFingerprint) {
        Utils.checkNotNull(cardFingerprint, "cardFingerprint");
        this.cardFingerprint = JsonNullable.of(cardFingerprint);
        return this;
    }

    /**
     * Unique alphanumeric representation of this specific card. Available for card mandates. Can be used to identify returning customers.
     */
    public Details withCardFingerprint(JsonNullable<String> cardFingerprint) {
        Utils.checkNotNull(cardFingerprint, "cardFingerprint");
        this.cardFingerprint = cardFingerprint;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Details other = (Details) o;
        return 
            Objects.deepEquals(this.consumerName, other.consumerName) &&
            Objects.deepEquals(this.consumerAccount, other.consumerAccount) &&
            Objects.deepEquals(this.consumerBic, other.consumerBic) &&
            Objects.deepEquals(this.cardHolder, other.cardHolder) &&
            Objects.deepEquals(this.cardNumber, other.cardNumber) &&
            Objects.deepEquals(this.cardExpiryDate, other.cardExpiryDate) &&
            Objects.deepEquals(this.cardLabel, other.cardLabel) &&
            Objects.deepEquals(this.cardFingerprint, other.cardFingerprint);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            consumerName,
            consumerAccount,
            consumerBic,
            cardHolder,
            cardNumber,
            cardExpiryDate,
            cardLabel,
            cardFingerprint);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Details.class,
                "consumerName", consumerName,
                "consumerAccount", consumerAccount,
                "consumerBic", consumerBic,
                "cardHolder", cardHolder,
                "cardNumber", cardNumber,
                "cardExpiryDate", cardExpiryDate,
                "cardLabel", cardLabel,
                "cardFingerprint", cardFingerprint);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> consumerName = JsonNullable.undefined();
 
        private JsonNullable<String> consumerAccount = JsonNullable.undefined();
 
        private JsonNullable<String> consumerBic = JsonNullable.undefined();
 
        private JsonNullable<String> cardHolder = JsonNullable.undefined();
 
        private JsonNullable<String> cardNumber = JsonNullable.undefined();
 
        private JsonNullable<String> cardExpiryDate = JsonNullable.undefined();
 
        private JsonNullable<String> cardLabel = JsonNullable.undefined();
 
        private JsonNullable<String> cardFingerprint = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The customer's name. Available for SEPA Direct Debit and PayPal mandates.
         */
        public Builder consumerName(String consumerName) {
            Utils.checkNotNull(consumerName, "consumerName");
            this.consumerName = JsonNullable.of(consumerName);
            return this;
        }

        /**
         * The customer's name. Available for SEPA Direct Debit and PayPal mandates.
         */
        public Builder consumerName(JsonNullable<String> consumerName) {
            Utils.checkNotNull(consumerName, "consumerName");
            this.consumerName = consumerName;
            return this;
        }

        /**
         * The customer's IBAN or email address. Available for SEPA Direct Debit and PayPal mandates.
         */
        public Builder consumerAccount(String consumerAccount) {
            Utils.checkNotNull(consumerAccount, "consumerAccount");
            this.consumerAccount = JsonNullable.of(consumerAccount);
            return this;
        }

        /**
         * The customer's IBAN or email address. Available for SEPA Direct Debit and PayPal mandates.
         */
        public Builder consumerAccount(JsonNullable<String> consumerAccount) {
            Utils.checkNotNull(consumerAccount, "consumerAccount");
            this.consumerAccount = consumerAccount;
            return this;
        }

        /**
         * The BIC of the customer's bank. Available for SEPA Direct Debit mandates.
         */
        public Builder consumerBic(String consumerBic) {
            Utils.checkNotNull(consumerBic, "consumerBic");
            this.consumerBic = JsonNullable.of(consumerBic);
            return this;
        }

        /**
         * The BIC of the customer's bank. Available for SEPA Direct Debit mandates.
         */
        public Builder consumerBic(JsonNullable<String> consumerBic) {
            Utils.checkNotNull(consumerBic, "consumerBic");
            this.consumerBic = consumerBic;
            return this;
        }

        /**
         * The card holder's name. Available for card mandates.
         */
        public Builder cardHolder(String cardHolder) {
            Utils.checkNotNull(cardHolder, "cardHolder");
            this.cardHolder = JsonNullable.of(cardHolder);
            return this;
        }

        /**
         * The card holder's name. Available for card mandates.
         */
        public Builder cardHolder(JsonNullable<String> cardHolder) {
            Utils.checkNotNull(cardHolder, "cardHolder");
            this.cardHolder = cardHolder;
            return this;
        }

        /**
         * The last four digits of the card number. Available for card mandates.
         */
        public Builder cardNumber(String cardNumber) {
            Utils.checkNotNull(cardNumber, "cardNumber");
            this.cardNumber = JsonNullable.of(cardNumber);
            return this;
        }

        /**
         * The last four digits of the card number. Available for card mandates.
         */
        public Builder cardNumber(JsonNullable<String> cardNumber) {
            Utils.checkNotNull(cardNumber, "cardNumber");
            this.cardNumber = cardNumber;
            return this;
        }

        /**
         * The card's expiry date in `YYYY-MM-DD` format. Available for card mandates.
         */
        public Builder cardExpiryDate(String cardExpiryDate) {
            Utils.checkNotNull(cardExpiryDate, "cardExpiryDate");
            this.cardExpiryDate = JsonNullable.of(cardExpiryDate);
            return this;
        }

        /**
         * The card's expiry date in `YYYY-MM-DD` format. Available for card mandates.
         */
        public Builder cardExpiryDate(JsonNullable<String> cardExpiryDate) {
            Utils.checkNotNull(cardExpiryDate, "cardExpiryDate");
            this.cardExpiryDate = cardExpiryDate;
            return this;
        }

        /**
         * The card's label. Available for card mandates, if the card label could be detected.
         * 
         * <p>Possible values: `American Express` `Carta Si` `Carte Bleue` `Dankort` `Diners Club` `Discover` `JCB` `Laser` `Maestro` `Mastercard` `Unionpay` `Visa`
         */
        public Builder cardLabel(String cardLabel) {
            Utils.checkNotNull(cardLabel, "cardLabel");
            this.cardLabel = JsonNullable.of(cardLabel);
            return this;
        }

        /**
         * The card's label. Available for card mandates, if the card label could be detected.
         * 
         * <p>Possible values: `American Express` `Carta Si` `Carte Bleue` `Dankort` `Diners Club` `Discover` `JCB` `Laser` `Maestro` `Mastercard` `Unionpay` `Visa`
         */
        public Builder cardLabel(JsonNullable<String> cardLabel) {
            Utils.checkNotNull(cardLabel, "cardLabel");
            this.cardLabel = cardLabel;
            return this;
        }

        /**
         * Unique alphanumeric representation of this specific card. Available for card mandates. Can be used to identify returning customers.
         */
        public Builder cardFingerprint(String cardFingerprint) {
            Utils.checkNotNull(cardFingerprint, "cardFingerprint");
            this.cardFingerprint = JsonNullable.of(cardFingerprint);
            return this;
        }

        /**
         * Unique alphanumeric representation of this specific card. Available for card mandates. Can be used to identify returning customers.
         */
        public Builder cardFingerprint(JsonNullable<String> cardFingerprint) {
            Utils.checkNotNull(cardFingerprint, "cardFingerprint");
            this.cardFingerprint = cardFingerprint;
            return this;
        }
        
        public Details build() {
            return new Details(
                consumerName,
                consumerAccount,
                consumerBic,
                cardHolder,
                cardNumber,
                cardExpiryDate,
                cardLabel,
                cardFingerprint);
        }
    }
}
