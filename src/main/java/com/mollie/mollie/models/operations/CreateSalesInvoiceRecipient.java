/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateSalesInvoiceRecipient {

    /**
     * The type of recipient, either `consumer` or `business`. This will determine what further fields are required on the `recipient` object.
     * 
     * <p>Possible values: `consumer` `business`
     */
    @JsonProperty("type")
    private String type;

    /**
     * The title of the `consumer` type recipient, for example Mr. or Mrs..
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("givenName")
    private JsonNullable<String> givenName;

    /**
     * The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("familyName")
    private JsonNullable<String> familyName;

    /**
     * The trading name of the `business` type recipient.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationName")
    private JsonNullable<String> organizationName;

    /**
     * The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber` has to be provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationNumber")
    private JsonNullable<String> organizationNumber;

    /**
     * The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber` has to be provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatNumber")
    private JsonNullable<String> vatNumber;

    /**
     * The email address of the recipient.
     */
    @JsonProperty("email")
    private String email;

    /**
     * The phone number of the recipient.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private JsonNullable<String> phone;

    /**
     * A street and street number.
     */
    @JsonProperty("streetAndNumber")
    private String streetAndNumber;

    /**
     * Any additional addressing details, for example an apartment number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streetAdditional")
    private JsonNullable<String> streetAdditional;

    /**
     * A postal code.
     */
    @JsonProperty("postalCode")
    private String postalCode;

    /**
     * The recipient's city.
     */
    @JsonProperty("city")
    private String city;

    /**
     * The recipient's region.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private JsonNullable<String> region;

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    @JsonProperty("country")
    private String country;

    /**
     * The locale for the recipient, to be used for translations in PDF generation and payment pages.
     * 
     * <p>Possible values: `en_US` `en_GB` `nl_NL` `nl_BE` `de_DE` `de_AT` `de_CH` `fr_FR` `fr_BE`
     */
    @JsonProperty("locale")
    private String locale;

    @JsonCreator
    public CreateSalesInvoiceRecipient(
            @JsonProperty("type") String type,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("givenName") JsonNullable<String> givenName,
            @JsonProperty("familyName") JsonNullable<String> familyName,
            @JsonProperty("organizationName") JsonNullable<String> organizationName,
            @JsonProperty("organizationNumber") JsonNullable<String> organizationNumber,
            @JsonProperty("vatNumber") JsonNullable<String> vatNumber,
            @JsonProperty("email") String email,
            @JsonProperty("phone") JsonNullable<String> phone,
            @JsonProperty("streetAndNumber") String streetAndNumber,
            @JsonProperty("streetAdditional") JsonNullable<String> streetAdditional,
            @JsonProperty("postalCode") String postalCode,
            @JsonProperty("city") String city,
            @JsonProperty("region") JsonNullable<String> region,
            @JsonProperty("country") String country,
            @JsonProperty("locale") String locale) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(givenName, "givenName");
        Utils.checkNotNull(familyName, "familyName");
        Utils.checkNotNull(organizationName, "organizationName");
        Utils.checkNotNull(organizationNumber, "organizationNumber");
        Utils.checkNotNull(vatNumber, "vatNumber");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(streetAndNumber, "streetAndNumber");
        Utils.checkNotNull(streetAdditional, "streetAdditional");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(locale, "locale");
        this.type = type;
        this.title = title;
        this.givenName = givenName;
        this.familyName = familyName;
        this.organizationName = organizationName;
        this.organizationNumber = organizationNumber;
        this.vatNumber = vatNumber;
        this.email = email;
        this.phone = phone;
        this.streetAndNumber = streetAndNumber;
        this.streetAdditional = streetAdditional;
        this.postalCode = postalCode;
        this.city = city;
        this.region = region;
        this.country = country;
        this.locale = locale;
    }
    
    public CreateSalesInvoiceRecipient(
            String type,
            String email,
            String streetAndNumber,
            String postalCode,
            String city,
            String country,
            String locale) {
        this(type, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), email, JsonNullable.undefined(), streetAndNumber, JsonNullable.undefined(), postalCode, city, JsonNullable.undefined(), country, locale);
    }

    /**
     * The type of recipient, either `consumer` or `business`. This will determine what further fields are required on the `recipient` object.
     * 
     * <p>Possible values: `consumer` `business`
     */
    @JsonIgnore
    public String type() {
        return type;
    }

    /**
     * The title of the `consumer` type recipient, for example Mr. or Mrs..
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    /**
     * The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
     */
    @JsonIgnore
    public JsonNullable<String> givenName() {
        return givenName;
    }

    /**
     * The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
     */
    @JsonIgnore
    public JsonNullable<String> familyName() {
        return familyName;
    }

    /**
     * The trading name of the `business` type recipient.
     */
    @JsonIgnore
    public JsonNullable<String> organizationName() {
        return organizationName;
    }

    /**
     * The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber` has to be provided.
     */
    @JsonIgnore
    public JsonNullable<String> organizationNumber() {
        return organizationNumber;
    }

    /**
     * The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber` has to be provided.
     */
    @JsonIgnore
    public JsonNullable<String> vatNumber() {
        return vatNumber;
    }

    /**
     * The email address of the recipient.
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * The phone number of the recipient.
     */
    @JsonIgnore
    public JsonNullable<String> phone() {
        return phone;
    }

    /**
     * A street and street number.
     */
    @JsonIgnore
    public String streetAndNumber() {
        return streetAndNumber;
    }

    /**
     * Any additional addressing details, for example an apartment number.
     */
    @JsonIgnore
    public JsonNullable<String> streetAdditional() {
        return streetAdditional;
    }

    /**
     * A postal code.
     */
    @JsonIgnore
    public String postalCode() {
        return postalCode;
    }

    /**
     * The recipient's city.
     */
    @JsonIgnore
    public String city() {
        return city;
    }

    /**
     * The recipient's region.
     */
    @JsonIgnore
    public JsonNullable<String> region() {
        return region;
    }

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    @JsonIgnore
    public String country() {
        return country;
    }

    /**
     * The locale for the recipient, to be used for translations in PDF generation and payment pages.
     * 
     * <p>Possible values: `en_US` `en_GB` `nl_NL` `nl_BE` `de_DE` `de_AT` `de_CH` `fr_FR` `fr_BE`
     */
    @JsonIgnore
    public String locale() {
        return locale;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The type of recipient, either `consumer` or `business`. This will determine what further fields are required on the `recipient` object.
     * 
     * <p>Possible values: `consumer` `business`
     */
    public CreateSalesInvoiceRecipient withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The title of the `consumer` type recipient, for example Mr. or Mrs..
     */
    public CreateSalesInvoiceRecipient withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The title of the `consumer` type recipient, for example Mr. or Mrs..
     */
    public CreateSalesInvoiceRecipient withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
     */
    public CreateSalesInvoiceRecipient withGivenName(String givenName) {
        Utils.checkNotNull(givenName, "givenName");
        this.givenName = JsonNullable.of(givenName);
        return this;
    }

    /**
     * The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
     */
    public CreateSalesInvoiceRecipient withGivenName(JsonNullable<String> givenName) {
        Utils.checkNotNull(givenName, "givenName");
        this.givenName = givenName;
        return this;
    }

    /**
     * The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
     */
    public CreateSalesInvoiceRecipient withFamilyName(String familyName) {
        Utils.checkNotNull(familyName, "familyName");
        this.familyName = JsonNullable.of(familyName);
        return this;
    }

    /**
     * The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
     */
    public CreateSalesInvoiceRecipient withFamilyName(JsonNullable<String> familyName) {
        Utils.checkNotNull(familyName, "familyName");
        this.familyName = familyName;
        return this;
    }

    /**
     * The trading name of the `business` type recipient.
     */
    public CreateSalesInvoiceRecipient withOrganizationName(String organizationName) {
        Utils.checkNotNull(organizationName, "organizationName");
        this.organizationName = JsonNullable.of(organizationName);
        return this;
    }

    /**
     * The trading name of the `business` type recipient.
     */
    public CreateSalesInvoiceRecipient withOrganizationName(JsonNullable<String> organizationName) {
        Utils.checkNotNull(organizationName, "organizationName");
        this.organizationName = organizationName;
        return this;
    }

    /**
     * The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber` has to be provided.
     */
    public CreateSalesInvoiceRecipient withOrganizationNumber(String organizationNumber) {
        Utils.checkNotNull(organizationNumber, "organizationNumber");
        this.organizationNumber = JsonNullable.of(organizationNumber);
        return this;
    }

    /**
     * The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber` has to be provided.
     */
    public CreateSalesInvoiceRecipient withOrganizationNumber(JsonNullable<String> organizationNumber) {
        Utils.checkNotNull(organizationNumber, "organizationNumber");
        this.organizationNumber = organizationNumber;
        return this;
    }

    /**
     * The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber` has to be provided.
     */
    public CreateSalesInvoiceRecipient withVatNumber(String vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = JsonNullable.of(vatNumber);
        return this;
    }

    /**
     * The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber` has to be provided.
     */
    public CreateSalesInvoiceRecipient withVatNumber(JsonNullable<String> vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = vatNumber;
        return this;
    }

    /**
     * The email address of the recipient.
     */
    public CreateSalesInvoiceRecipient withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The phone number of the recipient.
     */
    public CreateSalesInvoiceRecipient withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = JsonNullable.of(phone);
        return this;
    }

    /**
     * The phone number of the recipient.
     */
    public CreateSalesInvoiceRecipient withPhone(JsonNullable<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * A street and street number.
     */
    public CreateSalesInvoiceRecipient withStreetAndNumber(String streetAndNumber) {
        Utils.checkNotNull(streetAndNumber, "streetAndNumber");
        this.streetAndNumber = streetAndNumber;
        return this;
    }

    /**
     * Any additional addressing details, for example an apartment number.
     */
    public CreateSalesInvoiceRecipient withStreetAdditional(String streetAdditional) {
        Utils.checkNotNull(streetAdditional, "streetAdditional");
        this.streetAdditional = JsonNullable.of(streetAdditional);
        return this;
    }

    /**
     * Any additional addressing details, for example an apartment number.
     */
    public CreateSalesInvoiceRecipient withStreetAdditional(JsonNullable<String> streetAdditional) {
        Utils.checkNotNull(streetAdditional, "streetAdditional");
        this.streetAdditional = streetAdditional;
        return this;
    }

    /**
     * A postal code.
     */
    public CreateSalesInvoiceRecipient withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * The recipient's city.
     */
    public CreateSalesInvoiceRecipient withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * The recipient's region.
     */
    public CreateSalesInvoiceRecipient withRegion(String region) {
        Utils.checkNotNull(region, "region");
        this.region = JsonNullable.of(region);
        return this;
    }

    /**
     * The recipient's region.
     */
    public CreateSalesInvoiceRecipient withRegion(JsonNullable<String> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    public CreateSalesInvoiceRecipient withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The locale for the recipient, to be used for translations in PDF generation and payment pages.
     * 
     * <p>Possible values: `en_US` `en_GB` `nl_NL` `nl_BE` `de_DE` `de_AT` `de_CH` `fr_FR` `fr_BE`
     */
    public CreateSalesInvoiceRecipient withLocale(String locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateSalesInvoiceRecipient other = (CreateSalesInvoiceRecipient) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.givenName, other.givenName) &&
            Utils.enhancedDeepEquals(this.familyName, other.familyName) &&
            Utils.enhancedDeepEquals(this.organizationName, other.organizationName) &&
            Utils.enhancedDeepEquals(this.organizationNumber, other.organizationNumber) &&
            Utils.enhancedDeepEquals(this.vatNumber, other.vatNumber) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.phone, other.phone) &&
            Utils.enhancedDeepEquals(this.streetAndNumber, other.streetAndNumber) &&
            Utils.enhancedDeepEquals(this.streetAdditional, other.streetAdditional) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.region, other.region) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.locale, other.locale);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type,
            title,
            givenName,
            familyName,
            organizationName,
            organizationNumber,
            vatNumber,
            email,
            phone,
            streetAndNumber,
            streetAdditional,
            postalCode,
            city,
            region,
            country,
            locale);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateSalesInvoiceRecipient.class,
                "type", type,
                "title", title,
                "givenName", givenName,
                "familyName", familyName,
                "organizationName", organizationName,
                "organizationNumber", organizationNumber,
                "vatNumber", vatNumber,
                "email", email,
                "phone", phone,
                "streetAndNumber", streetAndNumber,
                "streetAdditional", streetAdditional,
                "postalCode", postalCode,
                "city", city,
                "region", region,
                "country", country,
                "locale", locale);
    }
    
    public final static class Builder {
 
        private String type;
 
        private JsonNullable<String> title = JsonNullable.undefined();
 
        private JsonNullable<String> givenName = JsonNullable.undefined();
 
        private JsonNullable<String> familyName = JsonNullable.undefined();
 
        private JsonNullable<String> organizationName = JsonNullable.undefined();
 
        private JsonNullable<String> organizationNumber = JsonNullable.undefined();
 
        private JsonNullable<String> vatNumber = JsonNullable.undefined();
 
        private String email;
 
        private JsonNullable<String> phone = JsonNullable.undefined();
 
        private String streetAndNumber;
 
        private JsonNullable<String> streetAdditional = JsonNullable.undefined();
 
        private String postalCode;
 
        private String city;
 
        private JsonNullable<String> region = JsonNullable.undefined();
 
        private String country;
 
        private String locale;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of recipient, either `consumer` or `business`. This will determine what further fields are required on the `recipient` object.
         * 
         * <p>Possible values: `consumer` `business`
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The title of the `consumer` type recipient, for example Mr. or Mrs..
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The title of the `consumer` type recipient, for example Mr. or Mrs..
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
         */
        public Builder givenName(String givenName) {
            Utils.checkNotNull(givenName, "givenName");
            this.givenName = JsonNullable.of(givenName);
            return this;
        }

        /**
         * The given name (first name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
         */
        public Builder givenName(JsonNullable<String> givenName) {
            Utils.checkNotNull(givenName, "givenName");
            this.givenName = givenName;
            return this;
        }

        /**
         * The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
         */
        public Builder familyName(String familyName) {
            Utils.checkNotNull(familyName, "familyName");
            this.familyName = JsonNullable.of(familyName);
            return this;
        }

        /**
         * The given name (last name) of the `consumer` type recipient should be at least two characters and cannot contain only numbers.
         */
        public Builder familyName(JsonNullable<String> familyName) {
            Utils.checkNotNull(familyName, "familyName");
            this.familyName = familyName;
            return this;
        }

        /**
         * The trading name of the `business` type recipient.
         */
        public Builder organizationName(String organizationName) {
            Utils.checkNotNull(organizationName, "organizationName");
            this.organizationName = JsonNullable.of(organizationName);
            return this;
        }

        /**
         * The trading name of the `business` type recipient.
         */
        public Builder organizationName(JsonNullable<String> organizationName) {
            Utils.checkNotNull(organizationName, "organizationName");
            this.organizationName = organizationName;
            return this;
        }

        /**
         * The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber` has to be provided.
         */
        public Builder organizationNumber(String organizationNumber) {
            Utils.checkNotNull(organizationNumber, "organizationNumber");
            this.organizationNumber = JsonNullable.of(organizationNumber);
            return this;
        }

        /**
         * The Chamber of Commerce number of the organization for a `business` type recipient. Either this or `vatNumber` has to be provided.
         */
        public Builder organizationNumber(JsonNullable<String> organizationNumber) {
            Utils.checkNotNull(organizationNumber, "organizationNumber");
            this.organizationNumber = organizationNumber;
            return this;
        }

        /**
         * The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber` has to be provided.
         */
        public Builder vatNumber(String vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = JsonNullable.of(vatNumber);
            return this;
        }

        /**
         * The VAT number of the organization for a `business` type recipient. Either this or `organizationNumber` has to be provided.
         */
        public Builder vatNumber(JsonNullable<String> vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = vatNumber;
            return this;
        }

        /**
         * The email address of the recipient.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The phone number of the recipient.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = JsonNullable.of(phone);
            return this;
        }

        /**
         * The phone number of the recipient.
         */
        public Builder phone(JsonNullable<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * A street and street number.
         */
        public Builder streetAndNumber(String streetAndNumber) {
            Utils.checkNotNull(streetAndNumber, "streetAndNumber");
            this.streetAndNumber = streetAndNumber;
            return this;
        }

        /**
         * Any additional addressing details, for example an apartment number.
         */
        public Builder streetAdditional(String streetAdditional) {
            Utils.checkNotNull(streetAdditional, "streetAdditional");
            this.streetAdditional = JsonNullable.of(streetAdditional);
            return this;
        }

        /**
         * Any additional addressing details, for example an apartment number.
         */
        public Builder streetAdditional(JsonNullable<String> streetAdditional) {
            Utils.checkNotNull(streetAdditional, "streetAdditional");
            this.streetAdditional = streetAdditional;
            return this;
        }

        /**
         * A postal code.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        /**
         * The recipient's city.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * The recipient's region.
         */
        public Builder region(String region) {
            Utils.checkNotNull(region, "region");
            this.region = JsonNullable.of(region);
            return this;
        }

        /**
         * The recipient's region.
         */
        public Builder region(JsonNullable<String> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * The locale for the recipient, to be used for translations in PDF generation and payment pages.
         * 
         * <p>Possible values: `en_US` `en_GB` `nl_NL` `nl_BE` `de_DE` `de_AT` `de_CH` `fr_FR` `fr_BE`
         */
        public Builder locale(String locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }
        
        public CreateSalesInvoiceRecipient build() {
            return new CreateSalesInvoiceRecipient(
                type,
                title,
                givenName,
                familyName,
                organizationName,
                organizationNumber,
                vatNumber,
                email,
                phone,
                streetAndNumber,
                streetAdditional,
                postalCode,
                city,
                region,
                country,
                locale);
        }
    }
}
