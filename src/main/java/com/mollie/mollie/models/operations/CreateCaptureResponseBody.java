/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * CreateCaptureResponseBody
 * 
 * <p>The newly created capture object. For a complete reference of the
 * capture object, refer to the [Get capture endpoint](get-capture) documentation.
 */
public class CreateCaptureResponseBody {
    /**
     * Indicates the response contains a capture object. Will always contain the string `capture` for this endpoint.
     */
    @JsonProperty("resource")
    private String resource;

    /**
     * The identifier uniquely referring to this capture. Example: `cpt_mNepDkEtco6ah3QNPUGYH`.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonProperty("mode")
    private CreateCaptureMode mode;

    /**
     * The description of the capture.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The amount captured. If no amount is provided, the full authorized amount is captured.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("amount")
    private Optional<? extends CreateCaptureCapturesAmount> amount;

    /**
     * This optional field will contain the approximate amount that will be settled to your account, converted to the
     * currency your account is settled in.
     * 
     * <p>Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
     * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
     * instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementAmount")
    private JsonNullable<? extends CreateCaptureSettlementAmount> settlementAmount;

    /**
     * The capture's status.
     */
    @JsonProperty("status")
    private CreateCaptureStatus status;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends CreateCaptureCapturesMetadata> metadata;

    /**
     * The unique identifier of the payment this capture was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
     * The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonProperty("paymentId")
    private String paymentId;

    /**
     * The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example:
     * `shp_gNapNy9qQTUFZYnCrCF7J`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipmentId")
    private JsonNullable<String> shipmentId;

    /**
     * The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field
     * is omitted if the capture is not settled (yet).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementId")
    private JsonNullable<String> settlementId;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonProperty("createdAt")
    private String createdAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private CreateCaptureLinks links;

    @JsonCreator
    public CreateCaptureResponseBody(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") String id,
            @JsonProperty("mode") CreateCaptureMode mode,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("amount") Optional<? extends CreateCaptureCapturesAmount> amount,
            @JsonProperty("settlementAmount") JsonNullable<? extends CreateCaptureSettlementAmount> settlementAmount,
            @JsonProperty("status") CreateCaptureStatus status,
            @JsonProperty("metadata") JsonNullable<? extends CreateCaptureCapturesMetadata> metadata,
            @JsonProperty("paymentId") String paymentId,
            @JsonProperty("shipmentId") JsonNullable<String> shipmentId,
            @JsonProperty("settlementId") JsonNullable<String> settlementId,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("_links") CreateCaptureLinks links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(shipmentId, "shipmentId");
        Utils.checkNotNull(settlementId, "settlementId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.description = description;
        this.amount = amount;
        this.settlementAmount = settlementAmount;
        this.status = status;
        this.metadata = metadata;
        this.paymentId = paymentId;
        this.shipmentId = shipmentId;
        this.settlementId = settlementId;
        this.createdAt = createdAt;
        this.links = links;
    }
    
    public CreateCaptureResponseBody(
            String resource,
            String id,
            CreateCaptureMode mode,
            CreateCaptureStatus status,
            String paymentId,
            String createdAt,
            CreateCaptureLinks links) {
        this(resource, id, mode,
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            status, JsonNullable.undefined(), paymentId,
            JsonNullable.undefined(), JsonNullable.undefined(), createdAt,
            links);
    }

    /**
     * Indicates the response contains a capture object. Will always contain the string `capture` for this endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this capture. Example: `cpt_mNepDkEtco6ah3QNPUGYH`.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonIgnore
    public CreateCaptureMode mode() {
        return mode;
    }

    /**
     * The description of the capture.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The amount captured. If no amount is provided, the full authorized amount is captured.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCaptureCapturesAmount> amount() {
        return (Optional<CreateCaptureCapturesAmount>) amount;
    }

    /**
     * This optional field will contain the approximate amount that will be settled to your account, converted to the
     * currency your account is settled in.
     * 
     * <p>Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
     * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
     * instead.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateCaptureSettlementAmount> settlementAmount() {
        return (JsonNullable<CreateCaptureSettlementAmount>) settlementAmount;
    }

    /**
     * The capture's status.
     */
    @JsonIgnore
    public CreateCaptureStatus status() {
        return status;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateCaptureCapturesMetadata> metadata() {
        return (JsonNullable<CreateCaptureCapturesMetadata>) metadata;
    }

    /**
     * The unique identifier of the payment this capture was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
     * The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonIgnore
    public String paymentId() {
        return paymentId;
    }

    /**
     * The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example:
     * `shp_gNapNy9qQTUFZYnCrCF7J`.
     */
    @JsonIgnore
    public JsonNullable<String> shipmentId() {
        return shipmentId;
    }

    /**
     * The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field
     * is omitted if the capture is not settled (yet).
     */
    @JsonIgnore
    public JsonNullable<String> settlementId() {
        return settlementId;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public CreateCaptureLinks links() {
        return links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a capture object. Will always contain the string `capture` for this endpoint.
     */
    public CreateCaptureResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this capture. Example: `cpt_mNepDkEtco6ah3QNPUGYH`.
     */
    public CreateCaptureResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public CreateCaptureResponseBody withMode(CreateCaptureMode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The description of the capture.
     */
    public CreateCaptureResponseBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * The description of the capture.
     */
    public CreateCaptureResponseBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The amount captured. If no amount is provided, the full authorized amount is captured.
     */
    public CreateCaptureResponseBody withAmount(CreateCaptureCapturesAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * The amount captured. If no amount is provided, the full authorized amount is captured.
     */
    public CreateCaptureResponseBody withAmount(Optional<? extends CreateCaptureCapturesAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * This optional field will contain the approximate amount that will be settled to your account, converted to the
     * currency your account is settled in.
     * 
     * <p>Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
     * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
     * instead.
     */
    public CreateCaptureResponseBody withSettlementAmount(CreateCaptureSettlementAmount settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = JsonNullable.of(settlementAmount);
        return this;
    }

    /**
     * This optional field will contain the approximate amount that will be settled to your account, converted to the
     * currency your account is settled in.
     * 
     * <p>Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
     * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
     * instead.
     */
    public CreateCaptureResponseBody withSettlementAmount(JsonNullable<? extends CreateCaptureSettlementAmount> settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = settlementAmount;
        return this;
    }

    /**
     * The capture's status.
     */
    public CreateCaptureResponseBody withStatus(CreateCaptureStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateCaptureResponseBody withMetadata(CreateCaptureCapturesMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateCaptureResponseBody withMetadata(JsonNullable<? extends CreateCaptureCapturesMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The unique identifier of the payment this capture was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
     * The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    public CreateCaptureResponseBody withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    /**
     * The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example:
     * `shp_gNapNy9qQTUFZYnCrCF7J`.
     */
    public CreateCaptureResponseBody withShipmentId(String shipmentId) {
        Utils.checkNotNull(shipmentId, "shipmentId");
        this.shipmentId = JsonNullable.of(shipmentId);
        return this;
    }

    /**
     * The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example:
     * `shp_gNapNy9qQTUFZYnCrCF7J`.
     */
    public CreateCaptureResponseBody withShipmentId(JsonNullable<String> shipmentId) {
        Utils.checkNotNull(shipmentId, "shipmentId");
        this.shipmentId = shipmentId;
        return this;
    }

    /**
     * The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field
     * is omitted if the capture is not settled (yet).
     */
    public CreateCaptureResponseBody withSettlementId(String settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = JsonNullable.of(settlementId);
        return this;
    }

    /**
     * The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field
     * is omitted if the capture is not settled (yet).
     */
    public CreateCaptureResponseBody withSettlementId(JsonNullable<String> settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = settlementId;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public CreateCaptureResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public CreateCaptureResponseBody withLinks(CreateCaptureLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCaptureResponseBody other = (CreateCaptureResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.settlementAmount, other.settlementAmount) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.paymentId, other.paymentId) &&
            Utils.enhancedDeepEquals(this.shipmentId, other.shipmentId) &&
            Utils.enhancedDeepEquals(this.settlementId, other.settlementId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, mode,
            description, amount, settlementAmount,
            status, metadata, paymentId,
            shipmentId, settlementId, createdAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCaptureResponseBody.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "description", description,
                "amount", amount,
                "settlementAmount", settlementAmount,
                "status", status,
                "metadata", metadata,
                "paymentId", paymentId,
                "shipmentId", shipmentId,
                "settlementId", settlementId,
                "createdAt", createdAt,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private String id;

        private CreateCaptureMode mode;

        private Optional<String> description = Optional.empty();

        private Optional<? extends CreateCaptureCapturesAmount> amount = Optional.empty();

        private JsonNullable<? extends CreateCaptureSettlementAmount> settlementAmount = JsonNullable.undefined();

        private CreateCaptureStatus status;

        private JsonNullable<? extends CreateCaptureCapturesMetadata> metadata = JsonNullable.undefined();

        private String paymentId;

        private JsonNullable<String> shipmentId = JsonNullable.undefined();

        private JsonNullable<String> settlementId = JsonNullable.undefined();

        private String createdAt;

        private CreateCaptureLinks links;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a capture object. Will always contain the string `capture` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this capture. Example: `cpt_mNepDkEtco6ah3QNPUGYH`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(CreateCaptureMode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * The description of the capture.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the capture.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The amount captured. If no amount is provided, the full authorized amount is captured.
         */
        public Builder amount(CreateCaptureCapturesAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount captured. If no amount is provided, the full authorized amount is captured.
         */
        public Builder amount(Optional<? extends CreateCaptureCapturesAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * This optional field will contain the approximate amount that will be settled to your account, converted to the
         * currency your account is settled in.
         * 
         * <p>Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
         * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
         * instead.
         */
        public Builder settlementAmount(CreateCaptureSettlementAmount settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = JsonNullable.of(settlementAmount);
            return this;
        }

        /**
         * This optional field will contain the approximate amount that will be settled to your account, converted to the
         * currency your account is settled in.
         * 
         * <p>Since the field contains an estimated amount during capture processing, it may change over time. To retrieve
         * accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions)
         * instead.
         */
        public Builder settlementAmount(JsonNullable<? extends CreateCaptureSettlementAmount> settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = settlementAmount;
            return this;
        }


        /**
         * The capture's status.
         */
        public Builder status(CreateCaptureStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(CreateCaptureCapturesMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends CreateCaptureCapturesMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * The unique identifier of the payment this capture was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`.
         * The full payment object can be retrieved via the payment URL in the `_links` object.
         */
        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }


        /**
         * The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example:
         * `shp_gNapNy9qQTUFZYnCrCF7J`.
         */
        public Builder shipmentId(String shipmentId) {
            Utils.checkNotNull(shipmentId, "shipmentId");
            this.shipmentId = JsonNullable.of(shipmentId);
            return this;
        }

        /**
         * The unique identifier of the shipment that triggered the creation of this capture, if applicable. For example:
         * `shp_gNapNy9qQTUFZYnCrCF7J`.
         */
        public Builder shipmentId(JsonNullable<String> shipmentId) {
            Utils.checkNotNull(shipmentId, "shipmentId");
            this.shipmentId = shipmentId;
            return this;
        }


        /**
         * The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field
         * is omitted if the capture is not settled (yet).
         */
        public Builder settlementId(String settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = JsonNullable.of(settlementId);
            return this;
        }

        /**
         * The identifier referring to the settlement this capture was settled with. For example, `stl_BkEjN2eBb`. This field
         * is omitted if the capture is not settled (yet).
         */
        public Builder settlementId(JsonNullable<String> settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = settlementId;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(CreateCaptureLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public CreateCaptureResponseBody build() {

            return new CreateCaptureResponseBody(
                resource, id, mode,
                description, amount, settlementAmount,
                status, metadata, paymentId,
                shipmentId, settlementId, createdAt,
                links);
        }

    }
}
