/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * ListAllChargebacksLinks
 * 
 * <p>Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
public class ListAllChargebacksLinks {
    /**
     * The URL to the current set of items.
     */
    @JsonProperty("self")
    private ListAllChargebacksSelf self;

    /**
     * The previous set of items, if available.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("previous")
    private Optional<? extends ListAllChargebacksPrevious> previous;

    /**
     * The next set of items, if available.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("next")
    private Optional<? extends ListAllChargebacksNext> next;

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonProperty("documentation")
    private ListAllChargebacksDocumentation documentation;

    @JsonCreator
    public ListAllChargebacksLinks(
            @JsonProperty("self") ListAllChargebacksSelf self,
            @JsonProperty("previous") Optional<? extends ListAllChargebacksPrevious> previous,
            @JsonProperty("next") Optional<? extends ListAllChargebacksNext> next,
            @JsonProperty("documentation") ListAllChargebacksDocumentation documentation) {
        Utils.checkNotNull(self, "self");
        Utils.checkNotNull(previous, "previous");
        Utils.checkNotNull(next, "next");
        Utils.checkNotNull(documentation, "documentation");
        this.self = self;
        this.previous = previous;
        this.next = next;
        this.documentation = documentation;
    }
    
    public ListAllChargebacksLinks(
            ListAllChargebacksSelf self,
            ListAllChargebacksDocumentation documentation) {
        this(self, Optional.empty(), Optional.empty(),
            documentation);
    }

    /**
     * The URL to the current set of items.
     */
    @JsonIgnore
    public ListAllChargebacksSelf self() {
        return self;
    }

    /**
     * The previous set of items, if available.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListAllChargebacksPrevious> previous() {
        return (Optional<ListAllChargebacksPrevious>) previous;
    }

    /**
     * The next set of items, if available.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListAllChargebacksNext> next() {
        return (Optional<ListAllChargebacksNext>) next;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonIgnore
    public ListAllChargebacksDocumentation documentation() {
        return documentation;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The URL to the current set of items.
     */
    public ListAllChargebacksLinks withSelf(ListAllChargebacksSelf self) {
        Utils.checkNotNull(self, "self");
        this.self = self;
        return this;
    }

    /**
     * The previous set of items, if available.
     */
    public ListAllChargebacksLinks withPrevious(ListAllChargebacksPrevious previous) {
        Utils.checkNotNull(previous, "previous");
        this.previous = Optional.ofNullable(previous);
        return this;
    }


    /**
     * The previous set of items, if available.
     */
    public ListAllChargebacksLinks withPrevious(Optional<? extends ListAllChargebacksPrevious> previous) {
        Utils.checkNotNull(previous, "previous");
        this.previous = previous;
        return this;
    }

    /**
     * The next set of items, if available.
     */
    public ListAllChargebacksLinks withNext(ListAllChargebacksNext next) {
        Utils.checkNotNull(next, "next");
        this.next = Optional.ofNullable(next);
        return this;
    }


    /**
     * The next set of items, if available.
     */
    public ListAllChargebacksLinks withNext(Optional<? extends ListAllChargebacksNext> next) {
        Utils.checkNotNull(next, "next");
        this.next = next;
        return this;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public ListAllChargebacksLinks withDocumentation(ListAllChargebacksDocumentation documentation) {
        Utils.checkNotNull(documentation, "documentation");
        this.documentation = documentation;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllChargebacksLinks other = (ListAllChargebacksLinks) o;
        return 
            Utils.enhancedDeepEquals(this.self, other.self) &&
            Utils.enhancedDeepEquals(this.previous, other.previous) &&
            Utils.enhancedDeepEquals(this.next, other.next) &&
            Utils.enhancedDeepEquals(this.documentation, other.documentation);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            self, previous, next,
            documentation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAllChargebacksLinks.class,
                "self", self,
                "previous", previous,
                "next", next,
                "documentation", documentation);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private ListAllChargebacksSelf self;

        private Optional<? extends ListAllChargebacksPrevious> previous = Optional.empty();

        private Optional<? extends ListAllChargebacksNext> next = Optional.empty();

        private ListAllChargebacksDocumentation documentation;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The URL to the current set of items.
         */
        public Builder self(ListAllChargebacksSelf self) {
            Utils.checkNotNull(self, "self");
            this.self = self;
            return this;
        }


        /**
         * The previous set of items, if available.
         */
        public Builder previous(ListAllChargebacksPrevious previous) {
            Utils.checkNotNull(previous, "previous");
            this.previous = Optional.ofNullable(previous);
            return this;
        }

        /**
         * The previous set of items, if available.
         */
        public Builder previous(Optional<? extends ListAllChargebacksPrevious> previous) {
            Utils.checkNotNull(previous, "previous");
            this.previous = previous;
            return this;
        }


        /**
         * The next set of items, if available.
         */
        public Builder next(ListAllChargebacksNext next) {
            Utils.checkNotNull(next, "next");
            this.next = Optional.ofNullable(next);
            return this;
        }

        /**
         * The next set of items, if available.
         */
        public Builder next(Optional<? extends ListAllChargebacksNext> next) {
            Utils.checkNotNull(next, "next");
            this.next = next;
            return this;
        }


        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder documentation(ListAllChargebacksDocumentation documentation) {
            Utils.checkNotNull(documentation, "documentation");
            this.documentation = documentation;
            return this;
        }

        public ListAllChargebacksLinks build() {

            return new ListAllChargebacksLinks(
                self, previous, next,
                documentation);
        }

    }
}
