/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class ListAllRefundsEmbedded {
    /**
     * An array of refund objects. For a complete reference of the refund object, refer to the [Get refund endpoint](get-refund) documentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunds")
    private Optional<? extends List<ListAllRefundsRefunds>> refunds;

    @JsonCreator
    public ListAllRefundsEmbedded(
            @JsonProperty("refunds") Optional<? extends List<ListAllRefundsRefunds>> refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = refunds;
    }
    
    public ListAllRefundsEmbedded() {
        this(Optional.empty());
    }

    /**
     * An array of refund objects. For a complete reference of the refund object, refer to the [Get refund endpoint](get-refund) documentation.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ListAllRefundsRefunds>> refunds() {
        return (Optional<List<ListAllRefundsRefunds>>) refunds;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An array of refund objects. For a complete reference of the refund object, refer to the [Get refund endpoint](get-refund) documentation.
     */
    public ListAllRefundsEmbedded withRefunds(List<ListAllRefundsRefunds> refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = Optional.ofNullable(refunds);
        return this;
    }


    /**
     * An array of refund objects. For a complete reference of the refund object, refer to the [Get refund endpoint](get-refund) documentation.
     */
    public ListAllRefundsEmbedded withRefunds(Optional<? extends List<ListAllRefundsRefunds>> refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = refunds;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllRefundsEmbedded other = (ListAllRefundsEmbedded) o;
        return 
            Utils.enhancedDeepEquals(this.refunds, other.refunds);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            refunds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAllRefundsEmbedded.class,
                "refunds", refunds);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<ListAllRefundsRefunds>> refunds = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * An array of refund objects. For a complete reference of the refund object, refer to the [Get refund endpoint](get-refund) documentation.
         */
        public Builder refunds(List<ListAllRefundsRefunds> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = Optional.ofNullable(refunds);
            return this;
        }

        /**
         * An array of refund objects. For a complete reference of the refund object, refer to the [Get refund endpoint](get-refund) documentation.
         */
        public Builder refunds(Optional<? extends List<ListAllRefundsRefunds>> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = refunds;
            return this;
        }

        public ListAllRefundsEmbedded build() {

            return new ListAllRefundsEmbedded(
                refunds);
        }

    }
}
