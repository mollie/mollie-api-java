/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.models.components.EntityPermission;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;


public class ListPermissionsEmbedded {
    /**
     * An array of permission objects.
     */
    @JsonProperty("permissions")
    private List<EntityPermission> permissions;

    @JsonCreator
    public ListPermissionsEmbedded(
            @JsonProperty("permissions") List<EntityPermission> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
    }

    /**
     * An array of permission objects.
     */
    @JsonIgnore
    public List<EntityPermission> permissions() {
        return permissions;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An array of permission objects.
     */
    public ListPermissionsEmbedded withPermissions(List<EntityPermission> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListPermissionsEmbedded other = (ListPermissionsEmbedded) o;
        return 
            Utils.enhancedDeepEquals(this.permissions, other.permissions);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            permissions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListPermissionsEmbedded.class,
                "permissions", permissions);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<EntityPermission> permissions;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * An array of permission objects.
         */
        public Builder permissions(List<EntityPermission> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }

        public ListPermissionsEmbedded build() {

            return new ListPermissionsEmbedded(
                permissions);
        }

    }
}
