/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetPaymentRequest {

    /**
     * Provide the ID of the item you want to perform this operation on.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     * 
     * * `details.qrCode`: Include a QR code object. Only available for iDEAL,
     * Bancontact and bank transfer payments.
     * * `details.remainderDetails`: For payments where gift cards or vouchers were applied and the remaining amount
     *   was paid with another payment method, this include will add another `details` object specifically for the
     *   remainder payment.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include")
    private JsonNullable<String> include;

    /**
     * This endpoint allows embedding related API items by appending the
     * following values via the `embed` query string parameter.
     * 
     * * `captures`: Embed all captures created for this payment.
     * * `refunds`: Embed all refunds created for this payment.
     * * `chargebacks`: Embed all chargebacks created for this payment.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=embed")
    private JsonNullable<String> embed;

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public GetPaymentRequest(
            String id,
            JsonNullable<String> include,
            JsonNullable<String> embed,
            JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(include, "include");
        Utils.checkNotNull(embed, "embed");
        Utils.checkNotNull(testmode, "testmode");
        this.id = id;
        this.include = include;
        this.embed = embed;
        this.testmode = testmode;
    }
    
    public GetPaymentRequest(
            String id) {
        this(id, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Provide the ID of the item you want to perform this operation on.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     * 
     * * `details.qrCode`: Include a QR code object. Only available for iDEAL,
     * Bancontact and bank transfer payments.
     * * `details.remainderDetails`: For payments where gift cards or vouchers were applied and the remaining amount
     *   was paid with another payment method, this include will add another `details` object specifically for the
     *   remainder payment.
     */
    @JsonIgnore
    public JsonNullable<String> include() {
        return include;
    }

    /**
     * This endpoint allows embedding related API items by appending the
     * following values via the `embed` query string parameter.
     * 
     * * `captures`: Embed all captures created for this payment.
     * * `refunds`: Embed all refunds created for this payment.
     * * `chargebacks`: Embed all chargebacks created for this payment.
     */
    @JsonIgnore
    public JsonNullable<String> embed() {
        return embed;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Provide the ID of the item you want to perform this operation on.
     */
    public GetPaymentRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     * 
     * * `details.qrCode`: Include a QR code object. Only available for iDEAL,
     * Bancontact and bank transfer payments.
     * * `details.remainderDetails`: For payments where gift cards or vouchers were applied and the remaining amount
     *   was paid with another payment method, this include will add another `details` object specifically for the
     *   remainder payment.
     */
    public GetPaymentRequest withInclude(String include) {
        Utils.checkNotNull(include, "include");
        this.include = JsonNullable.of(include);
        return this;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     * 
     * * `details.qrCode`: Include a QR code object. Only available for iDEAL,
     * Bancontact and bank transfer payments.
     * * `details.remainderDetails`: For payments where gift cards or vouchers were applied and the remaining amount
     *   was paid with another payment method, this include will add another `details` object specifically for the
     *   remainder payment.
     */
    public GetPaymentRequest withInclude(JsonNullable<String> include) {
        Utils.checkNotNull(include, "include");
        this.include = include;
        return this;
    }

    /**
     * This endpoint allows embedding related API items by appending the
     * following values via the `embed` query string parameter.
     * 
     * * `captures`: Embed all captures created for this payment.
     * * `refunds`: Embed all refunds created for this payment.
     * * `chargebacks`: Embed all chargebacks created for this payment.
     */
    public GetPaymentRequest withEmbed(String embed) {
        Utils.checkNotNull(embed, "embed");
        this.embed = JsonNullable.of(embed);
        return this;
    }

    /**
     * This endpoint allows embedding related API items by appending the
     * following values via the `embed` query string parameter.
     * 
     * * `captures`: Embed all captures created for this payment.
     * * `refunds`: Embed all refunds created for this payment.
     * * `chargebacks`: Embed all chargebacks created for this payment.
     */
    public GetPaymentRequest withEmbed(JsonNullable<String> embed) {
        Utils.checkNotNull(embed, "embed");
        this.embed = embed;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public GetPaymentRequest withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public GetPaymentRequest withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPaymentRequest other = (GetPaymentRequest) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.include, other.include) &&
            Objects.deepEquals(this.embed, other.embed) &&
            Objects.deepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            include,
            embed,
            testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPaymentRequest.class,
                "id", id,
                "include", include,
                "embed", embed,
                "testmode", testmode);
    }
    
    public final static class Builder {
 
        private String id;
 
        private JsonNullable<String> include = JsonNullable.undefined();
 
        private JsonNullable<String> embed = JsonNullable.undefined();
 
        private JsonNullable<Boolean> testmode;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Provide the ID of the item you want to perform this operation on.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * This endpoint allows you to include additional information via the `include` query string parameter.
         * 
         * * `details.qrCode`: Include a QR code object. Only available for iDEAL,
         * Bancontact and bank transfer payments.
         * * `details.remainderDetails`: For payments where gift cards or vouchers were applied and the remaining amount
         *   was paid with another payment method, this include will add another `details` object specifically for the
         *   remainder payment.
         */
        public Builder include(String include) {
            Utils.checkNotNull(include, "include");
            this.include = JsonNullable.of(include);
            return this;
        }

        /**
         * This endpoint allows you to include additional information via the `include` query string parameter.
         * 
         * * `details.qrCode`: Include a QR code object. Only available for iDEAL,
         * Bancontact and bank transfer payments.
         * * `details.remainderDetails`: For payments where gift cards or vouchers were applied and the remaining amount
         *   was paid with another payment method, this include will add another `details` object specifically for the
         *   remainder payment.
         */
        public Builder include(JsonNullable<String> include) {
            Utils.checkNotNull(include, "include");
            this.include = include;
            return this;
        }

        /**
         * This endpoint allows embedding related API items by appending the
         * following values via the `embed` query string parameter.
         * 
         * * `captures`: Embed all captures created for this payment.
         * * `refunds`: Embed all refunds created for this payment.
         * * `chargebacks`: Embed all chargebacks created for this payment.
         */
        public Builder embed(String embed) {
            Utils.checkNotNull(embed, "embed");
            this.embed = JsonNullable.of(embed);
            return this;
        }

        /**
         * This endpoint allows embedding related API items by appending the
         * following values via the `embed` query string parameter.
         * 
         * * `captures`: Embed all captures created for this payment.
         * * `refunds`: Embed all refunds created for this payment.
         * * `chargebacks`: Embed all chargebacks created for this payment.
         */
        public Builder embed(JsonNullable<String> embed) {
            Utils.checkNotNull(embed, "embed");
            this.embed = embed;
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
         * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
         * setting the `testmode` query parameter to `true`.
         * 
         * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
         * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
         * setting the `testmode` query parameter to `true`.
         * 
         * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }
        
        public GetPaymentRequest build() {
            if (testmode == null) {
                testmode = _SINGLETON_VALUE_Testmode.value();
            }            return new GetPaymentRequest(
                id,
                include,
                embed,
                testmode);
        }

        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_Testmode =
                new LazySingletonValue<>(
                        "testmode",
                        "false",
                        new TypeReference<JsonNullable<Boolean>>() {});
    }
}

