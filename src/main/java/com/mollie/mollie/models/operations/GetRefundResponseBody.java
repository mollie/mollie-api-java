/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
/**
 * GetRefundResponseBody - The payment object.
 */

public class GetRefundResponseBody {

    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * Possible values: `live` `test`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<String> mode;

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends GetRefundAmount> amount;

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * The amount is a **negative** amount.
     * 
     * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
     * 
     * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
     * 
     * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementAmount")
    private JsonNullable<? extends GetRefundSettlementAmount> settlementAmount;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends GetRefundMetadata> metadata;

    /**
     * Refunds may take some time to get confirmed. For a full overview of possible states, see the guide on refund statuses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
     * 
     * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants, by providing the `routing` object during [payment creation](create-payment).
     * 
     * When creating refunds for these *routed* payments, by default the full amount is deducted from your balance.
     * 
     * If you want to pull back the funds that were routed to the connected merchant(s), you can set this parameter to `true` when issuing a full refund.
     * 
     * For more fine-grained control and for partial refunds, use the `routingReversals` parameter instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reverseRouting")
    private JsonNullable<Boolean> reverseRouting;

    /**
     * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
     * 
     * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
     * 
     * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount needs to be reversed from which merchant(s).
     * 
     * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routingReversals")
    private JsonNullable<? extends List<GetRefundRoutingReversals>> routingReversals;

    /**
     * The unique identifier of the payment this refund was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentId")
    private Optional<String> paymentId;

    /**
     * The identifier referring to the settlement this refund was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementId")
    private JsonNullable<String> settlementId;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends GetRefundLinks> links;

    @JsonCreator
    public GetRefundResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mode") Optional<String> mode,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("amount") Optional<? extends GetRefundAmount> amount,
            @JsonProperty("settlementAmount") JsonNullable<? extends GetRefundSettlementAmount> settlementAmount,
            @JsonProperty("metadata") JsonNullable<? extends GetRefundMetadata> metadata,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("reverseRouting") JsonNullable<Boolean> reverseRouting,
            @JsonProperty("routingReversals") JsonNullable<? extends List<GetRefundRoutingReversals>> routingReversals,
            @JsonProperty("paymentId") Optional<String> paymentId,
            @JsonProperty("settlementId") JsonNullable<String> settlementId,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("_links") Optional<? extends GetRefundLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(reverseRouting, "reverseRouting");
        Utils.checkNotNull(routingReversals, "routingReversals");
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(settlementId, "settlementId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.description = description;
        this.amount = amount;
        this.settlementAmount = settlementAmount;
        this.metadata = metadata;
        this.status = status;
        this.reverseRouting = reverseRouting;
        this.routingReversals = routingReversals;
        this.paymentId = paymentId;
        this.settlementId = settlementId;
        this.createdAt = createdAt;
        this.links = links;
    }
    
    public GetRefundResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * Possible values: `live` `test`
     */
    @JsonIgnore
    public Optional<String> mode() {
        return mode;
    }

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetRefundAmount> amount() {
        return (Optional<GetRefundAmount>) amount;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * The amount is a **negative** amount.
     * 
     * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
     * 
     * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
     * 
     * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetRefundSettlementAmount> settlementAmount() {
        return (JsonNullable<GetRefundSettlementAmount>) settlementAmount;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetRefundMetadata> metadata() {
        return (JsonNullable<GetRefundMetadata>) metadata;
    }

    /**
     * Refunds may take some time to get confirmed. For a full overview of possible states, see the guide on refund statuses.
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
     * 
     * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants, by providing the `routing` object during [payment creation](create-payment).
     * 
     * When creating refunds for these *routed* payments, by default the full amount is deducted from your balance.
     * 
     * If you want to pull back the funds that were routed to the connected merchant(s), you can set this parameter to `true` when issuing a full refund.
     * 
     * For more fine-grained control and for partial refunds, use the `routingReversals` parameter instead.
     */
    @JsonIgnore
    public JsonNullable<Boolean> reverseRouting() {
        return reverseRouting;
    }

    /**
     * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
     * 
     * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
     * 
     * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount needs to be reversed from which merchant(s).
     * 
     * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<GetRefundRoutingReversals>> routingReversals() {
        return (JsonNullable<List<GetRefundRoutingReversals>>) routingReversals;
    }

    /**
     * The unique identifier of the payment this refund was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonIgnore
    public Optional<String> paymentId() {
        return paymentId;
    }

    /**
     * The identifier referring to the settlement this refund was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
     */
    @JsonIgnore
    public JsonNullable<String> settlementId() {
        return settlementId;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetRefundLinks> links() {
        return (Optional<GetRefundLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    public GetRefundResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    public GetRefundResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    public GetRefundResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    public GetRefundResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * Possible values: `live` `test`
     */
    public GetRefundResponseBody withMode(String mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * Possible values: `live` `test`
     */
    public GetRefundResponseBody withMode(Optional<String> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    public GetRefundResponseBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    public GetRefundResponseBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
     */
    public GetRefundResponseBody withAmount(GetRefundAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
     */
    public GetRefundResponseBody withAmount(Optional<? extends GetRefundAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * The amount is a **negative** amount.
     * 
     * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
     * 
     * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
     * 
     * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    public GetRefundResponseBody withSettlementAmount(GetRefundSettlementAmount settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = JsonNullable.of(settlementAmount);
        return this;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
     * 
     * The amount is a **negative** amount.
     * 
     * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
     * 
     * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
     * 
     * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
     */
    public GetRefundResponseBody withSettlementAmount(JsonNullable<? extends GetRefundSettlementAmount> settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = settlementAmount;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public GetRefundResponseBody withMetadata(GetRefundMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public GetRefundResponseBody withMetadata(JsonNullable<? extends GetRefundMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Refunds may take some time to get confirmed. For a full overview of possible states, see the guide on refund statuses.
     */
    public GetRefundResponseBody withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Refunds may take some time to get confirmed. For a full overview of possible states, see the guide on refund statuses.
     */
    public GetRefundResponseBody withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
     * 
     * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants, by providing the `routing` object during [payment creation](create-payment).
     * 
     * When creating refunds for these *routed* payments, by default the full amount is deducted from your balance.
     * 
     * If you want to pull back the funds that were routed to the connected merchant(s), you can set this parameter to `true` when issuing a full refund.
     * 
     * For more fine-grained control and for partial refunds, use the `routingReversals` parameter instead.
     */
    public GetRefundResponseBody withReverseRouting(boolean reverseRouting) {
        Utils.checkNotNull(reverseRouting, "reverseRouting");
        this.reverseRouting = JsonNullable.of(reverseRouting);
        return this;
    }

    /**
     * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
     * 
     * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants, by providing the `routing` object during [payment creation](create-payment).
     * 
     * When creating refunds for these *routed* payments, by default the full amount is deducted from your balance.
     * 
     * If you want to pull back the funds that were routed to the connected merchant(s), you can set this parameter to `true` when issuing a full refund.
     * 
     * For more fine-grained control and for partial refunds, use the `routingReversals` parameter instead.
     */
    public GetRefundResponseBody withReverseRouting(JsonNullable<Boolean> reverseRouting) {
        Utils.checkNotNull(reverseRouting, "reverseRouting");
        this.reverseRouting = reverseRouting;
        return this;
    }

    /**
     * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
     * 
     * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
     * 
     * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount needs to be reversed from which merchant(s).
     * 
     * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
     */
    public GetRefundResponseBody withRoutingReversals(List<GetRefundRoutingReversals> routingReversals) {
        Utils.checkNotNull(routingReversals, "routingReversals");
        this.routingReversals = JsonNullable.of(routingReversals);
        return this;
    }

    /**
     * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
     * 
     * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
     * 
     * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount needs to be reversed from which merchant(s).
     * 
     * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
     */
    public GetRefundResponseBody withRoutingReversals(JsonNullable<? extends List<GetRefundRoutingReversals>> routingReversals) {
        Utils.checkNotNull(routingReversals, "routingReversals");
        this.routingReversals = routingReversals;
        return this;
    }

    /**
     * The unique identifier of the payment this refund was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    public GetRefundResponseBody withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = Optional.ofNullable(paymentId);
        return this;
    }

    /**
     * The unique identifier of the payment this refund was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    public GetRefundResponseBody withPaymentId(Optional<String> paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    /**
     * The identifier referring to the settlement this refund was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
     */
    public GetRefundResponseBody withSettlementId(String settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = JsonNullable.of(settlementId);
        return this;
    }

    /**
     * The identifier referring to the settlement this refund was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
     */
    public GetRefundResponseBody withSettlementId(JsonNullable<String> settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = settlementId;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetRefundResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetRefundResponseBody withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetRefundResponseBody withLinks(GetRefundLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetRefundResponseBody withLinks(Optional<? extends GetRefundLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetRefundResponseBody other = (GetRefundResponseBody) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.mode, other.mode) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.settlementAmount, other.settlementAmount) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.reverseRouting, other.reverseRouting) &&
            Objects.deepEquals(this.routingReversals, other.routingReversals) &&
            Objects.deepEquals(this.paymentId, other.paymentId) &&
            Objects.deepEquals(this.settlementId, other.settlementId) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            mode,
            description,
            amount,
            settlementAmount,
            metadata,
            status,
            reverseRouting,
            routingReversals,
            paymentId,
            settlementId,
            createdAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetRefundResponseBody.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "description", description,
                "amount", amount,
                "settlementAmount", settlementAmount,
                "metadata", metadata,
                "status", status,
                "reverseRouting", reverseRouting,
                "routingReversals", routingReversals,
                "paymentId", paymentId,
                "settlementId", settlementId,
                "createdAt", createdAt,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> mode = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<? extends GetRefundAmount> amount = Optional.empty();
 
        private JsonNullable<? extends GetRefundSettlementAmount> settlementAmount = JsonNullable.undefined();
 
        private JsonNullable<? extends GetRefundMetadata> metadata = JsonNullable.undefined();
 
        private Optional<String> status = Optional.empty();
 
        private JsonNullable<Boolean> reverseRouting = JsonNullable.undefined();
 
        private JsonNullable<? extends List<GetRefundRoutingReversals>> routingReversals = JsonNullable.undefined();
 
        private Optional<String> paymentId = Optional.empty();
 
        private JsonNullable<String> settlementId = JsonNullable.undefined();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<? extends GetRefundLinks> links = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * Possible values: `live` `test`
         */
        public Builder mode(String mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * Possible values: `live` `test`
         */
        public Builder mode(Optional<String> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        /**
         * The description of the refund that may be shown to your customer, depending on the payment method used.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the refund that may be shown to your customer, depending on the payment method used.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
         */
        public Builder amount(GetRefundAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
         */
        public Builder amount(Optional<? extends GetRefundAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
         * 
         * The amount is a **negative** amount.
         * 
         * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
         * 
         * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
         * 
         * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
         */
        public Builder settlementAmount(GetRefundSettlementAmount settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = JsonNullable.of(settlementAmount);
            return this;
        }

        /**
         * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
         * 
         * The amount is a **negative** amount.
         * 
         * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
         * 
         * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
         * 
         * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
         */
        public Builder settlementAmount(JsonNullable<? extends GetRefundSettlementAmount> settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = settlementAmount;
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(GetRefundMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends GetRefundMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Refunds may take some time to get confirmed. For a full overview of possible states, see the guide on refund statuses.
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Refunds may take some time to get confirmed. For a full overview of possible states, see the guide on refund statuses.
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
         * 
         * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants, by providing the `routing` object during [payment creation](create-payment).
         * 
         * When creating refunds for these *routed* payments, by default the full amount is deducted from your balance.
         * 
         * If you want to pull back the funds that were routed to the connected merchant(s), you can set this parameter to `true` when issuing a full refund.
         * 
         * For more fine-grained control and for partial refunds, use the `routingReversals` parameter instead.
         */
        public Builder reverseRouting(boolean reverseRouting) {
            Utils.checkNotNull(reverseRouting, "reverseRouting");
            this.reverseRouting = JsonNullable.of(reverseRouting);
            return this;
        }

        /**
         * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
         * 
         * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants, by providing the `routing` object during [payment creation](create-payment).
         * 
         * When creating refunds for these *routed* payments, by default the full amount is deducted from your balance.
         * 
         * If you want to pull back the funds that were routed to the connected merchant(s), you can set this parameter to `true` when issuing a full refund.
         * 
         * For more fine-grained control and for partial refunds, use the `routingReversals` parameter instead.
         */
        public Builder reverseRouting(JsonNullable<Boolean> reverseRouting) {
            Utils.checkNotNull(reverseRouting, "reverseRouting");
            this.reverseRouting = reverseRouting;
            return this;
        }

        /**
         * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
         * 
         * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
         * 
         * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount needs to be reversed from which merchant(s).
         * 
         * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
         */
        public Builder routingReversals(List<GetRefundRoutingReversals> routingReversals) {
            Utils.checkNotNull(routingReversals, "routingReversals");
            this.routingReversals = JsonNullable.of(routingReversals);
            return this;
        }

        /**
         * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
         * 
         * When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
         * 
         * If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount needs to be reversed from which merchant(s).
         * 
         * If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
         */
        public Builder routingReversals(JsonNullable<? extends List<GetRefundRoutingReversals>> routingReversals) {
            Utils.checkNotNull(routingReversals, "routingReversals");
            this.routingReversals = routingReversals;
            return this;
        }

        /**
         * The unique identifier of the payment this refund was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
         */
        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        /**
         * The unique identifier of the payment this refund was created for. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
         */
        public Builder paymentId(Optional<String> paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }

        /**
         * The identifier referring to the settlement this refund was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
         */
        public Builder settlementId(String settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = JsonNullable.of(settlementId);
            return this;
        }

        /**
         * The identifier referring to the settlement this refund was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
         */
        public Builder settlementId(JsonNullable<String> settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = settlementId;
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetRefundLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends GetRefundLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public GetRefundResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }            return new GetRefundResponseBody(
                resource,
                id,
                mode,
                description,
                amount,
                settlementAmount,
                metadata,
                status,
                reverseRouting,
                routingReversals,
                paymentId,
                settlementId,
                createdAt,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"refund\"",
                        new TypeReference<Optional<String>>() {});
    }
}

