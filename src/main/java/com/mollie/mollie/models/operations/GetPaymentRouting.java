/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetPaymentRouting {

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends GetPaymentPaymentsAPIResponseAmount> amount;

    /**
     * The destination of this portion of the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination")
    private Optional<? extends GetPaymentDestination> destination;

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
     * date must be given in `YYYY-MM-DD` format.
     * 
     * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("releaseDate")
    private JsonNullable<String> releaseDate;

    @JsonCreator
    public GetPaymentRouting(
            @JsonProperty("amount") Optional<? extends GetPaymentPaymentsAPIResponseAmount> amount,
            @JsonProperty("destination") Optional<? extends GetPaymentDestination> destination,
            @JsonProperty("releaseDate") JsonNullable<String> releaseDate) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(destination, "destination");
        Utils.checkNotNull(releaseDate, "releaseDate");
        this.amount = amount;
        this.destination = destination;
        this.releaseDate = releaseDate;
    }
    
    public GetPaymentRouting() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetPaymentPaymentsAPIResponseAmount> amount() {
        return (Optional<GetPaymentPaymentsAPIResponseAmount>) amount;
    }

    /**
     * The destination of this portion of the payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetPaymentDestination> destination() {
        return (Optional<GetPaymentDestination>) destination;
    }

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
     * date must be given in `YYYY-MM-DD` format.
     * 
     * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    @JsonIgnore
    public JsonNullable<String> releaseDate() {
        return releaseDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    public GetPaymentRouting withAmount(GetPaymentPaymentsAPIResponseAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    public GetPaymentRouting withAmount(Optional<? extends GetPaymentPaymentsAPIResponseAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The destination of this portion of the payment.
     */
    public GetPaymentRouting withDestination(GetPaymentDestination destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = Optional.ofNullable(destination);
        return this;
    }

    /**
     * The destination of this portion of the payment.
     */
    public GetPaymentRouting withDestination(Optional<? extends GetPaymentDestination> destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = destination;
        return this;
    }

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
     * date must be given in `YYYY-MM-DD` format.
     * 
     * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    public GetPaymentRouting withReleaseDate(String releaseDate) {
        Utils.checkNotNull(releaseDate, "releaseDate");
        this.releaseDate = JsonNullable.of(releaseDate);
        return this;
    }

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
     * date must be given in `YYYY-MM-DD` format.
     * 
     * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    public GetPaymentRouting withReleaseDate(JsonNullable<String> releaseDate) {
        Utils.checkNotNull(releaseDate, "releaseDate");
        this.releaseDate = releaseDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPaymentRouting other = (GetPaymentRouting) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.destination, other.destination) &&
            Objects.deepEquals(this.releaseDate, other.releaseDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            destination,
            releaseDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPaymentRouting.class,
                "amount", amount,
                "destination", destination,
                "releaseDate", releaseDate);
    }
    
    public final static class Builder {
 
        private Optional<? extends GetPaymentPaymentsAPIResponseAmount> amount = Optional.empty();
 
        private Optional<? extends GetPaymentDestination> destination = Optional.empty();
 
        private JsonNullable<String> releaseDate = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
         */
        public Builder amount(GetPaymentPaymentsAPIResponseAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
         */
        public Builder amount(Optional<? extends GetPaymentPaymentsAPIResponseAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The destination of this portion of the payment.
         */
        public Builder destination(GetPaymentDestination destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = Optional.ofNullable(destination);
            return this;
        }

        /**
         * The destination of this portion of the payment.
         */
        public Builder destination(Optional<? extends GetPaymentDestination> destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = destination;
            return this;
        }

        /**
         * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
         * date must be given in `YYYY-MM-DD` format.
         * 
         * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
         */
        public Builder releaseDate(String releaseDate) {
            Utils.checkNotNull(releaseDate, "releaseDate");
            this.releaseDate = JsonNullable.of(releaseDate);
            return this;
        }

        /**
         * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The
         * date must be given in `YYYY-MM-DD` format.
         * 
         * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
         */
        public Builder releaseDate(JsonNullable<String> releaseDate) {
            Utils.checkNotNull(releaseDate, "releaseDate");
            this.releaseDate = releaseDate;
            return this;
        }
        
        public GetPaymentRouting build() {
            return new GetPaymentRouting(
                amount,
                destination,
                releaseDate);
        }
    }
}

