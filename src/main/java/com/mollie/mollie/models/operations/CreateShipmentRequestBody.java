/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateShipmentRequestBody {

    /**
     * The order lines that are being fulfilled with this shipment. If left blank, all open order lines will be considered fulfilled.
     * 
     * For an in-depth explanation of all order line properties, refer to the `lines` parameter of the [Create order](create-order) endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    private JsonNullable<? extends List<CreateShipmentLines>> lines;

    /**
     * Shipment tracking details. Can be omitted if tracking details are not available or not applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking")
    private JsonNullable<? extends Tracking> tracking;

    @JsonCreator
    public CreateShipmentRequestBody(
            @JsonProperty("lines") JsonNullable<? extends List<CreateShipmentLines>> lines,
            @JsonProperty("tracking") JsonNullable<? extends Tracking> tracking) {
        Utils.checkNotNull(lines, "lines");
        Utils.checkNotNull(tracking, "tracking");
        this.lines = lines;
        this.tracking = tracking;
    }
    
    public CreateShipmentRequestBody() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The order lines that are being fulfilled with this shipment. If left blank, all open order lines will be considered fulfilled.
     * 
     * For an in-depth explanation of all order line properties, refer to the `lines` parameter of the [Create order](create-order) endpoint.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CreateShipmentLines>> lines() {
        return (JsonNullable<List<CreateShipmentLines>>) lines;
    }

    /**
     * Shipment tracking details. Can be omitted if tracking details are not available or not applicable.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Tracking> tracking() {
        return (JsonNullable<Tracking>) tracking;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The order lines that are being fulfilled with this shipment. If left blank, all open order lines will be considered fulfilled.
     * 
     * For an in-depth explanation of all order line properties, refer to the `lines` parameter of the [Create order](create-order) endpoint.
     */
    public CreateShipmentRequestBody withLines(List<CreateShipmentLines> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = JsonNullable.of(lines);
        return this;
    }

    /**
     * The order lines that are being fulfilled with this shipment. If left blank, all open order lines will be considered fulfilled.
     * 
     * For an in-depth explanation of all order line properties, refer to the `lines` parameter of the [Create order](create-order) endpoint.
     */
    public CreateShipmentRequestBody withLines(JsonNullable<? extends List<CreateShipmentLines>> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = lines;
        return this;
    }

    /**
     * Shipment tracking details. Can be omitted if tracking details are not available or not applicable.
     */
    public CreateShipmentRequestBody withTracking(Tracking tracking) {
        Utils.checkNotNull(tracking, "tracking");
        this.tracking = JsonNullable.of(tracking);
        return this;
    }

    /**
     * Shipment tracking details. Can be omitted if tracking details are not available or not applicable.
     */
    public CreateShipmentRequestBody withTracking(JsonNullable<? extends Tracking> tracking) {
        Utils.checkNotNull(tracking, "tracking");
        this.tracking = tracking;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateShipmentRequestBody other = (CreateShipmentRequestBody) o;
        return 
            Objects.deepEquals(this.lines, other.lines) &&
            Objects.deepEquals(this.tracking, other.tracking);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            lines,
            tracking);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateShipmentRequestBody.class,
                "lines", lines,
                "tracking", tracking);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends List<CreateShipmentLines>> lines = JsonNullable.undefined();
 
        private JsonNullable<? extends Tracking> tracking = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The order lines that are being fulfilled with this shipment. If left blank, all open order lines will be considered fulfilled.
         * 
         * For an in-depth explanation of all order line properties, refer to the `lines` parameter of the [Create order](create-order) endpoint.
         */
        public Builder lines(List<CreateShipmentLines> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = JsonNullable.of(lines);
            return this;
        }

        /**
         * The order lines that are being fulfilled with this shipment. If left blank, all open order lines will be considered fulfilled.
         * 
         * For an in-depth explanation of all order line properties, refer to the `lines` parameter of the [Create order](create-order) endpoint.
         */
        public Builder lines(JsonNullable<? extends List<CreateShipmentLines>> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = lines;
            return this;
        }

        /**
         * Shipment tracking details. Can be omitted if tracking details are not available or not applicable.
         */
        public Builder tracking(Tracking tracking) {
            Utils.checkNotNull(tracking, "tracking");
            this.tracking = JsonNullable.of(tracking);
            return this;
        }

        /**
         * Shipment tracking details. Can be omitted if tracking details are not available or not applicable.
         */
        public Builder tracking(JsonNullable<? extends Tracking> tracking) {
            Utils.checkNotNull(tracking, "tracking");
            this.tracking = tracking;
            return this;
        }
        
        public CreateShipmentRequestBody build() {
            return new CreateShipmentRequestBody(
                lines,
                tracking);
        }
    }
}

