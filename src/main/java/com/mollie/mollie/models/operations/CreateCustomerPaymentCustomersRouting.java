/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateCustomerPaymentCustomersRouting {

    /**
     * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this route. Mollie will always refer to the route by this ID. Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<String> mode;

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends CreateCustomerPaymentCustomersResponse201ApplicationHalPlusJsonAmount> amount;

    /**
     * The destination of this portion of the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination")
    private Optional<? extends CreateCustomerPaymentCustomersDestination> destination;

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
     * 
     * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("releaseDate")
    private JsonNullable<String> releaseDate;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private JsonNullable<? extends CreateCustomerPaymentCustomersResponseLinks> links;

    @JsonCreator
    public CreateCustomerPaymentCustomersRouting(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mode") Optional<String> mode,
            @JsonProperty("amount") Optional<? extends CreateCustomerPaymentCustomersResponse201ApplicationHalPlusJsonAmount> amount,
            @JsonProperty("destination") Optional<? extends CreateCustomerPaymentCustomersDestination> destination,
            @JsonProperty("releaseDate") JsonNullable<String> releaseDate,
            @JsonProperty("_links") JsonNullable<? extends CreateCustomerPaymentCustomersResponseLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(destination, "destination");
        Utils.checkNotNull(releaseDate, "releaseDate");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.amount = amount;
        this.destination = destination;
        this.releaseDate = releaseDate;
        this.links = links;
    }
    
    public CreateCustomerPaymentCustomersRouting() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this route. Mollie will always refer to the route by this ID. Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    @JsonIgnore
    public Optional<String> mode() {
        return mode;
    }

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentCustomersResponse201ApplicationHalPlusJsonAmount> amount() {
        return (Optional<CreateCustomerPaymentCustomersResponse201ApplicationHalPlusJsonAmount>) amount;
    }

    /**
     * The destination of this portion of the payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerPaymentCustomersDestination> destination() {
        return (Optional<CreateCustomerPaymentCustomersDestination>) destination;
    }

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
     * 
     * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    @JsonIgnore
    public JsonNullable<String> releaseDate() {
        return releaseDate;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateCustomerPaymentCustomersResponseLinks> links() {
        return (JsonNullable<CreateCustomerPaymentCustomersResponseLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
     */
    public CreateCustomerPaymentCustomersRouting withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
     */
    public CreateCustomerPaymentCustomersRouting withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this route. Mollie will always refer to the route by this ID. Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
     */
    public CreateCustomerPaymentCustomersRouting withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The identifier uniquely referring to this route. Mollie will always refer to the route by this ID. Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
     */
    public CreateCustomerPaymentCustomersRouting withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    public CreateCustomerPaymentCustomersRouting withMode(String mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    public CreateCustomerPaymentCustomersRouting withMode(Optional<String> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    public CreateCustomerPaymentCustomersRouting withAmount(CreateCustomerPaymentCustomersResponse201ApplicationHalPlusJsonAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
     */
    public CreateCustomerPaymentCustomersRouting withAmount(Optional<? extends CreateCustomerPaymentCustomersResponse201ApplicationHalPlusJsonAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The destination of this portion of the payment.
     */
    public CreateCustomerPaymentCustomersRouting withDestination(CreateCustomerPaymentCustomersDestination destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = Optional.ofNullable(destination);
        return this;
    }

    /**
     * The destination of this portion of the payment.
     */
    public CreateCustomerPaymentCustomersRouting withDestination(Optional<? extends CreateCustomerPaymentCustomersDestination> destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = destination;
        return this;
    }

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
     * 
     * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    public CreateCustomerPaymentCustomersRouting withReleaseDate(String releaseDate) {
        Utils.checkNotNull(releaseDate, "releaseDate");
        this.releaseDate = JsonNullable.of(releaseDate);
        return this;
    }

    /**
     * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
     * 
     * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
     */
    public CreateCustomerPaymentCustomersRouting withReleaseDate(JsonNullable<String> releaseDate) {
        Utils.checkNotNull(releaseDate, "releaseDate");
        this.releaseDate = releaseDate;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public CreateCustomerPaymentCustomersRouting withLinks(CreateCustomerPaymentCustomersResponseLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = JsonNullable.of(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public CreateCustomerPaymentCustomersRouting withLinks(JsonNullable<? extends CreateCustomerPaymentCustomersResponseLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCustomerPaymentCustomersRouting other = (CreateCustomerPaymentCustomersRouting) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.mode, other.mode) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.destination, other.destination) &&
            Objects.deepEquals(this.releaseDate, other.releaseDate) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            mode,
            amount,
            destination,
            releaseDate,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCustomerPaymentCustomersRouting.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "amount", amount,
                "destination", destination,
                "releaseDate", releaseDate,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> mode = Optional.empty();
 
        private Optional<? extends CreateCustomerPaymentCustomersResponse201ApplicationHalPlusJsonAmount> amount = Optional.empty();
 
        private Optional<? extends CreateCustomerPaymentCustomersDestination> destination = Optional.empty();
 
        private JsonNullable<String> releaseDate = JsonNullable.undefined();
 
        private JsonNullable<? extends CreateCustomerPaymentCustomersResponseLinks> links = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this route. Mollie will always refer to the route by this ID. Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this route. Mollie will always refer to the route by this ID. Example: `rt_5B8cwPMGnU6qLbRvo7qEZo`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * <p>Possible values: `live` `test`
         */
        public Builder mode(String mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * <p>Possible values: `live` `test`
         */
        public Builder mode(Optional<String> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        /**
         * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
         */
        public Builder amount(CreateCustomerPaymentCustomersResponse201ApplicationHalPlusJsonAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
         */
        public Builder amount(Optional<? extends CreateCustomerPaymentCustomersResponse201ApplicationHalPlusJsonAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The destination of this portion of the payment.
         */
        public Builder destination(CreateCustomerPaymentCustomersDestination destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = Optional.ofNullable(destination);
            return this;
        }

        /**
         * The destination of this portion of the payment.
         */
        public Builder destination(Optional<? extends CreateCustomerPaymentCustomersDestination> destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = destination;
            return this;
        }

        /**
         * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
         * 
         * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
         */
        public Builder releaseDate(String releaseDate) {
            Utils.checkNotNull(releaseDate, "releaseDate");
            this.releaseDate = JsonNullable.of(releaseDate);
            return this;
        }

        /**
         * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
         * 
         * <p>If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
         */
        public Builder releaseDate(JsonNullable<String> releaseDate) {
            Utils.checkNotNull(releaseDate, "releaseDate");
            this.releaseDate = releaseDate;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(CreateCustomerPaymentCustomersResponseLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = JsonNullable.of(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(JsonNullable<? extends CreateCustomerPaymentCustomersResponseLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public CreateCustomerPaymentCustomersRouting build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }
            return new CreateCustomerPaymentCustomersRouting(
                resource,
                id,
                mode,
                amount,
                destination,
                releaseDate,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"route\"",
                        new TypeReference<Optional<String>>() {});
    }
}
