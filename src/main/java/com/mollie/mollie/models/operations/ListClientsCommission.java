/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * ListClientsCommission
 * 
 * <p>The commission object.
 */
public class ListClientsCommission {
    /**
     * The commission count.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    @JsonCreator
    public ListClientsCommission(
            @JsonProperty("count") Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
    }
    
    public ListClientsCommission() {
        this(Optional.empty());
    }

    /**
     * The commission count.
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The commission count.
     */
    public ListClientsCommission withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }


    /**
     * The commission count.
     */
    public ListClientsCommission withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListClientsCommission other = (ListClientsCommission) o;
        return 
            Utils.enhancedDeepEquals(this.count, other.count);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            count);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListClientsCommission.class,
                "count", count);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Long> count = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The commission count.
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * The commission count.
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        public ListClientsCommission build() {

            return new ListClientsCommission(
                count);
        }

    }
}
