/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListMethodsRequest {

    /**
     * Set this parameter to `first` to only return the enabled methods that can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return enabled methods that can be used for recurring payments or subscriptions.
     * 
     * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sequenceType")
    private Optional<String> sequenceType;

    /**
     * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=locale")
    private Optional<String> locale;

    /**
     * If supplied, only payment methods that support the amount and currency are returned.
     * 
     * <p>Example: `/v2/methods?amount[value]=100.00&amp;amount[currency]=USD`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=amount")
    private Optional<? extends QueryParamAmount> amount;

    /**
     * **⚠️ We no longer recommend using the Orders API. Please refer to the [Payments API](payments-api) instead.**
     * 
     * <p>Indicate if you will use the result for the [Create order](create-order) or the [Create payment](create-payment) endpoint.
     * 
     * <p>When passing the value `orders`, the result will include payment methods that are only available for payments created via the Orders API.
     * 
     * <p>Possible values: `payments` `orders` (default: `payments`)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=resource")
    @Deprecated
    private Optional<String> resource;

    /**
     * The country taken from your customer's billing address in ISO 3166-1 alpha-2 format. This parameter can be used to check whether your customer is eligible for certain payment methods, for example for Klarna.
     * 
     * <p>Example: `/v2/methods?resource=orders&amp;billingCountry=DE`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=billingCountry")
    private Optional<String> billingCountry;

    /**
     * A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code to check if they are available on the shoppers device, hence the need to indicate your support.
     * 
     * <p>Possible values: `applepay`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includeWallets")
    private Optional<String> includeWallets;

    /**
     * A comma-separated list of the line categories you support in your checkout.
     * 
     * <p>Example: `/v2/methods?orderLineCategories=eco,meal`
     * 
     * <p>Possible values: `eco` `gift` `meal` `sport_culture` `additional` `consume`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=orderLineCategories")
    private Optional<String> orderLineCategories;

    /**
     * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=profileId")
    private Optional<String> profileId;

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include")
    private JsonNullable<? extends ListMethodsQueryParamInclude> include;

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public ListMethodsRequest(
            Optional<String> sequenceType,
            Optional<String> locale,
            Optional<? extends QueryParamAmount> amount,
            Optional<String> resource,
            Optional<String> billingCountry,
            Optional<String> includeWallets,
            Optional<String> orderLineCategories,
            Optional<String> profileId,
            JsonNullable<? extends ListMethodsQueryParamInclude> include,
            JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(billingCountry, "billingCountry");
        Utils.checkNotNull(includeWallets, "includeWallets");
        Utils.checkNotNull(orderLineCategories, "orderLineCategories");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(include, "include");
        Utils.checkNotNull(testmode, "testmode");
        this.sequenceType = sequenceType;
        this.locale = locale;
        this.amount = amount;
        this.resource = resource;
        this.billingCountry = billingCountry;
        this.includeWallets = includeWallets;
        this.orderLineCategories = orderLineCategories;
        this.profileId = profileId;
        this.include = include;
        this.testmode = testmode;
    }
    
    public ListMethodsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Set this parameter to `first` to only return the enabled methods that can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return enabled methods that can be used for recurring payments or subscriptions.
     * 
     * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
     */
    @JsonIgnore
    public Optional<String> sequenceType() {
        return sequenceType;
    }

    /**
     * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
     */
    @JsonIgnore
    public Optional<String> locale() {
        return locale;
    }

    /**
     * If supplied, only payment methods that support the amount and currency are returned.
     * 
     * <p>Example: `/v2/methods?amount[value]=100.00&amp;amount[currency]=USD`
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<QueryParamAmount> amount() {
        return (Optional<QueryParamAmount>) amount;
    }

    /**
     * **⚠️ We no longer recommend using the Orders API. Please refer to the [Payments API](payments-api) instead.**
     * 
     * <p>Indicate if you will use the result for the [Create order](create-order) or the [Create payment](create-payment) endpoint.
     * 
     * <p>When passing the value `orders`, the result will include payment methods that are only available for payments created via the Orders API.
     * 
     * <p>Possible values: `payments` `orders` (default: `payments`)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The country taken from your customer's billing address in ISO 3166-1 alpha-2 format. This parameter can be used to check whether your customer is eligible for certain payment methods, for example for Klarna.
     * 
     * <p>Example: `/v2/methods?resource=orders&amp;billingCountry=DE`
     */
    @JsonIgnore
    public Optional<String> billingCountry() {
        return billingCountry;
    }

    /**
     * A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code to check if they are available on the shoppers device, hence the need to indicate your support.
     * 
     * <p>Possible values: `applepay`
     */
    @JsonIgnore
    public Optional<String> includeWallets() {
        return includeWallets;
    }

    /**
     * A comma-separated list of the line categories you support in your checkout.
     * 
     * <p>Example: `/v2/methods?orderLineCategories=eco,meal`
     * 
     * <p>Possible values: `eco` `gift` `meal` `sport_culture` `additional` `consume`
     */
    @JsonIgnore
    public Optional<String> orderLineCategories() {
        return orderLineCategories;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    @JsonIgnore
    public Optional<String> profileId() {
        return profileId;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ListMethodsQueryParamInclude> include() {
        return (JsonNullable<ListMethodsQueryParamInclude>) include;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Set this parameter to `first` to only return the enabled methods that can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return enabled methods that can be used for recurring payments or subscriptions.
     * 
     * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
     */
    public ListMethodsRequest withSequenceType(String sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = Optional.ofNullable(sequenceType);
        return this;
    }

    /**
     * Set this parameter to `first` to only return the enabled methods that can be used for the first payment of a recurring sequence.
     * 
     * <p>Set it to `recurring` to only return enabled methods that can be used for recurring payments or subscriptions.
     * 
     * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
     */
    public ListMethodsRequest withSequenceType(Optional<String> sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = sequenceType;
        return this;
    }

    /**
     * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
     */
    public ListMethodsRequest withLocale(String locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = Optional.ofNullable(locale);
        return this;
    }

    /**
     * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
     */
    public ListMethodsRequest withLocale(Optional<String> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    /**
     * If supplied, only payment methods that support the amount and currency are returned.
     * 
     * <p>Example: `/v2/methods?amount[value]=100.00&amp;amount[currency]=USD`
     */
    public ListMethodsRequest withAmount(QueryParamAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * If supplied, only payment methods that support the amount and currency are returned.
     * 
     * <p>Example: `/v2/methods?amount[value]=100.00&amp;amount[currency]=USD`
     */
    public ListMethodsRequest withAmount(Optional<? extends QueryParamAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * **⚠️ We no longer recommend using the Orders API. Please refer to the [Payments API](payments-api) instead.**
     * 
     * <p>Indicate if you will use the result for the [Create order](create-order) or the [Create payment](create-payment) endpoint.
     * 
     * <p>When passing the value `orders`, the result will include payment methods that are only available for payments created via the Orders API.
     * 
     * <p>Possible values: `payments` `orders` (default: `payments`)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ListMethodsRequest withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * **⚠️ We no longer recommend using the Orders API. Please refer to the [Payments API](payments-api) instead.**
     * 
     * <p>Indicate if you will use the result for the [Create order](create-order) or the [Create payment](create-payment) endpoint.
     * 
     * <p>When passing the value `orders`, the result will include payment methods that are only available for payments created via the Orders API.
     * 
     * <p>Possible values: `payments` `orders` (default: `payments`)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ListMethodsRequest withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The country taken from your customer's billing address in ISO 3166-1 alpha-2 format. This parameter can be used to check whether your customer is eligible for certain payment methods, for example for Klarna.
     * 
     * <p>Example: `/v2/methods?resource=orders&amp;billingCountry=DE`
     */
    public ListMethodsRequest withBillingCountry(String billingCountry) {
        Utils.checkNotNull(billingCountry, "billingCountry");
        this.billingCountry = Optional.ofNullable(billingCountry);
        return this;
    }

    /**
     * The country taken from your customer's billing address in ISO 3166-1 alpha-2 format. This parameter can be used to check whether your customer is eligible for certain payment methods, for example for Klarna.
     * 
     * <p>Example: `/v2/methods?resource=orders&amp;billingCountry=DE`
     */
    public ListMethodsRequest withBillingCountry(Optional<String> billingCountry) {
        Utils.checkNotNull(billingCountry, "billingCountry");
        this.billingCountry = billingCountry;
        return this;
    }

    /**
     * A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code to check if they are available on the shoppers device, hence the need to indicate your support.
     * 
     * <p>Possible values: `applepay`
     */
    public ListMethodsRequest withIncludeWallets(String includeWallets) {
        Utils.checkNotNull(includeWallets, "includeWallets");
        this.includeWallets = Optional.ofNullable(includeWallets);
        return this;
    }

    /**
     * A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code to check if they are available on the shoppers device, hence the need to indicate your support.
     * 
     * <p>Possible values: `applepay`
     */
    public ListMethodsRequest withIncludeWallets(Optional<String> includeWallets) {
        Utils.checkNotNull(includeWallets, "includeWallets");
        this.includeWallets = includeWallets;
        return this;
    }

    /**
     * A comma-separated list of the line categories you support in your checkout.
     * 
     * <p>Example: `/v2/methods?orderLineCategories=eco,meal`
     * 
     * <p>Possible values: `eco` `gift` `meal` `sport_culture` `additional` `consume`
     */
    public ListMethodsRequest withOrderLineCategories(String orderLineCategories) {
        Utils.checkNotNull(orderLineCategories, "orderLineCategories");
        this.orderLineCategories = Optional.ofNullable(orderLineCategories);
        return this;
    }

    /**
     * A comma-separated list of the line categories you support in your checkout.
     * 
     * <p>Example: `/v2/methods?orderLineCategories=eco,meal`
     * 
     * <p>Possible values: `eco` `gift` `meal` `sport_culture` `additional` `consume`
     */
    public ListMethodsRequest withOrderLineCategories(Optional<String> orderLineCategories) {
        Utils.checkNotNull(orderLineCategories, "orderLineCategories");
        this.orderLineCategories = orderLineCategories;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    public ListMethodsRequest withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = Optional.ofNullable(profileId);
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    public ListMethodsRequest withProfileId(Optional<String> profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    public ListMethodsRequest withInclude(ListMethodsQueryParamInclude include) {
        Utils.checkNotNull(include, "include");
        this.include = JsonNullable.of(include);
        return this;
    }

    /**
     * This endpoint allows you to include additional information via the `include` query string parameter.
     */
    public ListMethodsRequest withInclude(JsonNullable<? extends ListMethodsQueryParamInclude> include) {
        Utils.checkNotNull(include, "include");
        this.include = include;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public ListMethodsRequest withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public ListMethodsRequest withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListMethodsRequest other = (ListMethodsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.sequenceType, other.sequenceType) &&
            Utils.enhancedDeepEquals(this.locale, other.locale) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.billingCountry, other.billingCountry) &&
            Utils.enhancedDeepEquals(this.includeWallets, other.includeWallets) &&
            Utils.enhancedDeepEquals(this.orderLineCategories, other.orderLineCategories) &&
            Utils.enhancedDeepEquals(this.profileId, other.profileId) &&
            Utils.enhancedDeepEquals(this.include, other.include) &&
            Utils.enhancedDeepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            sequenceType,
            locale,
            amount,
            resource,
            billingCountry,
            includeWallets,
            orderLineCategories,
            profileId,
            include,
            testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListMethodsRequest.class,
                "sequenceType", sequenceType,
                "locale", locale,
                "amount", amount,
                "resource", resource,
                "billingCountry", billingCountry,
                "includeWallets", includeWallets,
                "orderLineCategories", orderLineCategories,
                "profileId", profileId,
                "include", include,
                "testmode", testmode);
    }
    
    public final static class Builder {
 
        private Optional<String> sequenceType = Optional.empty();
 
        private Optional<String> locale = Optional.empty();
 
        private Optional<? extends QueryParamAmount> amount = Optional.empty();
 
        @Deprecated
        private Optional<String> resource = Optional.empty();
 
        private Optional<String> billingCountry = Optional.empty();
 
        private Optional<String> includeWallets = Optional.empty();
 
        private Optional<String> orderLineCategories = Optional.empty();
 
        private Optional<String> profileId = Optional.empty();
 
        private JsonNullable<? extends ListMethodsQueryParamInclude> include = JsonNullable.undefined();
 
        private JsonNullable<Boolean> testmode = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Set this parameter to `first` to only return the enabled methods that can be used for the first payment of a recurring sequence.
         * 
         * <p>Set it to `recurring` to only return enabled methods that can be used for recurring payments or subscriptions.
         * 
         * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
         */
        public Builder sequenceType(String sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = Optional.ofNullable(sequenceType);
            return this;
        }

        /**
         * Set this parameter to `first` to only return the enabled methods that can be used for the first payment of a recurring sequence.
         * 
         * <p>Set it to `recurring` to only return enabled methods that can be used for recurring payments or subscriptions.
         * 
         * <p>Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
         */
        public Builder sequenceType(Optional<String> sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = sequenceType;
            return this;
        }

        /**
         * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
         */
        public Builder locale(String locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = Optional.ofNullable(locale);
            return this;
        }

        /**
         * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
         */
        public Builder locale(Optional<String> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }

        /**
         * If supplied, only payment methods that support the amount and currency are returned.
         * 
         * <p>Example: `/v2/methods?amount[value]=100.00&amp;amount[currency]=USD`
         */
        public Builder amount(QueryParamAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * If supplied, only payment methods that support the amount and currency are returned.
         * 
         * <p>Example: `/v2/methods?amount[value]=100.00&amp;amount[currency]=USD`
         */
        public Builder amount(Optional<? extends QueryParamAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * **⚠️ We no longer recommend using the Orders API. Please refer to the [Payments API](payments-api) instead.**
         * 
         * <p>Indicate if you will use the result for the [Create order](create-order) or the [Create payment](create-payment) endpoint.
         * 
         * <p>When passing the value `orders`, the result will include payment methods that are only available for payments created via the Orders API.
         * 
         * <p>Possible values: `payments` `orders` (default: `payments`)
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * **⚠️ We no longer recommend using the Orders API. Please refer to the [Payments API](payments-api) instead.**
         * 
         * <p>Indicate if you will use the result for the [Create order](create-order) or the [Create payment](create-payment) endpoint.
         * 
         * <p>When passing the value `orders`, the result will include payment methods that are only available for payments created via the Orders API.
         * 
         * <p>Possible values: `payments` `orders` (default: `payments`)
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The country taken from your customer's billing address in ISO 3166-1 alpha-2 format. This parameter can be used to check whether your customer is eligible for certain payment methods, for example for Klarna.
         * 
         * <p>Example: `/v2/methods?resource=orders&amp;billingCountry=DE`
         */
        public Builder billingCountry(String billingCountry) {
            Utils.checkNotNull(billingCountry, "billingCountry");
            this.billingCountry = Optional.ofNullable(billingCountry);
            return this;
        }

        /**
         * The country taken from your customer's billing address in ISO 3166-1 alpha-2 format. This parameter can be used to check whether your customer is eligible for certain payment methods, for example for Klarna.
         * 
         * <p>Example: `/v2/methods?resource=orders&amp;billingCountry=DE`
         */
        public Builder billingCountry(Optional<String> billingCountry) {
            Utils.checkNotNull(billingCountry, "billingCountry");
            this.billingCountry = billingCountry;
            return this;
        }

        /**
         * A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code to check if they are available on the shoppers device, hence the need to indicate your support.
         * 
         * <p>Possible values: `applepay`
         */
        public Builder includeWallets(String includeWallets) {
            Utils.checkNotNull(includeWallets, "includeWallets");
            this.includeWallets = Optional.ofNullable(includeWallets);
            return this;
        }

        /**
         * A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code to check if they are available on the shoppers device, hence the need to indicate your support.
         * 
         * <p>Possible values: `applepay`
         */
        public Builder includeWallets(Optional<String> includeWallets) {
            Utils.checkNotNull(includeWallets, "includeWallets");
            this.includeWallets = includeWallets;
            return this;
        }

        /**
         * A comma-separated list of the line categories you support in your checkout.
         * 
         * <p>Example: `/v2/methods?orderLineCategories=eco,meal`
         * 
         * <p>Possible values: `eco` `gift` `meal` `sport_culture` `additional` `consume`
         */
        public Builder orderLineCategories(String orderLineCategories) {
            Utils.checkNotNull(orderLineCategories, "orderLineCategories");
            this.orderLineCategories = Optional.ofNullable(orderLineCategories);
            return this;
        }

        /**
         * A comma-separated list of the line categories you support in your checkout.
         * 
         * <p>Example: `/v2/methods?orderLineCategories=eco,meal`
         * 
         * <p>Possible values: `eco` `gift` `meal` `sport_culture` `additional` `consume`
         */
        public Builder orderLineCategories(Optional<String> orderLineCategories) {
            Utils.checkNotNull(orderLineCategories, "orderLineCategories");
            this.orderLineCategories = orderLineCategories;
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = Optional.ofNullable(profileId);
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) you wish to retrieve the resources for.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
         */
        public Builder profileId(Optional<String> profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }

        /**
         * This endpoint allows you to include additional information via the `include` query string parameter.
         */
        public Builder include(ListMethodsQueryParamInclude include) {
            Utils.checkNotNull(include, "include");
            this.include = JsonNullable.of(include);
            return this;
        }

        /**
         * This endpoint allows you to include additional information via the `include` query string parameter.
         */
        public Builder include(JsonNullable<? extends ListMethodsQueryParamInclude> include) {
            Utils.checkNotNull(include, "include");
            this.include = include;
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }
        
        public ListMethodsRequest build() {
            return new ListMethodsRequest(
                sequenceType,
                locale,
                amount,
                resource,
                billingCountry,
                includeWallets,
                orderLineCategories,
                profileId,
                include,
                testmode);
        }
    }
}
