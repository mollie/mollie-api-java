/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GetSalesInvoiceResponseBody
 * 
 * <p>The Sales Invoice object.
 */
public class GetSalesInvoiceResponseBody {
    /**
     * Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this
     * endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * When issued, an invoice number will be set for the sales invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceNumber")
    private JsonNullable<String> invoiceNumber;

    /**
     * The status for the invoice to end up in.
     * 
     * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
     * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
     * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
     * 
     * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
     * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
     * 
     * <p>Dependent parameters:
     *   - `paymentDetails` is required if invoice should be set directly to `paid`
     *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
     *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends GetSalesInvoiceStatus> status;

    /**
     * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatScheme")
    private Optional<? extends GetSalesInvoiceVatScheme> vatScheme;

    /**
     * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
     * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatMode")
    private Optional<? extends GetSalesInvoiceVatMode> vatMode;

    /**
     * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memo")
    private JsonNullable<String> memo;

    /**
     * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends GetSalesInvoiceMetadata> metadata;

    /**
     * The payment term to be set on the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentTerm")
    private JsonNullable<? extends GetSalesInvoicePaymentTerm> paymentTerm;

    /**
     * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
     * provided details. Required for `paid` status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentDetails")
    private JsonNullable<? extends GetSalesInvoicePaymentDetails> paymentDetails;

    /**
     * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
     * recipient with the provided `subject` and `body`. Required for `issued` status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailDetails")
    private JsonNullable<? extends GetSalesInvoiceEmailDetails> emailDetails;

    /**
     * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
     * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerId")
    private Optional<String> customerId;

    /**
     * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
     * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandateId")
    private Optional<String> mandateId;

    /**
     * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
     * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
     * is not required to send a first invoice to a recipient.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipientIdentifier")
    private Optional<String> recipientIdentifier;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient")
    private JsonNullable<? extends GetSalesInvoiceRecipient> recipient;

    /**
     * Provide the line items for the invoice. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    private JsonNullable<? extends List<GetSalesInvoiceLines>> lines;

    /**
     * The discount to be applied to the entire invoice, applied on top of any line item discounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount")
    private JsonNullable<? extends GetSalesInvoiceDiscount> discount;

    /**
     * The amount that is left to be paid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountDue")
    private Optional<? extends GetSalesInvoiceAmountDue> amountDue;

    /**
     * The total amount without VAT before discounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtotalAmount")
    private Optional<? extends GetSalesInvoiceSubtotalAmount> subtotalAmount;

    /**
     * The total amount with VAT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private Optional<? extends GetSalesInvoiceTotalAmount> totalAmount;

    /**
     * The total VAT amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalVatAmount")
    private Optional<? extends GetSalesInvoiceTotalVatAmount> totalVatAmount;

    /**
     * The total amount without VAT after discounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountedSubtotalAmount")
    private Optional<? extends GetSalesInvoiceDiscountedSubtotalAmount> discountedSubtotalAmount;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuedAt")
    private JsonNullable<String> issuedAt;

    /**
     * If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paidAt")
    private JsonNullable<String> paidAt;

    /**
     * If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dueAt")
    private JsonNullable<String> dueAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends GetSalesInvoiceLinks> links;

    @JsonCreator
    public GetSalesInvoiceResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("invoiceNumber") JsonNullable<String> invoiceNumber,
            @JsonProperty("status") Optional<? extends GetSalesInvoiceStatus> status,
            @JsonProperty("vatScheme") Optional<? extends GetSalesInvoiceVatScheme> vatScheme,
            @JsonProperty("vatMode") Optional<? extends GetSalesInvoiceVatMode> vatMode,
            @JsonProperty("memo") JsonNullable<String> memo,
            @JsonProperty("metadata") JsonNullable<? extends GetSalesInvoiceMetadata> metadata,
            @JsonProperty("paymentTerm") JsonNullable<? extends GetSalesInvoicePaymentTerm> paymentTerm,
            @JsonProperty("paymentDetails") JsonNullable<? extends GetSalesInvoicePaymentDetails> paymentDetails,
            @JsonProperty("emailDetails") JsonNullable<? extends GetSalesInvoiceEmailDetails> emailDetails,
            @JsonProperty("customerId") Optional<String> customerId,
            @JsonProperty("mandateId") Optional<String> mandateId,
            @JsonProperty("recipientIdentifier") Optional<String> recipientIdentifier,
            @JsonProperty("recipient") JsonNullable<? extends GetSalesInvoiceRecipient> recipient,
            @JsonProperty("lines") JsonNullable<? extends List<GetSalesInvoiceLines>> lines,
            @JsonProperty("discount") JsonNullable<? extends GetSalesInvoiceDiscount> discount,
            @JsonProperty("amountDue") Optional<? extends GetSalesInvoiceAmountDue> amountDue,
            @JsonProperty("subtotalAmount") Optional<? extends GetSalesInvoiceSubtotalAmount> subtotalAmount,
            @JsonProperty("totalAmount") Optional<? extends GetSalesInvoiceTotalAmount> totalAmount,
            @JsonProperty("totalVatAmount") Optional<? extends GetSalesInvoiceTotalVatAmount> totalVatAmount,
            @JsonProperty("discountedSubtotalAmount") Optional<? extends GetSalesInvoiceDiscountedSubtotalAmount> discountedSubtotalAmount,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("issuedAt") JsonNullable<String> issuedAt,
            @JsonProperty("paidAt") JsonNullable<String> paidAt,
            @JsonProperty("dueAt") JsonNullable<String> dueAt,
            @JsonProperty("_links") Optional<? extends GetSalesInvoiceLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(vatScheme, "vatScheme");
        Utils.checkNotNull(vatMode, "vatMode");
        Utils.checkNotNull(memo, "memo");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(paymentTerm, "paymentTerm");
        Utils.checkNotNull(paymentDetails, "paymentDetails");
        Utils.checkNotNull(emailDetails, "emailDetails");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(mandateId, "mandateId");
        Utils.checkNotNull(recipientIdentifier, "recipientIdentifier");
        Utils.checkNotNull(recipient, "recipient");
        Utils.checkNotNull(lines, "lines");
        Utils.checkNotNull(discount, "discount");
        Utils.checkNotNull(amountDue, "amountDue");
        Utils.checkNotNull(subtotalAmount, "subtotalAmount");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(totalVatAmount, "totalVatAmount");
        Utils.checkNotNull(discountedSubtotalAmount, "discountedSubtotalAmount");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(issuedAt, "issuedAt");
        Utils.checkNotNull(paidAt, "paidAt");
        Utils.checkNotNull(dueAt, "dueAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.invoiceNumber = invoiceNumber;
        this.status = status;
        this.vatScheme = vatScheme;
        this.vatMode = vatMode;
        this.memo = memo;
        this.metadata = metadata;
        this.paymentTerm = paymentTerm;
        this.paymentDetails = paymentDetails;
        this.emailDetails = emailDetails;
        this.customerId = customerId;
        this.mandateId = mandateId;
        this.recipientIdentifier = recipientIdentifier;
        this.recipient = recipient;
        this.lines = lines;
        this.discount = discount;
        this.amountDue = amountDue;
        this.subtotalAmount = subtotalAmount;
        this.totalAmount = totalAmount;
        this.totalVatAmount = totalVatAmount;
        this.discountedSubtotalAmount = discountedSubtotalAmount;
        this.createdAt = createdAt;
        this.issuedAt = issuedAt;
        this.paidAt = paidAt;
        this.dueAt = dueAt;
        this.links = links;
    }
    
    public GetSalesInvoiceResponseBody() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this
     * endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * When issued, an invoice number will be set for the sales invoice.
     */
    @JsonIgnore
    public JsonNullable<String> invoiceNumber() {
        return invoiceNumber;
    }

    /**
     * The status for the invoice to end up in.
     * 
     * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
     * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
     * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
     * 
     * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
     * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
     * 
     * <p>Dependent parameters:
     *   - `paymentDetails` is required if invoice should be set directly to `paid`
     *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
     *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetSalesInvoiceStatus> status() {
        return (Optional<GetSalesInvoiceStatus>) status;
    }

    /**
     * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetSalesInvoiceVatScheme> vatScheme() {
        return (Optional<GetSalesInvoiceVatScheme>) vatScheme;
    }

    /**
     * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
     * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetSalesInvoiceVatMode> vatMode() {
        return (Optional<GetSalesInvoiceVatMode>) vatMode;
    }

    /**
     * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
     */
    @JsonIgnore
    public JsonNullable<String> memo() {
        return memo;
    }

    /**
     * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetSalesInvoiceMetadata> metadata() {
        return (JsonNullable<GetSalesInvoiceMetadata>) metadata;
    }

    /**
     * The payment term to be set on the invoice.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetSalesInvoicePaymentTerm> paymentTerm() {
        return (JsonNullable<GetSalesInvoicePaymentTerm>) paymentTerm;
    }

    /**
     * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
     * provided details. Required for `paid` status.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetSalesInvoicePaymentDetails> paymentDetails() {
        return (JsonNullable<GetSalesInvoicePaymentDetails>) paymentDetails;
    }

    /**
     * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
     * recipient with the provided `subject` and `body`. Required for `issued` status.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetSalesInvoiceEmailDetails> emailDetails() {
        return (JsonNullable<GetSalesInvoiceEmailDetails>) emailDetails;
    }

    /**
     * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
     * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    @JsonIgnore
    public Optional<String> customerId() {
        return customerId;
    }

    /**
     * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
     * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    @JsonIgnore
    public Optional<String> mandateId() {
        return mandateId;
    }

    /**
     * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
     * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
     * is not required to send a first invoice to a recipient.
     */
    @JsonIgnore
    public Optional<String> recipientIdentifier() {
        return recipientIdentifier;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetSalesInvoiceRecipient> recipient() {
        return (JsonNullable<GetSalesInvoiceRecipient>) recipient;
    }

    /**
     * Provide the line items for the invoice. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the invoice.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<GetSalesInvoiceLines>> lines() {
        return (JsonNullable<List<GetSalesInvoiceLines>>) lines;
    }

    /**
     * The discount to be applied to the entire invoice, applied on top of any line item discounts.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetSalesInvoiceDiscount> discount() {
        return (JsonNullable<GetSalesInvoiceDiscount>) discount;
    }

    /**
     * The amount that is left to be paid.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetSalesInvoiceAmountDue> amountDue() {
        return (Optional<GetSalesInvoiceAmountDue>) amountDue;
    }

    /**
     * The total amount without VAT before discounts.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetSalesInvoiceSubtotalAmount> subtotalAmount() {
        return (Optional<GetSalesInvoiceSubtotalAmount>) subtotalAmount;
    }

    /**
     * The total amount with VAT.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetSalesInvoiceTotalAmount> totalAmount() {
        return (Optional<GetSalesInvoiceTotalAmount>) totalAmount;
    }

    /**
     * The total VAT amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetSalesInvoiceTotalVatAmount> totalVatAmount() {
        return (Optional<GetSalesInvoiceTotalVatAmount>) totalVatAmount;
    }

    /**
     * The total amount without VAT after discounts.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetSalesInvoiceDiscountedSubtotalAmount> discountedSubtotalAmount() {
        return (Optional<GetSalesInvoiceDiscountedSubtotalAmount>) discountedSubtotalAmount;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonIgnore
    public JsonNullable<String> issuedAt() {
        return issuedAt;
    }

    /**
     * If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonIgnore
    public JsonNullable<String> paidAt() {
        return paidAt;
    }

    /**
     * If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonIgnore
    public JsonNullable<String> dueAt() {
        return dueAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetSalesInvoiceLinks> links() {
        return (Optional<GetSalesInvoiceLinks>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this
     * endpoint.
     */
    public GetSalesInvoiceResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this
     * endpoint.
     */
    public GetSalesInvoiceResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
     */
    public GetSalesInvoiceResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
     */
    public GetSalesInvoiceResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * When issued, an invoice number will be set for the sales invoice.
     */
    public GetSalesInvoiceResponseBody withInvoiceNumber(String invoiceNumber) {
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        this.invoiceNumber = JsonNullable.of(invoiceNumber);
        return this;
    }

    /**
     * When issued, an invoice number will be set for the sales invoice.
     */
    public GetSalesInvoiceResponseBody withInvoiceNumber(JsonNullable<String> invoiceNumber) {
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        this.invoiceNumber = invoiceNumber;
        return this;
    }

    /**
     * The status for the invoice to end up in.
     * 
     * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
     * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
     * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
     * 
     * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
     * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
     * 
     * <p>Dependent parameters:
     *   - `paymentDetails` is required if invoice should be set directly to `paid`
     *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
     *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
     */
    public GetSalesInvoiceResponseBody withStatus(GetSalesInvoiceStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * The status for the invoice to end up in.
     * 
     * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
     * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
     * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
     * 
     * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
     * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
     * 
     * <p>Dependent parameters:
     *   - `paymentDetails` is required if invoice should be set directly to `paid`
     *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
     *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
     */
    public GetSalesInvoiceResponseBody withStatus(Optional<? extends GetSalesInvoiceStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
     */
    public GetSalesInvoiceResponseBody withVatScheme(GetSalesInvoiceVatScheme vatScheme) {
        Utils.checkNotNull(vatScheme, "vatScheme");
        this.vatScheme = Optional.ofNullable(vatScheme);
        return this;
    }


    /**
     * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
     */
    public GetSalesInvoiceResponseBody withVatScheme(Optional<? extends GetSalesInvoiceVatScheme> vatScheme) {
        Utils.checkNotNull(vatScheme, "vatScheme");
        this.vatScheme = vatScheme;
        return this;
    }

    /**
     * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
     * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
     */
    public GetSalesInvoiceResponseBody withVatMode(GetSalesInvoiceVatMode vatMode) {
        Utils.checkNotNull(vatMode, "vatMode");
        this.vatMode = Optional.ofNullable(vatMode);
        return this;
    }


    /**
     * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
     * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
     */
    public GetSalesInvoiceResponseBody withVatMode(Optional<? extends GetSalesInvoiceVatMode> vatMode) {
        Utils.checkNotNull(vatMode, "vatMode");
        this.vatMode = vatMode;
        return this;
    }

    /**
     * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
     */
    public GetSalesInvoiceResponseBody withMemo(String memo) {
        Utils.checkNotNull(memo, "memo");
        this.memo = JsonNullable.of(memo);
        return this;
    }

    /**
     * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
     */
    public GetSalesInvoiceResponseBody withMemo(JsonNullable<String> memo) {
        Utils.checkNotNull(memo, "memo");
        this.memo = memo;
        return this;
    }

    /**
     * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public GetSalesInvoiceResponseBody withMetadata(GetSalesInvoiceMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public GetSalesInvoiceResponseBody withMetadata(JsonNullable<? extends GetSalesInvoiceMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The payment term to be set on the invoice.
     */
    public GetSalesInvoiceResponseBody withPaymentTerm(GetSalesInvoicePaymentTerm paymentTerm) {
        Utils.checkNotNull(paymentTerm, "paymentTerm");
        this.paymentTerm = JsonNullable.of(paymentTerm);
        return this;
    }

    /**
     * The payment term to be set on the invoice.
     */
    public GetSalesInvoiceResponseBody withPaymentTerm(JsonNullable<? extends GetSalesInvoicePaymentTerm> paymentTerm) {
        Utils.checkNotNull(paymentTerm, "paymentTerm");
        this.paymentTerm = paymentTerm;
        return this;
    }

    /**
     * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
     * provided details. Required for `paid` status.
     */
    public GetSalesInvoiceResponseBody withPaymentDetails(GetSalesInvoicePaymentDetails paymentDetails) {
        Utils.checkNotNull(paymentDetails, "paymentDetails");
        this.paymentDetails = JsonNullable.of(paymentDetails);
        return this;
    }

    /**
     * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
     * provided details. Required for `paid` status.
     */
    public GetSalesInvoiceResponseBody withPaymentDetails(JsonNullable<? extends GetSalesInvoicePaymentDetails> paymentDetails) {
        Utils.checkNotNull(paymentDetails, "paymentDetails");
        this.paymentDetails = paymentDetails;
        return this;
    }

    /**
     * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
     * recipient with the provided `subject` and `body`. Required for `issued` status.
     */
    public GetSalesInvoiceResponseBody withEmailDetails(GetSalesInvoiceEmailDetails emailDetails) {
        Utils.checkNotNull(emailDetails, "emailDetails");
        this.emailDetails = JsonNullable.of(emailDetails);
        return this;
    }

    /**
     * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
     * recipient with the provided `subject` and `body`. Required for `issued` status.
     */
    public GetSalesInvoiceResponseBody withEmailDetails(JsonNullable<? extends GetSalesInvoiceEmailDetails> emailDetails) {
        Utils.checkNotNull(emailDetails, "emailDetails");
        this.emailDetails = emailDetails;
        return this;
    }

    /**
     * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
     * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    public GetSalesInvoiceResponseBody withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = Optional.ofNullable(customerId);
        return this;
    }


    /**
     * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
     * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    public GetSalesInvoiceResponseBody withCustomerId(Optional<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
     * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    public GetSalesInvoiceResponseBody withMandateId(String mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = Optional.ofNullable(mandateId);
        return this;
    }


    /**
     * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
     * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    public GetSalesInvoiceResponseBody withMandateId(Optional<String> mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = mandateId;
        return this;
    }

    /**
     * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
     * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
     * is not required to send a first invoice to a recipient.
     */
    public GetSalesInvoiceResponseBody withRecipientIdentifier(String recipientIdentifier) {
        Utils.checkNotNull(recipientIdentifier, "recipientIdentifier");
        this.recipientIdentifier = Optional.ofNullable(recipientIdentifier);
        return this;
    }


    /**
     * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
     * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
     * is not required to send a first invoice to a recipient.
     */
    public GetSalesInvoiceResponseBody withRecipientIdentifier(Optional<String> recipientIdentifier) {
        Utils.checkNotNull(recipientIdentifier, "recipientIdentifier");
        this.recipientIdentifier = recipientIdentifier;
        return this;
    }

    public GetSalesInvoiceResponseBody withRecipient(GetSalesInvoiceRecipient recipient) {
        Utils.checkNotNull(recipient, "recipient");
        this.recipient = JsonNullable.of(recipient);
        return this;
    }

    public GetSalesInvoiceResponseBody withRecipient(JsonNullable<? extends GetSalesInvoiceRecipient> recipient) {
        Utils.checkNotNull(recipient, "recipient");
        this.recipient = recipient;
        return this;
    }

    /**
     * Provide the line items for the invoice. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the invoice.
     */
    public GetSalesInvoiceResponseBody withLines(List<GetSalesInvoiceLines> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = JsonNullable.of(lines);
        return this;
    }

    /**
     * Provide the line items for the invoice. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the invoice.
     */
    public GetSalesInvoiceResponseBody withLines(JsonNullable<? extends List<GetSalesInvoiceLines>> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = lines;
        return this;
    }

    /**
     * The discount to be applied to the entire invoice, applied on top of any line item discounts.
     */
    public GetSalesInvoiceResponseBody withDiscount(GetSalesInvoiceDiscount discount) {
        Utils.checkNotNull(discount, "discount");
        this.discount = JsonNullable.of(discount);
        return this;
    }

    /**
     * The discount to be applied to the entire invoice, applied on top of any line item discounts.
     */
    public GetSalesInvoiceResponseBody withDiscount(JsonNullable<? extends GetSalesInvoiceDiscount> discount) {
        Utils.checkNotNull(discount, "discount");
        this.discount = discount;
        return this;
    }

    /**
     * The amount that is left to be paid.
     */
    public GetSalesInvoiceResponseBody withAmountDue(GetSalesInvoiceAmountDue amountDue) {
        Utils.checkNotNull(amountDue, "amountDue");
        this.amountDue = Optional.ofNullable(amountDue);
        return this;
    }


    /**
     * The amount that is left to be paid.
     */
    public GetSalesInvoiceResponseBody withAmountDue(Optional<? extends GetSalesInvoiceAmountDue> amountDue) {
        Utils.checkNotNull(amountDue, "amountDue");
        this.amountDue = amountDue;
        return this;
    }

    /**
     * The total amount without VAT before discounts.
     */
    public GetSalesInvoiceResponseBody withSubtotalAmount(GetSalesInvoiceSubtotalAmount subtotalAmount) {
        Utils.checkNotNull(subtotalAmount, "subtotalAmount");
        this.subtotalAmount = Optional.ofNullable(subtotalAmount);
        return this;
    }


    /**
     * The total amount without VAT before discounts.
     */
    public GetSalesInvoiceResponseBody withSubtotalAmount(Optional<? extends GetSalesInvoiceSubtotalAmount> subtotalAmount) {
        Utils.checkNotNull(subtotalAmount, "subtotalAmount");
        this.subtotalAmount = subtotalAmount;
        return this;
    }

    /**
     * The total amount with VAT.
     */
    public GetSalesInvoiceResponseBody withTotalAmount(GetSalesInvoiceTotalAmount totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }


    /**
     * The total amount with VAT.
     */
    public GetSalesInvoiceResponseBody withTotalAmount(Optional<? extends GetSalesInvoiceTotalAmount> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * The total VAT amount.
     */
    public GetSalesInvoiceResponseBody withTotalVatAmount(GetSalesInvoiceTotalVatAmount totalVatAmount) {
        Utils.checkNotNull(totalVatAmount, "totalVatAmount");
        this.totalVatAmount = Optional.ofNullable(totalVatAmount);
        return this;
    }


    /**
     * The total VAT amount.
     */
    public GetSalesInvoiceResponseBody withTotalVatAmount(Optional<? extends GetSalesInvoiceTotalVatAmount> totalVatAmount) {
        Utils.checkNotNull(totalVatAmount, "totalVatAmount");
        this.totalVatAmount = totalVatAmount;
        return this;
    }

    /**
     * The total amount without VAT after discounts.
     */
    public GetSalesInvoiceResponseBody withDiscountedSubtotalAmount(GetSalesInvoiceDiscountedSubtotalAmount discountedSubtotalAmount) {
        Utils.checkNotNull(discountedSubtotalAmount, "discountedSubtotalAmount");
        this.discountedSubtotalAmount = Optional.ofNullable(discountedSubtotalAmount);
        return this;
    }


    /**
     * The total amount without VAT after discounts.
     */
    public GetSalesInvoiceResponseBody withDiscountedSubtotalAmount(Optional<? extends GetSalesInvoiceDiscountedSubtotalAmount> discountedSubtotalAmount) {
        Utils.checkNotNull(discountedSubtotalAmount, "discountedSubtotalAmount");
        this.discountedSubtotalAmount = discountedSubtotalAmount;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetSalesInvoiceResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public GetSalesInvoiceResponseBody withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public GetSalesInvoiceResponseBody withIssuedAt(String issuedAt) {
        Utils.checkNotNull(issuedAt, "issuedAt");
        this.issuedAt = JsonNullable.of(issuedAt);
        return this;
    }

    /**
     * If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public GetSalesInvoiceResponseBody withIssuedAt(JsonNullable<String> issuedAt) {
        Utils.checkNotNull(issuedAt, "issuedAt");
        this.issuedAt = issuedAt;
        return this;
    }

    /**
     * If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public GetSalesInvoiceResponseBody withPaidAt(String paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = JsonNullable.of(paidAt);
        return this;
    }

    /**
     * If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public GetSalesInvoiceResponseBody withPaidAt(JsonNullable<String> paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = paidAt;
        return this;
    }

    /**
     * If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public GetSalesInvoiceResponseBody withDueAt(String dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = JsonNullable.of(dueAt);
        return this;
    }

    /**
     * If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public GetSalesInvoiceResponseBody withDueAt(JsonNullable<String> dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = dueAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetSalesInvoiceResponseBody withLinks(GetSalesInvoiceLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetSalesInvoiceResponseBody withLinks(Optional<? extends GetSalesInvoiceLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSalesInvoiceResponseBody other = (GetSalesInvoiceResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.invoiceNumber, other.invoiceNumber) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.vatScheme, other.vatScheme) &&
            Utils.enhancedDeepEquals(this.vatMode, other.vatMode) &&
            Utils.enhancedDeepEquals(this.memo, other.memo) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.paymentTerm, other.paymentTerm) &&
            Utils.enhancedDeepEquals(this.paymentDetails, other.paymentDetails) &&
            Utils.enhancedDeepEquals(this.emailDetails, other.emailDetails) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.mandateId, other.mandateId) &&
            Utils.enhancedDeepEquals(this.recipientIdentifier, other.recipientIdentifier) &&
            Utils.enhancedDeepEquals(this.recipient, other.recipient) &&
            Utils.enhancedDeepEquals(this.lines, other.lines) &&
            Utils.enhancedDeepEquals(this.discount, other.discount) &&
            Utils.enhancedDeepEquals(this.amountDue, other.amountDue) &&
            Utils.enhancedDeepEquals(this.subtotalAmount, other.subtotalAmount) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.totalVatAmount, other.totalVatAmount) &&
            Utils.enhancedDeepEquals(this.discountedSubtotalAmount, other.discountedSubtotalAmount) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.issuedAt, other.issuedAt) &&
            Utils.enhancedDeepEquals(this.paidAt, other.paidAt) &&
            Utils.enhancedDeepEquals(this.dueAt, other.dueAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, invoiceNumber,
            status, vatScheme, vatMode,
            memo, metadata, paymentTerm,
            paymentDetails, emailDetails, customerId,
            mandateId, recipientIdentifier, recipient,
            lines, discount, amountDue,
            subtotalAmount, totalAmount, totalVatAmount,
            discountedSubtotalAmount, createdAt, issuedAt,
            paidAt, dueAt, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSalesInvoiceResponseBody.class,
                "resource", resource,
                "id", id,
                "invoiceNumber", invoiceNumber,
                "status", status,
                "vatScheme", vatScheme,
                "vatMode", vatMode,
                "memo", memo,
                "metadata", metadata,
                "paymentTerm", paymentTerm,
                "paymentDetails", paymentDetails,
                "emailDetails", emailDetails,
                "customerId", customerId,
                "mandateId", mandateId,
                "recipientIdentifier", recipientIdentifier,
                "recipient", recipient,
                "lines", lines,
                "discount", discount,
                "amountDue", amountDue,
                "subtotalAmount", subtotalAmount,
                "totalAmount", totalAmount,
                "totalVatAmount", totalVatAmount,
                "discountedSubtotalAmount", discountedSubtotalAmount,
                "createdAt", createdAt,
                "issuedAt", issuedAt,
                "paidAt", paidAt,
                "dueAt", dueAt,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource = Optional.empty();

        private Optional<String> id = Optional.empty();

        private JsonNullable<String> invoiceNumber = JsonNullable.undefined();

        private Optional<? extends GetSalesInvoiceStatus> status = Optional.empty();

        private Optional<? extends GetSalesInvoiceVatScheme> vatScheme = Optional.empty();

        private Optional<? extends GetSalesInvoiceVatMode> vatMode = Optional.empty();

        private JsonNullable<String> memo = JsonNullable.undefined();

        private JsonNullable<? extends GetSalesInvoiceMetadata> metadata = JsonNullable.undefined();

        private JsonNullable<? extends GetSalesInvoicePaymentTerm> paymentTerm = JsonNullable.undefined();

        private JsonNullable<? extends GetSalesInvoicePaymentDetails> paymentDetails = JsonNullable.undefined();

        private JsonNullable<? extends GetSalesInvoiceEmailDetails> emailDetails = JsonNullable.undefined();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> mandateId = Optional.empty();

        private Optional<String> recipientIdentifier = Optional.empty();

        private JsonNullable<? extends GetSalesInvoiceRecipient> recipient = JsonNullable.undefined();

        private JsonNullable<? extends List<GetSalesInvoiceLines>> lines = JsonNullable.undefined();

        private JsonNullable<? extends GetSalesInvoiceDiscount> discount = JsonNullable.undefined();

        private Optional<? extends GetSalesInvoiceAmountDue> amountDue = Optional.empty();

        private Optional<? extends GetSalesInvoiceSubtotalAmount> subtotalAmount = Optional.empty();

        private Optional<? extends GetSalesInvoiceTotalAmount> totalAmount = Optional.empty();

        private Optional<? extends GetSalesInvoiceTotalVatAmount> totalVatAmount = Optional.empty();

        private Optional<? extends GetSalesInvoiceDiscountedSubtotalAmount> discountedSubtotalAmount = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private JsonNullable<String> issuedAt = JsonNullable.undefined();

        private JsonNullable<String> paidAt = JsonNullable.undefined();

        private JsonNullable<String> dueAt = JsonNullable.undefined();

        private Optional<? extends GetSalesInvoiceLinks> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this
         * endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a sales invoice object. Will always contain the string `sales-invoice` for this
         * endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this invoice. Example: `invoice_4Y0eZitmBnQ6IDoMqZQKh`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * When issued, an invoice number will be set for the sales invoice.
         */
        public Builder invoiceNumber(String invoiceNumber) {
            Utils.checkNotNull(invoiceNumber, "invoiceNumber");
            this.invoiceNumber = JsonNullable.of(invoiceNumber);
            return this;
        }

        /**
         * When issued, an invoice number will be set for the sales invoice.
         */
        public Builder invoiceNumber(JsonNullable<String> invoiceNumber) {
            Utils.checkNotNull(invoiceNumber, "invoiceNumber");
            this.invoiceNumber = invoiceNumber;
            return this;
        }


        /**
         * The status for the invoice to end up in.
         * 
         * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
         * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
         * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
         * 
         * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
         * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
         * 
         * <p>Dependent parameters:
         *   - `paymentDetails` is required if invoice should be set directly to `paid`
         *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
         *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
         */
        public Builder status(GetSalesInvoiceStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status for the invoice to end up in.
         * 
         * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
         * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
         * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
         * 
         * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
         * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
         * 
         * <p>Dependent parameters:
         *   - `paymentDetails` is required if invoice should be set directly to `paid`
         *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
         *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
         */
        public Builder status(Optional<? extends GetSalesInvoiceStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
         */
        public Builder vatScheme(GetSalesInvoiceVatScheme vatScheme) {
            Utils.checkNotNull(vatScheme, "vatScheme");
            this.vatScheme = Optional.ofNullable(vatScheme);
            return this;
        }

        /**
         * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
         */
        public Builder vatScheme(Optional<? extends GetSalesInvoiceVatScheme> vatScheme) {
            Utils.checkNotNull(vatScheme, "vatScheme");
            this.vatScheme = vatScheme;
            return this;
        }


        /**
         * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
         * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
         */
        public Builder vatMode(GetSalesInvoiceVatMode vatMode) {
            Utils.checkNotNull(vatMode, "vatMode");
            this.vatMode = Optional.ofNullable(vatMode);
            return this;
        }

        /**
         * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
         * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
         */
        public Builder vatMode(Optional<? extends GetSalesInvoiceVatMode> vatMode) {
            Utils.checkNotNull(vatMode, "vatMode");
            this.vatMode = vatMode;
            return this;
        }


        /**
         * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
         */
        public Builder memo(String memo) {
            Utils.checkNotNull(memo, "memo");
            this.memo = JsonNullable.of(memo);
            return this;
        }

        /**
         * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
         */
        public Builder memo(JsonNullable<String> memo) {
            Utils.checkNotNull(memo, "memo");
            this.memo = memo;
            return this;
        }


        /**
         * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(GetSalesInvoiceMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends GetSalesInvoiceMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * The payment term to be set on the invoice.
         */
        public Builder paymentTerm(GetSalesInvoicePaymentTerm paymentTerm) {
            Utils.checkNotNull(paymentTerm, "paymentTerm");
            this.paymentTerm = JsonNullable.of(paymentTerm);
            return this;
        }

        /**
         * The payment term to be set on the invoice.
         */
        public Builder paymentTerm(JsonNullable<? extends GetSalesInvoicePaymentTerm> paymentTerm) {
            Utils.checkNotNull(paymentTerm, "paymentTerm");
            this.paymentTerm = paymentTerm;
            return this;
        }


        /**
         * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
         * provided details. Required for `paid` status.
         */
        public Builder paymentDetails(GetSalesInvoicePaymentDetails paymentDetails) {
            Utils.checkNotNull(paymentDetails, "paymentDetails");
            this.paymentDetails = JsonNullable.of(paymentDetails);
            return this;
        }

        /**
         * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
         * provided details. Required for `paid` status.
         */
        public Builder paymentDetails(JsonNullable<? extends GetSalesInvoicePaymentDetails> paymentDetails) {
            Utils.checkNotNull(paymentDetails, "paymentDetails");
            this.paymentDetails = paymentDetails;
            return this;
        }


        /**
         * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
         * recipient with the provided `subject` and `body`. Required for `issued` status.
         */
        public Builder emailDetails(GetSalesInvoiceEmailDetails emailDetails) {
            Utils.checkNotNull(emailDetails, "emailDetails");
            this.emailDetails = JsonNullable.of(emailDetails);
            return this;
        }

        /**
         * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
         * recipient with the provided `subject` and `body`. Required for `issued` status.
         */
        public Builder emailDetails(JsonNullable<? extends GetSalesInvoiceEmailDetails> emailDetails) {
            Utils.checkNotNull(emailDetails, "emailDetails");
            this.emailDetails = emailDetails;
            return this;
        }


        /**
         * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
         * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
         * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
         */
        public Builder customerId(Optional<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
         * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
         */
        public Builder mandateId(String mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = Optional.ofNullable(mandateId);
            return this;
        }

        /**
         * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
         * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
         */
        public Builder mandateId(Optional<String> mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = mandateId;
            return this;
        }


        /**
         * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
         * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
         * is not required to send a first invoice to a recipient.
         */
        public Builder recipientIdentifier(String recipientIdentifier) {
            Utils.checkNotNull(recipientIdentifier, "recipientIdentifier");
            this.recipientIdentifier = Optional.ofNullable(recipientIdentifier);
            return this;
        }

        /**
         * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
         * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
         * is not required to send a first invoice to a recipient.
         */
        public Builder recipientIdentifier(Optional<String> recipientIdentifier) {
            Utils.checkNotNull(recipientIdentifier, "recipientIdentifier");
            this.recipientIdentifier = recipientIdentifier;
            return this;
        }


        public Builder recipient(GetSalesInvoiceRecipient recipient) {
            Utils.checkNotNull(recipient, "recipient");
            this.recipient = JsonNullable.of(recipient);
            return this;
        }

        public Builder recipient(JsonNullable<? extends GetSalesInvoiceRecipient> recipient) {
            Utils.checkNotNull(recipient, "recipient");
            this.recipient = recipient;
            return this;
        }


        /**
         * Provide the line items for the invoice. Each line contains details such as a description of the item
         * ordered and its price.
         * 
         * <p>All lines must have the same currency as the invoice.
         */
        public Builder lines(List<GetSalesInvoiceLines> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = JsonNullable.of(lines);
            return this;
        }

        /**
         * Provide the line items for the invoice. Each line contains details such as a description of the item
         * ordered and its price.
         * 
         * <p>All lines must have the same currency as the invoice.
         */
        public Builder lines(JsonNullable<? extends List<GetSalesInvoiceLines>> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = lines;
            return this;
        }


        /**
         * The discount to be applied to the entire invoice, applied on top of any line item discounts.
         */
        public Builder discount(GetSalesInvoiceDiscount discount) {
            Utils.checkNotNull(discount, "discount");
            this.discount = JsonNullable.of(discount);
            return this;
        }

        /**
         * The discount to be applied to the entire invoice, applied on top of any line item discounts.
         */
        public Builder discount(JsonNullable<? extends GetSalesInvoiceDiscount> discount) {
            Utils.checkNotNull(discount, "discount");
            this.discount = discount;
            return this;
        }


        /**
         * The amount that is left to be paid.
         */
        public Builder amountDue(GetSalesInvoiceAmountDue amountDue) {
            Utils.checkNotNull(amountDue, "amountDue");
            this.amountDue = Optional.ofNullable(amountDue);
            return this;
        }

        /**
         * The amount that is left to be paid.
         */
        public Builder amountDue(Optional<? extends GetSalesInvoiceAmountDue> amountDue) {
            Utils.checkNotNull(amountDue, "amountDue");
            this.amountDue = amountDue;
            return this;
        }


        /**
         * The total amount without VAT before discounts.
         */
        public Builder subtotalAmount(GetSalesInvoiceSubtotalAmount subtotalAmount) {
            Utils.checkNotNull(subtotalAmount, "subtotalAmount");
            this.subtotalAmount = Optional.ofNullable(subtotalAmount);
            return this;
        }

        /**
         * The total amount without VAT before discounts.
         */
        public Builder subtotalAmount(Optional<? extends GetSalesInvoiceSubtotalAmount> subtotalAmount) {
            Utils.checkNotNull(subtotalAmount, "subtotalAmount");
            this.subtotalAmount = subtotalAmount;
            return this;
        }


        /**
         * The total amount with VAT.
         */
        public Builder totalAmount(GetSalesInvoiceTotalAmount totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * The total amount with VAT.
         */
        public Builder totalAmount(Optional<? extends GetSalesInvoiceTotalAmount> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }


        /**
         * The total VAT amount.
         */
        public Builder totalVatAmount(GetSalesInvoiceTotalVatAmount totalVatAmount) {
            Utils.checkNotNull(totalVatAmount, "totalVatAmount");
            this.totalVatAmount = Optional.ofNullable(totalVatAmount);
            return this;
        }

        /**
         * The total VAT amount.
         */
        public Builder totalVatAmount(Optional<? extends GetSalesInvoiceTotalVatAmount> totalVatAmount) {
            Utils.checkNotNull(totalVatAmount, "totalVatAmount");
            this.totalVatAmount = totalVatAmount;
            return this;
        }


        /**
         * The total amount without VAT after discounts.
         */
        public Builder discountedSubtotalAmount(GetSalesInvoiceDiscountedSubtotalAmount discountedSubtotalAmount) {
            Utils.checkNotNull(discountedSubtotalAmount, "discountedSubtotalAmount");
            this.discountedSubtotalAmount = Optional.ofNullable(discountedSubtotalAmount);
            return this;
        }

        /**
         * The total amount without VAT after discounts.
         */
        public Builder discountedSubtotalAmount(Optional<? extends GetSalesInvoiceDiscountedSubtotalAmount> discountedSubtotalAmount) {
            Utils.checkNotNull(discountedSubtotalAmount, "discountedSubtotalAmount");
            this.discountedSubtotalAmount = discountedSubtotalAmount;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder issuedAt(String issuedAt) {
            Utils.checkNotNull(issuedAt, "issuedAt");
            this.issuedAt = JsonNullable.of(issuedAt);
            return this;
        }

        /**
         * If issued, the date when the sales invoice was issued, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder issuedAt(JsonNullable<String> issuedAt) {
            Utils.checkNotNull(issuedAt, "issuedAt");
            this.issuedAt = issuedAt;
            return this;
        }


        /**
         * If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder paidAt(String paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = JsonNullable.of(paidAt);
            return this;
        }

        /**
         * If paid, the date when the sales invoice was paid, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder paidAt(JsonNullable<String> paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = paidAt;
            return this;
        }


        /**
         * If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder dueAt(String dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = JsonNullable.of(dueAt);
            return this;
        }

        /**
         * If issued, the date when the sales invoice payment is due, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder dueAt(JsonNullable<String> dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = dueAt;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetSalesInvoiceLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends GetSalesInvoiceLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public GetSalesInvoiceResponseBody build() {

            return new GetSalesInvoiceResponseBody(
                resource, id, invoiceNumber,
                status, vatScheme, vatMode,
                memo, metadata, paymentTerm,
                paymentDetails, emailDetails, customerId,
                mandateId, recipientIdentifier, recipient,
                lines, discount, amountDue,
                subtotalAmount, totalAmount, totalVatAmount,
                discountedSubtotalAmount, createdAt, issuedAt,
                paidAt, dueAt, links);
        }

    }
}
