/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ListRefundsRefunds {
    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
     * will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<? extends ListRefundsMode> mode;

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
     * amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends ListRefundsAmount> amount;

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted
     * to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
     * zero.
     * 
     * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while
     * the refund is queued the settlement amount is likely not yet available.
     * 
     * <p>To retrieve accurate settlement amounts we recommend using the
     * [List balance transactions endpoint](list-balance-transactions) instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementAmount")
    private JsonNullable<? extends ListRefundsSettlementAmount> settlementAmount;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends ListRefundsMetadata> metadata;

    /**
     * The unique identifier of the payment this refund was created for.
     * The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentId")
    private Optional<String> paymentId;

    /**
     * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementId")
    private JsonNullable<String> settlementId;

    /**
     * Refunds may take some time to get confirmed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends ListRefundsStatus> status;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalReference")
    private Optional<? extends ListRefundsExternalReference> externalReference;

    /**
     * *This feature is only available to marketplace operators.*
     * 
     * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
     * 
     * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
     * needs to be reversed from which merchant(s).
     * 
     * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routingReversals")
    private JsonNullable<? extends List<ListRefundsRoutingReversals>> routingReversals;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends ListRefundsRefundsLinks> links;

    @JsonCreator
    public ListRefundsRefunds(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mode") Optional<? extends ListRefundsMode> mode,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("amount") Optional<? extends ListRefundsAmount> amount,
            @JsonProperty("settlementAmount") JsonNullable<? extends ListRefundsSettlementAmount> settlementAmount,
            @JsonProperty("metadata") JsonNullable<? extends ListRefundsMetadata> metadata,
            @JsonProperty("paymentId") Optional<String> paymentId,
            @JsonProperty("settlementId") JsonNullable<String> settlementId,
            @JsonProperty("status") Optional<? extends ListRefundsStatus> status,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("externalReference") Optional<? extends ListRefundsExternalReference> externalReference,
            @JsonProperty("routingReversals") JsonNullable<? extends List<ListRefundsRoutingReversals>> routingReversals,
            @JsonProperty("_links") Optional<? extends ListRefundsRefundsLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(settlementId, "settlementId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(externalReference, "externalReference");
        Utils.checkNotNull(routingReversals, "routingReversals");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.description = description;
        this.amount = amount;
        this.settlementAmount = settlementAmount;
        this.metadata = metadata;
        this.paymentId = paymentId;
        this.settlementId = settlementId;
        this.status = status;
        this.createdAt = createdAt;
        this.externalReference = externalReference;
        this.routingReversals = routingReversals;
        this.links = links;
    }
    
    public ListRefundsRefunds() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
     * will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListRefundsMode> mode() {
        return (Optional<ListRefundsMode>) mode;
    }

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
     * amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListRefundsAmount> amount() {
        return (Optional<ListRefundsAmount>) amount;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted
     * to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
     * zero.
     * 
     * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while
     * the refund is queued the settlement amount is likely not yet available.
     * 
     * <p>To retrieve accurate settlement amounts we recommend using the
     * [List balance transactions endpoint](list-balance-transactions) instead.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ListRefundsSettlementAmount> settlementAmount() {
        return (JsonNullable<ListRefundsSettlementAmount>) settlementAmount;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ListRefundsMetadata> metadata() {
        return (JsonNullable<ListRefundsMetadata>) metadata;
    }

    /**
     * The unique identifier of the payment this refund was created for.
     * The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonIgnore
    public Optional<String> paymentId() {
        return paymentId;
    }

    /**
     * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
     */
    @JsonIgnore
    public JsonNullable<String> settlementId() {
        return settlementId;
    }

    /**
     * Refunds may take some time to get confirmed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListRefundsStatus> status() {
        return (Optional<ListRefundsStatus>) status;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListRefundsExternalReference> externalReference() {
        return (Optional<ListRefundsExternalReference>) externalReference;
    }

    /**
     * *This feature is only available to marketplace operators.*
     * 
     * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
     * 
     * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
     * needs to be reversed from which merchant(s).
     * 
     * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<ListRefundsRoutingReversals>> routingReversals() {
        return (JsonNullable<List<ListRefundsRoutingReversals>>) routingReversals;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListRefundsRefundsLinks> links() {
        return (Optional<ListRefundsRefundsLinks>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    public ListRefundsRefunds withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
     */
    public ListRefundsRefunds withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
     * will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    public ListRefundsRefunds withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
     * will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
     */
    public ListRefundsRefunds withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public ListRefundsRefunds withMode(ListRefundsMode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }


    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public ListRefundsRefunds withMode(Optional<? extends ListRefundsMode> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    public ListRefundsRefunds withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * The description of the refund that may be shown to your customer, depending on the payment method used.
     */
    public ListRefundsRefunds withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
     * amount.
     */
    public ListRefundsRefunds withAmount(ListRefundsAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
     * amount.
     */
    public ListRefundsRefunds withAmount(Optional<? extends ListRefundsAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted
     * to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
     * zero.
     * 
     * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while
     * the refund is queued the settlement amount is likely not yet available.
     * 
     * <p>To retrieve accurate settlement amounts we recommend using the
     * [List balance transactions endpoint](list-balance-transactions) instead.
     */
    public ListRefundsRefunds withSettlementAmount(ListRefundsSettlementAmount settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = JsonNullable.of(settlementAmount);
        return this;
    }

    /**
     * This optional field will contain the approximate amount that will be deducted from your account balance, converted
     * to the currency your account is settled in.
     * 
     * <p>The amount is a **negative** amount.
     * 
     * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
     * zero.
     * 
     * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while
     * the refund is queued the settlement amount is likely not yet available.
     * 
     * <p>To retrieve accurate settlement amounts we recommend using the
     * [List balance transactions endpoint](list-balance-transactions) instead.
     */
    public ListRefundsRefunds withSettlementAmount(JsonNullable<? extends ListRefundsSettlementAmount> settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = settlementAmount;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public ListRefundsRefunds withMetadata(ListRefundsMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public ListRefundsRefunds withMetadata(JsonNullable<? extends ListRefundsMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The unique identifier of the payment this refund was created for.
     * The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    public ListRefundsRefunds withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = Optional.ofNullable(paymentId);
        return this;
    }


    /**
     * The unique identifier of the payment this refund was created for.
     * The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    public ListRefundsRefunds withPaymentId(Optional<String> paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    /**
     * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
     */
    public ListRefundsRefunds withSettlementId(String settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = JsonNullable.of(settlementId);
        return this;
    }

    /**
     * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
     */
    public ListRefundsRefunds withSettlementId(JsonNullable<String> settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = settlementId;
        return this;
    }

    /**
     * Refunds may take some time to get confirmed.
     */
    public ListRefundsRefunds withStatus(ListRefundsStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * Refunds may take some time to get confirmed.
     */
    public ListRefundsRefunds withStatus(Optional<? extends ListRefundsStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public ListRefundsRefunds withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public ListRefundsRefunds withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public ListRefundsRefunds withExternalReference(ListRefundsExternalReference externalReference) {
        Utils.checkNotNull(externalReference, "externalReference");
        this.externalReference = Optional.ofNullable(externalReference);
        return this;
    }


    public ListRefundsRefunds withExternalReference(Optional<? extends ListRefundsExternalReference> externalReference) {
        Utils.checkNotNull(externalReference, "externalReference");
        this.externalReference = externalReference;
        return this;
    }

    /**
     * *This feature is only available to marketplace operators.*
     * 
     * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
     * 
     * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
     * needs to be reversed from which merchant(s).
     * 
     * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
     */
    public ListRefundsRefunds withRoutingReversals(List<ListRefundsRoutingReversals> routingReversals) {
        Utils.checkNotNull(routingReversals, "routingReversals");
        this.routingReversals = JsonNullable.of(routingReversals);
        return this;
    }

    /**
     * *This feature is only available to marketplace operators.*
     * 
     * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
     * 
     * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
     * needs to be reversed from which merchant(s).
     * 
     * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
     */
    public ListRefundsRefunds withRoutingReversals(JsonNullable<? extends List<ListRefundsRoutingReversals>> routingReversals) {
        Utils.checkNotNull(routingReversals, "routingReversals");
        this.routingReversals = routingReversals;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public ListRefundsRefunds withLinks(ListRefundsRefundsLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public ListRefundsRefunds withLinks(Optional<? extends ListRefundsRefundsLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListRefundsRefunds other = (ListRefundsRefunds) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.settlementAmount, other.settlementAmount) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.paymentId, other.paymentId) &&
            Utils.enhancedDeepEquals(this.settlementId, other.settlementId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.externalReference, other.externalReference) &&
            Utils.enhancedDeepEquals(this.routingReversals, other.routingReversals) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, mode,
            description, amount, settlementAmount,
            metadata, paymentId, settlementId,
            status, createdAt, externalReference,
            routingReversals, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListRefundsRefunds.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "description", description,
                "amount", amount,
                "settlementAmount", settlementAmount,
                "metadata", metadata,
                "paymentId", paymentId,
                "settlementId", settlementId,
                "status", status,
                "createdAt", createdAt,
                "externalReference", externalReference,
                "routingReversals", routingReversals,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<? extends ListRefundsMode> mode = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<? extends ListRefundsAmount> amount = Optional.empty();

        private JsonNullable<? extends ListRefundsSettlementAmount> settlementAmount = JsonNullable.undefined();

        private JsonNullable<? extends ListRefundsMetadata> metadata = JsonNullable.undefined();

        private Optional<String> paymentId = Optional.empty();

        private JsonNullable<String> settlementId = JsonNullable.undefined();

        private Optional<? extends ListRefundsStatus> status = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<? extends ListRefundsExternalReference> externalReference = Optional.empty();

        private JsonNullable<? extends List<ListRefundsRoutingReversals>> routingReversals = JsonNullable.undefined();

        private Optional<? extends ListRefundsRefundsLinks> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
         * will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie
         * will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(ListRefundsMode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(Optional<? extends ListRefundsMode> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * The description of the refund that may be shown to your customer, depending on the payment method used.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the refund that may be shown to your customer, depending on the payment method used.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
         * amount.
         */
        public Builder amount(ListRefundsAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment
         * amount.
         */
        public Builder amount(Optional<? extends ListRefundsAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * This optional field will contain the approximate amount that will be deducted from your account balance, converted
         * to the currency your account is settled in.
         * 
         * <p>The amount is a **negative** amount.
         * 
         * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
         * zero.
         * 
         * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while
         * the refund is queued the settlement amount is likely not yet available.
         * 
         * <p>To retrieve accurate settlement amounts we recommend using the
         * [List balance transactions endpoint](list-balance-transactions) instead.
         */
        public Builder settlementAmount(ListRefundsSettlementAmount settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = JsonNullable.of(settlementAmount);
            return this;
        }

        /**
         * This optional field will contain the approximate amount that will be deducted from your account balance, converted
         * to the currency your account is settled in.
         * 
         * <p>The amount is a **negative** amount.
         * 
         * <p>If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be
         * zero.
         * 
         * <p>Since the field contains an estimated amount during refund processing, it may change over time. For example, while
         * the refund is queued the settlement amount is likely not yet available.
         * 
         * <p>To retrieve accurate settlement amounts we recommend using the
         * [List balance transactions endpoint](list-balance-transactions) instead.
         */
        public Builder settlementAmount(JsonNullable<? extends ListRefundsSettlementAmount> settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = settlementAmount;
            return this;
        }


        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(ListRefundsMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends ListRefundsMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * The unique identifier of the payment this refund was created for.
         * The full payment object can be retrieved via the payment URL in the `_links` object.
         */
        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        /**
         * The unique identifier of the payment this refund was created for.
         * The full payment object can be retrieved via the payment URL in the `_links` object.
         */
        public Builder paymentId(Optional<String> paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }


        /**
         * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
         */
        public Builder settlementId(String settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = JsonNullable.of(settlementId);
            return this;
        }

        /**
         * The identifier referring to the settlement this refund was settled with. This field is omitted if the refund is not settled (yet).
         */
        public Builder settlementId(JsonNullable<String> settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = settlementId;
            return this;
        }


        /**
         * Refunds may take some time to get confirmed.
         */
        public Builder status(ListRefundsStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Refunds may take some time to get confirmed.
         */
        public Builder status(Optional<? extends ListRefundsStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder externalReference(ListRefundsExternalReference externalReference) {
            Utils.checkNotNull(externalReference, "externalReference");
            this.externalReference = Optional.ofNullable(externalReference);
            return this;
        }

        public Builder externalReference(Optional<? extends ListRefundsExternalReference> externalReference) {
            Utils.checkNotNull(externalReference, "externalReference");
            this.externalReference = externalReference;
            return this;
        }


        /**
         * *This feature is only available to marketplace operators.*
         * 
         * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
         * 
         * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
         * needs to be reversed from which merchant(s).
         * 
         * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
         */
        public Builder routingReversals(List<ListRefundsRoutingReversals> routingReversals) {
            Utils.checkNotNull(routingReversals, "routingReversals");
            this.routingReversals = JsonNullable.of(routingReversals);
            return this;
        }

        /**
         * *This feature is only available to marketplace operators.*
         * 
         * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your balance.
         * 
         * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify what amount
         * needs to be reversed from which merchant(s).
         * 
         * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting` parameter instead.
         */
        public Builder routingReversals(JsonNullable<? extends List<ListRefundsRoutingReversals>> routingReversals) {
            Utils.checkNotNull(routingReversals, "routingReversals");
            this.routingReversals = routingReversals;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(ListRefundsRefundsLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends ListRefundsRefundsLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public ListRefundsRefunds build() {

            return new ListRefundsRefunds(
                resource, id, mode,
                description, amount, settlementAmount,
                metadata, paymentId, settlementId,
                status, createdAt, externalReference,
                routingReversals, links);
        }

    }
}
