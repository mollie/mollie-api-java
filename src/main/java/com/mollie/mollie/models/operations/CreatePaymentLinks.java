/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * CreatePaymentLinks
 * 
 * <p>An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
public class CreatePaymentLinks {
    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonProperty("self")
    private CreatePaymentSelf self;

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkout")
    private Optional<? extends Checkout> checkout;

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobileAppCheckout")
    private Optional<? extends MobileAppCheckout> mobileAppCheckout;

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different
     * payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
     * payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
     * chargeback for the test payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("changePaymentState")
    private Optional<? extends ChangePaymentState> changePaymentState;

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    @JsonProperty("dashboard")
    private CreatePaymentDashboard dashboard;

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunds")
    private Optional<? extends CreatePaymentRefunds> refunds;

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
     * payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargebacks")
    private Optional<? extends CreatePaymentChargebacks> chargebacks;

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("captures")
    private Optional<? extends CreatePaymentCaptures> captures;

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
     * Not present if not yet settled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement")
    private Optional<? extends Settlement> settlement;

    /**
     * The API resource URL of the [customer](get-customer).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private Optional<? extends Customer> customer;

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandate")
    private Optional<? extends Mandate> mandate;

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription")
    private Optional<? extends Subscription> subscription;

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
     * order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order")
    private Optional<? extends Order> order;

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
     * point-of-sale payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terminal")
    private Optional<? extends Terminal> terminal;

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentation")
    private Optional<? extends CreatePaymentDocumentation> documentation;

    /**
     * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
     * successful).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends CreatePaymentPaymentsStatus> status;

    /**
     * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
     * bank transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payOnline")
    private Optional<? extends PayOnline> payOnline;

    @JsonCreator
    public CreatePaymentLinks(
            @JsonProperty("self") CreatePaymentSelf self,
            @JsonProperty("checkout") Optional<? extends Checkout> checkout,
            @JsonProperty("mobileAppCheckout") Optional<? extends MobileAppCheckout> mobileAppCheckout,
            @JsonProperty("changePaymentState") Optional<? extends ChangePaymentState> changePaymentState,
            @JsonProperty("dashboard") CreatePaymentDashboard dashboard,
            @JsonProperty("refunds") Optional<? extends CreatePaymentRefunds> refunds,
            @JsonProperty("chargebacks") Optional<? extends CreatePaymentChargebacks> chargebacks,
            @JsonProperty("captures") Optional<? extends CreatePaymentCaptures> captures,
            @JsonProperty("settlement") Optional<? extends Settlement> settlement,
            @JsonProperty("customer") Optional<? extends Customer> customer,
            @JsonProperty("mandate") Optional<? extends Mandate> mandate,
            @JsonProperty("subscription") Optional<? extends Subscription> subscription,
            @JsonProperty("order") Optional<? extends Order> order,
            @JsonProperty("terminal") Optional<? extends Terminal> terminal,
            @JsonProperty("documentation") Optional<? extends CreatePaymentDocumentation> documentation,
            @JsonProperty("status") Optional<? extends CreatePaymentPaymentsStatus> status,
            @JsonProperty("payOnline") Optional<? extends PayOnline> payOnline) {
        Utils.checkNotNull(self, "self");
        Utils.checkNotNull(checkout, "checkout");
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        Utils.checkNotNull(dashboard, "dashboard");
        Utils.checkNotNull(refunds, "refunds");
        Utils.checkNotNull(chargebacks, "chargebacks");
        Utils.checkNotNull(captures, "captures");
        Utils.checkNotNull(settlement, "settlement");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(mandate, "mandate");
        Utils.checkNotNull(subscription, "subscription");
        Utils.checkNotNull(order, "order");
        Utils.checkNotNull(terminal, "terminal");
        Utils.checkNotNull(documentation, "documentation");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(payOnline, "payOnline");
        this.self = self;
        this.checkout = checkout;
        this.mobileAppCheckout = mobileAppCheckout;
        this.changePaymentState = changePaymentState;
        this.dashboard = dashboard;
        this.refunds = refunds;
        this.chargebacks = chargebacks;
        this.captures = captures;
        this.settlement = settlement;
        this.customer = customer;
        this.mandate = mandate;
        this.subscription = subscription;
        this.order = order;
        this.terminal = terminal;
        this.documentation = documentation;
        this.status = status;
        this.payOnline = payOnline;
    }
    
    public CreatePaymentLinks(
            CreatePaymentSelf self,
            CreatePaymentDashboard dashboard) {
        this(self, Optional.empty(), Optional.empty(),
            Optional.empty(), dashboard, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonIgnore
    public CreatePaymentSelf self() {
        return self;
    }

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Checkout> checkout() {
        return (Optional<Checkout>) checkout;
    }

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MobileAppCheckout> mobileAppCheckout() {
        return (Optional<MobileAppCheckout>) mobileAppCheckout;
    }

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different
     * payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
     * payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
     * chargeback for the test payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ChangePaymentState> changePaymentState() {
        return (Optional<ChangePaymentState>) changePaymentState;
    }

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    @JsonIgnore
    public CreatePaymentDashboard dashboard() {
        return dashboard;
    }

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreatePaymentRefunds> refunds() {
        return (Optional<CreatePaymentRefunds>) refunds;
    }

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
     * payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreatePaymentChargebacks> chargebacks() {
        return (Optional<CreatePaymentChargebacks>) chargebacks;
    }

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreatePaymentCaptures> captures() {
        return (Optional<CreatePaymentCaptures>) captures;
    }

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
     * Not present if not yet settled.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Settlement> settlement() {
        return (Optional<Settlement>) settlement;
    }

    /**
     * The API resource URL of the [customer](get-customer).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Customer> customer() {
        return (Optional<Customer>) customer;
    }

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Mandate> mandate() {
        return (Optional<Mandate>) mandate;
    }

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Subscription> subscription() {
        return (Optional<Subscription>) subscription;
    }

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
     * order.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Order> order() {
        return (Optional<Order>) order;
    }

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
     * point-of-sale payments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Terminal> terminal() {
        return (Optional<Terminal>) terminal;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreatePaymentDocumentation> documentation() {
        return (Optional<CreatePaymentDocumentation>) documentation;
    }

    /**
     * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
     * successful).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreatePaymentPaymentsStatus> status() {
        return (Optional<CreatePaymentPaymentsStatus>) status;
    }

    /**
     * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
     * bank transfer.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PayOnline> payOnline() {
        return (Optional<PayOnline>) payOnline;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public CreatePaymentLinks withSelf(CreatePaymentSelf self) {
        Utils.checkNotNull(self, "self");
        this.self = self;
        return this;
    }

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    public CreatePaymentLinks withCheckout(Checkout checkout) {
        Utils.checkNotNull(checkout, "checkout");
        this.checkout = Optional.ofNullable(checkout);
        return this;
    }


    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    public CreatePaymentLinks withCheckout(Optional<? extends Checkout> checkout) {
        Utils.checkNotNull(checkout, "checkout");
        this.checkout = checkout;
        return this;
    }

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    public CreatePaymentLinks withMobileAppCheckout(MobileAppCheckout mobileAppCheckout) {
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        this.mobileAppCheckout = Optional.ofNullable(mobileAppCheckout);
        return this;
    }


    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    public CreatePaymentLinks withMobileAppCheckout(Optional<? extends MobileAppCheckout> mobileAppCheckout) {
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        this.mobileAppCheckout = mobileAppCheckout;
        return this;
    }

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different
     * payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
     * payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
     * chargeback for the test payment.
     */
    public CreatePaymentLinks withChangePaymentState(ChangePaymentState changePaymentState) {
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        this.changePaymentState = Optional.ofNullable(changePaymentState);
        return this;
    }


    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different
     * payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
     * payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
     * chargeback for the test payment.
     */
    public CreatePaymentLinks withChangePaymentState(Optional<? extends ChangePaymentState> changePaymentState) {
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        this.changePaymentState = changePaymentState;
        return this;
    }

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    public CreatePaymentLinks withDashboard(CreatePaymentDashboard dashboard) {
        Utils.checkNotNull(dashboard, "dashboard");
        this.dashboard = dashboard;
        return this;
    }

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    public CreatePaymentLinks withRefunds(CreatePaymentRefunds refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = Optional.ofNullable(refunds);
        return this;
    }


    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    public CreatePaymentLinks withRefunds(Optional<? extends CreatePaymentRefunds> refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = refunds;
        return this;
    }

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
     * payment.
     */
    public CreatePaymentLinks withChargebacks(CreatePaymentChargebacks chargebacks) {
        Utils.checkNotNull(chargebacks, "chargebacks");
        this.chargebacks = Optional.ofNullable(chargebacks);
        return this;
    }


    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
     * payment.
     */
    public CreatePaymentLinks withChargebacks(Optional<? extends CreatePaymentChargebacks> chargebacks) {
        Utils.checkNotNull(chargebacks, "chargebacks");
        this.chargebacks = chargebacks;
        return this;
    }

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    public CreatePaymentLinks withCaptures(CreatePaymentCaptures captures) {
        Utils.checkNotNull(captures, "captures");
        this.captures = Optional.ofNullable(captures);
        return this;
    }


    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    public CreatePaymentLinks withCaptures(Optional<? extends CreatePaymentCaptures> captures) {
        Utils.checkNotNull(captures, "captures");
        this.captures = captures;
        return this;
    }

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
     * Not present if not yet settled.
     */
    public CreatePaymentLinks withSettlement(Settlement settlement) {
        Utils.checkNotNull(settlement, "settlement");
        this.settlement = Optional.ofNullable(settlement);
        return this;
    }


    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
     * Not present if not yet settled.
     */
    public CreatePaymentLinks withSettlement(Optional<? extends Settlement> settlement) {
        Utils.checkNotNull(settlement, "settlement");
        this.settlement = settlement;
        return this;
    }

    /**
     * The API resource URL of the [customer](get-customer).
     */
    public CreatePaymentLinks withCustomer(Customer customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = Optional.ofNullable(customer);
        return this;
    }


    /**
     * The API resource URL of the [customer](get-customer).
     */
    public CreatePaymentLinks withCustomer(Optional<? extends Customer> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    public CreatePaymentLinks withMandate(Mandate mandate) {
        Utils.checkNotNull(mandate, "mandate");
        this.mandate = Optional.ofNullable(mandate);
        return this;
    }


    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    public CreatePaymentLinks withMandate(Optional<? extends Mandate> mandate) {
        Utils.checkNotNull(mandate, "mandate");
        this.mandate = mandate;
        return this;
    }

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    public CreatePaymentLinks withSubscription(Subscription subscription) {
        Utils.checkNotNull(subscription, "subscription");
        this.subscription = Optional.ofNullable(subscription);
        return this;
    }


    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    public CreatePaymentLinks withSubscription(Optional<? extends Subscription> subscription) {
        Utils.checkNotNull(subscription, "subscription");
        this.subscription = subscription;
        return this;
    }

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
     * order.
     */
    public CreatePaymentLinks withOrder(Order order) {
        Utils.checkNotNull(order, "order");
        this.order = Optional.ofNullable(order);
        return this;
    }


    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
     * order.
     */
    public CreatePaymentLinks withOrder(Optional<? extends Order> order) {
        Utils.checkNotNull(order, "order");
        this.order = order;
        return this;
    }

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
     * point-of-sale payments.
     */
    public CreatePaymentLinks withTerminal(Terminal terminal) {
        Utils.checkNotNull(terminal, "terminal");
        this.terminal = Optional.ofNullable(terminal);
        return this;
    }


    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
     * point-of-sale payments.
     */
    public CreatePaymentLinks withTerminal(Optional<? extends Terminal> terminal) {
        Utils.checkNotNull(terminal, "terminal");
        this.terminal = terminal;
        return this;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public CreatePaymentLinks withDocumentation(CreatePaymentDocumentation documentation) {
        Utils.checkNotNull(documentation, "documentation");
        this.documentation = Optional.ofNullable(documentation);
        return this;
    }


    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public CreatePaymentLinks withDocumentation(Optional<? extends CreatePaymentDocumentation> documentation) {
        Utils.checkNotNull(documentation, "documentation");
        this.documentation = documentation;
        return this;
    }

    /**
     * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
     * successful).
     */
    public CreatePaymentLinks withStatus(CreatePaymentPaymentsStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
     * successful).
     */
    public CreatePaymentLinks withStatus(Optional<? extends CreatePaymentPaymentsStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
     * bank transfer.
     */
    public CreatePaymentLinks withPayOnline(PayOnline payOnline) {
        Utils.checkNotNull(payOnline, "payOnline");
        this.payOnline = Optional.ofNullable(payOnline);
        return this;
    }


    /**
     * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
     * bank transfer.
     */
    public CreatePaymentLinks withPayOnline(Optional<? extends PayOnline> payOnline) {
        Utils.checkNotNull(payOnline, "payOnline");
        this.payOnline = payOnline;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreatePaymentLinks other = (CreatePaymentLinks) o;
        return 
            Utils.enhancedDeepEquals(this.self, other.self) &&
            Utils.enhancedDeepEquals(this.checkout, other.checkout) &&
            Utils.enhancedDeepEquals(this.mobileAppCheckout, other.mobileAppCheckout) &&
            Utils.enhancedDeepEquals(this.changePaymentState, other.changePaymentState) &&
            Utils.enhancedDeepEquals(this.dashboard, other.dashboard) &&
            Utils.enhancedDeepEquals(this.refunds, other.refunds) &&
            Utils.enhancedDeepEquals(this.chargebacks, other.chargebacks) &&
            Utils.enhancedDeepEquals(this.captures, other.captures) &&
            Utils.enhancedDeepEquals(this.settlement, other.settlement) &&
            Utils.enhancedDeepEquals(this.customer, other.customer) &&
            Utils.enhancedDeepEquals(this.mandate, other.mandate) &&
            Utils.enhancedDeepEquals(this.subscription, other.subscription) &&
            Utils.enhancedDeepEquals(this.order, other.order) &&
            Utils.enhancedDeepEquals(this.terminal, other.terminal) &&
            Utils.enhancedDeepEquals(this.documentation, other.documentation) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.payOnline, other.payOnline);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            self, checkout, mobileAppCheckout,
            changePaymentState, dashboard, refunds,
            chargebacks, captures, settlement,
            customer, mandate, subscription,
            order, terminal, documentation,
            status, payOnline);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreatePaymentLinks.class,
                "self", self,
                "checkout", checkout,
                "mobileAppCheckout", mobileAppCheckout,
                "changePaymentState", changePaymentState,
                "dashboard", dashboard,
                "refunds", refunds,
                "chargebacks", chargebacks,
                "captures", captures,
                "settlement", settlement,
                "customer", customer,
                "mandate", mandate,
                "subscription", subscription,
                "order", order,
                "terminal", terminal,
                "documentation", documentation,
                "status", status,
                "payOnline", payOnline);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CreatePaymentSelf self;

        private Optional<? extends Checkout> checkout = Optional.empty();

        private Optional<? extends MobileAppCheckout> mobileAppCheckout = Optional.empty();

        private Optional<? extends ChangePaymentState> changePaymentState = Optional.empty();

        private CreatePaymentDashboard dashboard;

        private Optional<? extends CreatePaymentRefunds> refunds = Optional.empty();

        private Optional<? extends CreatePaymentChargebacks> chargebacks = Optional.empty();

        private Optional<? extends CreatePaymentCaptures> captures = Optional.empty();

        private Optional<? extends Settlement> settlement = Optional.empty();

        private Optional<? extends Customer> customer = Optional.empty();

        private Optional<? extends Mandate> mandate = Optional.empty();

        private Optional<? extends Subscription> subscription = Optional.empty();

        private Optional<? extends Order> order = Optional.empty();

        private Optional<? extends Terminal> terminal = Optional.empty();

        private Optional<? extends CreatePaymentDocumentation> documentation = Optional.empty();

        private Optional<? extends CreatePaymentPaymentsStatus> status = Optional.empty();

        private Optional<? extends PayOnline> payOnline = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder self(CreatePaymentSelf self) {
            Utils.checkNotNull(self, "self");
            this.self = self;
            return this;
        }


        /**
         * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
         */
        public Builder checkout(Checkout checkout) {
            Utils.checkNotNull(checkout, "checkout");
            this.checkout = Optional.ofNullable(checkout);
            return this;
        }

        /**
         * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
         */
        public Builder checkout(Optional<? extends Checkout> checkout) {
            Utils.checkNotNull(checkout, "checkout");
            this.checkout = checkout;
            return this;
        }


        /**
         * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
         */
        public Builder mobileAppCheckout(MobileAppCheckout mobileAppCheckout) {
            Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
            this.mobileAppCheckout = Optional.ofNullable(mobileAppCheckout);
            return this;
        }

        /**
         * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
         */
        public Builder mobileAppCheckout(Optional<? extends MobileAppCheckout> mobileAppCheckout) {
            Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
            this.mobileAppCheckout = mobileAppCheckout;
            return this;
        }


        /**
         * For test mode payments in certain scenarios, a hosted interface is available to help you test different
         * payment states.
         * 
         * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
         * payments are executed without any user interaction.
         * 
         * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
         * chargeback for the test payment.
         */
        public Builder changePaymentState(ChangePaymentState changePaymentState) {
            Utils.checkNotNull(changePaymentState, "changePaymentState");
            this.changePaymentState = Optional.ofNullable(changePaymentState);
            return this;
        }

        /**
         * For test mode payments in certain scenarios, a hosted interface is available to help you test different
         * payment states.
         * 
         * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
         * payments are executed without any user interaction.
         * 
         * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
         * chargeback for the test payment.
         */
        public Builder changePaymentState(Optional<? extends ChangePaymentState> changePaymentState) {
            Utils.checkNotNull(changePaymentState, "changePaymentState");
            this.changePaymentState = changePaymentState;
            return this;
        }


        /**
         * Direct link to the payment in the Mollie Dashboard.
         */
        public Builder dashboard(CreatePaymentDashboard dashboard) {
            Utils.checkNotNull(dashboard, "dashboard");
            this.dashboard = dashboard;
            return this;
        }


        /**
         * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
         */
        public Builder refunds(CreatePaymentRefunds refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = Optional.ofNullable(refunds);
            return this;
        }

        /**
         * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
         */
        public Builder refunds(Optional<? extends CreatePaymentRefunds> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = refunds;
            return this;
        }


        /**
         * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
         * payment.
         */
        public Builder chargebacks(CreatePaymentChargebacks chargebacks) {
            Utils.checkNotNull(chargebacks, "chargebacks");
            this.chargebacks = Optional.ofNullable(chargebacks);
            return this;
        }

        /**
         * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
         * payment.
         */
        public Builder chargebacks(Optional<? extends CreatePaymentChargebacks> chargebacks) {
            Utils.checkNotNull(chargebacks, "chargebacks");
            this.chargebacks = chargebacks;
            return this;
        }


        /**
         * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
         */
        public Builder captures(CreatePaymentCaptures captures) {
            Utils.checkNotNull(captures, "captures");
            this.captures = Optional.ofNullable(captures);
            return this;
        }

        /**
         * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
         */
        public Builder captures(Optional<? extends CreatePaymentCaptures> captures) {
            Utils.checkNotNull(captures, "captures");
            this.captures = captures;
            return this;
        }


        /**
         * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
         * Not present if not yet settled.
         */
        public Builder settlement(Settlement settlement) {
            Utils.checkNotNull(settlement, "settlement");
            this.settlement = Optional.ofNullable(settlement);
            return this;
        }

        /**
         * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
         * Not present if not yet settled.
         */
        public Builder settlement(Optional<? extends Settlement> settlement) {
            Utils.checkNotNull(settlement, "settlement");
            this.settlement = settlement;
            return this;
        }


        /**
         * The API resource URL of the [customer](get-customer).
         */
        public Builder customer(Customer customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        /**
         * The API resource URL of the [customer](get-customer).
         */
        public Builder customer(Optional<? extends Customer> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }


        /**
         * The API resource URL of the [mandate](get-mandate).
         */
        public Builder mandate(Mandate mandate) {
            Utils.checkNotNull(mandate, "mandate");
            this.mandate = Optional.ofNullable(mandate);
            return this;
        }

        /**
         * The API resource URL of the [mandate](get-mandate).
         */
        public Builder mandate(Optional<? extends Mandate> mandate) {
            Utils.checkNotNull(mandate, "mandate");
            this.mandate = mandate;
            return this;
        }


        /**
         * The API resource URL of the [subscription](get-subscription).
         */
        public Builder subscription(Subscription subscription) {
            Utils.checkNotNull(subscription, "subscription");
            this.subscription = Optional.ofNullable(subscription);
            return this;
        }

        /**
         * The API resource URL of the [subscription](get-subscription).
         */
        public Builder subscription(Optional<? extends Subscription> subscription) {
            Utils.checkNotNull(subscription, "subscription");
            this.subscription = subscription;
            return this;
        }


        /**
         * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
         * order.
         */
        public Builder order(Order order) {
            Utils.checkNotNull(order, "order");
            this.order = Optional.ofNullable(order);
            return this;
        }

        /**
         * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
         * order.
         */
        public Builder order(Optional<? extends Order> order) {
            Utils.checkNotNull(order, "order");
            this.order = order;
            return this;
        }


        /**
         * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
         * point-of-sale payments.
         */
        public Builder terminal(Terminal terminal) {
            Utils.checkNotNull(terminal, "terminal");
            this.terminal = Optional.ofNullable(terminal);
            return this;
        }

        /**
         * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
         * point-of-sale payments.
         */
        public Builder terminal(Optional<? extends Terminal> terminal) {
            Utils.checkNotNull(terminal, "terminal");
            this.terminal = terminal;
            return this;
        }


        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder documentation(CreatePaymentDocumentation documentation) {
            Utils.checkNotNull(documentation, "documentation");
            this.documentation = Optional.ofNullable(documentation);
            return this;
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder documentation(Optional<? extends CreatePaymentDocumentation> documentation) {
            Utils.checkNotNull(documentation, "documentation");
            this.documentation = documentation;
            return this;
        }


        /**
         * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
         * successful).
         */
        public Builder status(CreatePaymentPaymentsStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Link to customer-facing page showing the status of the bank transfer (to verify if the transaction was
         * successful).
         */
        public Builder status(Optional<? extends CreatePaymentPaymentsStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
         * bank transfer.
         */
        public Builder payOnline(PayOnline payOnline) {
            Utils.checkNotNull(payOnline, "payOnline");
            this.payOnline = Optional.ofNullable(payOnline);
            return this;
        }

        /**
         * Link to Mollie Checkout page allowing customers to select a different payment method instead of legacy
         * bank transfer.
         */
        public Builder payOnline(Optional<? extends PayOnline> payOnline) {
            Utils.checkNotNull(payOnline, "payOnline");
            this.payOnline = payOnline;
            return this;
        }

        public CreatePaymentLinks build() {

            return new CreatePaymentLinks(
                self, checkout, mobileAppCheckout,
                changePaymentState, dashboard, refunds,
                chargebacks, captures, settlement,
                customer, mandate, subscription,
                order, terminal, documentation,
                status, payOnline);
        }

    }
}
