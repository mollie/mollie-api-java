/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class UpdateSubscriptionRequestBody {

    /**
     * Update the amount for future payments of this subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<? extends UpdateSubscriptionAmount> amount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    private JsonNullable<String> interval;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    private JsonNullable<String> startDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("times")
    private JsonNullable<Long> times;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<String> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookUrl")
    private JsonNullable<String> webhookUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandateId")
    private JsonNullable<String> mandateId;

    @JsonCreator
    public UpdateSubscriptionRequestBody(
            @JsonProperty("amount") JsonNullable<? extends UpdateSubscriptionAmount> amount,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("interval") JsonNullable<String> interval,
            @JsonProperty("startDate") JsonNullable<String> startDate,
            @JsonProperty("times") JsonNullable<Long> times,
            @JsonProperty("metadata") JsonNullable<String> metadata,
            @JsonProperty("webhookUrl") JsonNullable<String> webhookUrl,
            @JsonProperty("mandateId") JsonNullable<String> mandateId) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(interval, "interval");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(times, "times");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        Utils.checkNotNull(mandateId, "mandateId");
        this.amount = amount;
        this.description = description;
        this.interval = interval;
        this.startDate = startDate;
        this.times = times;
        this.metadata = metadata;
        this.webhookUrl = webhookUrl;
        this.mandateId = mandateId;
    }
    
    public UpdateSubscriptionRequestBody() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Update the amount for future payments of this subscription.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<UpdateSubscriptionAmount> amount() {
        return (JsonNullable<UpdateSubscriptionAmount>) amount;
    }

    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    @JsonIgnore
    public JsonNullable<String> interval() {
        return interval;
    }

    @JsonIgnore
    public JsonNullable<String> startDate() {
        return startDate;
    }

    @JsonIgnore
    public JsonNullable<Long> times() {
        return times;
    }

    @JsonIgnore
    public JsonNullable<String> metadata() {
        return metadata;
    }

    @JsonIgnore
    public JsonNullable<String> webhookUrl() {
        return webhookUrl;
    }

    @JsonIgnore
    public JsonNullable<String> mandateId() {
        return mandateId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Update the amount for future payments of this subscription.
     */
    public UpdateSubscriptionRequestBody withAmount(UpdateSubscriptionAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * Update the amount for future payments of this subscription.
     */
    public UpdateSubscriptionRequestBody withAmount(JsonNullable<? extends UpdateSubscriptionAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public UpdateSubscriptionRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    public UpdateSubscriptionRequestBody withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public UpdateSubscriptionRequestBody withInterval(String interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = JsonNullable.of(interval);
        return this;
    }

    public UpdateSubscriptionRequestBody withInterval(JsonNullable<String> interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = interval;
        return this;
    }

    public UpdateSubscriptionRequestBody withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = JsonNullable.of(startDate);
        return this;
    }

    public UpdateSubscriptionRequestBody withStartDate(JsonNullable<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    public UpdateSubscriptionRequestBody withTimes(long times) {
        Utils.checkNotNull(times, "times");
        this.times = JsonNullable.of(times);
        return this;
    }

    public UpdateSubscriptionRequestBody withTimes(JsonNullable<Long> times) {
        Utils.checkNotNull(times, "times");
        this.times = times;
        return this;
    }

    public UpdateSubscriptionRequestBody withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    public UpdateSubscriptionRequestBody withMetadata(JsonNullable<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public UpdateSubscriptionRequestBody withWebhookUrl(String webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = JsonNullable.of(webhookUrl);
        return this;
    }

    public UpdateSubscriptionRequestBody withWebhookUrl(JsonNullable<String> webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = webhookUrl;
        return this;
    }

    public UpdateSubscriptionRequestBody withMandateId(String mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = JsonNullable.of(mandateId);
        return this;
    }

    public UpdateSubscriptionRequestBody withMandateId(JsonNullable<String> mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = mandateId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateSubscriptionRequestBody other = (UpdateSubscriptionRequestBody) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.interval, other.interval) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.times, other.times) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.webhookUrl, other.webhookUrl) &&
            Objects.deepEquals(this.mandateId, other.mandateId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            description,
            interval,
            startDate,
            times,
            metadata,
            webhookUrl,
            mandateId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateSubscriptionRequestBody.class,
                "amount", amount,
                "description", description,
                "interval", interval,
                "startDate", startDate,
                "times", times,
                "metadata", metadata,
                "webhookUrl", webhookUrl,
                "mandateId", mandateId);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends UpdateSubscriptionAmount> amount = JsonNullable.undefined();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<String> interval = JsonNullable.undefined();
 
        private JsonNullable<String> startDate = JsonNullable.undefined();
 
        private JsonNullable<Long> times = JsonNullable.undefined();
 
        private JsonNullable<String> metadata = JsonNullable.undefined();
 
        private JsonNullable<String> webhookUrl = JsonNullable.undefined();
 
        private JsonNullable<String> mandateId = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Update the amount for future payments of this subscription.
         */
        public Builder amount(UpdateSubscriptionAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * Update the amount for future payments of this subscription.
         */
        public Builder amount(JsonNullable<? extends UpdateSubscriptionAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder interval(String interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = JsonNullable.of(interval);
            return this;
        }

        public Builder interval(JsonNullable<String> interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = interval;
            return this;
        }

        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = JsonNullable.of(startDate);
            return this;
        }

        public Builder startDate(JsonNullable<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        public Builder times(long times) {
            Utils.checkNotNull(times, "times");
            this.times = JsonNullable.of(times);
            return this;
        }

        public Builder times(JsonNullable<Long> times) {
            Utils.checkNotNull(times, "times");
            this.times = times;
            return this;
        }

        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        public Builder metadata(JsonNullable<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder webhookUrl(String webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = JsonNullable.of(webhookUrl);
            return this;
        }

        public Builder webhookUrl(JsonNullable<String> webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = webhookUrl;
            return this;
        }

        public Builder mandateId(String mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = JsonNullable.of(mandateId);
            return this;
        }

        public Builder mandateId(JsonNullable<String> mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = mandateId;
            return this;
        }
        
        public UpdateSubscriptionRequestBody build() {
            return new UpdateSubscriptionRequestBody(
                amount,
                description,
                interval,
                startDate,
                times,
                metadata,
                webhookUrl,
                mandateId);
        }
    }
}

