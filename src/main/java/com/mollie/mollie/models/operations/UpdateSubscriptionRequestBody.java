/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.models.components.Amount;
import com.mollie.mollie.models.components.Metadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class UpdateSubscriptionRequestBody {
    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends Amount> amount;

    /**
     * The subscription's description will be used as the description of the resulting individual payments
     * and so showing
     * up on the bank statement of the consumer.
     * 
     * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active
     * subscriptions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Interval to wait between payments, for example `1 month` or `14 days`.
     * 
     * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
     * 
     * <p>Possible values: `... days`, `... weeks`, `...
     * 
     * <p>months`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    private Optional<String> interval;

    /**
     * The start date of the subscription in `YYYY-MM-DD` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    private Optional<String> startDate;

    /**
     * Total number of payments for the subscription. Once this number of payments is reached, the
     * subscription is
     * considered completed.
     * 
     * <p>Test mode subscriptions will get canceled automatically after 10 payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("times")
    private Optional<Long> times;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside
     * the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Metadata> metadata;

    /**
     * We will call this URL for any payment status changes of payments resulting from this subscription.
     * 
     * <p>This webhook will receive **all** events for the subscription's payments. This may include payment
     * failures as well. Be sure to verify the payment's subscription ID and its status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookUrl")
    private Optional<String> webhookUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandateId")
    private Optional<String> mandateId;

    /**
     * Most API credentials are specifically created for either live mode or test mode. For
     * organization-level credentials
     * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public UpdateSubscriptionRequestBody(
            @JsonProperty("amount") Optional<? extends Amount> amount,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("interval") Optional<String> interval,
            @JsonProperty("startDate") Optional<String> startDate,
            @JsonProperty("times") Optional<Long> times,
            @JsonProperty("metadata") JsonNullable<? extends Metadata> metadata,
            @JsonProperty("webhookUrl") Optional<String> webhookUrl,
            @JsonProperty("mandateId") Optional<String> mandateId,
            @JsonProperty("testmode") JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(interval, "interval");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(times, "times");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        Utils.checkNotNull(mandateId, "mandateId");
        Utils.checkNotNull(testmode, "testmode");
        this.amount = amount;
        this.description = description;
        this.interval = interval;
        this.startDate = startDate;
        this.times = times;
        this.metadata = metadata;
        this.webhookUrl = webhookUrl;
        this.mandateId = mandateId;
        this.testmode = testmode;
    }
    
    public UpdateSubscriptionRequestBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> amount() {
        return (Optional<Amount>) amount;
    }

    /**
     * The subscription's description will be used as the description of the resulting individual payments
     * and so showing
     * up on the bank statement of the consumer.
     * 
     * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active
     * subscriptions.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Interval to wait between payments, for example `1 month` or `14 days`.
     * 
     * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
     * 
     * <p>Possible values: `... days`, `... weeks`, `...
     * 
     * <p>months`.
     */
    @JsonIgnore
    public Optional<String> interval() {
        return interval;
    }

    /**
     * The start date of the subscription in `YYYY-MM-DD` format.
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * Total number of payments for the subscription. Once this number of payments is reached, the
     * subscription is
     * considered completed.
     * 
     * <p>Test mode subscriptions will get canceled automatically after 10 payments.
     */
    @JsonIgnore
    public Optional<Long> times() {
        return times;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside
     * the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Metadata> metadata() {
        return (JsonNullable<Metadata>) metadata;
    }

    /**
     * We will call this URL for any payment status changes of payments resulting from this subscription.
     * 
     * <p>This webhook will receive **all** events for the subscription's payments. This may include payment
     * failures as well. Be sure to verify the payment's subscription ID and its status.
     */
    @JsonIgnore
    public Optional<String> webhookUrl() {
        return webhookUrl;
    }

    @JsonIgnore
    public Optional<String> mandateId() {
        return mandateId;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For
     * organization-level credentials
     * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public UpdateSubscriptionRequestBody withAmount(Amount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public UpdateSubscriptionRequestBody withAmount(Optional<? extends Amount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The subscription's description will be used as the description of the resulting individual payments
     * and so showing
     * up on the bank statement of the consumer.
     * 
     * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active
     * subscriptions.
     */
    public UpdateSubscriptionRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * The subscription's description will be used as the description of the resulting individual payments
     * and so showing
     * up on the bank statement of the consumer.
     * 
     * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active
     * subscriptions.
     */
    public UpdateSubscriptionRequestBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Interval to wait between payments, for example `1 month` or `14 days`.
     * 
     * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
     * 
     * <p>Possible values: `... days`, `... weeks`, `...
     * 
     * <p>months`.
     */
    public UpdateSubscriptionRequestBody withInterval(String interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = Optional.ofNullable(interval);
        return this;
    }


    /**
     * Interval to wait between payments, for example `1 month` or `14 days`.
     * 
     * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
     * 
     * <p>Possible values: `... days`, `... weeks`, `...
     * 
     * <p>months`.
     */
    public UpdateSubscriptionRequestBody withInterval(Optional<String> interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = interval;
        return this;
    }

    /**
     * The start date of the subscription in `YYYY-MM-DD` format.
     */
    public UpdateSubscriptionRequestBody withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }


    /**
     * The start date of the subscription in `YYYY-MM-DD` format.
     */
    public UpdateSubscriptionRequestBody withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Total number of payments for the subscription. Once this number of payments is reached, the
     * subscription is
     * considered completed.
     * 
     * <p>Test mode subscriptions will get canceled automatically after 10 payments.
     */
    public UpdateSubscriptionRequestBody withTimes(long times) {
        Utils.checkNotNull(times, "times");
        this.times = Optional.ofNullable(times);
        return this;
    }


    /**
     * Total number of payments for the subscription. Once this number of payments is reached, the
     * subscription is
     * considered completed.
     * 
     * <p>Test mode subscriptions will get canceled automatically after 10 payments.
     */
    public UpdateSubscriptionRequestBody withTimes(Optional<Long> times) {
        Utils.checkNotNull(times, "times");
        this.times = times;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside
     * the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    public UpdateSubscriptionRequestBody withMetadata(Metadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside
     * the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    public UpdateSubscriptionRequestBody withMetadata(JsonNullable<? extends Metadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * We will call this URL for any payment status changes of payments resulting from this subscription.
     * 
     * <p>This webhook will receive **all** events for the subscription's payments. This may include payment
     * failures as well. Be sure to verify the payment's subscription ID and its status.
     */
    public UpdateSubscriptionRequestBody withWebhookUrl(String webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = Optional.ofNullable(webhookUrl);
        return this;
    }


    /**
     * We will call this URL for any payment status changes of payments resulting from this subscription.
     * 
     * <p>This webhook will receive **all** events for the subscription's payments. This may include payment
     * failures as well. Be sure to verify the payment's subscription ID and its status.
     */
    public UpdateSubscriptionRequestBody withWebhookUrl(Optional<String> webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = webhookUrl;
        return this;
    }

    public UpdateSubscriptionRequestBody withMandateId(String mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = Optional.ofNullable(mandateId);
        return this;
    }


    public UpdateSubscriptionRequestBody withMandateId(Optional<String> mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = mandateId;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For
     * organization-level credentials
     * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public UpdateSubscriptionRequestBody withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For
     * organization-level credentials
     * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public UpdateSubscriptionRequestBody withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateSubscriptionRequestBody other = (UpdateSubscriptionRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.interval, other.interval) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.times, other.times) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.webhookUrl, other.webhookUrl) &&
            Utils.enhancedDeepEquals(this.mandateId, other.mandateId) &&
            Utils.enhancedDeepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            amount, description, interval,
            startDate, times, metadata,
            webhookUrl, mandateId, testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateSubscriptionRequestBody.class,
                "amount", amount,
                "description", description,
                "interval", interval,
                "startDate", startDate,
                "times", times,
                "metadata", metadata,
                "webhookUrl", webhookUrl,
                "mandateId", mandateId,
                "testmode", testmode);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends Amount> amount = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> interval = Optional.empty();

        private Optional<String> startDate = Optional.empty();

        private Optional<Long> times = Optional.empty();

        private JsonNullable<? extends Metadata> metadata = JsonNullable.undefined();

        private Optional<String> webhookUrl = Optional.empty();

        private Optional<String> mandateId = Optional.empty();

        private JsonNullable<Boolean> testmode = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(Amount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(Optional<? extends Amount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * The subscription's description will be used as the description of the resulting individual payments
         * and so showing
         * up on the bank statement of the consumer.
         * 
         * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active
         * subscriptions.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The subscription's description will be used as the description of the resulting individual payments
         * and so showing
         * up on the bank statement of the consumer.
         * 
         * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active
         * subscriptions.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * Interval to wait between payments, for example `1 month` or `14 days`.
         * 
         * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
         * 
         * <p>Possible values: `... days`, `... weeks`, `...
         * 
         * <p>months`.
         */
        public Builder interval(String interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = Optional.ofNullable(interval);
            return this;
        }

        /**
         * Interval to wait between payments, for example `1 month` or `14 days`.
         * 
         * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
         * 
         * <p>Possible values: `... days`, `... weeks`, `...
         * 
         * <p>months`.
         */
        public Builder interval(Optional<String> interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = interval;
            return this;
        }


        /**
         * The start date of the subscription in `YYYY-MM-DD` format.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The start date of the subscription in `YYYY-MM-DD` format.
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        /**
         * Total number of payments for the subscription. Once this number of payments is reached, the
         * subscription is
         * considered completed.
         * 
         * <p>Test mode subscriptions will get canceled automatically after 10 payments.
         */
        public Builder times(long times) {
            Utils.checkNotNull(times, "times");
            this.times = Optional.ofNullable(times);
            return this;
        }

        /**
         * Total number of payments for the subscription. Once this number of payments is reached, the
         * subscription is
         * considered completed.
         * 
         * <p>Test mode subscriptions will get canceled automatically after 10 payments.
         */
        public Builder times(Optional<Long> times) {
            Utils.checkNotNull(times, "times");
            this.times = times;
            return this;
        }


        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside
         * the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to
         * approximately 1kB.
         */
        public Builder metadata(Metadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside
         * the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to
         * approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends Metadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * We will call this URL for any payment status changes of payments resulting from this subscription.
         * 
         * <p>This webhook will receive **all** events for the subscription's payments. This may include payment
         * failures as well. Be sure to verify the payment's subscription ID and its status.
         */
        public Builder webhookUrl(String webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = Optional.ofNullable(webhookUrl);
            return this;
        }

        /**
         * We will call this URL for any payment status changes of payments resulting from this subscription.
         * 
         * <p>This webhook will receive **all** events for the subscription's payments. This may include payment
         * failures as well. Be sure to verify the payment's subscription ID and its status.
         */
        public Builder webhookUrl(Optional<String> webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = webhookUrl;
            return this;
        }


        public Builder mandateId(String mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = Optional.ofNullable(mandateId);
            return this;
        }

        public Builder mandateId(Optional<String> mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = mandateId;
            return this;
        }


        /**
         * Most API credentials are specifically created for either live mode or test mode. For
         * organization-level credentials
         * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. For
         * organization-level credentials
         * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }

        public UpdateSubscriptionRequestBody build() {

            return new UpdateSubscriptionRequestBody(
                amount, description, interval,
                startDate, times, metadata,
                webhookUrl, mandateId, testmode);
        }

    }
}
