/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class SubmitOnboardingDataRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    private Optional<? extends Organization> organization;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile")
    private Optional<? extends Profile> profile;

    @JsonCreator
    public SubmitOnboardingDataRequestBody(
            @JsonProperty("organization") Optional<? extends Organization> organization,
            @JsonProperty("profile") Optional<? extends Profile> profile) {
        Utils.checkNotNull(organization, "organization");
        Utils.checkNotNull(profile, "profile");
        this.organization = organization;
        this.profile = profile;
    }
    
    public SubmitOnboardingDataRequestBody() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Organization> organization() {
        return (Optional<Organization>) organization;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Profile> profile() {
        return (Optional<Profile>) profile;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SubmitOnboardingDataRequestBody withOrganization(Organization organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = Optional.ofNullable(organization);
        return this;
    }

    public SubmitOnboardingDataRequestBody withOrganization(Optional<? extends Organization> organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = organization;
        return this;
    }

    public SubmitOnboardingDataRequestBody withProfile(Profile profile) {
        Utils.checkNotNull(profile, "profile");
        this.profile = Optional.ofNullable(profile);
        return this;
    }

    public SubmitOnboardingDataRequestBody withProfile(Optional<? extends Profile> profile) {
        Utils.checkNotNull(profile, "profile");
        this.profile = profile;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubmitOnboardingDataRequestBody other = (SubmitOnboardingDataRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.organization, other.organization) &&
            Utils.enhancedDeepEquals(this.profile, other.profile);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            organization,
            profile);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SubmitOnboardingDataRequestBody.class,
                "organization", organization,
                "profile", profile);
    }
    
    public final static class Builder {
 
        private Optional<? extends Organization> organization = Optional.empty();
 
        private Optional<? extends Profile> profile = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder organization(Organization organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = Optional.ofNullable(organization);
            return this;
        }

        public Builder organization(Optional<? extends Organization> organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = organization;
            return this;
        }

        public Builder profile(Profile profile) {
            Utils.checkNotNull(profile, "profile");
            this.profile = Optional.ofNullable(profile);
            return this;
        }

        public Builder profile(Optional<? extends Profile> profile) {
            Utils.checkNotNull(profile, "profile");
            this.profile = profile;
            return this;
        }
        
        public SubmitOnboardingDataRequestBody build() {
            return new SubmitOnboardingDataRequestBody(
                organization,
                profile);
        }
    }
}
