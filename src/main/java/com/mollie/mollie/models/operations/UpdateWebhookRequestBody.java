/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.models.components.WebhookEventTypes;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class UpdateWebhookRequestBody {
    /**
     * A name that identifies the webhook.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The URL Mollie will send the events to. This URL must be publicly accessible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * The event's type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventTypes")
    private Optional<? extends WebhookEventTypes> webhookEventTypes;

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
     * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public UpdateWebhookRequestBody(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("eventTypes") Optional<? extends WebhookEventTypes> webhookEventTypes,
            @JsonProperty("testmode") JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(webhookEventTypes, "webhookEventTypes");
        Utils.checkNotNull(testmode, "testmode");
        this.name = name;
        this.url = url;
        this.webhookEventTypes = webhookEventTypes;
        this.testmode = testmode;
    }
    
    public UpdateWebhookRequestBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined());
    }

    /**
     * A name that identifies the webhook.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The URL Mollie will send the events to. This URL must be publicly accessible.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * The event's type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WebhookEventTypes> webhookEventTypes() {
        return (Optional<WebhookEventTypes>) webhookEventTypes;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
     * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A name that identifies the webhook.
     */
    public UpdateWebhookRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * A name that identifies the webhook.
     */
    public UpdateWebhookRequestBody withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The URL Mollie will send the events to. This URL must be publicly accessible.
     */
    public UpdateWebhookRequestBody withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }


    /**
     * The URL Mollie will send the events to. This URL must be publicly accessible.
     */
    public UpdateWebhookRequestBody withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The event's type
     */
    public UpdateWebhookRequestBody withWebhookEventTypes(WebhookEventTypes webhookEventTypes) {
        Utils.checkNotNull(webhookEventTypes, "webhookEventTypes");
        this.webhookEventTypes = Optional.ofNullable(webhookEventTypes);
        return this;
    }


    /**
     * The event's type
     */
    public UpdateWebhookRequestBody withWebhookEventTypes(Optional<? extends WebhookEventTypes> webhookEventTypes) {
        Utils.checkNotNull(webhookEventTypes, "webhookEventTypes");
        this.webhookEventTypes = webhookEventTypes;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
     * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public UpdateWebhookRequestBody withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
     * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public UpdateWebhookRequestBody withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateWebhookRequestBody other = (UpdateWebhookRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.webhookEventTypes, other.webhookEventTypes) &&
            Utils.enhancedDeepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, url, webhookEventTypes,
            testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateWebhookRequestBody.class,
                "name", name,
                "url", url,
                "webhookEventTypes", webhookEventTypes,
                "testmode", testmode);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> name = Optional.empty();

        private Optional<String> url = Optional.empty();

        private Optional<? extends WebhookEventTypes> webhookEventTypes = Optional.empty();

        private JsonNullable<Boolean> testmode = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A name that identifies the webhook.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * A name that identifies the webhook.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The URL Mollie will send the events to. This URL must be publicly accessible.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The URL Mollie will send the events to. This URL must be publicly accessible.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }


        /**
         * The event's type
         */
        public Builder webhookEventTypes(WebhookEventTypes webhookEventTypes) {
            Utils.checkNotNull(webhookEventTypes, "webhookEventTypes");
            this.webhookEventTypes = Optional.ofNullable(webhookEventTypes);
            return this;
        }

        /**
         * The event's type
         */
        public Builder webhookEventTypes(Optional<? extends WebhookEventTypes> webhookEventTypes) {
            Utils.checkNotNull(webhookEventTypes, "webhookEventTypes");
            this.webhookEventTypes = webhookEventTypes;
            return this;
        }


        /**
         * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
         * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials
         * such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }

        public UpdateWebhookRequestBody build() {

            return new UpdateWebhookRequestBody(
                name, url, webhookEventTypes,
                testmode);
        }

    }
}
