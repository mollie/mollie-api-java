/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class PaymentCreateRouteRequestBody {

    /**
     * The amount of the route. That amount that will be routed to the specified destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends PaymentCreateRouteAmount> amount;

    /**
     * The description of the route. This description is shown in the reports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The destination of the route.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination")
    private Optional<? extends PaymentCreateRouteDestination> destination;

    @JsonCreator
    public PaymentCreateRouteRequestBody(
            @JsonProperty("amount") Optional<? extends PaymentCreateRouteAmount> amount,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("destination") Optional<? extends PaymentCreateRouteDestination> destination) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(destination, "destination");
        this.amount = amount;
        this.description = description;
        this.destination = destination;
    }
    
    public PaymentCreateRouteRequestBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The amount of the route. That amount that will be routed to the specified destination.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentCreateRouteAmount> amount() {
        return (Optional<PaymentCreateRouteAmount>) amount;
    }

    /**
     * The description of the route. This description is shown in the reports.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The destination of the route.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentCreateRouteDestination> destination() {
        return (Optional<PaymentCreateRouteDestination>) destination;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The amount of the route. That amount that will be routed to the specified destination.
     */
    public PaymentCreateRouteRequestBody withAmount(PaymentCreateRouteAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The amount of the route. That amount that will be routed to the specified destination.
     */
    public PaymentCreateRouteRequestBody withAmount(Optional<? extends PaymentCreateRouteAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The description of the route. This description is shown in the reports.
     */
    public PaymentCreateRouteRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of the route. This description is shown in the reports.
     */
    public PaymentCreateRouteRequestBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The destination of the route.
     */
    public PaymentCreateRouteRequestBody withDestination(PaymentCreateRouteDestination destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = Optional.ofNullable(destination);
        return this;
    }

    /**
     * The destination of the route.
     */
    public PaymentCreateRouteRequestBody withDestination(Optional<? extends PaymentCreateRouteDestination> destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = destination;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentCreateRouteRequestBody other = (PaymentCreateRouteRequestBody) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.destination, other.destination);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            description,
            destination);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentCreateRouteRequestBody.class,
                "amount", amount,
                "description", description,
                "destination", destination);
    }
    
    public final static class Builder {
 
        private Optional<? extends PaymentCreateRouteAmount> amount = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<? extends PaymentCreateRouteDestination> destination = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The amount of the route. That amount that will be routed to the specified destination.
         */
        public Builder amount(PaymentCreateRouteAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount of the route. That amount that will be routed to the specified destination.
         */
        public Builder amount(Optional<? extends PaymentCreateRouteAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The description of the route. This description is shown in the reports.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the route. This description is shown in the reports.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The destination of the route.
         */
        public Builder destination(PaymentCreateRouteDestination destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = Optional.ofNullable(destination);
            return this;
        }

        /**
         * The destination of the route.
         */
        public Builder destination(Optional<? extends PaymentCreateRouteDestination> destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = destination;
            return this;
        }
        
        public PaymentCreateRouteRequestBody build() {
            return new PaymentCreateRouteRequestBody(
                amount,
                description,
                destination);
        }
    }
}
