/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * CaptureMode - **Only relevant if you wish to manage authorization and capturing separately.**
 * 
 * By default, the customer's card or bank account is immediately charged when they complete the payment.
 * 
 * Some payment methods also allow placing a hold on the card or bank account. This hold or 'authorization' can then
 * at a later point either be 'captured' or canceled.
 * 
 * To enable this way of working, set the capture mode to `manual` and capture the payment manually using the
 * [Create capture endpoint](create-capture).
 */
public enum CaptureMode {
    AUTOMATIC("automatic"),
    MANUAL("manual");

    @JsonValue
    private final String value;

    private CaptureMode(String value) {
        this.value = value;
    }
    
    public String value() {
        return value;
    }
    
    public static Optional<CaptureMode> fromValue(String value) {
        for (CaptureMode o: CaptureMode.values()) {
            if (Objects.deepEquals(o.value, value)) {
                return Optional.of(o);
            }
        }
        return Optional.empty();
    }
}
