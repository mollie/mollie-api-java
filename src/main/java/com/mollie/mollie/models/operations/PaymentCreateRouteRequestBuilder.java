/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.SDKConfiguration;
import com.mollie.mollie.models.components.EntityRoute;
import com.mollie.mollie.operations.PaymentCreateRoute;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import com.mollie.mollie.utils.RetryConfig;
import com.mollie.mollie.utils.Utils;
import java.lang.String;
import java.util.Optional;

public class PaymentCreateRouteRequestBuilder {

    private String paymentId;
    private Optional<String> idempotencyKey = Optional.empty();
    private Optional<? extends EntityRoute> entityRoute = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public PaymentCreateRouteRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public PaymentCreateRouteRequestBuilder paymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }
                
    public PaymentCreateRouteRequestBuilder idempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.of(idempotencyKey);
        return this;
    }

    public PaymentCreateRouteRequestBuilder idempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }
                
    public PaymentCreateRouteRequestBuilder entityRoute(EntityRoute entityRoute) {
        Utils.checkNotNull(entityRoute, "entityRoute");
        this.entityRoute = Optional.of(entityRoute);
        return this;
    }

    public PaymentCreateRouteRequestBuilder entityRoute(Optional<? extends EntityRoute> entityRoute) {
        Utils.checkNotNull(entityRoute, "entityRoute");
        this.entityRoute = entityRoute;
        return this;
    }
                
    public PaymentCreateRouteRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public PaymentCreateRouteRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private PaymentCreateRouteRequest buildRequest() {

        PaymentCreateRouteRequest request = new PaymentCreateRouteRequest(paymentId,
            idempotencyKey,
            entityRoute);

        return request;
    }

    public PaymentCreateRouteResponse call() {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<PaymentCreateRouteRequest, PaymentCreateRouteResponse> operation
              = new PaymentCreateRoute.Sync(sdkConfiguration, options, _headers);
        PaymentCreateRouteRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
