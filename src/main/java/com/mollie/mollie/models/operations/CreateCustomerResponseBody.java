/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * CreateCustomerResponseBody
 * 
 * <p>The newly created customer object.
 */
public class CreateCustomerResponseBody {
    /**
     * Indicates the response contains a customer object. Will always contain the string `customer` for this endpoint.
     */
    @JsonProperty("resource")
    private String resource;

    /**
     * The identifier uniquely referring to this customer. Example: `cst_vsKJpSsabw`.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonProperty("mode")
    private CreateCustomerMode mode;

    /**
     * The full name of the customer.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The email address of the customer.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("email")
    private Optional<String> email;

    /**
     * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
     * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("locale")
    private Optional<? extends CreateCustomerCustomersLocale> locale;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("metadata")
    private Optional<? extends CreateCustomerCustomersMetadata> metadata;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonProperty("createdAt")
    private String createdAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private CreateCustomerLinks links;

    @JsonCreator
    public CreateCustomerResponseBody(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") String id,
            @JsonProperty("mode") CreateCustomerMode mode,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("locale") Optional<? extends CreateCustomerCustomersLocale> locale,
            @JsonProperty("metadata") Optional<? extends CreateCustomerCustomersMetadata> metadata,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("_links") CreateCustomerLinks links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.name = name;
        this.email = email;
        this.locale = locale;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.links = links;
    }
    
    public CreateCustomerResponseBody(
            String resource,
            String id,
            CreateCustomerMode mode,
            String createdAt,
            CreateCustomerLinks links) {
        this(resource, id, mode,
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), createdAt, links);
    }

    /**
     * Indicates the response contains a customer object. Will always contain the string `customer` for this endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this customer. Example: `cst_vsKJpSsabw`.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonIgnore
    public CreateCustomerMode mode() {
        return mode;
    }

    /**
     * The full name of the customer.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The email address of the customer.
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    /**
     * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
     * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerCustomersLocale> locale() {
        return (Optional<CreateCustomerCustomersLocale>) locale;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCustomerCustomersMetadata> metadata() {
        return (Optional<CreateCustomerCustomersMetadata>) metadata;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public CreateCustomerLinks links() {
        return links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a customer object. Will always contain the string `customer` for this endpoint.
     */
    public CreateCustomerResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this customer. Example: `cst_vsKJpSsabw`.
     */
    public CreateCustomerResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public CreateCustomerResponseBody withMode(CreateCustomerMode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The full name of the customer.
     */
    public CreateCustomerResponseBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * The full name of the customer.
     */
    public CreateCustomerResponseBody withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The email address of the customer.
     */
    public CreateCustomerResponseBody withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }


    /**
     * The email address of the customer.
     */
    public CreateCustomerResponseBody withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
     * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
     */
    public CreateCustomerResponseBody withLocale(CreateCustomerCustomersLocale locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = Optional.ofNullable(locale);
        return this;
    }


    /**
     * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
     * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
     */
    public CreateCustomerResponseBody withLocale(Optional<? extends CreateCustomerCustomersLocale> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateCustomerResponseBody withMetadata(CreateCustomerCustomersMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }


    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateCustomerResponseBody withMetadata(Optional<? extends CreateCustomerCustomersMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public CreateCustomerResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public CreateCustomerResponseBody withLinks(CreateCustomerLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCustomerResponseBody other = (CreateCustomerResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.locale, other.locale) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, mode,
            name, email, locale,
            metadata, createdAt, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCustomerResponseBody.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "name", name,
                "email", email,
                "locale", locale,
                "metadata", metadata,
                "createdAt", createdAt,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private String id;

        private CreateCustomerMode mode;

        private Optional<String> name = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<? extends CreateCustomerCustomersLocale> locale = Optional.empty();

        private Optional<? extends CreateCustomerCustomersMetadata> metadata = Optional.empty();

        private String createdAt;

        private CreateCustomerLinks links;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a customer object. Will always contain the string `customer` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this customer. Example: `cst_vsKJpSsabw`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(CreateCustomerMode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * The full name of the customer.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The full name of the customer.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The email address of the customer.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * The email address of the customer.
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }


        /**
         * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
         * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
         */
        public Builder locale(CreateCustomerCustomersLocale locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = Optional.ofNullable(locale);
            return this;
        }

        /**
         * Preconfigure the language to be used in the hosted payment pages shown to the customer. Should only be provided if
         * absolutely necessary. If not provided, the browser language will be used which is typically highly accurate.
         */
        public Builder locale(Optional<? extends CreateCustomerCustomersLocale> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }


        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(CreateCustomerCustomersMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(Optional<? extends CreateCustomerCustomersMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(CreateCustomerLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public CreateCustomerResponseBody build() {

            return new CreateCustomerResponseBody(
                resource, id, mode,
                name, email, locale,
                metadata, createdAt, links);
        }

    }
}
