/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * Close
 * 
 * <p>Only available on `transaction-categories` grouping.
 */
public class Close {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending")
    private Optional<? extends GetBalanceReportBalancesPending> pending;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available")
    private Optional<? extends GetBalanceReportAvailable> available;

    @JsonCreator
    public Close(
            @JsonProperty("pending") Optional<? extends GetBalanceReportBalancesPending> pending,
            @JsonProperty("available") Optional<? extends GetBalanceReportAvailable> available) {
        Utils.checkNotNull(pending, "pending");
        Utils.checkNotNull(available, "available");
        this.pending = pending;
        this.available = available;
    }
    
    public Close() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetBalanceReportBalancesPending> pending() {
        return (Optional<GetBalanceReportBalancesPending>) pending;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetBalanceReportAvailable> available() {
        return (Optional<GetBalanceReportAvailable>) available;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Close withPending(GetBalanceReportBalancesPending pending) {
        Utils.checkNotNull(pending, "pending");
        this.pending = Optional.ofNullable(pending);
        return this;
    }

    public Close withPending(Optional<? extends GetBalanceReportBalancesPending> pending) {
        Utils.checkNotNull(pending, "pending");
        this.pending = pending;
        return this;
    }

    public Close withAvailable(GetBalanceReportAvailable available) {
        Utils.checkNotNull(available, "available");
        this.available = Optional.ofNullable(available);
        return this;
    }

    public Close withAvailable(Optional<? extends GetBalanceReportAvailable> available) {
        Utils.checkNotNull(available, "available");
        this.available = available;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Close other = (Close) o;
        return 
            Objects.deepEquals(this.pending, other.pending) &&
            Objects.deepEquals(this.available, other.available);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            pending,
            available);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Close.class,
                "pending", pending,
                "available", available);
    }
    
    public final static class Builder {
 
        private Optional<? extends GetBalanceReportBalancesPending> pending = Optional.empty();
 
        private Optional<? extends GetBalanceReportAvailable> available = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder pending(GetBalanceReportBalancesPending pending) {
            Utils.checkNotNull(pending, "pending");
            this.pending = Optional.ofNullable(pending);
            return this;
        }

        public Builder pending(Optional<? extends GetBalanceReportBalancesPending> pending) {
            Utils.checkNotNull(pending, "pending");
            this.pending = pending;
            return this;
        }

        public Builder available(GetBalanceReportAvailable available) {
            Utils.checkNotNull(available, "available");
            this.available = Optional.ofNullable(available);
            return this;
        }

        public Builder available(Optional<? extends GetBalanceReportAvailable> available) {
            Utils.checkNotNull(available, "available");
            this.available = available;
            return this;
        }
        
        public Close build() {
            return new Close(
                pending,
                available);
        }
    }
}
