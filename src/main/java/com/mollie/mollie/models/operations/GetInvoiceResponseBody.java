/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GetInvoiceResponseBody
 * 
 * <p>The invoice object.
 */
public class GetInvoiceResponseBody {

    /**
     * Indicates that the response contains an invoice object. Will always contain the string `invoice` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The reference number of the invoice. An example value would be: `2024.10000`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private Optional<String> reference;

    /**
     * The VAT number to which the invoice was issued to, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatNumber")
    private JsonNullable<String> vatNumber;

    /**
     * Status of the invoice.
     * 
     * <p>* `open` — The invoice is not paid yet.
     * * `paid` — The invoice is paid.
     * * `overdue` — Payment of the invoice is overdue.
     * 
     * <p>Possible values: `open` `paid` `overdue`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * Total amount of the invoice, excluding VAT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("netAmount")
    private Optional<? extends NetAmount> netAmount;

    /**
     * VAT amount of the invoice. Only applicable to merchants registered in the Netherlands. For EU merchants, VAT will be shifted to the recipient (as per article 44 and 196 in the EU VAT Directive 2006/112). For merchants outside the EU, no VAT will be charged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatAmount")
    private Optional<? extends GetInvoiceVatAmount> vatAmount;

    /**
     * Total amount of the invoice, including VAT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grossAmount")
    private Optional<? extends GrossAmount> grossAmount;

    /**
     * The collection of products which make up the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    private Optional<? extends List<GetInvoiceLines>> lines;

    /**
     * The invoice date in `YYYY-MM-DD` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuedAt")
    private Optional<String> issuedAt;

    /**
     * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paidAt")
    private JsonNullable<String> paidAt;

    /**
     * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dueAt")
    private JsonNullable<String> dueAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends GetInvoiceLinks> links;

    @JsonCreator
    public GetInvoiceResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("reference") Optional<String> reference,
            @JsonProperty("vatNumber") JsonNullable<String> vatNumber,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("netAmount") Optional<? extends NetAmount> netAmount,
            @JsonProperty("vatAmount") Optional<? extends GetInvoiceVatAmount> vatAmount,
            @JsonProperty("grossAmount") Optional<? extends GrossAmount> grossAmount,
            @JsonProperty("lines") Optional<? extends List<GetInvoiceLines>> lines,
            @JsonProperty("issuedAt") Optional<String> issuedAt,
            @JsonProperty("paidAt") JsonNullable<String> paidAt,
            @JsonProperty("dueAt") JsonNullable<String> dueAt,
            @JsonProperty("_links") Optional<? extends GetInvoiceLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(vatNumber, "vatNumber");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(netAmount, "netAmount");
        Utils.checkNotNull(vatAmount, "vatAmount");
        Utils.checkNotNull(grossAmount, "grossAmount");
        Utils.checkNotNull(lines, "lines");
        Utils.checkNotNull(issuedAt, "issuedAt");
        Utils.checkNotNull(paidAt, "paidAt");
        Utils.checkNotNull(dueAt, "dueAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.reference = reference;
        this.vatNumber = vatNumber;
        this.status = status;
        this.netAmount = netAmount;
        this.vatAmount = vatAmount;
        this.grossAmount = grossAmount;
        this.lines = lines;
        this.issuedAt = issuedAt;
        this.paidAt = paidAt;
        this.dueAt = dueAt;
        this.links = links;
    }
    
    public GetInvoiceResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Indicates that the response contains an invoice object. Will always contain the string `invoice` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The reference number of the invoice. An example value would be: `2024.10000`.
     */
    @JsonIgnore
    public Optional<String> reference() {
        return reference;
    }

    /**
     * The VAT number to which the invoice was issued to, if applicable.
     */
    @JsonIgnore
    public JsonNullable<String> vatNumber() {
        return vatNumber;
    }

    /**
     * Status of the invoice.
     * 
     * <p>* `open` — The invoice is not paid yet.
     * * `paid` — The invoice is paid.
     * * `overdue` — Payment of the invoice is overdue.
     * 
     * <p>Possible values: `open` `paid` `overdue`
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * Total amount of the invoice, excluding VAT.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NetAmount> netAmount() {
        return (Optional<NetAmount>) netAmount;
    }

    /**
     * VAT amount of the invoice. Only applicable to merchants registered in the Netherlands. For EU merchants, VAT will be shifted to the recipient (as per article 44 and 196 in the EU VAT Directive 2006/112). For merchants outside the EU, no VAT will be charged.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetInvoiceVatAmount> vatAmount() {
        return (Optional<GetInvoiceVatAmount>) vatAmount;
    }

    /**
     * Total amount of the invoice, including VAT.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GrossAmount> grossAmount() {
        return (Optional<GrossAmount>) grossAmount;
    }

    /**
     * The collection of products which make up the invoice.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetInvoiceLines>> lines() {
        return (Optional<List<GetInvoiceLines>>) lines;
    }

    /**
     * The invoice date in `YYYY-MM-DD` format.
     */
    @JsonIgnore
    public Optional<String> issuedAt() {
        return issuedAt;
    }

    /**
     * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
     */
    @JsonIgnore
    public JsonNullable<String> paidAt() {
        return paidAt;
    }

    /**
     * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
     */
    @JsonIgnore
    public JsonNullable<String> dueAt() {
        return dueAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetInvoiceLinks> links() {
        return (Optional<GetInvoiceLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Indicates that the response contains an invoice object. Will always contain the string `invoice` for this endpoint.
     */
    public GetInvoiceResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates that the response contains an invoice object. Will always contain the string `invoice` for this endpoint.
     */
    public GetInvoiceResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
     */
    public GetInvoiceResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
     */
    public GetInvoiceResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The reference number of the invoice. An example value would be: `2024.10000`.
     */
    public GetInvoiceResponseBody withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = Optional.ofNullable(reference);
        return this;
    }

    /**
     * The reference number of the invoice. An example value would be: `2024.10000`.
     */
    public GetInvoiceResponseBody withReference(Optional<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * The VAT number to which the invoice was issued to, if applicable.
     */
    public GetInvoiceResponseBody withVatNumber(String vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = JsonNullable.of(vatNumber);
        return this;
    }

    /**
     * The VAT number to which the invoice was issued to, if applicable.
     */
    public GetInvoiceResponseBody withVatNumber(JsonNullable<String> vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = vatNumber;
        return this;
    }

    /**
     * Status of the invoice.
     * 
     * <p>* `open` — The invoice is not paid yet.
     * * `paid` — The invoice is paid.
     * * `overdue` — Payment of the invoice is overdue.
     * 
     * <p>Possible values: `open` `paid` `overdue`
     */
    public GetInvoiceResponseBody withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status of the invoice.
     * 
     * <p>* `open` — The invoice is not paid yet.
     * * `paid` — The invoice is paid.
     * * `overdue` — Payment of the invoice is overdue.
     * 
     * <p>Possible values: `open` `paid` `overdue`
     */
    public GetInvoiceResponseBody withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Total amount of the invoice, excluding VAT.
     */
    public GetInvoiceResponseBody withNetAmount(NetAmount netAmount) {
        Utils.checkNotNull(netAmount, "netAmount");
        this.netAmount = Optional.ofNullable(netAmount);
        return this;
    }

    /**
     * Total amount of the invoice, excluding VAT.
     */
    public GetInvoiceResponseBody withNetAmount(Optional<? extends NetAmount> netAmount) {
        Utils.checkNotNull(netAmount, "netAmount");
        this.netAmount = netAmount;
        return this;
    }

    /**
     * VAT amount of the invoice. Only applicable to merchants registered in the Netherlands. For EU merchants, VAT will be shifted to the recipient (as per article 44 and 196 in the EU VAT Directive 2006/112). For merchants outside the EU, no VAT will be charged.
     */
    public GetInvoiceResponseBody withVatAmount(GetInvoiceVatAmount vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = Optional.ofNullable(vatAmount);
        return this;
    }

    /**
     * VAT amount of the invoice. Only applicable to merchants registered in the Netherlands. For EU merchants, VAT will be shifted to the recipient (as per article 44 and 196 in the EU VAT Directive 2006/112). For merchants outside the EU, no VAT will be charged.
     */
    public GetInvoiceResponseBody withVatAmount(Optional<? extends GetInvoiceVatAmount> vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = vatAmount;
        return this;
    }

    /**
     * Total amount of the invoice, including VAT.
     */
    public GetInvoiceResponseBody withGrossAmount(GrossAmount grossAmount) {
        Utils.checkNotNull(grossAmount, "grossAmount");
        this.grossAmount = Optional.ofNullable(grossAmount);
        return this;
    }

    /**
     * Total amount of the invoice, including VAT.
     */
    public GetInvoiceResponseBody withGrossAmount(Optional<? extends GrossAmount> grossAmount) {
        Utils.checkNotNull(grossAmount, "grossAmount");
        this.grossAmount = grossAmount;
        return this;
    }

    /**
     * The collection of products which make up the invoice.
     */
    public GetInvoiceResponseBody withLines(List<GetInvoiceLines> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = Optional.ofNullable(lines);
        return this;
    }

    /**
     * The collection of products which make up the invoice.
     */
    public GetInvoiceResponseBody withLines(Optional<? extends List<GetInvoiceLines>> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = lines;
        return this;
    }

    /**
     * The invoice date in `YYYY-MM-DD` format.
     */
    public GetInvoiceResponseBody withIssuedAt(String issuedAt) {
        Utils.checkNotNull(issuedAt, "issuedAt");
        this.issuedAt = Optional.ofNullable(issuedAt);
        return this;
    }

    /**
     * The invoice date in `YYYY-MM-DD` format.
     */
    public GetInvoiceResponseBody withIssuedAt(Optional<String> issuedAt) {
        Utils.checkNotNull(issuedAt, "issuedAt");
        this.issuedAt = issuedAt;
        return this;
    }

    /**
     * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
     */
    public GetInvoiceResponseBody withPaidAt(String paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = JsonNullable.of(paidAt);
        return this;
    }

    /**
     * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
     */
    public GetInvoiceResponseBody withPaidAt(JsonNullable<String> paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = paidAt;
        return this;
    }

    /**
     * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
     */
    public GetInvoiceResponseBody withDueAt(String dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = JsonNullable.of(dueAt);
        return this;
    }

    /**
     * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
     */
    public GetInvoiceResponseBody withDueAt(JsonNullable<String> dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = dueAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetInvoiceResponseBody withLinks(GetInvoiceLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetInvoiceResponseBody withLinks(Optional<? extends GetInvoiceLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetInvoiceResponseBody other = (GetInvoiceResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.vatNumber, other.vatNumber) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.netAmount, other.netAmount) &&
            Utils.enhancedDeepEquals(this.vatAmount, other.vatAmount) &&
            Utils.enhancedDeepEquals(this.grossAmount, other.grossAmount) &&
            Utils.enhancedDeepEquals(this.lines, other.lines) &&
            Utils.enhancedDeepEquals(this.issuedAt, other.issuedAt) &&
            Utils.enhancedDeepEquals(this.paidAt, other.paidAt) &&
            Utils.enhancedDeepEquals(this.dueAt, other.dueAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource,
            id,
            reference,
            vatNumber,
            status,
            netAmount,
            vatAmount,
            grossAmount,
            lines,
            issuedAt,
            paidAt,
            dueAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetInvoiceResponseBody.class,
                "resource", resource,
                "id", id,
                "reference", reference,
                "vatNumber", vatNumber,
                "status", status,
                "netAmount", netAmount,
                "vatAmount", vatAmount,
                "grossAmount", grossAmount,
                "lines", lines,
                "issuedAt", issuedAt,
                "paidAt", paidAt,
                "dueAt", dueAt,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> reference = Optional.empty();
 
        private JsonNullable<String> vatNumber = JsonNullable.undefined();
 
        private Optional<String> status = Optional.empty();
 
        private Optional<? extends NetAmount> netAmount = Optional.empty();
 
        private Optional<? extends GetInvoiceVatAmount> vatAmount = Optional.empty();
 
        private Optional<? extends GrossAmount> grossAmount = Optional.empty();
 
        private Optional<? extends List<GetInvoiceLines>> lines = Optional.empty();
 
        private Optional<String> issuedAt = Optional.empty();
 
        private JsonNullable<String> paidAt = JsonNullable.undefined();
 
        private JsonNullable<String> dueAt = JsonNullable.undefined();
 
        private Optional<? extends GetInvoiceLinks> links = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates that the response contains an invoice object. Will always contain the string `invoice` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates that the response contains an invoice object. Will always contain the string `invoice` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The reference number of the invoice. An example value would be: `2024.10000`.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = Optional.ofNullable(reference);
            return this;
        }

        /**
         * The reference number of the invoice. An example value would be: `2024.10000`.
         */
        public Builder reference(Optional<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        /**
         * The VAT number to which the invoice was issued to, if applicable.
         */
        public Builder vatNumber(String vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = JsonNullable.of(vatNumber);
            return this;
        }

        /**
         * The VAT number to which the invoice was issued to, if applicable.
         */
        public Builder vatNumber(JsonNullable<String> vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = vatNumber;
            return this;
        }

        /**
         * Status of the invoice.
         * 
         * <p>* `open` — The invoice is not paid yet.
         * * `paid` — The invoice is paid.
         * * `overdue` — Payment of the invoice is overdue.
         * 
         * <p>Possible values: `open` `paid` `overdue`
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of the invoice.
         * 
         * <p>* `open` — The invoice is not paid yet.
         * * `paid` — The invoice is paid.
         * * `overdue` — Payment of the invoice is overdue.
         * 
         * <p>Possible values: `open` `paid` `overdue`
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Total amount of the invoice, excluding VAT.
         */
        public Builder netAmount(NetAmount netAmount) {
            Utils.checkNotNull(netAmount, "netAmount");
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        /**
         * Total amount of the invoice, excluding VAT.
         */
        public Builder netAmount(Optional<? extends NetAmount> netAmount) {
            Utils.checkNotNull(netAmount, "netAmount");
            this.netAmount = netAmount;
            return this;
        }

        /**
         * VAT amount of the invoice. Only applicable to merchants registered in the Netherlands. For EU merchants, VAT will be shifted to the recipient (as per article 44 and 196 in the EU VAT Directive 2006/112). For merchants outside the EU, no VAT will be charged.
         */
        public Builder vatAmount(GetInvoiceVatAmount vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = Optional.ofNullable(vatAmount);
            return this;
        }

        /**
         * VAT amount of the invoice. Only applicable to merchants registered in the Netherlands. For EU merchants, VAT will be shifted to the recipient (as per article 44 and 196 in the EU VAT Directive 2006/112). For merchants outside the EU, no VAT will be charged.
         */
        public Builder vatAmount(Optional<? extends GetInvoiceVatAmount> vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = vatAmount;
            return this;
        }

        /**
         * Total amount of the invoice, including VAT.
         */
        public Builder grossAmount(GrossAmount grossAmount) {
            Utils.checkNotNull(grossAmount, "grossAmount");
            this.grossAmount = Optional.ofNullable(grossAmount);
            return this;
        }

        /**
         * Total amount of the invoice, including VAT.
         */
        public Builder grossAmount(Optional<? extends GrossAmount> grossAmount) {
            Utils.checkNotNull(grossAmount, "grossAmount");
            this.grossAmount = grossAmount;
            return this;
        }

        /**
         * The collection of products which make up the invoice.
         */
        public Builder lines(List<GetInvoiceLines> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = Optional.ofNullable(lines);
            return this;
        }

        /**
         * The collection of products which make up the invoice.
         */
        public Builder lines(Optional<? extends List<GetInvoiceLines>> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = lines;
            return this;
        }

        /**
         * The invoice date in `YYYY-MM-DD` format.
         */
        public Builder issuedAt(String issuedAt) {
            Utils.checkNotNull(issuedAt, "issuedAt");
            this.issuedAt = Optional.ofNullable(issuedAt);
            return this;
        }

        /**
         * The invoice date in `YYYY-MM-DD` format.
         */
        public Builder issuedAt(Optional<String> issuedAt) {
            Utils.checkNotNull(issuedAt, "issuedAt");
            this.issuedAt = issuedAt;
            return this;
        }

        /**
         * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
         */
        public Builder paidAt(String paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = JsonNullable.of(paidAt);
            return this;
        }

        /**
         * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
         */
        public Builder paidAt(JsonNullable<String> paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = paidAt;
            return this;
        }

        /**
         * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
         */
        public Builder dueAt(String dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = JsonNullable.of(dueAt);
            return this;
        }

        /**
         * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
         */
        public Builder dueAt(JsonNullable<String> dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = dueAt;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetInvoiceLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends GetInvoiceLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public GetInvoiceResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }
            return new GetInvoiceResponseBody(
                resource,
                id,
                reference,
                vatNumber,
                status,
                netAmount,
                vatAmount,
                grossAmount,
                lines,
                issuedAt,
                paidAt,
                dueAt,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"invoice\"",
                        new TypeReference<Optional<String>>() {});
    }
}
