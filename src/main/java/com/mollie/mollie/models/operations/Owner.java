/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Owner - Personal data of your customer.
 */

public class Owner {

    /**
     * The email address of your customer.
     */
    @JsonProperty("email")
    private String email;

    /**
     * The given name (first name) of your customer.
     */
    @JsonProperty("givenName")
    private String givenName;

    /**
     * The family name (surname) of your customer.
     */
    @JsonProperty("familyName")
    private String familyName;

    /**
     * Preset the language to be used for the login screen, if applicable. For the consent screen, the preferred language of the logged in merchant will be used and this parameter is ignored.
     * 
     * When this parameter is omitted, the browser language will be used instead.
     * 
     * Possible values: `en_US` `nl_NL` `nl_BE` `fr_FR` `fr_BE` `de_DE` `es_ES` `it_IT`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    private JsonNullable<String> locale;

    @JsonCreator
    public Owner(
            @JsonProperty("email") String email,
            @JsonProperty("givenName") String givenName,
            @JsonProperty("familyName") String familyName,
            @JsonProperty("locale") JsonNullable<String> locale) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(givenName, "givenName");
        Utils.checkNotNull(familyName, "familyName");
        Utils.checkNotNull(locale, "locale");
        this.email = email;
        this.givenName = givenName;
        this.familyName = familyName;
        this.locale = locale;
    }
    
    public Owner(
            String email,
            String givenName,
            String familyName) {
        this(email, givenName, familyName, JsonNullable.undefined());
    }

    /**
     * The email address of your customer.
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * The given name (first name) of your customer.
     */
    @JsonIgnore
    public String givenName() {
        return givenName;
    }

    /**
     * The family name (surname) of your customer.
     */
    @JsonIgnore
    public String familyName() {
        return familyName;
    }

    /**
     * Preset the language to be used for the login screen, if applicable. For the consent screen, the preferred language of the logged in merchant will be used and this parameter is ignored.
     * 
     * When this parameter is omitted, the browser language will be used instead.
     * 
     * Possible values: `en_US` `nl_NL` `nl_BE` `fr_FR` `fr_BE` `de_DE` `es_ES` `it_IT`
     */
    @JsonIgnore
    public JsonNullable<String> locale() {
        return locale;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The email address of your customer.
     */
    public Owner withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The given name (first name) of your customer.
     */
    public Owner withGivenName(String givenName) {
        Utils.checkNotNull(givenName, "givenName");
        this.givenName = givenName;
        return this;
    }

    /**
     * The family name (surname) of your customer.
     */
    public Owner withFamilyName(String familyName) {
        Utils.checkNotNull(familyName, "familyName");
        this.familyName = familyName;
        return this;
    }

    /**
     * Preset the language to be used for the login screen, if applicable. For the consent screen, the preferred language of the logged in merchant will be used and this parameter is ignored.
     * 
     * When this parameter is omitted, the browser language will be used instead.
     * 
     * Possible values: `en_US` `nl_NL` `nl_BE` `fr_FR` `fr_BE` `de_DE` `es_ES` `it_IT`
     */
    public Owner withLocale(String locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = JsonNullable.of(locale);
        return this;
    }

    /**
     * Preset the language to be used for the login screen, if applicable. For the consent screen, the preferred language of the logged in merchant will be used and this parameter is ignored.
     * 
     * When this parameter is omitted, the browser language will be used instead.
     * 
     * Possible values: `en_US` `nl_NL` `nl_BE` `fr_FR` `fr_BE` `de_DE` `es_ES` `it_IT`
     */
    public Owner withLocale(JsonNullable<String> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Owner other = (Owner) o;
        return 
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.givenName, other.givenName) &&
            Objects.deepEquals(this.familyName, other.familyName) &&
            Objects.deepEquals(this.locale, other.locale);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            email,
            givenName,
            familyName,
            locale);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Owner.class,
                "email", email,
                "givenName", givenName,
                "familyName", familyName,
                "locale", locale);
    }
    
    public final static class Builder {
 
        private String email;
 
        private String givenName;
 
        private String familyName;
 
        private JsonNullable<String> locale = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The email address of your customer.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The given name (first name) of your customer.
         */
        public Builder givenName(String givenName) {
            Utils.checkNotNull(givenName, "givenName");
            this.givenName = givenName;
            return this;
        }

        /**
         * The family name (surname) of your customer.
         */
        public Builder familyName(String familyName) {
            Utils.checkNotNull(familyName, "familyName");
            this.familyName = familyName;
            return this;
        }

        /**
         * Preset the language to be used for the login screen, if applicable. For the consent screen, the preferred language of the logged in merchant will be used and this parameter is ignored.
         * 
         * When this parameter is omitted, the browser language will be used instead.
         * 
         * Possible values: `en_US` `nl_NL` `nl_BE` `fr_FR` `fr_BE` `de_DE` `es_ES` `it_IT`
         */
        public Builder locale(String locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = JsonNullable.of(locale);
            return this;
        }

        /**
         * Preset the language to be used for the login screen, if applicable. For the consent screen, the preferred language of the logged in merchant will be used and this parameter is ignored.
         * 
         * When this parameter is omitted, the browser language will be used instead.
         * 
         * Possible values: `en_US` `nl_NL` `nl_BE` `fr_FR` `fr_BE` `de_DE` `es_ES` `it_IT`
         */
        public Builder locale(JsonNullable<String> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }
        
        public Owner build() {
            return new Owner(
                email,
                givenName,
                familyName,
                locale);
        }
    }
}

