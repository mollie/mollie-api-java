/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * RequestApplePayPaymentSessionResponseBody - The Apple Pay payment session object generated by Apple.
 */

public class RequestApplePayPaymentSessionResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("epochTimestamp")
    private Optional<Long> epochTimestamp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresAt")
    private Optional<Long> expiresAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantSessionIdentifier")
    private Optional<String> merchantSessionIdentifier;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonce")
    private Optional<String> nonce;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantIdentifier")
    private Optional<String> merchantIdentifier;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainName")
    private Optional<String> domainName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    private Optional<String> displayName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signature")
    private Optional<String> signature;

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonCreator
    public RequestApplePayPaymentSessionResponseBody(
            @JsonProperty("epochTimestamp") Optional<Long> epochTimestamp,
            @JsonProperty("expiresAt") Optional<Long> expiresAt,
            @JsonProperty("merchantSessionIdentifier") Optional<String> merchantSessionIdentifier,
            @JsonProperty("nonce") Optional<String> nonce,
            @JsonProperty("merchantIdentifier") Optional<String> merchantIdentifier,
            @JsonProperty("domainName") Optional<String> domainName,
            @JsonProperty("displayName") Optional<String> displayName,
            @JsonProperty("signature") Optional<String> signature) {
        Utils.checkNotNull(epochTimestamp, "epochTimestamp");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(merchantSessionIdentifier, "merchantSessionIdentifier");
        Utils.checkNotNull(nonce, "nonce");
        Utils.checkNotNull(merchantIdentifier, "merchantIdentifier");
        Utils.checkNotNull(domainName, "domainName");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(signature, "signature");
        this.epochTimestamp = epochTimestamp;
        this.expiresAt = expiresAt;
        this.merchantSessionIdentifier = merchantSessionIdentifier;
        this.nonce = nonce;
        this.merchantIdentifier = merchantIdentifier;
        this.domainName = domainName;
        this.displayName = displayName;
        this.signature = signature;
        this.additionalProperties = new HashMap<>();
    }
    
    public RequestApplePayPaymentSessionResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> epochTimestamp() {
        return epochTimestamp;
    }

    @JsonIgnore
    public Optional<Long> expiresAt() {
        return expiresAt;
    }

    @JsonIgnore
    public Optional<String> merchantSessionIdentifier() {
        return merchantSessionIdentifier;
    }

    @JsonIgnore
    public Optional<String> nonce() {
        return nonce;
    }

    @JsonIgnore
    public Optional<String> merchantIdentifier() {
        return merchantIdentifier;
    }

    @JsonIgnore
    public Optional<String> domainName() {
        return domainName;
    }

    @JsonIgnore
    public Optional<String> displayName() {
        return displayName;
    }

    @JsonIgnore
    public Optional<String> signature() {
        return signature;
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestApplePayPaymentSessionResponseBody withEpochTimestamp(long epochTimestamp) {
        Utils.checkNotNull(epochTimestamp, "epochTimestamp");
        this.epochTimestamp = Optional.ofNullable(epochTimestamp);
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withEpochTimestamp(Optional<Long> epochTimestamp) {
        Utils.checkNotNull(epochTimestamp, "epochTimestamp");
        this.epochTimestamp = epochTimestamp;
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withExpiresAt(long expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = Optional.ofNullable(expiresAt);
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withExpiresAt(Optional<Long> expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withMerchantSessionIdentifier(String merchantSessionIdentifier) {
        Utils.checkNotNull(merchantSessionIdentifier, "merchantSessionIdentifier");
        this.merchantSessionIdentifier = Optional.ofNullable(merchantSessionIdentifier);
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withMerchantSessionIdentifier(Optional<String> merchantSessionIdentifier) {
        Utils.checkNotNull(merchantSessionIdentifier, "merchantSessionIdentifier");
        this.merchantSessionIdentifier = merchantSessionIdentifier;
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withNonce(String nonce) {
        Utils.checkNotNull(nonce, "nonce");
        this.nonce = Optional.ofNullable(nonce);
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withNonce(Optional<String> nonce) {
        Utils.checkNotNull(nonce, "nonce");
        this.nonce = nonce;
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withMerchantIdentifier(String merchantIdentifier) {
        Utils.checkNotNull(merchantIdentifier, "merchantIdentifier");
        this.merchantIdentifier = Optional.ofNullable(merchantIdentifier);
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withMerchantIdentifier(Optional<String> merchantIdentifier) {
        Utils.checkNotNull(merchantIdentifier, "merchantIdentifier");
        this.merchantIdentifier = merchantIdentifier;
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withDomainName(String domainName) {
        Utils.checkNotNull(domainName, "domainName");
        this.domainName = Optional.ofNullable(domainName);
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withDomainName(Optional<String> domainName) {
        Utils.checkNotNull(domainName, "domainName");
        this.domainName = domainName;
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = Optional.ofNullable(displayName);
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withDisplayName(Optional<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withSignature(String signature) {
        Utils.checkNotNull(signature, "signature");
        this.signature = Optional.ofNullable(signature);
        return this;
    }

    public RequestApplePayPaymentSessionResponseBody withSignature(Optional<String> signature) {
        Utils.checkNotNull(signature, "signature");
        this.signature = signature;
        return this;
    }

    @JsonAnySetter
    public RequestApplePayPaymentSessionResponseBody withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }
    
    public RequestApplePayPaymentSessionResponseBody withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestApplePayPaymentSessionResponseBody other = (RequestApplePayPaymentSessionResponseBody) o;
        return 
            Objects.deepEquals(this.epochTimestamp, other.epochTimestamp) &&
            Objects.deepEquals(this.expiresAt, other.expiresAt) &&
            Objects.deepEquals(this.merchantSessionIdentifier, other.merchantSessionIdentifier) &&
            Objects.deepEquals(this.nonce, other.nonce) &&
            Objects.deepEquals(this.merchantIdentifier, other.merchantIdentifier) &&
            Objects.deepEquals(this.domainName, other.domainName) &&
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.signature, other.signature) &&
            Objects.deepEquals(this.additionalProperties, other.additionalProperties);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            epochTimestamp,
            expiresAt,
            merchantSessionIdentifier,
            nonce,
            merchantIdentifier,
            domainName,
            displayName,
            signature,
            additionalProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestApplePayPaymentSessionResponseBody.class,
                "epochTimestamp", epochTimestamp,
                "expiresAt", expiresAt,
                "merchantSessionIdentifier", merchantSessionIdentifier,
                "nonce", nonce,
                "merchantIdentifier", merchantIdentifier,
                "domainName", domainName,
                "displayName", displayName,
                "signature", signature,
                "additionalProperties", additionalProperties);
    }
    
    public final static class Builder {
 
        private Optional<Long> epochTimestamp = Optional.empty();
 
        private Optional<Long> expiresAt = Optional.empty();
 
        private Optional<String> merchantSessionIdentifier = Optional.empty();
 
        private Optional<String> nonce = Optional.empty();
 
        private Optional<String> merchantIdentifier = Optional.empty();
 
        private Optional<String> domainName = Optional.empty();
 
        private Optional<String> displayName = Optional.empty();
 
        private Optional<String> signature = Optional.empty();
 
        private Map<String, Object> additionalProperties = new HashMap<>();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder epochTimestamp(long epochTimestamp) {
            Utils.checkNotNull(epochTimestamp, "epochTimestamp");
            this.epochTimestamp = Optional.ofNullable(epochTimestamp);
            return this;
        }

        public Builder epochTimestamp(Optional<Long> epochTimestamp) {
            Utils.checkNotNull(epochTimestamp, "epochTimestamp");
            this.epochTimestamp = epochTimestamp;
            return this;
        }

        public Builder expiresAt(long expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        public Builder expiresAt(Optional<Long> expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }

        public Builder merchantSessionIdentifier(String merchantSessionIdentifier) {
            Utils.checkNotNull(merchantSessionIdentifier, "merchantSessionIdentifier");
            this.merchantSessionIdentifier = Optional.ofNullable(merchantSessionIdentifier);
            return this;
        }

        public Builder merchantSessionIdentifier(Optional<String> merchantSessionIdentifier) {
            Utils.checkNotNull(merchantSessionIdentifier, "merchantSessionIdentifier");
            this.merchantSessionIdentifier = merchantSessionIdentifier;
            return this;
        }

        public Builder nonce(String nonce) {
            Utils.checkNotNull(nonce, "nonce");
            this.nonce = Optional.ofNullable(nonce);
            return this;
        }

        public Builder nonce(Optional<String> nonce) {
            Utils.checkNotNull(nonce, "nonce");
            this.nonce = nonce;
            return this;
        }

        public Builder merchantIdentifier(String merchantIdentifier) {
            Utils.checkNotNull(merchantIdentifier, "merchantIdentifier");
            this.merchantIdentifier = Optional.ofNullable(merchantIdentifier);
            return this;
        }

        public Builder merchantIdentifier(Optional<String> merchantIdentifier) {
            Utils.checkNotNull(merchantIdentifier, "merchantIdentifier");
            this.merchantIdentifier = merchantIdentifier;
            return this;
        }

        public Builder domainName(String domainName) {
            Utils.checkNotNull(domainName, "domainName");
            this.domainName = Optional.ofNullable(domainName);
            return this;
        }

        public Builder domainName(Optional<String> domainName) {
            Utils.checkNotNull(domainName, "domainName");
            this.domainName = domainName;
            return this;
        }

        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        public Builder displayName(Optional<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        public Builder signature(String signature) {
            Utils.checkNotNull(signature, "signature");
            this.signature = Optional.ofNullable(signature);
            return this;
        }

        public Builder signature(Optional<String> signature) {
            Utils.checkNotNull(signature, "signature");
            this.signature = signature;
            return this;
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }
        
        public RequestApplePayPaymentSessionResponseBody build() {
            return new RequestApplePayPaymentSessionResponseBody(
                epochTimestamp,
                expiresAt,
                merchantSessionIdentifier,
                nonce,
                merchantIdentifier,
                domainName,
                displayName,
                signature)
                .withAdditionalProperties(additionalProperties);
        }
    }
}

