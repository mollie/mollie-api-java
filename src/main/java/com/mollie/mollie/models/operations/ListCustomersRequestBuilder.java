/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Options;
import com.mollie.mollie.utils.RetryConfig;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ListCustomersRequestBuilder {

    private Optional<String> from = Optional.empty();
    private JsonNullable<Long> limit = Utils.readDefaultOrConstValue(
                            "limit",
                            "50",
                            new TypeReference<JsonNullable<Long>>() {});
    private JsonNullable<String> sort = JsonNullable.undefined();
    private JsonNullable<Boolean> testmode = JsonNullable.undefined();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKMethodInterfaces.MethodCallListCustomers sdk;

    public ListCustomersRequestBuilder(SDKMethodInterfaces.MethodCallListCustomers sdk) {
        this.sdk = sdk;
    }
                
    public ListCustomersRequestBuilder from(String from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.of(from);
        return this;
    }

    public ListCustomersRequestBuilder from(Optional<String> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    public ListCustomersRequestBuilder limit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = JsonNullable.of(limit);
        return this;
    }

    public ListCustomersRequestBuilder limit(JsonNullable<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public ListCustomersRequestBuilder sort(String sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = JsonNullable.of(sort);
        return this;
    }

    public ListCustomersRequestBuilder sort(JsonNullable<String> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }

    public ListCustomersRequestBuilder testmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    public ListCustomersRequestBuilder testmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }
                
    public ListCustomersRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public ListCustomersRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }

    public ListCustomersResponse call() throws Exception {
        if (limit == null) {
            limit = _SINGLETON_VALUE_Limit.value();
        }        Optional<Options> options = Optional.of(Options.builder()
                                                    .retryConfig(retryConfig)
                                                    .build());
        return sdk.list(
            from,
            limit,
            sort,
            testmode,
            options);
    }

    private static final LazySingletonValue<JsonNullable<Long>> _SINGLETON_VALUE_Limit =
            new LazySingletonValue<>(
                    "limit",
                    "50",
                    new TypeReference<JsonNullable<Long>>() {});
}
