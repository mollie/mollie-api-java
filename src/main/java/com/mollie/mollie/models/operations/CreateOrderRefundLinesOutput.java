/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class CreateOrderRefundLinesOutput {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31jz`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderId")
    private Optional<String> orderId;

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * Must be less than the number of items already refunded for this order line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<Long> quantity;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitPrice")
    private Optional<? extends CreateOrderRefundUnitPrice> unitPrice;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private Optional<? extends CreateOrderRefundTotalAmount> totalAmount;

    @JsonCreator
    public CreateOrderRefundLinesOutput(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("orderId") Optional<String> orderId,
            @JsonProperty("quantity") Optional<Long> quantity,
            @JsonProperty("unitPrice") Optional<? extends CreateOrderRefundUnitPrice> unitPrice,
            @JsonProperty("totalAmount") Optional<? extends CreateOrderRefundTotalAmount> totalAmount) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(orderId, "orderId");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(unitPrice, "unitPrice");
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.resource = resource;
        this.id = id;
        this.orderId = orderId;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.totalAmount = totalAmount;
    }
    
    public CreateOrderRefundLinesOutput() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31jz`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> orderId() {
        return orderId;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * Must be less than the number of items already refunded for this order line.
     */
    @JsonIgnore
    public Optional<Long> quantity() {
        return quantity;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundUnitPrice> unitPrice() {
        return (Optional<CreateOrderRefundUnitPrice>) unitPrice;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundTotalAmount> totalAmount() {
        return (Optional<CreateOrderRefundTotalAmount>) totalAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreateOrderRefundLinesOutput withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    public CreateOrderRefundLinesOutput withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31jz`.
     */
    public CreateOrderRefundLinesOutput withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31jz`.
     */
    public CreateOrderRefundLinesOutput withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CreateOrderRefundLinesOutput withOrderId(String orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = Optional.ofNullable(orderId);
        return this;
    }

    public CreateOrderRefundLinesOutput withOrderId(Optional<String> orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = orderId;
        return this;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * Must be less than the number of items already refunded for this order line.
     */
    public CreateOrderRefundLinesOutput withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * Must be less than the number of items already refunded for this order line.
     */
    public CreateOrderRefundLinesOutput withQuantity(Optional<Long> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withUnitPrice(CreateOrderRefundUnitPrice unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = Optional.ofNullable(unitPrice);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withUnitPrice(Optional<? extends CreateOrderRefundUnitPrice> unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = unitPrice;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withTotalAmount(CreateOrderRefundTotalAmount totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withTotalAmount(Optional<? extends CreateOrderRefundTotalAmount> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOrderRefundLinesOutput other = (CreateOrderRefundLinesOutput) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.orderId, other.orderId) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.unitPrice, other.unitPrice) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            orderId,
            quantity,
            unitPrice,
            totalAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOrderRefundLinesOutput.class,
                "resource", resource,
                "id", id,
                "orderId", orderId,
                "quantity", quantity,
                "unitPrice", unitPrice,
                "totalAmount", totalAmount);
    }
    
    public final static class Builder {
 
        private Optional<String> resource = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> orderId = Optional.empty();
 
        private Optional<Long> quantity = Optional.empty();
 
        private Optional<? extends CreateOrderRefundUnitPrice> unitPrice = Optional.empty();
 
        private Optional<? extends CreateOrderRefundTotalAmount> totalAmount = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The ID of the order line you wish to refund. For example: `odl_jp31jz`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the order line you wish to refund. For example: `odl_jp31jz`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder orderId(String orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        public Builder orderId(Optional<String> orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = orderId;
            return this;
        }

        /**
         * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
         * 
         * Must be less than the number of items already refunded for this order line.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
         * 
         * Must be less than the number of items already refunded for this order line.
         */
        public Builder quantity(Optional<Long> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder unitPrice(CreateOrderRefundUnitPrice unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = Optional.ofNullable(unitPrice);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder unitPrice(Optional<? extends CreateOrderRefundUnitPrice> unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = unitPrice;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder totalAmount(CreateOrderRefundTotalAmount totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder totalAmount(Optional<? extends CreateOrderRefundTotalAmount> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }
        
        public CreateOrderRefundLinesOutput build() {
            return new CreateOrderRefundLinesOutput(
                resource,
                id,
                orderId,
                quantity,
                unitPrice,
                totalAmount);
        }
    }
}

