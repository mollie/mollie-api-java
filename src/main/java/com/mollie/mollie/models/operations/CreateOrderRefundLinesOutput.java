/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateOrderRefundLinesOutput {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderId")
    private Optional<String> orderId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<String> sku;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends CreateOrderRefundType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends CreateOrderRefundStatus> status;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends CreateOrderRefundRefundsResponse201Metadata> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isCancelable")
    private Optional<Boolean> isCancelable;

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * <p>Must be less than the number of items already refunded for this order line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<Long> quantity;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityShipped")
    private Optional<Long> quantityShipped;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountShipped")
    private Optional<? extends CreateOrderRefundAmountShipped> amountShipped;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityRefunded")
    private Optional<Long> quantityRefunded;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountRefunded")
    private Optional<? extends CreateOrderRefundAmountRefunded> amountRefunded;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityCanceled")
    private Optional<Long> quantityCanceled;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountCanceled")
    private Optional<? extends CreateOrderRefundAmountCanceled> amountCanceled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippableQuantity")
    private Optional<Long> shippableQuantity;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refundableQuantity")
    private Optional<Long> refundableQuantity;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancelableQuantity")
    private Optional<Long> cancelableQuantity;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitPrice")
    private Optional<? extends CreateOrderRefundUnitPrice> unitPrice;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private Optional<? extends CreateOrderRefundTotalAmount> totalAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatRate")
    private Optional<String> vatRate;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatAmount")
    private Optional<? extends CreateOrderRefundVatAmount> vatAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountedAmount")
    private Optional<? extends DiscountedAmount> discountedAmount;

    @JsonCreator
    public CreateOrderRefundLinesOutput(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("orderId") Optional<String> orderId,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("sku") JsonNullable<String> sku,
            @JsonProperty("type") Optional<? extends CreateOrderRefundType> type,
            @JsonProperty("status") Optional<? extends CreateOrderRefundStatus> status,
            @JsonProperty("metadata") JsonNullable<? extends CreateOrderRefundRefundsResponse201Metadata> metadata,
            @JsonProperty("isCancelable") Optional<Boolean> isCancelable,
            @JsonProperty("quantity") Optional<Long> quantity,
            @JsonProperty("quantityShipped") Optional<Long> quantityShipped,
            @JsonProperty("amountShipped") Optional<? extends CreateOrderRefundAmountShipped> amountShipped,
            @JsonProperty("quantityRefunded") Optional<Long> quantityRefunded,
            @JsonProperty("amountRefunded") Optional<? extends CreateOrderRefundAmountRefunded> amountRefunded,
            @JsonProperty("quantityCanceled") Optional<Long> quantityCanceled,
            @JsonProperty("amountCanceled") Optional<? extends CreateOrderRefundAmountCanceled> amountCanceled,
            @JsonProperty("shippableQuantity") Optional<Long> shippableQuantity,
            @JsonProperty("refundableQuantity") Optional<Long> refundableQuantity,
            @JsonProperty("cancelableQuantity") Optional<Long> cancelableQuantity,
            @JsonProperty("unitPrice") Optional<? extends CreateOrderRefundUnitPrice> unitPrice,
            @JsonProperty("totalAmount") Optional<? extends CreateOrderRefundTotalAmount> totalAmount,
            @JsonProperty("vatRate") Optional<String> vatRate,
            @JsonProperty("vatAmount") Optional<? extends CreateOrderRefundVatAmount> vatAmount,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("discountedAmount") Optional<? extends DiscountedAmount> discountedAmount) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(orderId, "orderId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(isCancelable, "isCancelable");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(quantityShipped, "quantityShipped");
        Utils.checkNotNull(amountShipped, "amountShipped");
        Utils.checkNotNull(quantityRefunded, "quantityRefunded");
        Utils.checkNotNull(amountRefunded, "amountRefunded");
        Utils.checkNotNull(quantityCanceled, "quantityCanceled");
        Utils.checkNotNull(amountCanceled, "amountCanceled");
        Utils.checkNotNull(shippableQuantity, "shippableQuantity");
        Utils.checkNotNull(refundableQuantity, "refundableQuantity");
        Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
        Utils.checkNotNull(unitPrice, "unitPrice");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(vatRate, "vatRate");
        Utils.checkNotNull(vatAmount, "vatAmount");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(discountedAmount, "discountedAmount");
        this.resource = resource;
        this.id = id;
        this.orderId = orderId;
        this.name = name;
        this.sku = sku;
        this.type = type;
        this.status = status;
        this.metadata = metadata;
        this.isCancelable = isCancelable;
        this.quantity = quantity;
        this.quantityShipped = quantityShipped;
        this.amountShipped = amountShipped;
        this.quantityRefunded = quantityRefunded;
        this.amountRefunded = amountRefunded;
        this.quantityCanceled = quantityCanceled;
        this.amountCanceled = amountCanceled;
        this.shippableQuantity = shippableQuantity;
        this.refundableQuantity = refundableQuantity;
        this.cancelableQuantity = cancelableQuantity;
        this.unitPrice = unitPrice;
        this.totalAmount = totalAmount;
        this.vatRate = vatRate;
        this.vatAmount = vatAmount;
        this.createdAt = createdAt;
        this.discountedAmount = discountedAmount;
    }
    
    public CreateOrderRefundLinesOutput() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> orderId() {
        return orderId;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public JsonNullable<String> sku() {
        return sku;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundType> type() {
        return (Optional<CreateOrderRefundType>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundStatus> status() {
        return (Optional<CreateOrderRefundStatus>) status;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateOrderRefundRefundsResponse201Metadata> metadata() {
        return (JsonNullable<CreateOrderRefundRefundsResponse201Metadata>) metadata;
    }

    @JsonIgnore
    public Optional<Boolean> isCancelable() {
        return isCancelable;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * <p>Must be less than the number of items already refunded for this order line.
     */
    @JsonIgnore
    public Optional<Long> quantity() {
        return quantity;
    }

    @JsonIgnore
    public Optional<Long> quantityShipped() {
        return quantityShipped;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundAmountShipped> amountShipped() {
        return (Optional<CreateOrderRefundAmountShipped>) amountShipped;
    }

    @JsonIgnore
    public Optional<Long> quantityRefunded() {
        return quantityRefunded;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundAmountRefunded> amountRefunded() {
        return (Optional<CreateOrderRefundAmountRefunded>) amountRefunded;
    }

    @JsonIgnore
    public Optional<Long> quantityCanceled() {
        return quantityCanceled;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundAmountCanceled> amountCanceled() {
        return (Optional<CreateOrderRefundAmountCanceled>) amountCanceled;
    }

    @JsonIgnore
    public Optional<Long> shippableQuantity() {
        return shippableQuantity;
    }

    @JsonIgnore
    public Optional<Long> refundableQuantity() {
        return refundableQuantity;
    }

    @JsonIgnore
    public Optional<Long> cancelableQuantity() {
        return cancelableQuantity;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundUnitPrice> unitPrice() {
        return (Optional<CreateOrderRefundUnitPrice>) unitPrice;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundTotalAmount> totalAmount() {
        return (Optional<CreateOrderRefundTotalAmount>) totalAmount;
    }

    @JsonIgnore
    public Optional<String> vatRate() {
        return vatRate;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundVatAmount> vatAmount() {
        return (Optional<CreateOrderRefundVatAmount>) vatAmount;
    }

    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DiscountedAmount> discountedAmount() {
        return (Optional<DiscountedAmount>) discountedAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CreateOrderRefundLinesOutput withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    public CreateOrderRefundLinesOutput withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
     */
    public CreateOrderRefundLinesOutput withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
     */
    public CreateOrderRefundLinesOutput withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CreateOrderRefundLinesOutput withOrderId(String orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = Optional.ofNullable(orderId);
        return this;
    }

    public CreateOrderRefundLinesOutput withOrderId(Optional<String> orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = orderId;
        return this;
    }

    public CreateOrderRefundLinesOutput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public CreateOrderRefundLinesOutput withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CreateOrderRefundLinesOutput withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = JsonNullable.of(sku);
        return this;
    }

    public CreateOrderRefundLinesOutput withSku(JsonNullable<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    public CreateOrderRefundLinesOutput withType(CreateOrderRefundType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public CreateOrderRefundLinesOutput withType(Optional<? extends CreateOrderRefundType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public CreateOrderRefundLinesOutput withStatus(CreateOrderRefundStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public CreateOrderRefundLinesOutput withStatus(Optional<? extends CreateOrderRefundStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateOrderRefundLinesOutput withMetadata(CreateOrderRefundRefundsResponse201Metadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateOrderRefundLinesOutput withMetadata(JsonNullable<? extends CreateOrderRefundRefundsResponse201Metadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public CreateOrderRefundLinesOutput withIsCancelable(boolean isCancelable) {
        Utils.checkNotNull(isCancelable, "isCancelable");
        this.isCancelable = Optional.ofNullable(isCancelable);
        return this;
    }

    public CreateOrderRefundLinesOutput withIsCancelable(Optional<Boolean> isCancelable) {
        Utils.checkNotNull(isCancelable, "isCancelable");
        this.isCancelable = isCancelable;
        return this;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * <p>Must be less than the number of items already refunded for this order line.
     */
    public CreateOrderRefundLinesOutput withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * <p>Must be less than the number of items already refunded for this order line.
     */
    public CreateOrderRefundLinesOutput withQuantity(Optional<Long> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    public CreateOrderRefundLinesOutput withQuantityShipped(long quantityShipped) {
        Utils.checkNotNull(quantityShipped, "quantityShipped");
        this.quantityShipped = Optional.ofNullable(quantityShipped);
        return this;
    }

    public CreateOrderRefundLinesOutput withQuantityShipped(Optional<Long> quantityShipped) {
        Utils.checkNotNull(quantityShipped, "quantityShipped");
        this.quantityShipped = quantityShipped;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withAmountShipped(CreateOrderRefundAmountShipped amountShipped) {
        Utils.checkNotNull(amountShipped, "amountShipped");
        this.amountShipped = Optional.ofNullable(amountShipped);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withAmountShipped(Optional<? extends CreateOrderRefundAmountShipped> amountShipped) {
        Utils.checkNotNull(amountShipped, "amountShipped");
        this.amountShipped = amountShipped;
        return this;
    }

    public CreateOrderRefundLinesOutput withQuantityRefunded(long quantityRefunded) {
        Utils.checkNotNull(quantityRefunded, "quantityRefunded");
        this.quantityRefunded = Optional.ofNullable(quantityRefunded);
        return this;
    }

    public CreateOrderRefundLinesOutput withQuantityRefunded(Optional<Long> quantityRefunded) {
        Utils.checkNotNull(quantityRefunded, "quantityRefunded");
        this.quantityRefunded = quantityRefunded;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withAmountRefunded(CreateOrderRefundAmountRefunded amountRefunded) {
        Utils.checkNotNull(amountRefunded, "amountRefunded");
        this.amountRefunded = Optional.ofNullable(amountRefunded);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withAmountRefunded(Optional<? extends CreateOrderRefundAmountRefunded> amountRefunded) {
        Utils.checkNotNull(amountRefunded, "amountRefunded");
        this.amountRefunded = amountRefunded;
        return this;
    }

    public CreateOrderRefundLinesOutput withQuantityCanceled(long quantityCanceled) {
        Utils.checkNotNull(quantityCanceled, "quantityCanceled");
        this.quantityCanceled = Optional.ofNullable(quantityCanceled);
        return this;
    }

    public CreateOrderRefundLinesOutput withQuantityCanceled(Optional<Long> quantityCanceled) {
        Utils.checkNotNull(quantityCanceled, "quantityCanceled");
        this.quantityCanceled = quantityCanceled;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withAmountCanceled(CreateOrderRefundAmountCanceled amountCanceled) {
        Utils.checkNotNull(amountCanceled, "amountCanceled");
        this.amountCanceled = Optional.ofNullable(amountCanceled);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withAmountCanceled(Optional<? extends CreateOrderRefundAmountCanceled> amountCanceled) {
        Utils.checkNotNull(amountCanceled, "amountCanceled");
        this.amountCanceled = amountCanceled;
        return this;
    }

    public CreateOrderRefundLinesOutput withShippableQuantity(long shippableQuantity) {
        Utils.checkNotNull(shippableQuantity, "shippableQuantity");
        this.shippableQuantity = Optional.ofNullable(shippableQuantity);
        return this;
    }

    public CreateOrderRefundLinesOutput withShippableQuantity(Optional<Long> shippableQuantity) {
        Utils.checkNotNull(shippableQuantity, "shippableQuantity");
        this.shippableQuantity = shippableQuantity;
        return this;
    }

    public CreateOrderRefundLinesOutput withRefundableQuantity(long refundableQuantity) {
        Utils.checkNotNull(refundableQuantity, "refundableQuantity");
        this.refundableQuantity = Optional.ofNullable(refundableQuantity);
        return this;
    }

    public CreateOrderRefundLinesOutput withRefundableQuantity(Optional<Long> refundableQuantity) {
        Utils.checkNotNull(refundableQuantity, "refundableQuantity");
        this.refundableQuantity = refundableQuantity;
        return this;
    }

    public CreateOrderRefundLinesOutput withCancelableQuantity(long cancelableQuantity) {
        Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
        this.cancelableQuantity = Optional.ofNullable(cancelableQuantity);
        return this;
    }

    public CreateOrderRefundLinesOutput withCancelableQuantity(Optional<Long> cancelableQuantity) {
        Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
        this.cancelableQuantity = cancelableQuantity;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withUnitPrice(CreateOrderRefundUnitPrice unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = Optional.ofNullable(unitPrice);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withUnitPrice(Optional<? extends CreateOrderRefundUnitPrice> unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = unitPrice;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withTotalAmount(CreateOrderRefundTotalAmount totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withTotalAmount(Optional<? extends CreateOrderRefundTotalAmount> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    public CreateOrderRefundLinesOutput withVatRate(String vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = Optional.ofNullable(vatRate);
        return this;
    }

    public CreateOrderRefundLinesOutput withVatRate(Optional<String> vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = vatRate;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withVatAmount(CreateOrderRefundVatAmount vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = Optional.ofNullable(vatAmount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withVatAmount(Optional<? extends CreateOrderRefundVatAmount> vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = vatAmount;
        return this;
    }

    public CreateOrderRefundLinesOutput withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public CreateOrderRefundLinesOutput withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withDiscountedAmount(DiscountedAmount discountedAmount) {
        Utils.checkNotNull(discountedAmount, "discountedAmount");
        this.discountedAmount = Optional.ofNullable(discountedAmount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLinesOutput withDiscountedAmount(Optional<? extends DiscountedAmount> discountedAmount) {
        Utils.checkNotNull(discountedAmount, "discountedAmount");
        this.discountedAmount = discountedAmount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOrderRefundLinesOutput other = (CreateOrderRefundLinesOutput) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.orderId, other.orderId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.sku, other.sku) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.isCancelable, other.isCancelable) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.quantityShipped, other.quantityShipped) &&
            Utils.enhancedDeepEquals(this.amountShipped, other.amountShipped) &&
            Utils.enhancedDeepEquals(this.quantityRefunded, other.quantityRefunded) &&
            Utils.enhancedDeepEquals(this.amountRefunded, other.amountRefunded) &&
            Utils.enhancedDeepEquals(this.quantityCanceled, other.quantityCanceled) &&
            Utils.enhancedDeepEquals(this.amountCanceled, other.amountCanceled) &&
            Utils.enhancedDeepEquals(this.shippableQuantity, other.shippableQuantity) &&
            Utils.enhancedDeepEquals(this.refundableQuantity, other.refundableQuantity) &&
            Utils.enhancedDeepEquals(this.cancelableQuantity, other.cancelableQuantity) &&
            Utils.enhancedDeepEquals(this.unitPrice, other.unitPrice) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.vatRate, other.vatRate) &&
            Utils.enhancedDeepEquals(this.vatAmount, other.vatAmount) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.discountedAmount, other.discountedAmount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource,
            id,
            orderId,
            name,
            sku,
            type,
            status,
            metadata,
            isCancelable,
            quantity,
            quantityShipped,
            amountShipped,
            quantityRefunded,
            amountRefunded,
            quantityCanceled,
            amountCanceled,
            shippableQuantity,
            refundableQuantity,
            cancelableQuantity,
            unitPrice,
            totalAmount,
            vatRate,
            vatAmount,
            createdAt,
            discountedAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOrderRefundLinesOutput.class,
                "resource", resource,
                "id", id,
                "orderId", orderId,
                "name", name,
                "sku", sku,
                "type", type,
                "status", status,
                "metadata", metadata,
                "isCancelable", isCancelable,
                "quantity", quantity,
                "quantityShipped", quantityShipped,
                "amountShipped", amountShipped,
                "quantityRefunded", quantityRefunded,
                "amountRefunded", amountRefunded,
                "quantityCanceled", quantityCanceled,
                "amountCanceled", amountCanceled,
                "shippableQuantity", shippableQuantity,
                "refundableQuantity", refundableQuantity,
                "cancelableQuantity", cancelableQuantity,
                "unitPrice", unitPrice,
                "totalAmount", totalAmount,
                "vatRate", vatRate,
                "vatAmount", vatAmount,
                "createdAt", createdAt,
                "discountedAmount", discountedAmount);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> orderId = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private JsonNullable<String> sku = JsonNullable.undefined();
 
        private Optional<? extends CreateOrderRefundType> type = Optional.empty();
 
        private Optional<? extends CreateOrderRefundStatus> status = Optional.empty();
 
        private JsonNullable<? extends CreateOrderRefundRefundsResponse201Metadata> metadata = JsonNullable.undefined();
 
        private Optional<Boolean> isCancelable = Optional.empty();
 
        private Optional<Long> quantity = Optional.empty();
 
        private Optional<Long> quantityShipped = Optional.empty();
 
        private Optional<? extends CreateOrderRefundAmountShipped> amountShipped = Optional.empty();
 
        private Optional<Long> quantityRefunded = Optional.empty();
 
        private Optional<? extends CreateOrderRefundAmountRefunded> amountRefunded = Optional.empty();
 
        private Optional<Long> quantityCanceled = Optional.empty();
 
        private Optional<? extends CreateOrderRefundAmountCanceled> amountCanceled = Optional.empty();
 
        private Optional<Long> shippableQuantity = Optional.empty();
 
        private Optional<Long> refundableQuantity = Optional.empty();
 
        private Optional<Long> cancelableQuantity = Optional.empty();
 
        private Optional<? extends CreateOrderRefundUnitPrice> unitPrice = Optional.empty();
 
        private Optional<? extends CreateOrderRefundTotalAmount> totalAmount = Optional.empty();
 
        private Optional<String> vatRate = Optional.empty();
 
        private Optional<? extends CreateOrderRefundVatAmount> vatAmount = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<? extends DiscountedAmount> discountedAmount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder orderId(String orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        public Builder orderId(Optional<String> orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = orderId;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = JsonNullable.of(sku);
            return this;
        }

        public Builder sku(JsonNullable<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        public Builder type(CreateOrderRefundType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends CreateOrderRefundType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder status(CreateOrderRefundStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends CreateOrderRefundStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(CreateOrderRefundRefundsResponse201Metadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends CreateOrderRefundRefundsResponse201Metadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder isCancelable(boolean isCancelable) {
            Utils.checkNotNull(isCancelable, "isCancelable");
            this.isCancelable = Optional.ofNullable(isCancelable);
            return this;
        }

        public Builder isCancelable(Optional<Boolean> isCancelable) {
            Utils.checkNotNull(isCancelable, "isCancelable");
            this.isCancelable = isCancelable;
            return this;
        }

        /**
         * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
         * 
         * <p>Must be less than the number of items already refunded for this order line.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
         * 
         * <p>Must be less than the number of items already refunded for this order line.
         */
        public Builder quantity(Optional<Long> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        public Builder quantityShipped(long quantityShipped) {
            Utils.checkNotNull(quantityShipped, "quantityShipped");
            this.quantityShipped = Optional.ofNullable(quantityShipped);
            return this;
        }

        public Builder quantityShipped(Optional<Long> quantityShipped) {
            Utils.checkNotNull(quantityShipped, "quantityShipped");
            this.quantityShipped = quantityShipped;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountShipped(CreateOrderRefundAmountShipped amountShipped) {
            Utils.checkNotNull(amountShipped, "amountShipped");
            this.amountShipped = Optional.ofNullable(amountShipped);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountShipped(Optional<? extends CreateOrderRefundAmountShipped> amountShipped) {
            Utils.checkNotNull(amountShipped, "amountShipped");
            this.amountShipped = amountShipped;
            return this;
        }

        public Builder quantityRefunded(long quantityRefunded) {
            Utils.checkNotNull(quantityRefunded, "quantityRefunded");
            this.quantityRefunded = Optional.ofNullable(quantityRefunded);
            return this;
        }

        public Builder quantityRefunded(Optional<Long> quantityRefunded) {
            Utils.checkNotNull(quantityRefunded, "quantityRefunded");
            this.quantityRefunded = quantityRefunded;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountRefunded(CreateOrderRefundAmountRefunded amountRefunded) {
            Utils.checkNotNull(amountRefunded, "amountRefunded");
            this.amountRefunded = Optional.ofNullable(amountRefunded);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountRefunded(Optional<? extends CreateOrderRefundAmountRefunded> amountRefunded) {
            Utils.checkNotNull(amountRefunded, "amountRefunded");
            this.amountRefunded = amountRefunded;
            return this;
        }

        public Builder quantityCanceled(long quantityCanceled) {
            Utils.checkNotNull(quantityCanceled, "quantityCanceled");
            this.quantityCanceled = Optional.ofNullable(quantityCanceled);
            return this;
        }

        public Builder quantityCanceled(Optional<Long> quantityCanceled) {
            Utils.checkNotNull(quantityCanceled, "quantityCanceled");
            this.quantityCanceled = quantityCanceled;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountCanceled(CreateOrderRefundAmountCanceled amountCanceled) {
            Utils.checkNotNull(amountCanceled, "amountCanceled");
            this.amountCanceled = Optional.ofNullable(amountCanceled);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountCanceled(Optional<? extends CreateOrderRefundAmountCanceled> amountCanceled) {
            Utils.checkNotNull(amountCanceled, "amountCanceled");
            this.amountCanceled = amountCanceled;
            return this;
        }

        public Builder shippableQuantity(long shippableQuantity) {
            Utils.checkNotNull(shippableQuantity, "shippableQuantity");
            this.shippableQuantity = Optional.ofNullable(shippableQuantity);
            return this;
        }

        public Builder shippableQuantity(Optional<Long> shippableQuantity) {
            Utils.checkNotNull(shippableQuantity, "shippableQuantity");
            this.shippableQuantity = shippableQuantity;
            return this;
        }

        public Builder refundableQuantity(long refundableQuantity) {
            Utils.checkNotNull(refundableQuantity, "refundableQuantity");
            this.refundableQuantity = Optional.ofNullable(refundableQuantity);
            return this;
        }

        public Builder refundableQuantity(Optional<Long> refundableQuantity) {
            Utils.checkNotNull(refundableQuantity, "refundableQuantity");
            this.refundableQuantity = refundableQuantity;
            return this;
        }

        public Builder cancelableQuantity(long cancelableQuantity) {
            Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
            this.cancelableQuantity = Optional.ofNullable(cancelableQuantity);
            return this;
        }

        public Builder cancelableQuantity(Optional<Long> cancelableQuantity) {
            Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
            this.cancelableQuantity = cancelableQuantity;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder unitPrice(CreateOrderRefundUnitPrice unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = Optional.ofNullable(unitPrice);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder unitPrice(Optional<? extends CreateOrderRefundUnitPrice> unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = unitPrice;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder totalAmount(CreateOrderRefundTotalAmount totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder totalAmount(Optional<? extends CreateOrderRefundTotalAmount> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder vatRate(String vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = Optional.ofNullable(vatRate);
            return this;
        }

        public Builder vatRate(Optional<String> vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = vatRate;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder vatAmount(CreateOrderRefundVatAmount vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = Optional.ofNullable(vatAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder vatAmount(Optional<? extends CreateOrderRefundVatAmount> vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = vatAmount;
            return this;
        }

        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder discountedAmount(DiscountedAmount discountedAmount) {
            Utils.checkNotNull(discountedAmount, "discountedAmount");
            this.discountedAmount = Optional.ofNullable(discountedAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder discountedAmount(Optional<? extends DiscountedAmount> discountedAmount) {
            Utils.checkNotNull(discountedAmount, "discountedAmount");
            this.discountedAmount = discountedAmount;
            return this;
        }
        
        public CreateOrderRefundLinesOutput build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }
            return new CreateOrderRefundLinesOutput(
                resource,
                id,
                orderId,
                name,
                sku,
                type,
                status,
                metadata,
                isCancelable,
                quantity,
                quantityShipped,
                amountShipped,
                quantityRefunded,
                amountRefunded,
                quantityCanceled,
                amountCanceled,
                shippableQuantity,
                refundableQuantity,
                cancelableQuantity,
                unitPrice,
                totalAmount,
                vatRate,
                vatAmount,
                createdAt,
                discountedAmount);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"orderline\"",
                        new TypeReference<Optional<String>>() {});
    }
}
