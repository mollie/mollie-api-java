/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * ListSubscriptionPaymentsSettlementAmount
 * 
 * <p>This optional field will contain the approximate amount that will be settled to your account, converted to the currency your account is settled in.
 * 
 * <p>Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is settled by Mollie the `settlementAmount` is omitted from the response.
 * 
 * <p>Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
 */
public class ListSubscriptionPaymentsSettlementAmount {
    /**
     * A three-character ISO 4217 currency code.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * A string containing an exact monetary amount in the given currency.
     */
    @JsonProperty("value")
    private String value;

    @JsonCreator
    public ListSubscriptionPaymentsSettlementAmount(
            @JsonProperty("currency") String currency,
            @JsonProperty("value") String value) {
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(value, "value");
        this.currency = currency;
        this.value = value;
    }

    /**
     * A three-character ISO 4217 currency code.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * A string containing an exact monetary amount in the given currency.
     */
    @JsonIgnore
    public String value() {
        return value;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A three-character ISO 4217 currency code.
     */
    public ListSubscriptionPaymentsSettlementAmount withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * A string containing an exact monetary amount in the given currency.
     */
    public ListSubscriptionPaymentsSettlementAmount withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListSubscriptionPaymentsSettlementAmount other = (ListSubscriptionPaymentsSettlementAmount) o;
        return 
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            currency, value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListSubscriptionPaymentsSettlementAmount.class,
                "currency", currency,
                "value", value);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String currency;

        private String value;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A three-character ISO 4217 currency code.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * A string containing an exact monetary amount in the given currency.
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public ListSubscriptionPaymentsSettlementAmount build() {

            return new ListSubscriptionPaymentsSettlementAmount(
                currency, value);
        }

    }
}
