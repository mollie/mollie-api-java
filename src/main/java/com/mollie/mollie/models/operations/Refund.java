/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class Refund {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentId")
    private Optional<String> paymentId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentDescription")
    private Optional<String> paymentDescription;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refundId")
    private Optional<String> refundId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refundDescription")
    private Optional<String> refundDescription;

    @JsonCreator
    public Refund(
            @JsonProperty("paymentId") Optional<String> paymentId,
            @JsonProperty("paymentDescription") Optional<String> paymentDescription,
            @JsonProperty("refundId") Optional<String> refundId,
            @JsonProperty("refundDescription") Optional<String> refundDescription) {
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(paymentDescription, "paymentDescription");
        Utils.checkNotNull(refundId, "refundId");
        Utils.checkNotNull(refundDescription, "refundDescription");
        this.paymentId = paymentId;
        this.paymentDescription = paymentDescription;
        this.refundId = refundId;
        this.refundDescription = refundDescription;
    }
    
    public Refund() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @JsonIgnore
    public Optional<String> paymentId() {
        return paymentId;
    }

    @JsonIgnore
    public Optional<String> paymentDescription() {
        return paymentDescription;
    }

    @JsonIgnore
    public Optional<String> refundId() {
        return refundId;
    }

    @JsonIgnore
    public Optional<String> refundDescription() {
        return refundDescription;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Refund withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = Optional.ofNullable(paymentId);
        return this;
    }


    public Refund withPaymentId(Optional<String> paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    public Refund withPaymentDescription(String paymentDescription) {
        Utils.checkNotNull(paymentDescription, "paymentDescription");
        this.paymentDescription = Optional.ofNullable(paymentDescription);
        return this;
    }


    public Refund withPaymentDescription(Optional<String> paymentDescription) {
        Utils.checkNotNull(paymentDescription, "paymentDescription");
        this.paymentDescription = paymentDescription;
        return this;
    }

    public Refund withRefundId(String refundId) {
        Utils.checkNotNull(refundId, "refundId");
        this.refundId = Optional.ofNullable(refundId);
        return this;
    }


    public Refund withRefundId(Optional<String> refundId) {
        Utils.checkNotNull(refundId, "refundId");
        this.refundId = refundId;
        return this;
    }

    public Refund withRefundDescription(String refundDescription) {
        Utils.checkNotNull(refundDescription, "refundDescription");
        this.refundDescription = Optional.ofNullable(refundDescription);
        return this;
    }


    public Refund withRefundDescription(Optional<String> refundDescription) {
        Utils.checkNotNull(refundDescription, "refundDescription");
        this.refundDescription = refundDescription;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Refund other = (Refund) o;
        return 
            Utils.enhancedDeepEquals(this.paymentId, other.paymentId) &&
            Utils.enhancedDeepEquals(this.paymentDescription, other.paymentDescription) &&
            Utils.enhancedDeepEquals(this.refundId, other.refundId) &&
            Utils.enhancedDeepEquals(this.refundDescription, other.refundDescription);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            paymentId, paymentDescription, refundId,
            refundDescription);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Refund.class,
                "paymentId", paymentId,
                "paymentDescription", paymentDescription,
                "refundId", refundId,
                "refundDescription", refundDescription);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> paymentId = Optional.empty();

        private Optional<String> paymentDescription = Optional.empty();

        private Optional<String> refundId = Optional.empty();

        private Optional<String> refundDescription = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        public Builder paymentId(Optional<String> paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }


        public Builder paymentDescription(String paymentDescription) {
            Utils.checkNotNull(paymentDescription, "paymentDescription");
            this.paymentDescription = Optional.ofNullable(paymentDescription);
            return this;
        }

        public Builder paymentDescription(Optional<String> paymentDescription) {
            Utils.checkNotNull(paymentDescription, "paymentDescription");
            this.paymentDescription = paymentDescription;
            return this;
        }


        public Builder refundId(String refundId) {
            Utils.checkNotNull(refundId, "refundId");
            this.refundId = Optional.ofNullable(refundId);
            return this;
        }

        public Builder refundId(Optional<String> refundId) {
            Utils.checkNotNull(refundId, "refundId");
            this.refundId = refundId;
            return this;
        }


        public Builder refundDescription(String refundDescription) {
            Utils.checkNotNull(refundDescription, "refundDescription");
            this.refundDescription = Optional.ofNullable(refundDescription);
            return this;
        }

        public Builder refundDescription(Optional<String> refundDescription) {
            Utils.checkNotNull(refundDescription, "refundDescription");
            this.refundDescription = refundDescription;
            return this;
        }

        public Refund build() {

            return new Refund(
                paymentId, paymentDescription, refundId,
                refundDescription);
        }

    }
}
