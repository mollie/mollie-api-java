/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateSalesInvoiceRequestBody {
    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
     * `testmode` to `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testmode")
    private JsonNullable<Boolean> testmode;

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileId")
    private JsonNullable<String> profileId;

    /**
     * The status for the invoice to end up in.
     * 
     * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
     * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
     * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
     * 
     * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
     * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
     * 
     * <p>Dependent parameters:
     *   - `paymentDetails` is required if invoice should be set directly to `paid`
     *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
     *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
     */
    @JsonProperty("status")
    private Status status;

    /**
     * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatScheme")
    private Optional<? extends VatScheme> vatScheme;

    /**
     * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
     * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatMode")
    private Optional<? extends VatMode> vatMode;

    /**
     * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memo")
    private JsonNullable<String> memo;

    /**
     * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends CreateSalesInvoiceMetadata> metadata;

    /**
     * The payment term to be set on the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentTerm")
    private JsonNullable<? extends PaymentTerm> paymentTerm;

    /**
     * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
     * provided details. Required for `paid` status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentDetails")
    private JsonNullable<? extends PaymentDetails> paymentDetails;

    /**
     * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
     * recipient with the provided `subject` and `body`. Required for `issued` status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailDetails")
    private JsonNullable<? extends EmailDetails> emailDetails;

    /**
     * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
     * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerId")
    private Optional<String> customerId;

    /**
     * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
     * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandateId")
    private Optional<String> mandateId;

    /**
     * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
     * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
     * is not required to send a first invoice to a recipient.
     */
    @JsonProperty("recipientIdentifier")
    private String recipientIdentifier;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("recipient")
    private Optional<? extends Recipient> recipient;

    /**
     * Provide the line items for the invoice. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the invoice.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("lines")
    private Optional<? extends List<CreateSalesInvoiceLines>> lines;

    /**
     * The discount to be applied to the entire invoice, applied on top of any line item discounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount")
    private JsonNullable<? extends CreateSalesInvoiceDiscount> discount;

    @JsonCreator
    public CreateSalesInvoiceRequestBody(
            @JsonProperty("testmode") JsonNullable<Boolean> testmode,
            @JsonProperty("profileId") JsonNullable<String> profileId,
            @JsonProperty("status") Status status,
            @JsonProperty("vatScheme") Optional<? extends VatScheme> vatScheme,
            @JsonProperty("vatMode") Optional<? extends VatMode> vatMode,
            @JsonProperty("memo") JsonNullable<String> memo,
            @JsonProperty("metadata") JsonNullable<? extends CreateSalesInvoiceMetadata> metadata,
            @JsonProperty("paymentTerm") JsonNullable<? extends PaymentTerm> paymentTerm,
            @JsonProperty("paymentDetails") JsonNullable<? extends PaymentDetails> paymentDetails,
            @JsonProperty("emailDetails") JsonNullable<? extends EmailDetails> emailDetails,
            @JsonProperty("customerId") Optional<String> customerId,
            @JsonProperty("mandateId") Optional<String> mandateId,
            @JsonProperty("recipientIdentifier") String recipientIdentifier,
            @JsonProperty("recipient") Optional<? extends Recipient> recipient,
            @JsonProperty("lines") Optional<? extends List<CreateSalesInvoiceLines>> lines,
            @JsonProperty("discount") JsonNullable<? extends CreateSalesInvoiceDiscount> discount) {
        Utils.checkNotNull(testmode, "testmode");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(vatScheme, "vatScheme");
        Utils.checkNotNull(vatMode, "vatMode");
        Utils.checkNotNull(memo, "memo");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(paymentTerm, "paymentTerm");
        Utils.checkNotNull(paymentDetails, "paymentDetails");
        Utils.checkNotNull(emailDetails, "emailDetails");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(mandateId, "mandateId");
        Utils.checkNotNull(recipientIdentifier, "recipientIdentifier");
        Utils.checkNotNull(recipient, "recipient");
        Utils.checkNotNull(lines, "lines");
        Utils.checkNotNull(discount, "discount");
        this.testmode = testmode;
        this.profileId = profileId;
        this.status = status;
        this.vatScheme = vatScheme;
        this.vatMode = vatMode;
        this.memo = memo;
        this.metadata = metadata;
        this.paymentTerm = paymentTerm;
        this.paymentDetails = paymentDetails;
        this.emailDetails = emailDetails;
        this.customerId = customerId;
        this.mandateId = mandateId;
        this.recipientIdentifier = recipientIdentifier;
        this.recipient = recipient;
        this.lines = lines;
        this.discount = discount;
    }
    
    public CreateSalesInvoiceRequestBody(
            Status status,
            String recipientIdentifier) {
        this(JsonNullable.undefined(), JsonNullable.undefined(), status,
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            recipientIdentifier, Optional.empty(), Optional.empty(),
            JsonNullable.undefined());
    }

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
     * `testmode` to `true`.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @JsonIgnore
    public JsonNullable<String> profileId() {
        return profileId;
    }

    /**
     * The status for the invoice to end up in.
     * 
     * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
     * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
     * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
     * 
     * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
     * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
     * 
     * <p>Dependent parameters:
     *   - `paymentDetails` is required if invoice should be set directly to `paid`
     *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
     *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
     */
    @JsonIgnore
    public Status status() {
        return status;
    }

    /**
     * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VatScheme> vatScheme() {
        return (Optional<VatScheme>) vatScheme;
    }

    /**
     * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
     * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VatMode> vatMode() {
        return (Optional<VatMode>) vatMode;
    }

    /**
     * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
     */
    @JsonIgnore
    public JsonNullable<String> memo() {
        return memo;
    }

    /**
     * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateSalesInvoiceMetadata> metadata() {
        return (JsonNullable<CreateSalesInvoiceMetadata>) metadata;
    }

    /**
     * The payment term to be set on the invoice.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PaymentTerm> paymentTerm() {
        return (JsonNullable<PaymentTerm>) paymentTerm;
    }

    /**
     * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
     * provided details. Required for `paid` status.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PaymentDetails> paymentDetails() {
        return (JsonNullable<PaymentDetails>) paymentDetails;
    }

    /**
     * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
     * recipient with the provided `subject` and `body`. Required for `issued` status.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EmailDetails> emailDetails() {
        return (JsonNullable<EmailDetails>) emailDetails;
    }

    /**
     * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
     * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    @JsonIgnore
    public Optional<String> customerId() {
        return customerId;
    }

    /**
     * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
     * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    @JsonIgnore
    public Optional<String> mandateId() {
        return mandateId;
    }

    /**
     * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
     * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
     * is not required to send a first invoice to a recipient.
     */
    @JsonIgnore
    public String recipientIdentifier() {
        return recipientIdentifier;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Recipient> recipient() {
        return (Optional<Recipient>) recipient;
    }

    /**
     * Provide the line items for the invoice. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the invoice.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CreateSalesInvoiceLines>> lines() {
        return (Optional<List<CreateSalesInvoiceLines>>) lines;
    }

    /**
     * The discount to be applied to the entire invoice, applied on top of any line item discounts.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateSalesInvoiceDiscount> discount() {
        return (JsonNullable<CreateSalesInvoiceDiscount>) discount;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
     * `testmode` to `true`.
     */
    public CreateSalesInvoiceRequestBody withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
     * `testmode` to `true`.
     */
    public CreateSalesInvoiceRequestBody withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    public CreateSalesInvoiceRequestBody withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = JsonNullable.of(profileId);
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    public CreateSalesInvoiceRequestBody withProfileId(JsonNullable<String> profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * The status for the invoice to end up in.
     * 
     * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
     * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
     * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
     * 
     * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
     * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
     * 
     * <p>Dependent parameters:
     *   - `paymentDetails` is required if invoice should be set directly to `paid`
     *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
     *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
     */
    public CreateSalesInvoiceRequestBody withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
     */
    public CreateSalesInvoiceRequestBody withVatScheme(VatScheme vatScheme) {
        Utils.checkNotNull(vatScheme, "vatScheme");
        this.vatScheme = Optional.ofNullable(vatScheme);
        return this;
    }


    /**
     * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
     */
    public CreateSalesInvoiceRequestBody withVatScheme(Optional<? extends VatScheme> vatScheme) {
        Utils.checkNotNull(vatScheme, "vatScheme");
        this.vatScheme = vatScheme;
        return this;
    }

    /**
     * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
     * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
     */
    public CreateSalesInvoiceRequestBody withVatMode(VatMode vatMode) {
        Utils.checkNotNull(vatMode, "vatMode");
        this.vatMode = Optional.ofNullable(vatMode);
        return this;
    }


    /**
     * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
     * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
     */
    public CreateSalesInvoiceRequestBody withVatMode(Optional<? extends VatMode> vatMode) {
        Utils.checkNotNull(vatMode, "vatMode");
        this.vatMode = vatMode;
        return this;
    }

    /**
     * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
     */
    public CreateSalesInvoiceRequestBody withMemo(String memo) {
        Utils.checkNotNull(memo, "memo");
        this.memo = JsonNullable.of(memo);
        return this;
    }

    /**
     * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
     */
    public CreateSalesInvoiceRequestBody withMemo(JsonNullable<String> memo) {
        Utils.checkNotNull(memo, "memo");
        this.memo = memo;
        return this;
    }

    /**
     * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateSalesInvoiceRequestBody withMetadata(CreateSalesInvoiceMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateSalesInvoiceRequestBody withMetadata(JsonNullable<? extends CreateSalesInvoiceMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The payment term to be set on the invoice.
     */
    public CreateSalesInvoiceRequestBody withPaymentTerm(PaymentTerm paymentTerm) {
        Utils.checkNotNull(paymentTerm, "paymentTerm");
        this.paymentTerm = JsonNullable.of(paymentTerm);
        return this;
    }

    /**
     * The payment term to be set on the invoice.
     */
    public CreateSalesInvoiceRequestBody withPaymentTerm(JsonNullable<? extends PaymentTerm> paymentTerm) {
        Utils.checkNotNull(paymentTerm, "paymentTerm");
        this.paymentTerm = paymentTerm;
        return this;
    }

    /**
     * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
     * provided details. Required for `paid` status.
     */
    public CreateSalesInvoiceRequestBody withPaymentDetails(PaymentDetails paymentDetails) {
        Utils.checkNotNull(paymentDetails, "paymentDetails");
        this.paymentDetails = JsonNullable.of(paymentDetails);
        return this;
    }

    /**
     * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
     * provided details. Required for `paid` status.
     */
    public CreateSalesInvoiceRequestBody withPaymentDetails(JsonNullable<? extends PaymentDetails> paymentDetails) {
        Utils.checkNotNull(paymentDetails, "paymentDetails");
        this.paymentDetails = paymentDetails;
        return this;
    }

    /**
     * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
     * recipient with the provided `subject` and `body`. Required for `issued` status.
     */
    public CreateSalesInvoiceRequestBody withEmailDetails(EmailDetails emailDetails) {
        Utils.checkNotNull(emailDetails, "emailDetails");
        this.emailDetails = JsonNullable.of(emailDetails);
        return this;
    }

    /**
     * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
     * recipient with the provided `subject` and `body`. Required for `issued` status.
     */
    public CreateSalesInvoiceRequestBody withEmailDetails(JsonNullable<? extends EmailDetails> emailDetails) {
        Utils.checkNotNull(emailDetails, "emailDetails");
        this.emailDetails = emailDetails;
        return this;
    }

    /**
     * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
     * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    public CreateSalesInvoiceRequestBody withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = Optional.ofNullable(customerId);
        return this;
    }


    /**
     * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
     * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    public CreateSalesInvoiceRequestBody withCustomerId(Optional<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
     * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    public CreateSalesInvoiceRequestBody withMandateId(String mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = Optional.ofNullable(mandateId);
        return this;
    }


    /**
     * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
     * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    public CreateSalesInvoiceRequestBody withMandateId(Optional<String> mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = mandateId;
        return this;
    }

    /**
     * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
     * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
     * is not required to send a first invoice to a recipient.
     */
    public CreateSalesInvoiceRequestBody withRecipientIdentifier(String recipientIdentifier) {
        Utils.checkNotNull(recipientIdentifier, "recipientIdentifier");
        this.recipientIdentifier = recipientIdentifier;
        return this;
    }

    public CreateSalesInvoiceRequestBody withRecipient(Recipient recipient) {
        Utils.checkNotNull(recipient, "recipient");
        this.recipient = Optional.ofNullable(recipient);
        return this;
    }


    public CreateSalesInvoiceRequestBody withRecipient(Optional<? extends Recipient> recipient) {
        Utils.checkNotNull(recipient, "recipient");
        this.recipient = recipient;
        return this;
    }

    /**
     * Provide the line items for the invoice. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the invoice.
     */
    public CreateSalesInvoiceRequestBody withLines(List<CreateSalesInvoiceLines> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = Optional.ofNullable(lines);
        return this;
    }


    /**
     * Provide the line items for the invoice. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the invoice.
     */
    public CreateSalesInvoiceRequestBody withLines(Optional<? extends List<CreateSalesInvoiceLines>> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = lines;
        return this;
    }

    /**
     * The discount to be applied to the entire invoice, applied on top of any line item discounts.
     */
    public CreateSalesInvoiceRequestBody withDiscount(CreateSalesInvoiceDiscount discount) {
        Utils.checkNotNull(discount, "discount");
        this.discount = JsonNullable.of(discount);
        return this;
    }

    /**
     * The discount to be applied to the entire invoice, applied on top of any line item discounts.
     */
    public CreateSalesInvoiceRequestBody withDiscount(JsonNullable<? extends CreateSalesInvoiceDiscount> discount) {
        Utils.checkNotNull(discount, "discount");
        this.discount = discount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateSalesInvoiceRequestBody other = (CreateSalesInvoiceRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.testmode, other.testmode) &&
            Utils.enhancedDeepEquals(this.profileId, other.profileId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.vatScheme, other.vatScheme) &&
            Utils.enhancedDeepEquals(this.vatMode, other.vatMode) &&
            Utils.enhancedDeepEquals(this.memo, other.memo) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.paymentTerm, other.paymentTerm) &&
            Utils.enhancedDeepEquals(this.paymentDetails, other.paymentDetails) &&
            Utils.enhancedDeepEquals(this.emailDetails, other.emailDetails) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.mandateId, other.mandateId) &&
            Utils.enhancedDeepEquals(this.recipientIdentifier, other.recipientIdentifier) &&
            Utils.enhancedDeepEquals(this.recipient, other.recipient) &&
            Utils.enhancedDeepEquals(this.lines, other.lines) &&
            Utils.enhancedDeepEquals(this.discount, other.discount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            testmode, profileId, status,
            vatScheme, vatMode, memo,
            metadata, paymentTerm, paymentDetails,
            emailDetails, customerId, mandateId,
            recipientIdentifier, recipient, lines,
            discount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateSalesInvoiceRequestBody.class,
                "testmode", testmode,
                "profileId", profileId,
                "status", status,
                "vatScheme", vatScheme,
                "vatMode", vatMode,
                "memo", memo,
                "metadata", metadata,
                "paymentTerm", paymentTerm,
                "paymentDetails", paymentDetails,
                "emailDetails", emailDetails,
                "customerId", customerId,
                "mandateId", mandateId,
                "recipientIdentifier", recipientIdentifier,
                "recipient", recipient,
                "lines", lines,
                "discount", discount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<Boolean> testmode = JsonNullable.undefined();

        private JsonNullable<String> profileId = JsonNullable.undefined();

        private Status status;

        private Optional<? extends VatScheme> vatScheme = Optional.empty();

        private Optional<? extends VatMode> vatMode = Optional.empty();

        private JsonNullable<String> memo = JsonNullable.undefined();

        private JsonNullable<? extends CreateSalesInvoiceMetadata> metadata = JsonNullable.undefined();

        private JsonNullable<? extends PaymentTerm> paymentTerm = JsonNullable.undefined();

        private JsonNullable<? extends PaymentDetails> paymentDetails = JsonNullable.undefined();

        private JsonNullable<? extends EmailDetails> emailDetails = JsonNullable.undefined();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> mandateId = Optional.empty();

        private String recipientIdentifier;

        private Optional<? extends Recipient> recipient = Optional.empty();

        private Optional<? extends List<CreateSalesInvoiceLines>> lines = Optional.empty();

        private JsonNullable<? extends CreateSalesInvoiceDiscount> discount = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Whether to create the entity in test mode or live mode.
         * 
         * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
         * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
         * `testmode` to `true`.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Whether to create the entity in test mode or live mode.
         * 
         * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
         * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
         * `testmode` to `true`.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }


        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
         * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
         * required.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = JsonNullable.of(profileId);
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
         * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
         * required.
         */
        public Builder profileId(JsonNullable<String> profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }


        /**
         * The status for the invoice to end up in.
         * 
         * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
         * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
         * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
         * 
         * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
         * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
         * 
         * <p>Dependent parameters:
         *   - `paymentDetails` is required if invoice should be set directly to `paid`
         *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
         *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
         */
        public Builder vatScheme(VatScheme vatScheme) {
            Utils.checkNotNull(vatScheme, "vatScheme");
            this.vatScheme = Optional.ofNullable(vatScheme);
            return this;
        }

        /**
         * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
         */
        public Builder vatScheme(Optional<? extends VatScheme> vatScheme) {
            Utils.checkNotNull(vatScheme, "vatScheme");
            this.vatScheme = vatScheme;
            return this;
        }


        /**
         * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
         * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
         */
        public Builder vatMode(VatMode vatMode) {
            Utils.checkNotNull(vatMode, "vatMode");
            this.vatMode = Optional.ofNullable(vatMode);
            return this;
        }

        /**
         * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on top of the
         * price. `inclusive` means the prices you are providing to us already contain the VAT you want to apply.
         */
        public Builder vatMode(Optional<? extends VatMode> vatMode) {
            Utils.checkNotNull(vatMode, "vatMode");
            this.vatMode = vatMode;
            return this;
        }


        /**
         * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
         */
        public Builder memo(String memo) {
            Utils.checkNotNull(memo, "memo");
            this.memo = JsonNullable.of(memo);
            return this;
        }

        /**
         * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
         */
        public Builder memo(JsonNullable<String> memo) {
            Utils.checkNotNull(memo, "memo");
            this.memo = memo;
            return this;
        }


        /**
         * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(CreateSalesInvoiceMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends CreateSalesInvoiceMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * The payment term to be set on the invoice.
         */
        public Builder paymentTerm(PaymentTerm paymentTerm) {
            Utils.checkNotNull(paymentTerm, "paymentTerm");
            this.paymentTerm = JsonNullable.of(paymentTerm);
            return this;
        }

        /**
         * The payment term to be set on the invoice.
         */
        public Builder paymentTerm(JsonNullable<? extends PaymentTerm> paymentTerm) {
            Utils.checkNotNull(paymentTerm, "paymentTerm");
            this.paymentTerm = paymentTerm;
            return this;
        }


        /**
         * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
         * provided details. Required for `paid` status.
         */
        public Builder paymentDetails(PaymentDetails paymentDetails) {
            Utils.checkNotNull(paymentDetails, "paymentDetails");
            this.paymentDetails = JsonNullable.of(paymentDetails);
            return this;
        }

        /**
         * Used when setting an invoice to status of `paid`, and will store a payment that fully pays the invoice with the
         * provided details. Required for `paid` status.
         */
        public Builder paymentDetails(JsonNullable<? extends PaymentDetails> paymentDetails) {
            Utils.checkNotNull(paymentDetails, "paymentDetails");
            this.paymentDetails = paymentDetails;
            return this;
        }


        /**
         * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
         * recipient with the provided `subject` and `body`. Required for `issued` status.
         */
        public Builder emailDetails(EmailDetails emailDetails) {
            Utils.checkNotNull(emailDetails, "emailDetails");
            this.emailDetails = JsonNullable.of(emailDetails);
            return this;
        }

        /**
         * Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
         * recipient with the provided `subject` and `body`. Required for `issued` status.
         */
        public Builder emailDetails(JsonNullable<? extends EmailDetails> emailDetails) {
            Utils.checkNotNull(emailDetails, "emailDetails");
            this.emailDetails = emailDetails;
            return this;
        }


        /**
         * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
         * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * The identifier referring to the [customer](get-customer) you want to attempt an automated payment for. If
         * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
         */
        public Builder customerId(Optional<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
         * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
         */
        public Builder mandateId(String mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = Optional.ofNullable(mandateId);
            return this;
        }

        /**
         * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If provided,
         * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
         */
        public Builder mandateId(Optional<String> mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = mandateId;
            return this;
        }


        /**
         * An identifier tied to the recipient data. This should be a unique value based on data your system contains,
         * so that both you and us know who we're referring to. It is a value you provide to us so that recipient management
         * is not required to send a first invoice to a recipient.
         */
        public Builder recipientIdentifier(String recipientIdentifier) {
            Utils.checkNotNull(recipientIdentifier, "recipientIdentifier");
            this.recipientIdentifier = recipientIdentifier;
            return this;
        }


        public Builder recipient(Recipient recipient) {
            Utils.checkNotNull(recipient, "recipient");
            this.recipient = Optional.ofNullable(recipient);
            return this;
        }

        public Builder recipient(Optional<? extends Recipient> recipient) {
            Utils.checkNotNull(recipient, "recipient");
            this.recipient = recipient;
            return this;
        }


        /**
         * Provide the line items for the invoice. Each line contains details such as a description of the item
         * ordered and its price.
         * 
         * <p>All lines must have the same currency as the invoice.
         */
        public Builder lines(List<CreateSalesInvoiceLines> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = Optional.ofNullable(lines);
            return this;
        }

        /**
         * Provide the line items for the invoice. Each line contains details such as a description of the item
         * ordered and its price.
         * 
         * <p>All lines must have the same currency as the invoice.
         */
        public Builder lines(Optional<? extends List<CreateSalesInvoiceLines>> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = lines;
            return this;
        }


        /**
         * The discount to be applied to the entire invoice, applied on top of any line item discounts.
         */
        public Builder discount(CreateSalesInvoiceDiscount discount) {
            Utils.checkNotNull(discount, "discount");
            this.discount = JsonNullable.of(discount);
            return this;
        }

        /**
         * The discount to be applied to the entire invoice, applied on top of any line item discounts.
         */
        public Builder discount(JsonNullable<? extends CreateSalesInvoiceDiscount> discount) {
            Utils.checkNotNull(discount, "discount");
            this.discount = discount;
            return this;
        }

        public CreateSalesInvoiceRequestBody build() {

            return new CreateSalesInvoiceRequestBody(
                testmode, profileId, status,
                vatScheme, vatMode, memo,
                metadata, paymentTerm, paymentDetails,
                emailDetails, customerId, mandateId,
                recipientIdentifier, recipient, lines,
                discount);
        }

    }
}
