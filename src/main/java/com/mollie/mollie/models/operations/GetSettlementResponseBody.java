/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
/**
 * GetSettlementResponseBody - The settlement object.
 */

public class GetSettlementResponseBody {

    /**
     * Indicates the response contains a settlement object. Will always contain the string `settlement` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this settlement. Example: `stl_jDk30akdN`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The settlement's bank reference, as found in your Mollie account and on your bank statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private Optional<String> reference;

    /**
     * The date on which the settlement was settled, in ISO 8601 format.
     * 
     * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement date is available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settledAt")
    private JsonNullable<String> settledAt;

    /**
     * The status of the settlement.
     * 
     * * `open` — The settlement has not been closed yet
     * * `pending` — The settlement has been closed and is being processed
     * * `paidout` — The settlement has been paid out
     * * `failed` — The settlement could not be paid out
     * 
     * Possible values: `open` `pending` `paidout` `failed`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * The total amount of the settlement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends GetSettlementAmount> amount;

    /**
     * The balance token that the settlement was settled to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balanceId")
    private Optional<String> balanceId;

    /**
     * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These transactions are grouped into 'period' objects — one for each calendar month.
     * 
     * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
     * 
     * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will look as follows: `{"2024": {"04": {...}, "05": {...&rbrace;&rbrace;}`.
     * 
     * Each period object will contain the following fields:
     * * `revenue` — An array of revenue objects containing the total revenue for each payment method during this period
     * * `costs` — An array of cost objects, describing the fees withheld for each payment method during this period
     * * `invoiceId` — The ID of the invoice created for this period, if the invoice has been created yet
     * 
     * Each `revenue` object has the following fields:
     * * `description` — A description of the revenue subtotal
     * * `method` — The payment method, if applicable
     * * `count` — The number of payments
     * * `amountNet` — The net total of received funds, i.e. excluding VAT
     * * `amountVat` — The applicable VAT
     * * `amountGross` — The gross total of received funds, i.e. including VAT
     * 
     * Each `cost` object has the following fields:
     * * `description` — A description of the cost subtotal
     * * `method` — The payment method, if applicable
     * * `count` — The number of fees
     * * `rate` — The service rates, further divided into `fixed` and `percentage` costs
     * * `amountNet` — The net total cost, i.e. excluding VAT
     * * `amountVat` — The applicable VAT
     * * `amountGross` — The gross total cost, i.e. including VAT
     * 
     * The example response should give a good idea of what this looks like in practise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("periods")
    private Optional<? extends Periods> periods;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends GetSettlementLinks> links;

    @JsonCreator
    public GetSettlementResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("reference") Optional<String> reference,
            @JsonProperty("settledAt") JsonNullable<String> settledAt,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("amount") Optional<? extends GetSettlementAmount> amount,
            @JsonProperty("balanceId") Optional<String> balanceId,
            @JsonProperty("periods") Optional<? extends Periods> periods,
            @JsonProperty("_links") Optional<? extends GetSettlementLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(settledAt, "settledAt");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(balanceId, "balanceId");
        Utils.checkNotNull(periods, "periods");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.reference = reference;
        this.settledAt = settledAt;
        this.status = status;
        this.amount = amount;
        this.balanceId = balanceId;
        this.periods = periods;
        this.links = links;
    }
    
    public GetSettlementResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a settlement object. Will always contain the string `settlement` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this settlement. Example: `stl_jDk30akdN`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The settlement's bank reference, as found in your Mollie account and on your bank statement.
     */
    @JsonIgnore
    public Optional<String> reference() {
        return reference;
    }

    /**
     * The date on which the settlement was settled, in ISO 8601 format.
     * 
     * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement date is available.
     */
    @JsonIgnore
    public JsonNullable<String> settledAt() {
        return settledAt;
    }

    /**
     * The status of the settlement.
     * 
     * * `open` — The settlement has not been closed yet
     * * `pending` — The settlement has been closed and is being processed
     * * `paidout` — The settlement has been paid out
     * * `failed` — The settlement could not be paid out
     * 
     * Possible values: `open` `pending` `paidout` `failed`
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * The total amount of the settlement.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetSettlementAmount> amount() {
        return (Optional<GetSettlementAmount>) amount;
    }

    /**
     * The balance token that the settlement was settled to.
     */
    @JsonIgnore
    public Optional<String> balanceId() {
        return balanceId;
    }

    /**
     * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These transactions are grouped into 'period' objects — one for each calendar month.
     * 
     * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
     * 
     * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will look as follows: `{"2024": {"04": {...}, "05": {...&rbrace;&rbrace;}`.
     * 
     * Each period object will contain the following fields:
     * * `revenue` — An array of revenue objects containing the total revenue for each payment method during this period
     * * `costs` — An array of cost objects, describing the fees withheld for each payment method during this period
     * * `invoiceId` — The ID of the invoice created for this period, if the invoice has been created yet
     * 
     * Each `revenue` object has the following fields:
     * * `description` — A description of the revenue subtotal
     * * `method` — The payment method, if applicable
     * * `count` — The number of payments
     * * `amountNet` — The net total of received funds, i.e. excluding VAT
     * * `amountVat` — The applicable VAT
     * * `amountGross` — The gross total of received funds, i.e. including VAT
     * 
     * Each `cost` object has the following fields:
     * * `description` — A description of the cost subtotal
     * * `method` — The payment method, if applicable
     * * `count` — The number of fees
     * * `rate` — The service rates, further divided into `fixed` and `percentage` costs
     * * `amountNet` — The net total cost, i.e. excluding VAT
     * * `amountVat` — The applicable VAT
     * * `amountGross` — The gross total cost, i.e. including VAT
     * 
     * The example response should give a good idea of what this looks like in practise.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Periods> periods() {
        return (Optional<Periods>) periods;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetSettlementLinks> links() {
        return (Optional<GetSettlementLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates the response contains a settlement object. Will always contain the string `settlement` for this endpoint.
     */
    public GetSettlementResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a settlement object. Will always contain the string `settlement` for this endpoint.
     */
    public GetSettlementResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this settlement. Example: `stl_jDk30akdN`.
     */
    public GetSettlementResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The identifier uniquely referring to this settlement. Example: `stl_jDk30akdN`.
     */
    public GetSettlementResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The settlement's bank reference, as found in your Mollie account and on your bank statement.
     */
    public GetSettlementResponseBody withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = Optional.ofNullable(reference);
        return this;
    }

    /**
     * The settlement's bank reference, as found in your Mollie account and on your bank statement.
     */
    public GetSettlementResponseBody withReference(Optional<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * The date on which the settlement was settled, in ISO 8601 format.
     * 
     * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement date is available.
     */
    public GetSettlementResponseBody withSettledAt(String settledAt) {
        Utils.checkNotNull(settledAt, "settledAt");
        this.settledAt = JsonNullable.of(settledAt);
        return this;
    }

    /**
     * The date on which the settlement was settled, in ISO 8601 format.
     * 
     * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement date is available.
     */
    public GetSettlementResponseBody withSettledAt(JsonNullable<String> settledAt) {
        Utils.checkNotNull(settledAt, "settledAt");
        this.settledAt = settledAt;
        return this;
    }

    /**
     * The status of the settlement.
     * 
     * * `open` — The settlement has not been closed yet
     * * `pending` — The settlement has been closed and is being processed
     * * `paidout` — The settlement has been paid out
     * * `failed` — The settlement could not be paid out
     * 
     * Possible values: `open` `pending` `paidout` `failed`
     */
    public GetSettlementResponseBody withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the settlement.
     * 
     * * `open` — The settlement has not been closed yet
     * * `pending` — The settlement has been closed and is being processed
     * * `paidout` — The settlement has been paid out
     * * `failed` — The settlement could not be paid out
     * 
     * Possible values: `open` `pending` `paidout` `failed`
     */
    public GetSettlementResponseBody withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The total amount of the settlement.
     */
    public GetSettlementResponseBody withAmount(GetSettlementAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The total amount of the settlement.
     */
    public GetSettlementResponseBody withAmount(Optional<? extends GetSettlementAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The balance token that the settlement was settled to.
     */
    public GetSettlementResponseBody withBalanceId(String balanceId) {
        Utils.checkNotNull(balanceId, "balanceId");
        this.balanceId = Optional.ofNullable(balanceId);
        return this;
    }

    /**
     * The balance token that the settlement was settled to.
     */
    public GetSettlementResponseBody withBalanceId(Optional<String> balanceId) {
        Utils.checkNotNull(balanceId, "balanceId");
        this.balanceId = balanceId;
        return this;
    }

    /**
     * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These transactions are grouped into 'period' objects — one for each calendar month.
     * 
     * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
     * 
     * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will look as follows: `{"2024": {"04": {...}, "05": {...&rbrace;&rbrace;}`.
     * 
     * Each period object will contain the following fields:
     * * `revenue` — An array of revenue objects containing the total revenue for each payment method during this period
     * * `costs` — An array of cost objects, describing the fees withheld for each payment method during this period
     * * `invoiceId` — The ID of the invoice created for this period, if the invoice has been created yet
     * 
     * Each `revenue` object has the following fields:
     * * `description` — A description of the revenue subtotal
     * * `method` — The payment method, if applicable
     * * `count` — The number of payments
     * * `amountNet` — The net total of received funds, i.e. excluding VAT
     * * `amountVat` — The applicable VAT
     * * `amountGross` — The gross total of received funds, i.e. including VAT
     * 
     * Each `cost` object has the following fields:
     * * `description` — A description of the cost subtotal
     * * `method` — The payment method, if applicable
     * * `count` — The number of fees
     * * `rate` — The service rates, further divided into `fixed` and `percentage` costs
     * * `amountNet` — The net total cost, i.e. excluding VAT
     * * `amountVat` — The applicable VAT
     * * `amountGross` — The gross total cost, i.e. including VAT
     * 
     * The example response should give a good idea of what this looks like in practise.
     */
    public GetSettlementResponseBody withPeriods(Periods periods) {
        Utils.checkNotNull(periods, "periods");
        this.periods = Optional.ofNullable(periods);
        return this;
    }

    /**
     * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These transactions are grouped into 'period' objects — one for each calendar month.
     * 
     * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
     * 
     * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will look as follows: `{"2024": {"04": {...}, "05": {...&rbrace;&rbrace;}`.
     * 
     * Each period object will contain the following fields:
     * * `revenue` — An array of revenue objects containing the total revenue for each payment method during this period
     * * `costs` — An array of cost objects, describing the fees withheld for each payment method during this period
     * * `invoiceId` — The ID of the invoice created for this period, if the invoice has been created yet
     * 
     * Each `revenue` object has the following fields:
     * * `description` — A description of the revenue subtotal
     * * `method` — The payment method, if applicable
     * * `count` — The number of payments
     * * `amountNet` — The net total of received funds, i.e. excluding VAT
     * * `amountVat` — The applicable VAT
     * * `amountGross` — The gross total of received funds, i.e. including VAT
     * 
     * Each `cost` object has the following fields:
     * * `description` — A description of the cost subtotal
     * * `method` — The payment method, if applicable
     * * `count` — The number of fees
     * * `rate` — The service rates, further divided into `fixed` and `percentage` costs
     * * `amountNet` — The net total cost, i.e. excluding VAT
     * * `amountVat` — The applicable VAT
     * * `amountGross` — The gross total cost, i.e. including VAT
     * 
     * The example response should give a good idea of what this looks like in practise.
     */
    public GetSettlementResponseBody withPeriods(Optional<? extends Periods> periods) {
        Utils.checkNotNull(periods, "periods");
        this.periods = periods;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetSettlementResponseBody withLinks(GetSettlementLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetSettlementResponseBody withLinks(Optional<? extends GetSettlementLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSettlementResponseBody other = (GetSettlementResponseBody) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.settledAt, other.settledAt) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.balanceId, other.balanceId) &&
            Objects.deepEquals(this.periods, other.periods) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            reference,
            settledAt,
            status,
            amount,
            balanceId,
            periods,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSettlementResponseBody.class,
                "resource", resource,
                "id", id,
                "reference", reference,
                "settledAt", settledAt,
                "status", status,
                "amount", amount,
                "balanceId", balanceId,
                "periods", periods,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> reference = Optional.empty();
 
        private JsonNullable<String> settledAt = JsonNullable.undefined();
 
        private Optional<String> status = Optional.empty();
 
        private Optional<? extends GetSettlementAmount> amount = Optional.empty();
 
        private Optional<String> balanceId = Optional.empty();
 
        private Optional<? extends Periods> periods = Optional.empty();
 
        private Optional<? extends GetSettlementLinks> links = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a settlement object. Will always contain the string `settlement` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a settlement object. Will always contain the string `settlement` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this settlement. Example: `stl_jDk30akdN`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this settlement. Example: `stl_jDk30akdN`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The settlement's bank reference, as found in your Mollie account and on your bank statement.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = Optional.ofNullable(reference);
            return this;
        }

        /**
         * The settlement's bank reference, as found in your Mollie account and on your bank statement.
         */
        public Builder reference(Optional<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        /**
         * The date on which the settlement was settled, in ISO 8601 format.
         * 
         * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement date is available.
         */
        public Builder settledAt(String settledAt) {
            Utils.checkNotNull(settledAt, "settledAt");
            this.settledAt = JsonNullable.of(settledAt);
            return this;
        }

        /**
         * The date on which the settlement was settled, in ISO 8601 format.
         * 
         * For an [open settlement](get-open-settlement) or for the [next settlement](get-next-settlement), no settlement date is available.
         */
        public Builder settledAt(JsonNullable<String> settledAt) {
            Utils.checkNotNull(settledAt, "settledAt");
            this.settledAt = settledAt;
            return this;
        }

        /**
         * The status of the settlement.
         * 
         * * `open` — The settlement has not been closed yet
         * * `pending` — The settlement has been closed and is being processed
         * * `paidout` — The settlement has been paid out
         * * `failed` — The settlement could not be paid out
         * 
         * Possible values: `open` `pending` `paidout` `failed`
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the settlement.
         * 
         * * `open` — The settlement has not been closed yet
         * * `pending` — The settlement has been closed and is being processed
         * * `paidout` — The settlement has been paid out
         * * `failed` — The settlement could not be paid out
         * 
         * Possible values: `open` `pending` `paidout` `failed`
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The total amount of the settlement.
         */
        public Builder amount(GetSettlementAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The total amount of the settlement.
         */
        public Builder amount(Optional<? extends GetSettlementAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The balance token that the settlement was settled to.
         */
        public Builder balanceId(String balanceId) {
            Utils.checkNotNull(balanceId, "balanceId");
            this.balanceId = Optional.ofNullable(balanceId);
            return this;
        }

        /**
         * The balance token that the settlement was settled to.
         */
        public Builder balanceId(Optional<String> balanceId) {
            Utils.checkNotNull(balanceId, "balanceId");
            this.balanceId = balanceId;
            return this;
        }

        /**
         * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These transactions are grouped into 'period' objects — one for each calendar month.
         * 
         * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
         * 
         * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will look as follows: `{"2024": {"04": {...}, "05": {...&rbrace;&rbrace;}`.
         * 
         * Each period object will contain the following fields:
         * * `revenue` — An array of revenue objects containing the total revenue for each payment method during this period
         * * `costs` — An array of cost objects, describing the fees withheld for each payment method during this period
         * * `invoiceId` — The ID of the invoice created for this period, if the invoice has been created yet
         * 
         * Each `revenue` object has the following fields:
         * * `description` — A description of the revenue subtotal
         * * `method` — The payment method, if applicable
         * * `count` — The number of payments
         * * `amountNet` — The net total of received funds, i.e. excluding VAT
         * * `amountVat` — The applicable VAT
         * * `amountGross` — The gross total of received funds, i.e. including VAT
         * 
         * Each `cost` object has the following fields:
         * * `description` — A description of the cost subtotal
         * * `method` — The payment method, if applicable
         * * `count` — The number of fees
         * * `rate` — The service rates, further divided into `fixed` and `percentage` costs
         * * `amountNet` — The net total cost, i.e. excluding VAT
         * * `amountVat` — The applicable VAT
         * * `amountGross` — The gross total cost, i.e. including VAT
         * 
         * The example response should give a good idea of what this looks like in practise.
         */
        public Builder periods(Periods periods) {
            Utils.checkNotNull(periods, "periods");
            this.periods = Optional.ofNullable(periods);
            return this;
        }

        /**
         * For bookkeeping purposes, the settlement includes an overview of transactions included in the settlement. These transactions are grouped into 'period' objects — one for each calendar month.
         * 
         * For example, if a settlement includes funds from 15 April until 4 May, it will include two period objects. One for all transactions processed between 15 April and 30 April, and one for all transactions between 1 May and 4 May.
         * 
         * Period objects are grouped by year, and then by month. So in the above example, the full `periods` collection will look as follows: `{"2024": {"04": {...}, "05": {...&rbrace;&rbrace;}`.
         * 
         * Each period object will contain the following fields:
         * * `revenue` — An array of revenue objects containing the total revenue for each payment method during this period
         * * `costs` — An array of cost objects, describing the fees withheld for each payment method during this period
         * * `invoiceId` — The ID of the invoice created for this period, if the invoice has been created yet
         * 
         * Each `revenue` object has the following fields:
         * * `description` — A description of the revenue subtotal
         * * `method` — The payment method, if applicable
         * * `count` — The number of payments
         * * `amountNet` — The net total of received funds, i.e. excluding VAT
         * * `amountVat` — The applicable VAT
         * * `amountGross` — The gross total of received funds, i.e. including VAT
         * 
         * Each `cost` object has the following fields:
         * * `description` — A description of the cost subtotal
         * * `method` — The payment method, if applicable
         * * `count` — The number of fees
         * * `rate` — The service rates, further divided into `fixed` and `percentage` costs
         * * `amountNet` — The net total cost, i.e. excluding VAT
         * * `amountVat` — The applicable VAT
         * * `amountGross` — The gross total cost, i.e. including VAT
         * 
         * The example response should give a good idea of what this looks like in practise.
         */
        public Builder periods(Optional<? extends Periods> periods) {
            Utils.checkNotNull(periods, "periods");
            this.periods = periods;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetSettlementLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends GetSettlementLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public GetSettlementResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }            return new GetSettlementResponseBody(
                resource,
                id,
                reference,
                settledAt,
                status,
                amount,
                balanceId,
                periods,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"settlement\"",
                        new TypeReference<Optional<String>>() {});
    }
}

