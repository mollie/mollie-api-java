/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * UpdateSalesInvoiceSalesInvoicesEmailDetails
 * 
 * <p>Used when setting an invoice to status of either `issued` or `paid`. Will be used to issue the invoice to the
 * recipient with the provided `subject` and `body`. Required for `issued` status.
 */
public class UpdateSalesInvoiceSalesInvoicesEmailDetails {
    /**
     * The subject of the email to be sent.
     */
    @JsonProperty("subject")
    private String subject;

    /**
     * The body of the email to be sent. To add newline characters, you can use `\n`.
     */
    @JsonProperty("body")
    private String body;

    @JsonCreator
    public UpdateSalesInvoiceSalesInvoicesEmailDetails(
            @JsonProperty("subject") String subject,
            @JsonProperty("body") String body) {
        Utils.checkNotNull(subject, "subject");
        Utils.checkNotNull(body, "body");
        this.subject = subject;
        this.body = body;
    }

    /**
     * The subject of the email to be sent.
     */
    @JsonIgnore
    public String subject() {
        return subject;
    }

    /**
     * The body of the email to be sent. To add newline characters, you can use `\n`.
     */
    @JsonIgnore
    public String body() {
        return body;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The subject of the email to be sent.
     */
    public UpdateSalesInvoiceSalesInvoicesEmailDetails withSubject(String subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = subject;
        return this;
    }

    /**
     * The body of the email to be sent. To add newline characters, you can use `\n`.
     */
    public UpdateSalesInvoiceSalesInvoicesEmailDetails withBody(String body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateSalesInvoiceSalesInvoicesEmailDetails other = (UpdateSalesInvoiceSalesInvoicesEmailDetails) o;
        return 
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.body, other.body);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            subject, body);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateSalesInvoiceSalesInvoicesEmailDetails.class,
                "subject", subject,
                "body", body);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String subject;

        private String body;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The subject of the email to be sent.
         */
        public Builder subject(String subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = subject;
            return this;
        }


        /**
         * The body of the email to be sent. To add newline characters, you can use `\n`.
         */
        public Builder body(String body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }

        public UpdateSalesInvoiceSalesInvoicesEmailDetails build() {

            return new UpdateSalesInvoiceSalesInvoicesEmailDetails(
                subject, body);
        }

    }
}
