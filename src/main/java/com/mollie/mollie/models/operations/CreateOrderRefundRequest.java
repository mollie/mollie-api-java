/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class CreateOrderRefundRequest {

    /**
     * Provide the ID of the related order.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=orderId")
    private String orderId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends CreateOrderRefundRequestBody> requestBody;

    @JsonCreator
    public CreateOrderRefundRequest(
            String orderId,
            Optional<? extends CreateOrderRefundRequestBody> requestBody) {
        Utils.checkNotNull(orderId, "orderId");
        Utils.checkNotNull(requestBody, "requestBody");
        this.orderId = orderId;
        this.requestBody = requestBody;
    }
    
    public CreateOrderRefundRequest(
            String orderId) {
        this(orderId, Optional.empty());
    }

    /**
     * Provide the ID of the related order.
     */
    @JsonIgnore
    public String orderId() {
        return orderId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundRequestBody> requestBody() {
        return (Optional<CreateOrderRefundRequestBody>) requestBody;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Provide the ID of the related order.
     */
    public CreateOrderRefundRequest withOrderId(String orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = orderId;
        return this;
    }

    public CreateOrderRefundRequest withRequestBody(CreateOrderRefundRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }

    public CreateOrderRefundRequest withRequestBody(Optional<? extends CreateOrderRefundRequestBody> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOrderRefundRequest other = (CreateOrderRefundRequest) o;
        return 
            Objects.deepEquals(this.orderId, other.orderId) &&
            Objects.deepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            orderId,
            requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOrderRefundRequest.class,
                "orderId", orderId,
                "requestBody", requestBody);
    }
    
    public final static class Builder {
 
        private String orderId;
 
        private Optional<? extends CreateOrderRefundRequestBody> requestBody = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Provide the ID of the related order.
         */
        public Builder orderId(String orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = orderId;
            return this;
        }

        public Builder requestBody(CreateOrderRefundRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends CreateOrderRefundRequestBody> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }
        
        public CreateOrderRefundRequest build() {
            return new CreateOrderRefundRequest(
                orderId,
                requestBody);
        }
    }
}

