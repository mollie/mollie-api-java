/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class ReturnedTransfer {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferId")
    private Optional<String> transferId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementId")
    private Optional<String> settlementId;

    @JsonCreator
    public ReturnedTransfer(
            @JsonProperty("transferId") Optional<String> transferId,
            @JsonProperty("settlementId") Optional<String> settlementId) {
        Utils.checkNotNull(transferId, "transferId");
        Utils.checkNotNull(settlementId, "settlementId");
        this.transferId = transferId;
        this.settlementId = settlementId;
    }
    
    public ReturnedTransfer() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> transferId() {
        return transferId;
    }

    @JsonIgnore
    public Optional<String> settlementId() {
        return settlementId;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ReturnedTransfer withTransferId(String transferId) {
        Utils.checkNotNull(transferId, "transferId");
        this.transferId = Optional.ofNullable(transferId);
        return this;
    }


    public ReturnedTransfer withTransferId(Optional<String> transferId) {
        Utils.checkNotNull(transferId, "transferId");
        this.transferId = transferId;
        return this;
    }

    public ReturnedTransfer withSettlementId(String settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = Optional.ofNullable(settlementId);
        return this;
    }


    public ReturnedTransfer withSettlementId(Optional<String> settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = settlementId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReturnedTransfer other = (ReturnedTransfer) o;
        return 
            Utils.enhancedDeepEquals(this.transferId, other.transferId) &&
            Utils.enhancedDeepEquals(this.settlementId, other.settlementId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            transferId, settlementId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReturnedTransfer.class,
                "transferId", transferId,
                "settlementId", settlementId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> transferId = Optional.empty();

        private Optional<String> settlementId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder transferId(String transferId) {
            Utils.checkNotNull(transferId, "transferId");
            this.transferId = Optional.ofNullable(transferId);
            return this;
        }

        public Builder transferId(Optional<String> transferId) {
            Utils.checkNotNull(transferId, "transferId");
            this.transferId = transferId;
            return this;
        }


        public Builder settlementId(String settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = Optional.ofNullable(settlementId);
            return this;
        }

        public Builder settlementId(Optional<String> settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = settlementId;
            return this;
        }

        public ReturnedTransfer build() {

            return new ReturnedTransfer(
                transferId, settlementId);
        }

    }
}
