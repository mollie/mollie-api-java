/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * ListCustomerPaymentsDestination
 * 
 * <p>The destination of this portion of the payment.
 */
public class ListCustomerPaymentsDestination {

    /**
     * The type of destination. Currently only the destination type `organization` is supported.
     * 
     * <p>Possible values: `organization`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * Required for destination type `organization`. The ID of the connected organization the funds should be routed to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationId")
    private Optional<String> organizationId;

    @JsonCreator
    public ListCustomerPaymentsDestination(
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("organizationId") Optional<String> organizationId) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(organizationId, "organizationId");
        this.type = type;
        this.organizationId = organizationId;
    }
    
    public ListCustomerPaymentsDestination() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The type of destination. Currently only the destination type `organization` is supported.
     * 
     * <p>Possible values: `organization`
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * Required for destination type `organization`. The ID of the connected organization the funds should be routed to.
     */
    @JsonIgnore
    public Optional<String> organizationId() {
        return organizationId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The type of destination. Currently only the destination type `organization` is supported.
     * 
     * <p>Possible values: `organization`
     */
    public ListCustomerPaymentsDestination withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of destination. Currently only the destination type `organization` is supported.
     * 
     * <p>Possible values: `organization`
     */
    public ListCustomerPaymentsDestination withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Required for destination type `organization`. The ID of the connected organization the funds should be routed to.
     */
    public ListCustomerPaymentsDestination withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }

    /**
     * Required for destination type `organization`. The ID of the connected organization the funds should be routed to.
     */
    public ListCustomerPaymentsDestination withOrganizationId(Optional<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListCustomerPaymentsDestination other = (ListCustomerPaymentsDestination) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.organizationId, other.organizationId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            organizationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListCustomerPaymentsDestination.class,
                "type", type,
                "organizationId", organizationId);
    }
    
    public final static class Builder {
 
        private Optional<String> type = Optional.empty();
 
        private Optional<String> organizationId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of destination. Currently only the destination type `organization` is supported.
         * 
         * <p>Possible values: `organization`
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of destination. Currently only the destination type `organization` is supported.
         * 
         * <p>Possible values: `organization`
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Required for destination type `organization`. The ID of the connected organization the funds should be routed to.
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        /**
         * Required for destination type `organization`. The ID of the connected organization the funds should be routed to.
         */
        public Builder organizationId(Optional<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }
        
        public ListCustomerPaymentsDestination build() {
            return new ListCustomerPaymentsDestination(
                type,
                organizationId);
        }
    }
}
