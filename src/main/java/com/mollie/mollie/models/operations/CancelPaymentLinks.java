/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * CancelPaymentLinks
 * 
 * <p>An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
public class CancelPaymentLinks {

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("self")
    private Optional<? extends CancelPaymentSelf> self;

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkout")
    private JsonNullable<? extends CancelPaymentCheckout> checkout;

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobileAppCheckout")
    private JsonNullable<? extends CancelPaymentMobileAppCheckout> mobileAppCheckout;

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("changePaymentState")
    private JsonNullable<? extends CancelPaymentChangePaymentState> changePaymentState;

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dashboard")
    private Optional<? extends CancelPaymentDashboard> dashboard;

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunds")
    private JsonNullable<? extends CancelPaymentRefunds> refunds;

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargebacks")
    private Optional<? extends CancelPaymentChargebacks> chargebacks;

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("captures")
    private Optional<? extends CancelPaymentCaptures> captures;

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement")
    private JsonNullable<? extends CancelPaymentSettlement> settlement;

    /**
     * The API resource URL of the [customer](get-customer).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private JsonNullable<? extends CancelPaymentCustomer> customer;

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandate")
    private JsonNullable<? extends CancelPaymentMandate> mandate;

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription")
    private JsonNullable<? extends CancelPaymentSubscription> subscription;

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order")
    private JsonNullable<? extends CancelPaymentOrder> order;

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terminal")
    private JsonNullable<? extends CancelPaymentTerminal> terminal;

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentation")
    private Optional<? extends CancelPaymentDocumentation> documentation;

    @JsonCreator
    public CancelPaymentLinks(
            @JsonProperty("self") Optional<? extends CancelPaymentSelf> self,
            @JsonProperty("checkout") JsonNullable<? extends CancelPaymentCheckout> checkout,
            @JsonProperty("mobileAppCheckout") JsonNullable<? extends CancelPaymentMobileAppCheckout> mobileAppCheckout,
            @JsonProperty("changePaymentState") JsonNullable<? extends CancelPaymentChangePaymentState> changePaymentState,
            @JsonProperty("dashboard") Optional<? extends CancelPaymentDashboard> dashboard,
            @JsonProperty("refunds") JsonNullable<? extends CancelPaymentRefunds> refunds,
            @JsonProperty("chargebacks") Optional<? extends CancelPaymentChargebacks> chargebacks,
            @JsonProperty("captures") Optional<? extends CancelPaymentCaptures> captures,
            @JsonProperty("settlement") JsonNullable<? extends CancelPaymentSettlement> settlement,
            @JsonProperty("customer") JsonNullable<? extends CancelPaymentCustomer> customer,
            @JsonProperty("mandate") JsonNullable<? extends CancelPaymentMandate> mandate,
            @JsonProperty("subscription") JsonNullable<? extends CancelPaymentSubscription> subscription,
            @JsonProperty("order") JsonNullable<? extends CancelPaymentOrder> order,
            @JsonProperty("terminal") JsonNullable<? extends CancelPaymentTerminal> terminal,
            @JsonProperty("documentation") Optional<? extends CancelPaymentDocumentation> documentation) {
        Utils.checkNotNull(self, "self");
        Utils.checkNotNull(checkout, "checkout");
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        Utils.checkNotNull(dashboard, "dashboard");
        Utils.checkNotNull(refunds, "refunds");
        Utils.checkNotNull(chargebacks, "chargebacks");
        Utils.checkNotNull(captures, "captures");
        Utils.checkNotNull(settlement, "settlement");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(mandate, "mandate");
        Utils.checkNotNull(subscription, "subscription");
        Utils.checkNotNull(order, "order");
        Utils.checkNotNull(terminal, "terminal");
        Utils.checkNotNull(documentation, "documentation");
        this.self = self;
        this.checkout = checkout;
        this.mobileAppCheckout = mobileAppCheckout;
        this.changePaymentState = changePaymentState;
        this.dashboard = dashboard;
        this.refunds = refunds;
        this.chargebacks = chargebacks;
        this.captures = captures;
        this.settlement = settlement;
        this.customer = customer;
        this.mandate = mandate;
        this.subscription = subscription;
        this.order = order;
        this.terminal = terminal;
        this.documentation = documentation;
    }
    
    public CancelPaymentLinks() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CancelPaymentSelf> self() {
        return (Optional<CancelPaymentSelf>) self;
    }

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CancelPaymentCheckout> checkout() {
        return (JsonNullable<CancelPaymentCheckout>) checkout;
    }

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CancelPaymentMobileAppCheckout> mobileAppCheckout() {
        return (JsonNullable<CancelPaymentMobileAppCheckout>) mobileAppCheckout;
    }

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CancelPaymentChangePaymentState> changePaymentState() {
        return (JsonNullable<CancelPaymentChangePaymentState>) changePaymentState;
    }

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CancelPaymentDashboard> dashboard() {
        return (Optional<CancelPaymentDashboard>) dashboard;
    }

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CancelPaymentRefunds> refunds() {
        return (JsonNullable<CancelPaymentRefunds>) refunds;
    }

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CancelPaymentChargebacks> chargebacks() {
        return (Optional<CancelPaymentChargebacks>) chargebacks;
    }

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CancelPaymentCaptures> captures() {
        return (Optional<CancelPaymentCaptures>) captures;
    }

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CancelPaymentSettlement> settlement() {
        return (JsonNullable<CancelPaymentSettlement>) settlement;
    }

    /**
     * The API resource URL of the [customer](get-customer).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CancelPaymentCustomer> customer() {
        return (JsonNullable<CancelPaymentCustomer>) customer;
    }

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CancelPaymentMandate> mandate() {
        return (JsonNullable<CancelPaymentMandate>) mandate;
    }

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CancelPaymentSubscription> subscription() {
        return (JsonNullable<CancelPaymentSubscription>) subscription;
    }

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CancelPaymentOrder> order() {
        return (JsonNullable<CancelPaymentOrder>) order;
    }

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CancelPaymentTerminal> terminal() {
        return (JsonNullable<CancelPaymentTerminal>) terminal;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CancelPaymentDocumentation> documentation() {
        return (Optional<CancelPaymentDocumentation>) documentation;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public CancelPaymentLinks withSelf(CancelPaymentSelf self) {
        Utils.checkNotNull(self, "self");
        this.self = Optional.ofNullable(self);
        return this;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public CancelPaymentLinks withSelf(Optional<? extends CancelPaymentSelf> self) {
        Utils.checkNotNull(self, "self");
        this.self = self;
        return this;
    }

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    public CancelPaymentLinks withCheckout(CancelPaymentCheckout checkout) {
        Utils.checkNotNull(checkout, "checkout");
        this.checkout = JsonNullable.of(checkout);
        return this;
    }

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    public CancelPaymentLinks withCheckout(JsonNullable<? extends CancelPaymentCheckout> checkout) {
        Utils.checkNotNull(checkout, "checkout");
        this.checkout = checkout;
        return this;
    }

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    public CancelPaymentLinks withMobileAppCheckout(CancelPaymentMobileAppCheckout mobileAppCheckout) {
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        this.mobileAppCheckout = JsonNullable.of(mobileAppCheckout);
        return this;
    }

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    public CancelPaymentLinks withMobileAppCheckout(JsonNullable<? extends CancelPaymentMobileAppCheckout> mobileAppCheckout) {
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        this.mobileAppCheckout = mobileAppCheckout;
        return this;
    }

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
     */
    public CancelPaymentLinks withChangePaymentState(CancelPaymentChangePaymentState changePaymentState) {
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        this.changePaymentState = JsonNullable.of(changePaymentState);
        return this;
    }

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
     */
    public CancelPaymentLinks withChangePaymentState(JsonNullable<? extends CancelPaymentChangePaymentState> changePaymentState) {
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        this.changePaymentState = changePaymentState;
        return this;
    }

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    public CancelPaymentLinks withDashboard(CancelPaymentDashboard dashboard) {
        Utils.checkNotNull(dashboard, "dashboard");
        this.dashboard = Optional.ofNullable(dashboard);
        return this;
    }

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    public CancelPaymentLinks withDashboard(Optional<? extends CancelPaymentDashboard> dashboard) {
        Utils.checkNotNull(dashboard, "dashboard");
        this.dashboard = dashboard;
        return this;
    }

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    public CancelPaymentLinks withRefunds(CancelPaymentRefunds refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = JsonNullable.of(refunds);
        return this;
    }

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    public CancelPaymentLinks withRefunds(JsonNullable<? extends CancelPaymentRefunds> refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = refunds;
        return this;
    }

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
     */
    public CancelPaymentLinks withChargebacks(CancelPaymentChargebacks chargebacks) {
        Utils.checkNotNull(chargebacks, "chargebacks");
        this.chargebacks = Optional.ofNullable(chargebacks);
        return this;
    }

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
     */
    public CancelPaymentLinks withChargebacks(Optional<? extends CancelPaymentChargebacks> chargebacks) {
        Utils.checkNotNull(chargebacks, "chargebacks");
        this.chargebacks = chargebacks;
        return this;
    }

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    public CancelPaymentLinks withCaptures(CancelPaymentCaptures captures) {
        Utils.checkNotNull(captures, "captures");
        this.captures = Optional.ofNullable(captures);
        return this;
    }

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    public CancelPaymentLinks withCaptures(Optional<? extends CancelPaymentCaptures> captures) {
        Utils.checkNotNull(captures, "captures");
        this.captures = captures;
        return this;
    }

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
     */
    public CancelPaymentLinks withSettlement(CancelPaymentSettlement settlement) {
        Utils.checkNotNull(settlement, "settlement");
        this.settlement = JsonNullable.of(settlement);
        return this;
    }

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
     */
    public CancelPaymentLinks withSettlement(JsonNullable<? extends CancelPaymentSettlement> settlement) {
        Utils.checkNotNull(settlement, "settlement");
        this.settlement = settlement;
        return this;
    }

    /**
     * The API resource URL of the [customer](get-customer).
     */
    public CancelPaymentLinks withCustomer(CancelPaymentCustomer customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = JsonNullable.of(customer);
        return this;
    }

    /**
     * The API resource URL of the [customer](get-customer).
     */
    public CancelPaymentLinks withCustomer(JsonNullable<? extends CancelPaymentCustomer> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    public CancelPaymentLinks withMandate(CancelPaymentMandate mandate) {
        Utils.checkNotNull(mandate, "mandate");
        this.mandate = JsonNullable.of(mandate);
        return this;
    }

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    public CancelPaymentLinks withMandate(JsonNullable<? extends CancelPaymentMandate> mandate) {
        Utils.checkNotNull(mandate, "mandate");
        this.mandate = mandate;
        return this;
    }

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    public CancelPaymentLinks withSubscription(CancelPaymentSubscription subscription) {
        Utils.checkNotNull(subscription, "subscription");
        this.subscription = JsonNullable.of(subscription);
        return this;
    }

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    public CancelPaymentLinks withSubscription(JsonNullable<? extends CancelPaymentSubscription> subscription) {
        Utils.checkNotNull(subscription, "subscription");
        this.subscription = subscription;
        return this;
    }

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
     */
    public CancelPaymentLinks withOrder(CancelPaymentOrder order) {
        Utils.checkNotNull(order, "order");
        this.order = JsonNullable.of(order);
        return this;
    }

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
     */
    public CancelPaymentLinks withOrder(JsonNullable<? extends CancelPaymentOrder> order) {
        Utils.checkNotNull(order, "order");
        this.order = order;
        return this;
    }

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
     */
    public CancelPaymentLinks withTerminal(CancelPaymentTerminal terminal) {
        Utils.checkNotNull(terminal, "terminal");
        this.terminal = JsonNullable.of(terminal);
        return this;
    }

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
     */
    public CancelPaymentLinks withTerminal(JsonNullable<? extends CancelPaymentTerminal> terminal) {
        Utils.checkNotNull(terminal, "terminal");
        this.terminal = terminal;
        return this;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public CancelPaymentLinks withDocumentation(CancelPaymentDocumentation documentation) {
        Utils.checkNotNull(documentation, "documentation");
        this.documentation = Optional.ofNullable(documentation);
        return this;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public CancelPaymentLinks withDocumentation(Optional<? extends CancelPaymentDocumentation> documentation) {
        Utils.checkNotNull(documentation, "documentation");
        this.documentation = documentation;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CancelPaymentLinks other = (CancelPaymentLinks) o;
        return 
            Objects.deepEquals(this.self, other.self) &&
            Objects.deepEquals(this.checkout, other.checkout) &&
            Objects.deepEquals(this.mobileAppCheckout, other.mobileAppCheckout) &&
            Objects.deepEquals(this.changePaymentState, other.changePaymentState) &&
            Objects.deepEquals(this.dashboard, other.dashboard) &&
            Objects.deepEquals(this.refunds, other.refunds) &&
            Objects.deepEquals(this.chargebacks, other.chargebacks) &&
            Objects.deepEquals(this.captures, other.captures) &&
            Objects.deepEquals(this.settlement, other.settlement) &&
            Objects.deepEquals(this.customer, other.customer) &&
            Objects.deepEquals(this.mandate, other.mandate) &&
            Objects.deepEquals(this.subscription, other.subscription) &&
            Objects.deepEquals(this.order, other.order) &&
            Objects.deepEquals(this.terminal, other.terminal) &&
            Objects.deepEquals(this.documentation, other.documentation);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            self,
            checkout,
            mobileAppCheckout,
            changePaymentState,
            dashboard,
            refunds,
            chargebacks,
            captures,
            settlement,
            customer,
            mandate,
            subscription,
            order,
            terminal,
            documentation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CancelPaymentLinks.class,
                "self", self,
                "checkout", checkout,
                "mobileAppCheckout", mobileAppCheckout,
                "changePaymentState", changePaymentState,
                "dashboard", dashboard,
                "refunds", refunds,
                "chargebacks", chargebacks,
                "captures", captures,
                "settlement", settlement,
                "customer", customer,
                "mandate", mandate,
                "subscription", subscription,
                "order", order,
                "terminal", terminal,
                "documentation", documentation);
    }
    
    public final static class Builder {
 
        private Optional<? extends CancelPaymentSelf> self = Optional.empty();
 
        private JsonNullable<? extends CancelPaymentCheckout> checkout = JsonNullable.undefined();
 
        private JsonNullable<? extends CancelPaymentMobileAppCheckout> mobileAppCheckout = JsonNullable.undefined();
 
        private JsonNullable<? extends CancelPaymentChangePaymentState> changePaymentState = JsonNullable.undefined();
 
        private Optional<? extends CancelPaymentDashboard> dashboard = Optional.empty();
 
        private JsonNullable<? extends CancelPaymentRefunds> refunds = JsonNullable.undefined();
 
        private Optional<? extends CancelPaymentChargebacks> chargebacks = Optional.empty();
 
        private Optional<? extends CancelPaymentCaptures> captures = Optional.empty();
 
        private JsonNullable<? extends CancelPaymentSettlement> settlement = JsonNullable.undefined();
 
        private JsonNullable<? extends CancelPaymentCustomer> customer = JsonNullable.undefined();
 
        private JsonNullable<? extends CancelPaymentMandate> mandate = JsonNullable.undefined();
 
        private JsonNullable<? extends CancelPaymentSubscription> subscription = JsonNullable.undefined();
 
        private JsonNullable<? extends CancelPaymentOrder> order = JsonNullable.undefined();
 
        private JsonNullable<? extends CancelPaymentTerminal> terminal = JsonNullable.undefined();
 
        private Optional<? extends CancelPaymentDocumentation> documentation = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder self(CancelPaymentSelf self) {
            Utils.checkNotNull(self, "self");
            this.self = Optional.ofNullable(self);
            return this;
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder self(Optional<? extends CancelPaymentSelf> self) {
            Utils.checkNotNull(self, "self");
            this.self = self;
            return this;
        }

        /**
         * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
         */
        public Builder checkout(CancelPaymentCheckout checkout) {
            Utils.checkNotNull(checkout, "checkout");
            this.checkout = JsonNullable.of(checkout);
            return this;
        }

        /**
         * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
         */
        public Builder checkout(JsonNullable<? extends CancelPaymentCheckout> checkout) {
            Utils.checkNotNull(checkout, "checkout");
            this.checkout = checkout;
            return this;
        }

        /**
         * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
         */
        public Builder mobileAppCheckout(CancelPaymentMobileAppCheckout mobileAppCheckout) {
            Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
            this.mobileAppCheckout = JsonNullable.of(mobileAppCheckout);
            return this;
        }

        /**
         * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
         */
        public Builder mobileAppCheckout(JsonNullable<? extends CancelPaymentMobileAppCheckout> mobileAppCheckout) {
            Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
            this.mobileAppCheckout = mobileAppCheckout;
            return this;
        }

        /**
         * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
         * 
         * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
         * 
         * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
         */
        public Builder changePaymentState(CancelPaymentChangePaymentState changePaymentState) {
            Utils.checkNotNull(changePaymentState, "changePaymentState");
            this.changePaymentState = JsonNullable.of(changePaymentState);
            return this;
        }

        /**
         * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
         * 
         * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
         * 
         * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
         */
        public Builder changePaymentState(JsonNullable<? extends CancelPaymentChangePaymentState> changePaymentState) {
            Utils.checkNotNull(changePaymentState, "changePaymentState");
            this.changePaymentState = changePaymentState;
            return this;
        }

        /**
         * Direct link to the payment in the Mollie Dashboard.
         */
        public Builder dashboard(CancelPaymentDashboard dashboard) {
            Utils.checkNotNull(dashboard, "dashboard");
            this.dashboard = Optional.ofNullable(dashboard);
            return this;
        }

        /**
         * Direct link to the payment in the Mollie Dashboard.
         */
        public Builder dashboard(Optional<? extends CancelPaymentDashboard> dashboard) {
            Utils.checkNotNull(dashboard, "dashboard");
            this.dashboard = dashboard;
            return this;
        }

        /**
         * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
         */
        public Builder refunds(CancelPaymentRefunds refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = JsonNullable.of(refunds);
            return this;
        }

        /**
         * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
         */
        public Builder refunds(JsonNullable<? extends CancelPaymentRefunds> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = refunds;
            return this;
        }

        /**
         * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
         */
        public Builder chargebacks(CancelPaymentChargebacks chargebacks) {
            Utils.checkNotNull(chargebacks, "chargebacks");
            this.chargebacks = Optional.ofNullable(chargebacks);
            return this;
        }

        /**
         * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
         */
        public Builder chargebacks(Optional<? extends CancelPaymentChargebacks> chargebacks) {
            Utils.checkNotNull(chargebacks, "chargebacks");
            this.chargebacks = chargebacks;
            return this;
        }

        /**
         * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
         */
        public Builder captures(CancelPaymentCaptures captures) {
            Utils.checkNotNull(captures, "captures");
            this.captures = Optional.ofNullable(captures);
            return this;
        }

        /**
         * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
         */
        public Builder captures(Optional<? extends CancelPaymentCaptures> captures) {
            Utils.checkNotNull(captures, "captures");
            this.captures = captures;
            return this;
        }

        /**
         * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
         */
        public Builder settlement(CancelPaymentSettlement settlement) {
            Utils.checkNotNull(settlement, "settlement");
            this.settlement = JsonNullable.of(settlement);
            return this;
        }

        /**
         * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
         */
        public Builder settlement(JsonNullable<? extends CancelPaymentSettlement> settlement) {
            Utils.checkNotNull(settlement, "settlement");
            this.settlement = settlement;
            return this;
        }

        /**
         * The API resource URL of the [customer](get-customer).
         */
        public Builder customer(CancelPaymentCustomer customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = JsonNullable.of(customer);
            return this;
        }

        /**
         * The API resource URL of the [customer](get-customer).
         */
        public Builder customer(JsonNullable<? extends CancelPaymentCustomer> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }

        /**
         * The API resource URL of the [mandate](get-mandate).
         */
        public Builder mandate(CancelPaymentMandate mandate) {
            Utils.checkNotNull(mandate, "mandate");
            this.mandate = JsonNullable.of(mandate);
            return this;
        }

        /**
         * The API resource URL of the [mandate](get-mandate).
         */
        public Builder mandate(JsonNullable<? extends CancelPaymentMandate> mandate) {
            Utils.checkNotNull(mandate, "mandate");
            this.mandate = mandate;
            return this;
        }

        /**
         * The API resource URL of the [subscription](get-subscription).
         */
        public Builder subscription(CancelPaymentSubscription subscription) {
            Utils.checkNotNull(subscription, "subscription");
            this.subscription = JsonNullable.of(subscription);
            return this;
        }

        /**
         * The API resource URL of the [subscription](get-subscription).
         */
        public Builder subscription(JsonNullable<? extends CancelPaymentSubscription> subscription) {
            Utils.checkNotNull(subscription, "subscription");
            this.subscription = subscription;
            return this;
        }

        /**
         * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
         */
        public Builder order(CancelPaymentOrder order) {
            Utils.checkNotNull(order, "order");
            this.order = JsonNullable.of(order);
            return this;
        }

        /**
         * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
         */
        public Builder order(JsonNullable<? extends CancelPaymentOrder> order) {
            Utils.checkNotNull(order, "order");
            this.order = order;
            return this;
        }

        /**
         * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
         */
        public Builder terminal(CancelPaymentTerminal terminal) {
            Utils.checkNotNull(terminal, "terminal");
            this.terminal = JsonNullable.of(terminal);
            return this;
        }

        /**
         * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
         */
        public Builder terminal(JsonNullable<? extends CancelPaymentTerminal> terminal) {
            Utils.checkNotNull(terminal, "terminal");
            this.terminal = terminal;
            return this;
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder documentation(CancelPaymentDocumentation documentation) {
            Utils.checkNotNull(documentation, "documentation");
            this.documentation = Optional.ofNullable(documentation);
            return this;
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder documentation(Optional<? extends CancelPaymentDocumentation> documentation) {
            Utils.checkNotNull(documentation, "documentation");
            this.documentation = documentation;
            return this;
        }
        
        public CancelPaymentLinks build() {
            return new CancelPaymentLinks(
                self,
                checkout,
                mobileAppCheckout,
                changePaymentState,
                dashboard,
                refunds,
                chargebacks,
                captures,
                settlement,
                customer,
                mandate,
                subscription,
                order,
                terminal,
                documentation);
        }
    }
}
