/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class BalanceTransactions {

    /**
     * Indicates the response contains a balance transaction object. Will always contain the string `balance_transaction` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this balance transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list is not definitive.
     * 
     * <p>* Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
     * * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
     * * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
     * * Invoicing: `invoice-compensation` `balance-correction`
     * * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
     * 
     * <p>Possible values: `application-fee` `capture` `chargeback` `chargeback-reversal` `failed-payment-fee` `failed-payment` `invoice-compensation` `payment` `payment-fee` `payment-commission` `refund` `returned-refund` `returned-transfer` `split-payment` `outgoing-transfer` `capture-commission` `canceled-outgoing-transfer` `incoming-transfer` `api-payment-rolling-reserve-release` `capture-rolling-reserve-release` `reimbursement-fee` `balance-correction` `unauthorized-direct-debit` `bank-charged-failure-fee` `platform-payment-refund` `refund-compensation` `returned-refund-compensation` `returned-platform-payment-refund` `platform-payment-chargeback` `chargeback-compensation` `reversed-platform-payment-chargeback` `reversed-chargeback-compensation` `failed-split-payment-platform` `failed-split-payment-compensation` `cash-advance-repayment` `cash-advance-loan` `platform-connected-organizations-fee` `split-transaction` `managed-fee` `returned-managed-fee` `topup` `balance-reserve` `balance-reserve-return` `movement` `post-payment-split-payment` `cash-collateral-issuance` `cash-collateral-release`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The final amount that was moved to or from the balance. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultAmount")
    private Optional<? extends ResultAmount> resultAmount;

    /**
     * The amount that was to be moved to or from the balance, excluding deductions. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initialAmount")
    private Optional<? extends InitialAmount> initialAmount;

    /**
     * The total amount of deductions withheld from the movement. For example, if we charge a €0.29 fee on a €10 payment, the deductions amount will be `{"currency":"EUR", "value":"-0.29"}`.
     * 
     * <p>When moving funds to a balance, we always round the deduction to a 'real' amount. Any differences between these real-time rounded amounts and the final invoice will be compensated when the invoice is generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deductions")
    private JsonNullable<? extends Deductions> deductions;

    /**
     * Depending on the type of the balance transaction, we will try to give more context about the specific event that triggered it. For example, the context object for a payment transaction will look like `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo"}`.
     * 
     * <p>Below is a complete list of the context values that each type of transaction will have.
     * 
     * <p>* Type `payment`: `paymentId`
     * * Type `capture`: `paymentId` `captureId`
     * * Type `unauthorized-direct-debit`: `paymentId`
     * * Type `failed-payment`: `paymentId`
     * * Type `refund`: `paymentId` `refundId`
     * * Type `returned-refund`: `paymentId` `refundId`
     * * Type `chargeback`: `paymentId` `chargebackId`
     * * Type `chargeback-reversal`: `paymentId`
     * * Type `outgoing-transfer`: `settlementId` `transferId`
     * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
     * * Type `returned-transfer`: `settlementId` `transferId`
     * * Type `invoice-compensation`: `invoiceId`
     * * Type `balance-correction`: none
     * * Type `application-fee`: `paymentId`
     * * Type `split-payment`: `paymentId`
     * * Type `platform-payment-refund`: `paymentId` `refundId`
     * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context")
    private Optional<? extends Context> context;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    @JsonCreator
    public BalanceTransactions(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("resultAmount") Optional<? extends ResultAmount> resultAmount,
            @JsonProperty("initialAmount") Optional<? extends InitialAmount> initialAmount,
            @JsonProperty("deductions") JsonNullable<? extends Deductions> deductions,
            @JsonProperty("context") Optional<? extends Context> context,
            @JsonProperty("createdAt") Optional<String> createdAt) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(resultAmount, "resultAmount");
        Utils.checkNotNull(initialAmount, "initialAmount");
        Utils.checkNotNull(deductions, "deductions");
        Utils.checkNotNull(context, "context");
        Utils.checkNotNull(createdAt, "createdAt");
        this.resource = resource;
        this.id = id;
        this.type = type;
        this.resultAmount = resultAmount;
        this.initialAmount = initialAmount;
        this.deductions = deductions;
        this.context = context;
        this.createdAt = createdAt;
    }
    
    public BalanceTransactions() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a balance transaction object. Will always contain the string `balance_transaction` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this balance transaction.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list is not definitive.
     * 
     * <p>* Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
     * * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
     * * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
     * * Invoicing: `invoice-compensation` `balance-correction`
     * * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
     * 
     * <p>Possible values: `application-fee` `capture` `chargeback` `chargeback-reversal` `failed-payment-fee` `failed-payment` `invoice-compensation` `payment` `payment-fee` `payment-commission` `refund` `returned-refund` `returned-transfer` `split-payment` `outgoing-transfer` `capture-commission` `canceled-outgoing-transfer` `incoming-transfer` `api-payment-rolling-reserve-release` `capture-rolling-reserve-release` `reimbursement-fee` `balance-correction` `unauthorized-direct-debit` `bank-charged-failure-fee` `platform-payment-refund` `refund-compensation` `returned-refund-compensation` `returned-platform-payment-refund` `platform-payment-chargeback` `chargeback-compensation` `reversed-platform-payment-chargeback` `reversed-chargeback-compensation` `failed-split-payment-platform` `failed-split-payment-compensation` `cash-advance-repayment` `cash-advance-loan` `platform-connected-organizations-fee` `split-transaction` `managed-fee` `returned-managed-fee` `topup` `balance-reserve` `balance-reserve-return` `movement` `post-payment-split-payment` `cash-collateral-issuance` `cash-collateral-release`
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The final amount that was moved to or from the balance. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ResultAmount> resultAmount() {
        return (Optional<ResultAmount>) resultAmount;
    }

    /**
     * The amount that was to be moved to or from the balance, excluding deductions. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InitialAmount> initialAmount() {
        return (Optional<InitialAmount>) initialAmount;
    }

    /**
     * The total amount of deductions withheld from the movement. For example, if we charge a €0.29 fee on a €10 payment, the deductions amount will be `{"currency":"EUR", "value":"-0.29"}`.
     * 
     * <p>When moving funds to a balance, we always round the deduction to a 'real' amount. Any differences between these real-time rounded amounts and the final invoice will be compensated when the invoice is generated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Deductions> deductions() {
        return (JsonNullable<Deductions>) deductions;
    }

    /**
     * Depending on the type of the balance transaction, we will try to give more context about the specific event that triggered it. For example, the context object for a payment transaction will look like `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo"}`.
     * 
     * <p>Below is a complete list of the context values that each type of transaction will have.
     * 
     * <p>* Type `payment`: `paymentId`
     * * Type `capture`: `paymentId` `captureId`
     * * Type `unauthorized-direct-debit`: `paymentId`
     * * Type `failed-payment`: `paymentId`
     * * Type `refund`: `paymentId` `refundId`
     * * Type `returned-refund`: `paymentId` `refundId`
     * * Type `chargeback`: `paymentId` `chargebackId`
     * * Type `chargeback-reversal`: `paymentId`
     * * Type `outgoing-transfer`: `settlementId` `transferId`
     * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
     * * Type `returned-transfer`: `settlementId` `transferId`
     * * Type `invoice-compensation`: `invoiceId`
     * * Type `balance-correction`: none
     * * Type `application-fee`: `paymentId`
     * * Type `split-payment`: `paymentId`
     * * Type `platform-payment-refund`: `paymentId` `refundId`
     * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Context> context() {
        return (Optional<Context>) context;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Indicates the response contains a balance transaction object. Will always contain the string `balance_transaction` for this endpoint.
     */
    public BalanceTransactions withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a balance transaction object. Will always contain the string `balance_transaction` for this endpoint.
     */
    public BalanceTransactions withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this balance transaction.
     */
    public BalanceTransactions withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The identifier uniquely referring to this balance transaction.
     */
    public BalanceTransactions withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list is not definitive.
     * 
     * <p>* Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
     * * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
     * * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
     * * Invoicing: `invoice-compensation` `balance-correction`
     * * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
     * 
     * <p>Possible values: `application-fee` `capture` `chargeback` `chargeback-reversal` `failed-payment-fee` `failed-payment` `invoice-compensation` `payment` `payment-fee` `payment-commission` `refund` `returned-refund` `returned-transfer` `split-payment` `outgoing-transfer` `capture-commission` `canceled-outgoing-transfer` `incoming-transfer` `api-payment-rolling-reserve-release` `capture-rolling-reserve-release` `reimbursement-fee` `balance-correction` `unauthorized-direct-debit` `bank-charged-failure-fee` `platform-payment-refund` `refund-compensation` `returned-refund-compensation` `returned-platform-payment-refund` `platform-payment-chargeback` `chargeback-compensation` `reversed-platform-payment-chargeback` `reversed-chargeback-compensation` `failed-split-payment-platform` `failed-split-payment-compensation` `cash-advance-repayment` `cash-advance-loan` `platform-connected-organizations-fee` `split-transaction` `managed-fee` `returned-managed-fee` `topup` `balance-reserve` `balance-reserve-return` `movement` `post-payment-split-payment` `cash-collateral-issuance` `cash-collateral-release`
     */
    public BalanceTransactions withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list is not definitive.
     * 
     * <p>* Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
     * * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
     * * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
     * * Invoicing: `invoice-compensation` `balance-correction`
     * * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
     * 
     * <p>Possible values: `application-fee` `capture` `chargeback` `chargeback-reversal` `failed-payment-fee` `failed-payment` `invoice-compensation` `payment` `payment-fee` `payment-commission` `refund` `returned-refund` `returned-transfer` `split-payment` `outgoing-transfer` `capture-commission` `canceled-outgoing-transfer` `incoming-transfer` `api-payment-rolling-reserve-release` `capture-rolling-reserve-release` `reimbursement-fee` `balance-correction` `unauthorized-direct-debit` `bank-charged-failure-fee` `platform-payment-refund` `refund-compensation` `returned-refund-compensation` `returned-platform-payment-refund` `platform-payment-chargeback` `chargeback-compensation` `reversed-platform-payment-chargeback` `reversed-chargeback-compensation` `failed-split-payment-platform` `failed-split-payment-compensation` `cash-advance-repayment` `cash-advance-loan` `platform-connected-organizations-fee` `split-transaction` `managed-fee` `returned-managed-fee` `topup` `balance-reserve` `balance-reserve-return` `movement` `post-payment-split-payment` `cash-collateral-issuance` `cash-collateral-release`
     */
    public BalanceTransactions withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The final amount that was moved to or from the balance. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
     */
    public BalanceTransactions withResultAmount(ResultAmount resultAmount) {
        Utils.checkNotNull(resultAmount, "resultAmount");
        this.resultAmount = Optional.ofNullable(resultAmount);
        return this;
    }

    /**
     * The final amount that was moved to or from the balance. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
     */
    public BalanceTransactions withResultAmount(Optional<? extends ResultAmount> resultAmount) {
        Utils.checkNotNull(resultAmount, "resultAmount");
        this.resultAmount = resultAmount;
        return this;
    }

    /**
     * The amount that was to be moved to or from the balance, excluding deductions. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
     */
    public BalanceTransactions withInitialAmount(InitialAmount initialAmount) {
        Utils.checkNotNull(initialAmount, "initialAmount");
        this.initialAmount = Optional.ofNullable(initialAmount);
        return this;
    }

    /**
     * The amount that was to be moved to or from the balance, excluding deductions. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
     */
    public BalanceTransactions withInitialAmount(Optional<? extends InitialAmount> initialAmount) {
        Utils.checkNotNull(initialAmount, "initialAmount");
        this.initialAmount = initialAmount;
        return this;
    }

    /**
     * The total amount of deductions withheld from the movement. For example, if we charge a €0.29 fee on a €10 payment, the deductions amount will be `{"currency":"EUR", "value":"-0.29"}`.
     * 
     * <p>When moving funds to a balance, we always round the deduction to a 'real' amount. Any differences between these real-time rounded amounts and the final invoice will be compensated when the invoice is generated.
     */
    public BalanceTransactions withDeductions(Deductions deductions) {
        Utils.checkNotNull(deductions, "deductions");
        this.deductions = JsonNullable.of(deductions);
        return this;
    }

    /**
     * The total amount of deductions withheld from the movement. For example, if we charge a €0.29 fee on a €10 payment, the deductions amount will be `{"currency":"EUR", "value":"-0.29"}`.
     * 
     * <p>When moving funds to a balance, we always round the deduction to a 'real' amount. Any differences between these real-time rounded amounts and the final invoice will be compensated when the invoice is generated.
     */
    public BalanceTransactions withDeductions(JsonNullable<? extends Deductions> deductions) {
        Utils.checkNotNull(deductions, "deductions");
        this.deductions = deductions;
        return this;
    }

    /**
     * Depending on the type of the balance transaction, we will try to give more context about the specific event that triggered it. For example, the context object for a payment transaction will look like `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo"}`.
     * 
     * <p>Below is a complete list of the context values that each type of transaction will have.
     * 
     * <p>* Type `payment`: `paymentId`
     * * Type `capture`: `paymentId` `captureId`
     * * Type `unauthorized-direct-debit`: `paymentId`
     * * Type `failed-payment`: `paymentId`
     * * Type `refund`: `paymentId` `refundId`
     * * Type `returned-refund`: `paymentId` `refundId`
     * * Type `chargeback`: `paymentId` `chargebackId`
     * * Type `chargeback-reversal`: `paymentId`
     * * Type `outgoing-transfer`: `settlementId` `transferId`
     * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
     * * Type `returned-transfer`: `settlementId` `transferId`
     * * Type `invoice-compensation`: `invoiceId`
     * * Type `balance-correction`: none
     * * Type `application-fee`: `paymentId`
     * * Type `split-payment`: `paymentId`
     * * Type `platform-payment-refund`: `paymentId` `refundId`
     * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`
     */
    public BalanceTransactions withContext(Context context) {
        Utils.checkNotNull(context, "context");
        this.context = Optional.ofNullable(context);
        return this;
    }

    /**
     * Depending on the type of the balance transaction, we will try to give more context about the specific event that triggered it. For example, the context object for a payment transaction will look like `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo"}`.
     * 
     * <p>Below is a complete list of the context values that each type of transaction will have.
     * 
     * <p>* Type `payment`: `paymentId`
     * * Type `capture`: `paymentId` `captureId`
     * * Type `unauthorized-direct-debit`: `paymentId`
     * * Type `failed-payment`: `paymentId`
     * * Type `refund`: `paymentId` `refundId`
     * * Type `returned-refund`: `paymentId` `refundId`
     * * Type `chargeback`: `paymentId` `chargebackId`
     * * Type `chargeback-reversal`: `paymentId`
     * * Type `outgoing-transfer`: `settlementId` `transferId`
     * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
     * * Type `returned-transfer`: `settlementId` `transferId`
     * * Type `invoice-compensation`: `invoiceId`
     * * Type `balance-correction`: none
     * * Type `application-fee`: `paymentId`
     * * Type `split-payment`: `paymentId`
     * * Type `platform-payment-refund`: `paymentId` `refundId`
     * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`
     */
    public BalanceTransactions withContext(Optional<? extends Context> context) {
        Utils.checkNotNull(context, "context");
        this.context = context;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public BalanceTransactions withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public BalanceTransactions withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BalanceTransactions other = (BalanceTransactions) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.resultAmount, other.resultAmount) &&
            Objects.deepEquals(this.initialAmount, other.initialAmount) &&
            Objects.deepEquals(this.deductions, other.deductions) &&
            Objects.deepEquals(this.context, other.context) &&
            Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            type,
            resultAmount,
            initialAmount,
            deductions,
            context,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BalanceTransactions.class,
                "resource", resource,
                "id", id,
                "type", type,
                "resultAmount", resultAmount,
                "initialAmount", initialAmount,
                "deductions", deductions,
                "context", context,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> type = Optional.empty();
 
        private Optional<? extends ResultAmount> resultAmount = Optional.empty();
 
        private Optional<? extends InitialAmount> initialAmount = Optional.empty();
 
        private JsonNullable<? extends Deductions> deductions = JsonNullable.undefined();
 
        private Optional<? extends Context> context = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a balance transaction object. Will always contain the string `balance_transaction` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a balance transaction object. Will always contain the string `balance_transaction` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this balance transaction.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this balance transaction.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list is not definitive.
         * 
         * <p>* Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
         * * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
         * * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
         * * Invoicing: `invoice-compensation` `balance-correction`
         * * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
         * 
         * <p>Possible values: `application-fee` `capture` `chargeback` `chargeback-reversal` `failed-payment-fee` `failed-payment` `invoice-compensation` `payment` `payment-fee` `payment-commission` `refund` `returned-refund` `returned-transfer` `split-payment` `outgoing-transfer` `capture-commission` `canceled-outgoing-transfer` `incoming-transfer` `api-payment-rolling-reserve-release` `capture-rolling-reserve-release` `reimbursement-fee` `balance-correction` `unauthorized-direct-debit` `bank-charged-failure-fee` `platform-payment-refund` `refund-compensation` `returned-refund-compensation` `returned-platform-payment-refund` `platform-payment-chargeback` `chargeback-compensation` `reversed-platform-payment-chargeback` `reversed-chargeback-compensation` `failed-split-payment-platform` `failed-split-payment-compensation` `cash-advance-repayment` `cash-advance-loan` `platform-connected-organizations-fee` `split-transaction` `managed-fee` `returned-managed-fee` `topup` `balance-reserve` `balance-reserve-return` `movement` `post-payment-split-payment` `cash-collateral-issuance` `cash-collateral-release`
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of transaction, for example `payment` or `refund`. Values include the below examples, although this list is not definitive.
         * 
         * <p>* Regular payment processing: `payment` `capture` `unauthorized-direct-debit` `failed-payment`
         * * Refunds and chargebacks: `refund` `returned-refund` `chargeback` `chargeback-reversal`
         * * Settlements: `outgoing-transfer` `canceled-outgoing-transfer` `returned-transfer`
         * * Invoicing: `invoice-compensation` `balance-correction`
         * * Mollie Connect: `application-fee` `split-payment` `platform-payment-refund` `platform-payment-chargeback`
         * 
         * <p>Possible values: `application-fee` `capture` `chargeback` `chargeback-reversal` `failed-payment-fee` `failed-payment` `invoice-compensation` `payment` `payment-fee` `payment-commission` `refund` `returned-refund` `returned-transfer` `split-payment` `outgoing-transfer` `capture-commission` `canceled-outgoing-transfer` `incoming-transfer` `api-payment-rolling-reserve-release` `capture-rolling-reserve-release` `reimbursement-fee` `balance-correction` `unauthorized-direct-debit` `bank-charged-failure-fee` `platform-payment-refund` `refund-compensation` `returned-refund-compensation` `returned-platform-payment-refund` `platform-payment-chargeback` `chargeback-compensation` `reversed-platform-payment-chargeback` `reversed-chargeback-compensation` `failed-split-payment-platform` `failed-split-payment-compensation` `cash-advance-repayment` `cash-advance-loan` `platform-connected-organizations-fee` `split-transaction` `managed-fee` `returned-managed-fee` `topup` `balance-reserve` `balance-reserve-return` `movement` `post-payment-split-payment` `cash-collateral-issuance` `cash-collateral-release`
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The final amount that was moved to or from the balance. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
         */
        public Builder resultAmount(ResultAmount resultAmount) {
            Utils.checkNotNull(resultAmount, "resultAmount");
            this.resultAmount = Optional.ofNullable(resultAmount);
            return this;
        }

        /**
         * The final amount that was moved to or from the balance. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
         */
        public Builder resultAmount(Optional<? extends ResultAmount> resultAmount) {
            Utils.checkNotNull(resultAmount, "resultAmount");
            this.resultAmount = resultAmount;
            return this;
        }

        /**
         * The amount that was to be moved to or from the balance, excluding deductions. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
         */
        public Builder initialAmount(InitialAmount initialAmount) {
            Utils.checkNotNull(initialAmount, "initialAmount");
            this.initialAmount = Optional.ofNullable(initialAmount);
            return this;
        }

        /**
         * The amount that was to be moved to or from the balance, excluding deductions. If the transaction moves funds away from the balance, for example when it concerns a refund, the amount will be negative.
         */
        public Builder initialAmount(Optional<? extends InitialAmount> initialAmount) {
            Utils.checkNotNull(initialAmount, "initialAmount");
            this.initialAmount = initialAmount;
            return this;
        }

        /**
         * The total amount of deductions withheld from the movement. For example, if we charge a €0.29 fee on a €10 payment, the deductions amount will be `{"currency":"EUR", "value":"-0.29"}`.
         * 
         * <p>When moving funds to a balance, we always round the deduction to a 'real' amount. Any differences between these real-time rounded amounts and the final invoice will be compensated when the invoice is generated.
         */
        public Builder deductions(Deductions deductions) {
            Utils.checkNotNull(deductions, "deductions");
            this.deductions = JsonNullable.of(deductions);
            return this;
        }

        /**
         * The total amount of deductions withheld from the movement. For example, if we charge a €0.29 fee on a €10 payment, the deductions amount will be `{"currency":"EUR", "value":"-0.29"}`.
         * 
         * <p>When moving funds to a balance, we always round the deduction to a 'real' amount. Any differences between these real-time rounded amounts and the final invoice will be compensated when the invoice is generated.
         */
        public Builder deductions(JsonNullable<? extends Deductions> deductions) {
            Utils.checkNotNull(deductions, "deductions");
            this.deductions = deductions;
            return this;
        }

        /**
         * Depending on the type of the balance transaction, we will try to give more context about the specific event that triggered it. For example, the context object for a payment transaction will look like `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo"}`.
         * 
         * <p>Below is a complete list of the context values that each type of transaction will have.
         * 
         * <p>* Type `payment`: `paymentId`
         * * Type `capture`: `paymentId` `captureId`
         * * Type `unauthorized-direct-debit`: `paymentId`
         * * Type `failed-payment`: `paymentId`
         * * Type `refund`: `paymentId` `refundId`
         * * Type `returned-refund`: `paymentId` `refundId`
         * * Type `chargeback`: `paymentId` `chargebackId`
         * * Type `chargeback-reversal`: `paymentId`
         * * Type `outgoing-transfer`: `settlementId` `transferId`
         * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
         * * Type `returned-transfer`: `settlementId` `transferId`
         * * Type `invoice-compensation`: `invoiceId`
         * * Type `balance-correction`: none
         * * Type `application-fee`: `paymentId`
         * * Type `split-payment`: `paymentId`
         * * Type `platform-payment-refund`: `paymentId` `refundId`
         * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`
         */
        public Builder context(Context context) {
            Utils.checkNotNull(context, "context");
            this.context = Optional.ofNullable(context);
            return this;
        }

        /**
         * Depending on the type of the balance transaction, we will try to give more context about the specific event that triggered it. For example, the context object for a payment transaction will look like `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo"}`.
         * 
         * <p>Below is a complete list of the context values that each type of transaction will have.
         * 
         * <p>* Type `payment`: `paymentId`
         * * Type `capture`: `paymentId` `captureId`
         * * Type `unauthorized-direct-debit`: `paymentId`
         * * Type `failed-payment`: `paymentId`
         * * Type `refund`: `paymentId` `refundId`
         * * Type `returned-refund`: `paymentId` `refundId`
         * * Type `chargeback`: `paymentId` `chargebackId`
         * * Type `chargeback-reversal`: `paymentId`
         * * Type `outgoing-transfer`: `settlementId` `transferId`
         * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
         * * Type `returned-transfer`: `settlementId` `transferId`
         * * Type `invoice-compensation`: `invoiceId`
         * * Type `balance-correction`: none
         * * Type `application-fee`: `paymentId`
         * * Type `split-payment`: `paymentId`
         * * Type `platform-payment-refund`: `paymentId` `refundId`
         * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`
         */
        public Builder context(Optional<? extends Context> context) {
            Utils.checkNotNull(context, "context");
            this.context = context;
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public BalanceTransactions build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }
            return new BalanceTransactions(
                resource,
                id,
                type,
                resultAmount,
                initialAmount,
                deductions,
                context,
                createdAt);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"balance_transaction\"",
                        new TypeReference<Optional<String>>() {});
    }
}
