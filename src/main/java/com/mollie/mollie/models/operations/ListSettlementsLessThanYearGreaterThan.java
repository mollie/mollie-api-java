/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

public class ListSettlementsLessThanYearGreaterThan {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("<month>")
    private Optional<? extends ListSettlementsLessThanMonthGreaterThan> lessThanMonthGreaterThan;

    @JsonCreator
    public ListSettlementsLessThanYearGreaterThan(
            @JsonProperty("<month>") Optional<? extends ListSettlementsLessThanMonthGreaterThan> lessThanMonthGreaterThan) {
        Utils.checkNotNull(lessThanMonthGreaterThan, "lessThanMonthGreaterThan");
        this.lessThanMonthGreaterThan = lessThanMonthGreaterThan;
    }
    
    public ListSettlementsLessThanYearGreaterThan() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListSettlementsLessThanMonthGreaterThan> lessThanMonthGreaterThan() {
        return (Optional<ListSettlementsLessThanMonthGreaterThan>) lessThanMonthGreaterThan;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ListSettlementsLessThanYearGreaterThan withLessThanMonthGreaterThan(ListSettlementsLessThanMonthGreaterThan lessThanMonthGreaterThan) {
        Utils.checkNotNull(lessThanMonthGreaterThan, "lessThanMonthGreaterThan");
        this.lessThanMonthGreaterThan = Optional.ofNullable(lessThanMonthGreaterThan);
        return this;
    }

    public ListSettlementsLessThanYearGreaterThan withLessThanMonthGreaterThan(Optional<? extends ListSettlementsLessThanMonthGreaterThan> lessThanMonthGreaterThan) {
        Utils.checkNotNull(lessThanMonthGreaterThan, "lessThanMonthGreaterThan");
        this.lessThanMonthGreaterThan = lessThanMonthGreaterThan;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListSettlementsLessThanYearGreaterThan other = (ListSettlementsLessThanYearGreaterThan) o;
        return 
            Utils.enhancedDeepEquals(this.lessThanMonthGreaterThan, other.lessThanMonthGreaterThan);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            lessThanMonthGreaterThan);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListSettlementsLessThanYearGreaterThan.class,
                "lessThanMonthGreaterThan", lessThanMonthGreaterThan);
    }
    
    public final static class Builder {
 
        private Optional<? extends ListSettlementsLessThanMonthGreaterThan> lessThanMonthGreaterThan = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder lessThanMonthGreaterThan(ListSettlementsLessThanMonthGreaterThan lessThanMonthGreaterThan) {
            Utils.checkNotNull(lessThanMonthGreaterThan, "lessThanMonthGreaterThan");
            this.lessThanMonthGreaterThan = Optional.ofNullable(lessThanMonthGreaterThan);
            return this;
        }

        public Builder lessThanMonthGreaterThan(Optional<? extends ListSettlementsLessThanMonthGreaterThan> lessThanMonthGreaterThan) {
            Utils.checkNotNull(lessThanMonthGreaterThan, "lessThanMonthGreaterThan");
            this.lessThanMonthGreaterThan = lessThanMonthGreaterThan;
            return this;
        }
        
        public ListSettlementsLessThanYearGreaterThan build() {
            return new ListSettlementsLessThanYearGreaterThan(
                lessThanMonthGreaterThan);
        }
    }
}
