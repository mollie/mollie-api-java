/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class RequestApplePayPaymentSessionRequestBody {
    /**
     * The validationUrl you got from the
     * [ApplePayValidateMerchant event](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayvalidatemerchantevent).
     * 
     * <p>A list of all
     * [valid host names](https://developer.apple.com/documentation/apple_pay_on_the_web/setting_up_your_server)
     * for merchant validation is available. You should white list these in your application and reject any
     * `validationUrl`s that have a host name not in the list.
     */
    @JsonProperty("validationUrl")
    private String validationUrl;

    /**
     * The domain of your web shop, that is visible in the browser's location bar. For example
     * `pay.myshop.com`.
     */
    @JsonProperty("domain")
    private String domain;

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileId")
    private Optional<String> profileId;

    @JsonCreator
    public RequestApplePayPaymentSessionRequestBody(
            @JsonProperty("validationUrl") String validationUrl,
            @JsonProperty("domain") String domain,
            @JsonProperty("profileId") Optional<String> profileId) {
        Utils.checkNotNull(validationUrl, "validationUrl");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(profileId, "profileId");
        this.validationUrl = validationUrl;
        this.domain = domain;
        this.profileId = profileId;
    }
    
    public RequestApplePayPaymentSessionRequestBody(
            String validationUrl,
            String domain) {
        this(validationUrl, domain, Optional.empty());
    }

    /**
     * The validationUrl you got from the
     * [ApplePayValidateMerchant event](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayvalidatemerchantevent).
     * 
     * <p>A list of all
     * [valid host names](https://developer.apple.com/documentation/apple_pay_on_the_web/setting_up_your_server)
     * for merchant validation is available. You should white list these in your application and reject any
     * `validationUrl`s that have a host name not in the list.
     */
    @JsonIgnore
    public String validationUrl() {
        return validationUrl;
    }

    /**
     * The domain of your web shop, that is visible in the browser's location bar. For example
     * `pay.myshop.com`.
     */
    @JsonIgnore
    public String domain() {
        return domain;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @JsonIgnore
    public Optional<String> profileId() {
        return profileId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The validationUrl you got from the
     * [ApplePayValidateMerchant event](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayvalidatemerchantevent).
     * 
     * <p>A list of all
     * [valid host names](https://developer.apple.com/documentation/apple_pay_on_the_web/setting_up_your_server)
     * for merchant validation is available. You should white list these in your application and reject any
     * `validationUrl`s that have a host name not in the list.
     */
    public RequestApplePayPaymentSessionRequestBody withValidationUrl(String validationUrl) {
        Utils.checkNotNull(validationUrl, "validationUrl");
        this.validationUrl = validationUrl;
        return this;
    }

    /**
     * The domain of your web shop, that is visible in the browser's location bar. For example
     * `pay.myshop.com`.
     */
    public RequestApplePayPaymentSessionRequestBody withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    public RequestApplePayPaymentSessionRequestBody withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = Optional.ofNullable(profileId);
        return this;
    }


    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    public RequestApplePayPaymentSessionRequestBody withProfileId(Optional<String> profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestApplePayPaymentSessionRequestBody other = (RequestApplePayPaymentSessionRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.validationUrl, other.validationUrl) &&
            Utils.enhancedDeepEquals(this.domain, other.domain) &&
            Utils.enhancedDeepEquals(this.profileId, other.profileId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            validationUrl, domain, profileId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestApplePayPaymentSessionRequestBody.class,
                "validationUrl", validationUrl,
                "domain", domain,
                "profileId", profileId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String validationUrl;

        private String domain;

        private Optional<String> profileId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The validationUrl you got from the
         * [ApplePayValidateMerchant event](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayvalidatemerchantevent).
         * 
         * <p>A list of all
         * [valid host names](https://developer.apple.com/documentation/apple_pay_on_the_web/setting_up_your_server)
         * for merchant validation is available. You should white list these in your application and reject any
         * `validationUrl`s that have a host name not in the list.
         */
        public Builder validationUrl(String validationUrl) {
            Utils.checkNotNull(validationUrl, "validationUrl");
            this.validationUrl = validationUrl;
            return this;
        }


        /**
         * The domain of your web shop, that is visible in the browser's location bar. For example
         * `pay.myshop.com`.
         */
        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }


        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
         * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
         * required.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = Optional.ofNullable(profileId);
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
         * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
         * required.
         */
        public Builder profileId(Optional<String> profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }

        public RequestApplePayPaymentSessionRequestBody build() {

            return new RequestApplePayPaymentSessionRequestBody(
                validationUrl, domain, profileId);
        }

    }
}
