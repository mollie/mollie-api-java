/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class ListClientsClientsAPIEmbedded {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    private Optional<? extends ListClientsClientsAPIOrganization> organization;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onboarding")
    private Optional<? extends ListClientsOnboarding> onboarding;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capabilities")
    private Optional<? extends ListClientsCapabilities> capabilities;

    @JsonCreator
    public ListClientsClientsAPIEmbedded(
            @JsonProperty("organization") Optional<? extends ListClientsClientsAPIOrganization> organization,
            @JsonProperty("onboarding") Optional<? extends ListClientsOnboarding> onboarding,
            @JsonProperty("capabilities") Optional<? extends ListClientsCapabilities> capabilities) {
        Utils.checkNotNull(organization, "organization");
        Utils.checkNotNull(onboarding, "onboarding");
        Utils.checkNotNull(capabilities, "capabilities");
        this.organization = organization;
        this.onboarding = onboarding;
        this.capabilities = capabilities;
    }
    
    public ListClientsClientsAPIEmbedded() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListClientsClientsAPIOrganization> organization() {
        return (Optional<ListClientsClientsAPIOrganization>) organization;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListClientsOnboarding> onboarding() {
        return (Optional<ListClientsOnboarding>) onboarding;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListClientsCapabilities> capabilities() {
        return (Optional<ListClientsCapabilities>) capabilities;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListClientsClientsAPIEmbedded withOrganization(ListClientsClientsAPIOrganization organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = Optional.ofNullable(organization);
        return this;
    }

    public ListClientsClientsAPIEmbedded withOrganization(Optional<? extends ListClientsClientsAPIOrganization> organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = organization;
        return this;
    }

    public ListClientsClientsAPIEmbedded withOnboarding(ListClientsOnboarding onboarding) {
        Utils.checkNotNull(onboarding, "onboarding");
        this.onboarding = Optional.ofNullable(onboarding);
        return this;
    }

    public ListClientsClientsAPIEmbedded withOnboarding(Optional<? extends ListClientsOnboarding> onboarding) {
        Utils.checkNotNull(onboarding, "onboarding");
        this.onboarding = onboarding;
        return this;
    }

    public ListClientsClientsAPIEmbedded withCapabilities(ListClientsCapabilities capabilities) {
        Utils.checkNotNull(capabilities, "capabilities");
        this.capabilities = Optional.ofNullable(capabilities);
        return this;
    }

    public ListClientsClientsAPIEmbedded withCapabilities(Optional<? extends ListClientsCapabilities> capabilities) {
        Utils.checkNotNull(capabilities, "capabilities");
        this.capabilities = capabilities;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListClientsClientsAPIEmbedded other = (ListClientsClientsAPIEmbedded) o;
        return 
            Objects.deepEquals(this.organization, other.organization) &&
            Objects.deepEquals(this.onboarding, other.onboarding) &&
            Objects.deepEquals(this.capabilities, other.capabilities);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            organization,
            onboarding,
            capabilities);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListClientsClientsAPIEmbedded.class,
                "organization", organization,
                "onboarding", onboarding,
                "capabilities", capabilities);
    }
    
    public final static class Builder {
 
        private Optional<? extends ListClientsClientsAPIOrganization> organization = Optional.empty();
 
        private Optional<? extends ListClientsOnboarding> onboarding = Optional.empty();
 
        private Optional<? extends ListClientsCapabilities> capabilities = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder organization(ListClientsClientsAPIOrganization organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = Optional.ofNullable(organization);
            return this;
        }

        public Builder organization(Optional<? extends ListClientsClientsAPIOrganization> organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = organization;
            return this;
        }

        public Builder onboarding(ListClientsOnboarding onboarding) {
            Utils.checkNotNull(onboarding, "onboarding");
            this.onboarding = Optional.ofNullable(onboarding);
            return this;
        }

        public Builder onboarding(Optional<? extends ListClientsOnboarding> onboarding) {
            Utils.checkNotNull(onboarding, "onboarding");
            this.onboarding = onboarding;
            return this;
        }

        public Builder capabilities(ListClientsCapabilities capabilities) {
            Utils.checkNotNull(capabilities, "capabilities");
            this.capabilities = Optional.ofNullable(capabilities);
            return this;
        }

        public Builder capabilities(Optional<? extends ListClientsCapabilities> capabilities) {
            Utils.checkNotNull(capabilities, "capabilities");
            this.capabilities = capabilities;
            return this;
        }
        
        public ListClientsClientsAPIEmbedded build() {
            return new ListClientsClientsAPIEmbedded(
                organization,
                onboarding,
                capabilities);
        }
    }
}

