/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Requirements {

    /**
     * The name of this requirement, referring to the task to be fulfilled by the organization to enable or re-enable the capability. The name is unique among other requirements of the same capability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The status of the requirement depends on its due date. If no due date is given, the status will be `requested`.
     * 
     * Possible values: `currently-due` `past-due` `requested`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dueDate")
    private JsonNullable<String> dueDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends ListCapabilitiesCapabilitiesLinks> links;

    @JsonCreator
    public Requirements(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("dueDate") JsonNullable<String> dueDate,
            @JsonProperty("_links") Optional<? extends ListCapabilitiesCapabilitiesLinks> links) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(dueDate, "dueDate");
        Utils.checkNotNull(links, "links");
        this.id = id;
        this.status = status;
        this.dueDate = dueDate;
        this.links = links;
    }
    
    public Requirements() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The name of this requirement, referring to the task to be fulfilled by the organization to enable or re-enable the capability. The name is unique among other requirements of the same capability.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The status of the requirement depends on its due date. If no due date is given, the status will be `requested`.
     * 
     * Possible values: `currently-due` `past-due` `requested`
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
     */
    @JsonIgnore
    public JsonNullable<String> dueDate() {
        return dueDate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListCapabilitiesCapabilitiesLinks> links() {
        return (Optional<ListCapabilitiesCapabilitiesLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of this requirement, referring to the task to be fulfilled by the organization to enable or re-enable the capability. The name is unique among other requirements of the same capability.
     */
    public Requirements withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The name of this requirement, referring to the task to be fulfilled by the organization to enable or re-enable the capability. The name is unique among other requirements of the same capability.
     */
    public Requirements withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The status of the requirement depends on its due date. If no due date is given, the status will be `requested`.
     * 
     * Possible values: `currently-due` `past-due` `requested`
     */
    public Requirements withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the requirement depends on its due date. If no due date is given, the status will be `requested`.
     * 
     * Possible values: `currently-due` `past-due` `requested`
     */
    public Requirements withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
     */
    public Requirements withDueDate(String dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = JsonNullable.of(dueDate);
        return this;
    }

    /**
     * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
     */
    public Requirements withDueDate(JsonNullable<String> dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = dueDate;
        return this;
    }

    public Requirements withLinks(ListCapabilitiesCapabilitiesLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    public Requirements withLinks(Optional<? extends ListCapabilitiesCapabilitiesLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Requirements other = (Requirements) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.dueDate, other.dueDate) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            status,
            dueDate,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Requirements.class,
                "id", id,
                "status", status,
                "dueDate", dueDate,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> status = Optional.empty();
 
        private JsonNullable<String> dueDate = JsonNullable.undefined();
 
        private Optional<? extends ListCapabilitiesCapabilitiesLinks> links = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of this requirement, referring to the task to be fulfilled by the organization to enable or re-enable the capability. The name is unique among other requirements of the same capability.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The name of this requirement, referring to the task to be fulfilled by the organization to enable or re-enable the capability. The name is unique among other requirements of the same capability.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The status of the requirement depends on its due date. If no due date is given, the status will be `requested`.
         * 
         * Possible values: `currently-due` `past-due` `requested`
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the requirement depends on its due date. If no due date is given, the status will be `requested`.
         * 
         * Possible values: `currently-due` `past-due` `requested`
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
         */
        public Builder dueDate(String dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = JsonNullable.of(dueDate);
            return this;
        }

        /**
         * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
         */
        public Builder dueDate(JsonNullable<String> dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = dueDate;
            return this;
        }

        public Builder links(ListCapabilitiesCapabilitiesLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        public Builder links(Optional<? extends ListCapabilitiesCapabilitiesLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public Requirements build() {
            return new Requirements(
                id,
                status,
                dueDate,
                links);
        }
    }
}

