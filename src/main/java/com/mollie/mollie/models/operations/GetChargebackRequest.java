/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetChargebackRequest {
    /**
     * Provide the ID of the related payment.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=paymentId")
    private String paymentId;

    /**
     * Provide the ID of the related chargeback.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=chargebackId")
    private String chargebackId;

    /**
     * This endpoint allows embedding related API items by appending the following values via the `embed`
     * query string
     * parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=embed")
    private JsonNullable<String> embed;

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the
     * `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
     * enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=testmode")
    private Optional<Boolean> testmode;

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=idempotency-key")
    private Optional<String> idempotencyKey;

    @JsonCreator
    public GetChargebackRequest(
            String paymentId,
            String chargebackId,
            JsonNullable<String> embed,
            Optional<Boolean> testmode,
            Optional<String> idempotencyKey) {
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(chargebackId, "chargebackId");
        Utils.checkNotNull(embed, "embed");
        Utils.checkNotNull(testmode, "testmode");
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.paymentId = paymentId;
        this.chargebackId = chargebackId;
        this.embed = embed;
        this.testmode = testmode;
        this.idempotencyKey = idempotencyKey;
    }
    
    public GetChargebackRequest(
            String paymentId,
            String chargebackId) {
        this(paymentId, chargebackId, JsonNullable.undefined(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Provide the ID of the related payment.
     */
    @JsonIgnore
    public String paymentId() {
        return paymentId;
    }

    /**
     * Provide the ID of the related chargeback.
     */
    @JsonIgnore
    public String chargebackId() {
        return chargebackId;
    }

    /**
     * This endpoint allows embedding related API items by appending the following values via the `embed`
     * query string
     * parameter.
     */
    @JsonIgnore
    public JsonNullable<String> embed() {
        return embed;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the
     * `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
     * enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public Optional<Boolean> testmode() {
        return testmode;
    }

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Provide the ID of the related payment.
     */
    public GetChargebackRequest withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    /**
     * Provide the ID of the related chargeback.
     */
    public GetChargebackRequest withChargebackId(String chargebackId) {
        Utils.checkNotNull(chargebackId, "chargebackId");
        this.chargebackId = chargebackId;
        return this;
    }

    /**
     * This endpoint allows embedding related API items by appending the following values via the `embed`
     * query string
     * parameter.
     */
    public GetChargebackRequest withEmbed(String embed) {
        Utils.checkNotNull(embed, "embed");
        this.embed = JsonNullable.of(embed);
        return this;
    }

    /**
     * This endpoint allows embedding related API items by appending the following values via the `embed`
     * query string
     * parameter.
     */
    public GetChargebackRequest withEmbed(JsonNullable<String> embed) {
        Utils.checkNotNull(embed, "embed");
        this.embed = embed;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the
     * `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
     * enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public GetChargebackRequest withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = Optional.ofNullable(testmode);
        return this;
    }


    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the
     * `testmode` query
     * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
     * enable test mode by
     * setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public GetChargebackRequest withTestmode(Optional<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public GetChargebackRequest withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }


    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public GetChargebackRequest withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetChargebackRequest other = (GetChargebackRequest) o;
        return 
            Utils.enhancedDeepEquals(this.paymentId, other.paymentId) &&
            Utils.enhancedDeepEquals(this.chargebackId, other.chargebackId) &&
            Utils.enhancedDeepEquals(this.embed, other.embed) &&
            Utils.enhancedDeepEquals(this.testmode, other.testmode) &&
            Utils.enhancedDeepEquals(this.idempotencyKey, other.idempotencyKey);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            paymentId, chargebackId, embed,
            testmode, idempotencyKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetChargebackRequest.class,
                "paymentId", paymentId,
                "chargebackId", chargebackId,
                "embed", embed,
                "testmode", testmode,
                "idempotencyKey", idempotencyKey);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String paymentId;

        private String chargebackId;

        private JsonNullable<String> embed = JsonNullable.undefined();

        private Optional<Boolean> testmode = Optional.empty();

        private Optional<String> idempotencyKey = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Provide the ID of the related payment.
         */
        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }


        /**
         * Provide the ID of the related chargeback.
         */
        public Builder chargebackId(String chargebackId) {
            Utils.checkNotNull(chargebackId, "chargebackId");
            this.chargebackId = chargebackId;
            return this;
        }


        /**
         * This endpoint allows embedding related API items by appending the following values via the `embed`
         * query string
         * parameter.
         */
        public Builder embed(String embed) {
            Utils.checkNotNull(embed, "embed");
            this.embed = JsonNullable.of(embed);
            return this;
        }

        /**
         * This endpoint allows embedding related API items by appending the following values via the `embed`
         * query string
         * parameter.
         */
        public Builder embed(JsonNullable<String> embed) {
            Utils.checkNotNull(embed, "embed");
            this.embed = embed;
            return this;
        }


        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the
         * `testmode` query
         * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
         * enable test mode by
         * setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = Optional.ofNullable(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the
         * `testmode` query
         * parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can
         * enable test mode by
         * setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(Optional<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }


        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public GetChargebackRequest build() {

            return new GetChargebackRequest(
                paymentId, chargebackId, embed,
                testmode, idempotencyKey);
        }

    }
}
