/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class GetChargebackRequest {

    /**
     * Provide the ID of the related payment.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=paymentId")
    private String paymentId;

    /**
     * Provide the ID of the related chargeback.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=chargebackId")
    private String chargebackId;

    /**
     * This endpoint allows you to embed additional information via the `embed` query string parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=embed")
    private JsonNullable<? extends GetChargebackQueryParamEmbed> embed;

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public GetChargebackRequest(
            String paymentId,
            String chargebackId,
            JsonNullable<? extends GetChargebackQueryParamEmbed> embed,
            JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(chargebackId, "chargebackId");
        Utils.checkNotNull(embed, "embed");
        Utils.checkNotNull(testmode, "testmode");
        this.paymentId = paymentId;
        this.chargebackId = chargebackId;
        this.embed = embed;
        this.testmode = testmode;
    }
    
    public GetChargebackRequest(
            String paymentId,
            String chargebackId) {
        this(paymentId, chargebackId, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Provide the ID of the related payment.
     */
    @JsonIgnore
    public String paymentId() {
        return paymentId;
    }

    /**
     * Provide the ID of the related chargeback.
     */
    @JsonIgnore
    public String chargebackId() {
        return chargebackId;
    }

    /**
     * This endpoint allows you to embed additional information via the `embed` query string parameter.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetChargebackQueryParamEmbed> embed() {
        return (JsonNullable<GetChargebackQueryParamEmbed>) embed;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Provide the ID of the related payment.
     */
    public GetChargebackRequest withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    /**
     * Provide the ID of the related chargeback.
     */
    public GetChargebackRequest withChargebackId(String chargebackId) {
        Utils.checkNotNull(chargebackId, "chargebackId");
        this.chargebackId = chargebackId;
        return this;
    }

    /**
     * This endpoint allows you to embed additional information via the `embed` query string parameter.
     */
    public GetChargebackRequest withEmbed(GetChargebackQueryParamEmbed embed) {
        Utils.checkNotNull(embed, "embed");
        this.embed = JsonNullable.of(embed);
        return this;
    }

    /**
     * This endpoint allows you to embed additional information via the `embed` query string parameter.
     */
    public GetChargebackRequest withEmbed(JsonNullable<? extends GetChargebackQueryParamEmbed> embed) {
        Utils.checkNotNull(embed, "embed");
        this.embed = embed;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public GetChargebackRequest withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public GetChargebackRequest withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetChargebackRequest other = (GetChargebackRequest) o;
        return 
            Objects.deepEquals(this.paymentId, other.paymentId) &&
            Objects.deepEquals(this.chargebackId, other.chargebackId) &&
            Objects.deepEquals(this.embed, other.embed) &&
            Objects.deepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            paymentId,
            chargebackId,
            embed,
            testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetChargebackRequest.class,
                "paymentId", paymentId,
                "chargebackId", chargebackId,
                "embed", embed,
                "testmode", testmode);
    }
    
    public final static class Builder {
 
        private String paymentId;
 
        private String chargebackId;
 
        private JsonNullable<? extends GetChargebackQueryParamEmbed> embed = JsonNullable.undefined();
 
        private JsonNullable<Boolean> testmode = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Provide the ID of the related payment.
         */
        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }

        /**
         * Provide the ID of the related chargeback.
         */
        public Builder chargebackId(String chargebackId) {
            Utils.checkNotNull(chargebackId, "chargebackId");
            this.chargebackId = chargebackId;
            return this;
        }

        /**
         * This endpoint allows you to embed additional information via the `embed` query string parameter.
         */
        public Builder embed(GetChargebackQueryParamEmbed embed) {
            Utils.checkNotNull(embed, "embed");
            this.embed = JsonNullable.of(embed);
            return this;
        }

        /**
         * This endpoint allows you to embed additional information via the `embed` query string parameter.
         */
        public Builder embed(JsonNullable<? extends GetChargebackQueryParamEmbed> embed) {
            Utils.checkNotNull(embed, "embed");
            this.embed = embed;
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }
        
        public GetChargebackRequest build() {
            return new GetChargebackRequest(
                paymentId,
                chargebackId,
                embed,
                testmode);
        }
    }
}
