/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.models.components.EntitySettlement;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;


public class ListSettlementsEmbedded {
    /**
     * An array of settlement objects. For a complete reference
     * of the settlement object, refer to the [Get settlement endpoint](get-settlement) documentation.
     */
    @JsonProperty("settlements")
    private List<EntitySettlement> settlements;

    @JsonCreator
    public ListSettlementsEmbedded(
            @JsonProperty("settlements") List<EntitySettlement> settlements) {
        Utils.checkNotNull(settlements, "settlements");
        this.settlements = settlements;
    }

    /**
     * An array of settlement objects. For a complete reference
     * of the settlement object, refer to the [Get settlement endpoint](get-settlement) documentation.
     */
    @JsonIgnore
    public List<EntitySettlement> settlements() {
        return settlements;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An array of settlement objects. For a complete reference
     * of the settlement object, refer to the [Get settlement endpoint](get-settlement) documentation.
     */
    public ListSettlementsEmbedded withSettlements(List<EntitySettlement> settlements) {
        Utils.checkNotNull(settlements, "settlements");
        this.settlements = settlements;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListSettlementsEmbedded other = (ListSettlementsEmbedded) o;
        return 
            Utils.enhancedDeepEquals(this.settlements, other.settlements);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            settlements);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListSettlementsEmbedded.class,
                "settlements", settlements);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<EntitySettlement> settlements;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * An array of settlement objects. For a complete reference
         * of the settlement object, refer to the [Get settlement endpoint](get-settlement) documentation.
         */
        public Builder settlements(List<EntitySettlement> settlements) {
            Utils.checkNotNull(settlements, "settlements");
            this.settlements = settlements;
            return this;
        }

        public ListSettlementsEmbedded build() {

            return new ListSettlementsEmbedded(
                settlements);
        }

    }
}
