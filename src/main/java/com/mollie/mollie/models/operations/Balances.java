/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Balances {

    /**
     * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<String> mode;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * The balance's ISO 4217 currency code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends ListBalancesCurrency> currency;

    /**
     * The description or name of the balance. Can be used to denote the purpose of the balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The status of the balance.
     * 
     * <p>Possible values: `active` `inactive`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * The frequency with which the available amount on the balance will be settled to the configured transfer destination.
     * 
     * <p>Settlements created during weekends or on bank holidays will take place on the next business day.
     * 
     * <p>Possible values: `daily` `every-monday` `every-tuesday` `every-wednesday` `every-thursday` `every-friday` `monthly` `never`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferFrequency")
    private Optional<String> transferFrequency;

    /**
     * The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds this threshold, the complete balance will be paid out to the transfer destination according to the configured frequency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferThreshold")
    private Optional<? extends ListBalancesTransferThreshold> transferThreshold;

    /**
     * The transfer reference set to be included in all the transfers for this balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferReference")
    private JsonNullable<String> transferReference;

    /**
     * The destination where the available amount will be automatically transferred to according to the configured transfer frequency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferDestination")
    private JsonNullable<? extends ListBalancesTransferDestination> transferDestination;

    /**
     * The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableAmount")
    private Optional<? extends ListBalancesAvailableAmount> availableAmount;

    /**
     * The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a few days to clear.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingAmount")
    private Optional<? extends ListBalancesPendingAmount> pendingAmount;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends ListBalancesBalancesLinks> links;

    @JsonCreator
    public Balances(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mode") Optional<String> mode,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("currency") Optional<? extends ListBalancesCurrency> currency,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("transferFrequency") Optional<String> transferFrequency,
            @JsonProperty("transferThreshold") Optional<? extends ListBalancesTransferThreshold> transferThreshold,
            @JsonProperty("transferReference") JsonNullable<String> transferReference,
            @JsonProperty("transferDestination") JsonNullable<? extends ListBalancesTransferDestination> transferDestination,
            @JsonProperty("availableAmount") Optional<? extends ListBalancesAvailableAmount> availableAmount,
            @JsonProperty("pendingAmount") Optional<? extends ListBalancesPendingAmount> pendingAmount,
            @JsonProperty("_links") Optional<? extends ListBalancesBalancesLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(transferFrequency, "transferFrequency");
        Utils.checkNotNull(transferThreshold, "transferThreshold");
        Utils.checkNotNull(transferReference, "transferReference");
        Utils.checkNotNull(transferDestination, "transferDestination");
        Utils.checkNotNull(availableAmount, "availableAmount");
        Utils.checkNotNull(pendingAmount, "pendingAmount");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.createdAt = createdAt;
        this.currency = currency;
        this.description = description;
        this.status = status;
        this.transferFrequency = transferFrequency;
        this.transferThreshold = transferThreshold;
        this.transferReference = transferReference;
        this.transferDestination = transferDestination;
        this.availableAmount = availableAmount;
        this.pendingAmount = pendingAmount;
        this.links = links;
    }
    
    public Balances() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this balance.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    @JsonIgnore
    public Optional<String> mode() {
        return mode;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * The balance's ISO 4217 currency code.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListBalancesCurrency> currency() {
        return (Optional<ListBalancesCurrency>) currency;
    }

    /**
     * The description or name of the balance. Can be used to denote the purpose of the balance.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The status of the balance.
     * 
     * <p>Possible values: `active` `inactive`
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * The frequency with which the available amount on the balance will be settled to the configured transfer destination.
     * 
     * <p>Settlements created during weekends or on bank holidays will take place on the next business day.
     * 
     * <p>Possible values: `daily` `every-monday` `every-tuesday` `every-wednesday` `every-thursday` `every-friday` `monthly` `never`
     */
    @JsonIgnore
    public Optional<String> transferFrequency() {
        return transferFrequency;
    }

    /**
     * The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds this threshold, the complete balance will be paid out to the transfer destination according to the configured frequency.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListBalancesTransferThreshold> transferThreshold() {
        return (Optional<ListBalancesTransferThreshold>) transferThreshold;
    }

    /**
     * The transfer reference set to be included in all the transfers for this balance.
     */
    @JsonIgnore
    public JsonNullable<String> transferReference() {
        return transferReference;
    }

    /**
     * The destination where the available amount will be automatically transferred to according to the configured transfer frequency.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ListBalancesTransferDestination> transferDestination() {
        return (JsonNullable<ListBalancesTransferDestination>) transferDestination;
    }

    /**
     * The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListBalancesAvailableAmount> availableAmount() {
        return (Optional<ListBalancesAvailableAmount>) availableAmount;
    }

    /**
     * The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a few days to clear.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListBalancesPendingAmount> pendingAmount() {
        return (Optional<ListBalancesPendingAmount>) pendingAmount;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListBalancesBalancesLinks> links() {
        return (Optional<ListBalancesBalancesLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
     */
    public Balances withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
     */
    public Balances withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this balance.
     */
    public Balances withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The identifier uniquely referring to this balance.
     */
    public Balances withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    public Balances withMode(String mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     * 
     * <p>Possible values: `live` `test`
     */
    public Balances withMode(Optional<String> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public Balances withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public Balances withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The balance's ISO 4217 currency code.
     */
    public Balances withCurrency(ListBalancesCurrency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * The balance's ISO 4217 currency code.
     */
    public Balances withCurrency(Optional<? extends ListBalancesCurrency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The description or name of the balance. Can be used to denote the purpose of the balance.
     */
    public Balances withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description or name of the balance. Can be used to denote the purpose of the balance.
     */
    public Balances withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The status of the balance.
     * 
     * <p>Possible values: `active` `inactive`
     */
    public Balances withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the balance.
     * 
     * <p>Possible values: `active` `inactive`
     */
    public Balances withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The frequency with which the available amount on the balance will be settled to the configured transfer destination.
     * 
     * <p>Settlements created during weekends or on bank holidays will take place on the next business day.
     * 
     * <p>Possible values: `daily` `every-monday` `every-tuesday` `every-wednesday` `every-thursday` `every-friday` `monthly` `never`
     */
    public Balances withTransferFrequency(String transferFrequency) {
        Utils.checkNotNull(transferFrequency, "transferFrequency");
        this.transferFrequency = Optional.ofNullable(transferFrequency);
        return this;
    }

    /**
     * The frequency with which the available amount on the balance will be settled to the configured transfer destination.
     * 
     * <p>Settlements created during weekends or on bank holidays will take place on the next business day.
     * 
     * <p>Possible values: `daily` `every-monday` `every-tuesday` `every-wednesday` `every-thursday` `every-friday` `monthly` `never`
     */
    public Balances withTransferFrequency(Optional<String> transferFrequency) {
        Utils.checkNotNull(transferFrequency, "transferFrequency");
        this.transferFrequency = transferFrequency;
        return this;
    }

    /**
     * The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds this threshold, the complete balance will be paid out to the transfer destination according to the configured frequency.
     */
    public Balances withTransferThreshold(ListBalancesTransferThreshold transferThreshold) {
        Utils.checkNotNull(transferThreshold, "transferThreshold");
        this.transferThreshold = Optional.ofNullable(transferThreshold);
        return this;
    }

    /**
     * The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds this threshold, the complete balance will be paid out to the transfer destination according to the configured frequency.
     */
    public Balances withTransferThreshold(Optional<? extends ListBalancesTransferThreshold> transferThreshold) {
        Utils.checkNotNull(transferThreshold, "transferThreshold");
        this.transferThreshold = transferThreshold;
        return this;
    }

    /**
     * The transfer reference set to be included in all the transfers for this balance.
     */
    public Balances withTransferReference(String transferReference) {
        Utils.checkNotNull(transferReference, "transferReference");
        this.transferReference = JsonNullable.of(transferReference);
        return this;
    }

    /**
     * The transfer reference set to be included in all the transfers for this balance.
     */
    public Balances withTransferReference(JsonNullable<String> transferReference) {
        Utils.checkNotNull(transferReference, "transferReference");
        this.transferReference = transferReference;
        return this;
    }

    /**
     * The destination where the available amount will be automatically transferred to according to the configured transfer frequency.
     */
    public Balances withTransferDestination(ListBalancesTransferDestination transferDestination) {
        Utils.checkNotNull(transferDestination, "transferDestination");
        this.transferDestination = JsonNullable.of(transferDestination);
        return this;
    }

    /**
     * The destination where the available amount will be automatically transferred to according to the configured transfer frequency.
     */
    public Balances withTransferDestination(JsonNullable<? extends ListBalancesTransferDestination> transferDestination) {
        Utils.checkNotNull(transferDestination, "transferDestination");
        this.transferDestination = transferDestination;
        return this;
    }

    /**
     * The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
     */
    public Balances withAvailableAmount(ListBalancesAvailableAmount availableAmount) {
        Utils.checkNotNull(availableAmount, "availableAmount");
        this.availableAmount = Optional.ofNullable(availableAmount);
        return this;
    }

    /**
     * The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
     */
    public Balances withAvailableAmount(Optional<? extends ListBalancesAvailableAmount> availableAmount) {
        Utils.checkNotNull(availableAmount, "availableAmount");
        this.availableAmount = availableAmount;
        return this;
    }

    /**
     * The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a few days to clear.
     */
    public Balances withPendingAmount(ListBalancesPendingAmount pendingAmount) {
        Utils.checkNotNull(pendingAmount, "pendingAmount");
        this.pendingAmount = Optional.ofNullable(pendingAmount);
        return this;
    }

    /**
     * The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a few days to clear.
     */
    public Balances withPendingAmount(Optional<? extends ListBalancesPendingAmount> pendingAmount) {
        Utils.checkNotNull(pendingAmount, "pendingAmount");
        this.pendingAmount = pendingAmount;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public Balances withLinks(ListBalancesBalancesLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public Balances withLinks(Optional<? extends ListBalancesBalancesLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Balances other = (Balances) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.mode, other.mode) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.transferFrequency, other.transferFrequency) &&
            Objects.deepEquals(this.transferThreshold, other.transferThreshold) &&
            Objects.deepEquals(this.transferReference, other.transferReference) &&
            Objects.deepEquals(this.transferDestination, other.transferDestination) &&
            Objects.deepEquals(this.availableAmount, other.availableAmount) &&
            Objects.deepEquals(this.pendingAmount, other.pendingAmount) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            mode,
            createdAt,
            currency,
            description,
            status,
            transferFrequency,
            transferThreshold,
            transferReference,
            transferDestination,
            availableAmount,
            pendingAmount,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Balances.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "createdAt", createdAt,
                "currency", currency,
                "description", description,
                "status", status,
                "transferFrequency", transferFrequency,
                "transferThreshold", transferThreshold,
                "transferReference", transferReference,
                "transferDestination", transferDestination,
                "availableAmount", availableAmount,
                "pendingAmount", pendingAmount,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> mode = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<? extends ListBalancesCurrency> currency = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> status = Optional.empty();
 
        private Optional<String> transferFrequency = Optional.empty();
 
        private Optional<? extends ListBalancesTransferThreshold> transferThreshold = Optional.empty();
 
        private JsonNullable<String> transferReference = JsonNullable.undefined();
 
        private JsonNullable<? extends ListBalancesTransferDestination> transferDestination = JsonNullable.undefined();
 
        private Optional<? extends ListBalancesAvailableAmount> availableAmount = Optional.empty();
 
        private Optional<? extends ListBalancesPendingAmount> pendingAmount = Optional.empty();
 
        private Optional<? extends ListBalancesBalancesLinks> links = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this balance.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this balance.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * <p>Possible values: `live` `test`
         */
        public Builder mode(String mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         * 
         * <p>Possible values: `live` `test`
         */
        public Builder mode(Optional<String> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The balance's ISO 4217 currency code.
         */
        public Builder currency(ListBalancesCurrency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * The balance's ISO 4217 currency code.
         */
        public Builder currency(Optional<? extends ListBalancesCurrency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The description or name of the balance. Can be used to denote the purpose of the balance.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description or name of the balance. Can be used to denote the purpose of the balance.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The status of the balance.
         * 
         * <p>Possible values: `active` `inactive`
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the balance.
         * 
         * <p>Possible values: `active` `inactive`
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The frequency with which the available amount on the balance will be settled to the configured transfer destination.
         * 
         * <p>Settlements created during weekends or on bank holidays will take place on the next business day.
         * 
         * <p>Possible values: `daily` `every-monday` `every-tuesday` `every-wednesday` `every-thursday` `every-friday` `monthly` `never`
         */
        public Builder transferFrequency(String transferFrequency) {
            Utils.checkNotNull(transferFrequency, "transferFrequency");
            this.transferFrequency = Optional.ofNullable(transferFrequency);
            return this;
        }

        /**
         * The frequency with which the available amount on the balance will be settled to the configured transfer destination.
         * 
         * <p>Settlements created during weekends or on bank holidays will take place on the next business day.
         * 
         * <p>Possible values: `daily` `every-monday` `every-tuesday` `every-wednesday` `every-thursday` `every-friday` `monthly` `never`
         */
        public Builder transferFrequency(Optional<String> transferFrequency) {
            Utils.checkNotNull(transferFrequency, "transferFrequency");
            this.transferFrequency = transferFrequency;
            return this;
        }

        /**
         * The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds this threshold, the complete balance will be paid out to the transfer destination according to the configured frequency.
         */
        public Builder transferThreshold(ListBalancesTransferThreshold transferThreshold) {
            Utils.checkNotNull(transferThreshold, "transferThreshold");
            this.transferThreshold = Optional.ofNullable(transferThreshold);
            return this;
        }

        /**
         * The minimum amount configured for scheduled automatic settlements. As soon as the amount on the balance exceeds this threshold, the complete balance will be paid out to the transfer destination according to the configured frequency.
         */
        public Builder transferThreshold(Optional<? extends ListBalancesTransferThreshold> transferThreshold) {
            Utils.checkNotNull(transferThreshold, "transferThreshold");
            this.transferThreshold = transferThreshold;
            return this;
        }

        /**
         * The transfer reference set to be included in all the transfers for this balance.
         */
        public Builder transferReference(String transferReference) {
            Utils.checkNotNull(transferReference, "transferReference");
            this.transferReference = JsonNullable.of(transferReference);
            return this;
        }

        /**
         * The transfer reference set to be included in all the transfers for this balance.
         */
        public Builder transferReference(JsonNullable<String> transferReference) {
            Utils.checkNotNull(transferReference, "transferReference");
            this.transferReference = transferReference;
            return this;
        }

        /**
         * The destination where the available amount will be automatically transferred to according to the configured transfer frequency.
         */
        public Builder transferDestination(ListBalancesTransferDestination transferDestination) {
            Utils.checkNotNull(transferDestination, "transferDestination");
            this.transferDestination = JsonNullable.of(transferDestination);
            return this;
        }

        /**
         * The destination where the available amount will be automatically transferred to according to the configured transfer frequency.
         */
        public Builder transferDestination(JsonNullable<? extends ListBalancesTransferDestination> transferDestination) {
            Utils.checkNotNull(transferDestination, "transferDestination");
            this.transferDestination = transferDestination;
            return this;
        }

        /**
         * The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
         */
        public Builder availableAmount(ListBalancesAvailableAmount availableAmount) {
            Utils.checkNotNull(availableAmount, "availableAmount");
            this.availableAmount = Optional.ofNullable(availableAmount);
            return this;
        }

        /**
         * The amount directly available on the balance, e.g. `{"currency":"EUR", "value":"100.00"}`.
         */
        public Builder availableAmount(Optional<? extends ListBalancesAvailableAmount> availableAmount) {
            Utils.checkNotNull(availableAmount, "availableAmount");
            this.availableAmount = availableAmount;
            return this;
        }

        /**
         * The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a few days to clear.
         */
        public Builder pendingAmount(ListBalancesPendingAmount pendingAmount) {
            Utils.checkNotNull(pendingAmount, "pendingAmount");
            this.pendingAmount = Optional.ofNullable(pendingAmount);
            return this;
        }

        /**
         * The total amount that is queued to be transferred to your balance. For example, a credit card payment can take a few days to clear.
         */
        public Builder pendingAmount(Optional<? extends ListBalancesPendingAmount> pendingAmount) {
            Utils.checkNotNull(pendingAmount, "pendingAmount");
            this.pendingAmount = pendingAmount;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(ListBalancesBalancesLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends ListBalancesBalancesLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public Balances build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }
            return new Balances(
                resource,
                id,
                mode,
                createdAt,
                currency,
                description,
                status,
                transferFrequency,
                transferThreshold,
                transferReference,
                transferDestination,
                availableAmount,
                pendingAmount,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"balance\"",
                        new TypeReference<Optional<String>>() {});
    }
}
