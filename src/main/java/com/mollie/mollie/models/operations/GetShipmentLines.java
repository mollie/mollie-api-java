/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class GetShipmentLines {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The ID of the order line. For example: `odl_dgtxyl`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The number of items that should be shipped for this order line. When this parameter is omitted, all remaining unshipped items of this order line will be considered 'shipped'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private JsonNullable<Long> quantity;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitPrice")
    private Optional<? extends GetShipmentUnitPrice> unitPrice;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private Optional<? extends GetShipmentTotalAmount> totalAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatRate")
    private Optional<String> vatRate;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatAmount")
    private Optional<? extends GetShipmentVatAmount> vatAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private Optional<String> sku;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderId")
    private Optional<String> orderId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    @JsonCreator
    public GetShipmentLines(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("quantity") JsonNullable<Long> quantity,
            @JsonProperty("unitPrice") Optional<? extends GetShipmentUnitPrice> unitPrice,
            @JsonProperty("totalAmount") Optional<? extends GetShipmentTotalAmount> totalAmount,
            @JsonProperty("vatRate") Optional<String> vatRate,
            @JsonProperty("vatAmount") Optional<? extends GetShipmentVatAmount> vatAmount,
            @JsonProperty("sku") Optional<String> sku,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("orderId") Optional<String> orderId,
            @JsonProperty("createdAt") Optional<String> createdAt) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(unitPrice, "unitPrice");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(vatRate, "vatRate");
        Utils.checkNotNull(vatAmount, "vatAmount");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(orderId, "orderId");
        Utils.checkNotNull(createdAt, "createdAt");
        this.resource = resource;
        this.id = id;
        this.type = type;
        this.name = name;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.totalAmount = totalAmount;
        this.vatRate = vatRate;
        this.vatAmount = vatAmount;
        this.sku = sku;
        this.status = status;
        this.orderId = orderId;
        this.createdAt = createdAt;
    }
    
    public GetShipmentLines() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The ID of the order line. For example: `odl_dgtxyl`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The number of items that should be shipped for this order line. When this parameter is omitted, all remaining unshipped items of this order line will be considered 'shipped'.
     */
    @JsonIgnore
    public JsonNullable<Long> quantity() {
        return quantity;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetShipmentUnitPrice> unitPrice() {
        return (Optional<GetShipmentUnitPrice>) unitPrice;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetShipmentTotalAmount> totalAmount() {
        return (Optional<GetShipmentTotalAmount>) totalAmount;
    }

    @JsonIgnore
    public Optional<String> vatRate() {
        return vatRate;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetShipmentVatAmount> vatAmount() {
        return (Optional<GetShipmentVatAmount>) vatAmount;
    }

    @JsonIgnore
    public Optional<String> sku() {
        return sku;
    }

    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    @JsonIgnore
    public Optional<String> orderId() {
        return orderId;
    }

    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetShipmentLines withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    public GetShipmentLines withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The ID of the order line. For example: `odl_dgtxyl`.
     */
    public GetShipmentLines withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The ID of the order line. For example: `odl_dgtxyl`.
     */
    public GetShipmentLines withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public GetShipmentLines withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public GetShipmentLines withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public GetShipmentLines withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public GetShipmentLines withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The number of items that should be shipped for this order line. When this parameter is omitted, all remaining unshipped items of this order line will be considered 'shipped'.
     */
    public GetShipmentLines withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = JsonNullable.of(quantity);
        return this;
    }

    /**
     * The number of items that should be shipped for this order line. When this parameter is omitted, all remaining unshipped items of this order line will be considered 'shipped'.
     */
    public GetShipmentLines withQuantity(JsonNullable<Long> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public GetShipmentLines withUnitPrice(GetShipmentUnitPrice unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = Optional.ofNullable(unitPrice);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public GetShipmentLines withUnitPrice(Optional<? extends GetShipmentUnitPrice> unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = unitPrice;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public GetShipmentLines withTotalAmount(GetShipmentTotalAmount totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public GetShipmentLines withTotalAmount(Optional<? extends GetShipmentTotalAmount> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    public GetShipmentLines withVatRate(String vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = Optional.ofNullable(vatRate);
        return this;
    }

    public GetShipmentLines withVatRate(Optional<String> vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = vatRate;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public GetShipmentLines withVatAmount(GetShipmentVatAmount vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = Optional.ofNullable(vatAmount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public GetShipmentLines withVatAmount(Optional<? extends GetShipmentVatAmount> vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = vatAmount;
        return this;
    }

    public GetShipmentLines withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = Optional.ofNullable(sku);
        return this;
    }

    public GetShipmentLines withSku(Optional<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    public GetShipmentLines withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public GetShipmentLines withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public GetShipmentLines withOrderId(String orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = Optional.ofNullable(orderId);
        return this;
    }

    public GetShipmentLines withOrderId(Optional<String> orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = orderId;
        return this;
    }

    public GetShipmentLines withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public GetShipmentLines withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetShipmentLines other = (GetShipmentLines) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.unitPrice, other.unitPrice) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.vatRate, other.vatRate) &&
            Objects.deepEquals(this.vatAmount, other.vatAmount) &&
            Objects.deepEquals(this.sku, other.sku) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.orderId, other.orderId) &&
            Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            type,
            name,
            quantity,
            unitPrice,
            totalAmount,
            vatRate,
            vatAmount,
            sku,
            status,
            orderId,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetShipmentLines.class,
                "resource", resource,
                "id", id,
                "type", type,
                "name", name,
                "quantity", quantity,
                "unitPrice", unitPrice,
                "totalAmount", totalAmount,
                "vatRate", vatRate,
                "vatAmount", vatAmount,
                "sku", sku,
                "status", status,
                "orderId", orderId,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private Optional<String> resource = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> type = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private JsonNullable<Long> quantity = JsonNullable.undefined();
 
        private Optional<? extends GetShipmentUnitPrice> unitPrice = Optional.empty();
 
        private Optional<? extends GetShipmentTotalAmount> totalAmount = Optional.empty();
 
        private Optional<String> vatRate = Optional.empty();
 
        private Optional<? extends GetShipmentVatAmount> vatAmount = Optional.empty();
 
        private Optional<String> sku = Optional.empty();
 
        private Optional<String> status = Optional.empty();
 
        private Optional<String> orderId = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The ID of the order line. For example: `odl_dgtxyl`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the order line. For example: `odl_dgtxyl`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The number of items that should be shipped for this order line. When this parameter is omitted, all remaining unshipped items of this order line will be considered 'shipped'.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = JsonNullable.of(quantity);
            return this;
        }

        /**
         * The number of items that should be shipped for this order line. When this parameter is omitted, all remaining unshipped items of this order line will be considered 'shipped'.
         */
        public Builder quantity(JsonNullable<Long> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder unitPrice(GetShipmentUnitPrice unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = Optional.ofNullable(unitPrice);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder unitPrice(Optional<? extends GetShipmentUnitPrice> unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = unitPrice;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder totalAmount(GetShipmentTotalAmount totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder totalAmount(Optional<? extends GetShipmentTotalAmount> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder vatRate(String vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = Optional.ofNullable(vatRate);
            return this;
        }

        public Builder vatRate(Optional<String> vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = vatRate;
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder vatAmount(GetShipmentVatAmount vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = Optional.ofNullable(vatAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder vatAmount(Optional<? extends GetShipmentVatAmount> vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = vatAmount;
            return this;
        }

        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = Optional.ofNullable(sku);
            return this;
        }

        public Builder sku(Optional<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder orderId(String orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        public Builder orderId(Optional<String> orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = orderId;
            return this;
        }

        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public GetShipmentLines build() {
            return new GetShipmentLines(
                resource,
                id,
                type,
                name,
                quantity,
                unitPrice,
                totalAmount,
                vatRate,
                vatAmount,
                sku,
                status,
                orderId,
                createdAt);
        }
    }
}

