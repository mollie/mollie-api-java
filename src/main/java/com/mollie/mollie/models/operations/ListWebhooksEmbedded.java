/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.models.components.EntityWebhook;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;


public class ListWebhooksEmbedded {
    /**
     * A list of webhooks.
     */
    @JsonProperty("webhooks")
    private List<EntityWebhook> webhooks;

    @JsonCreator
    public ListWebhooksEmbedded(
            @JsonProperty("webhooks") List<EntityWebhook> webhooks) {
        Utils.checkNotNull(webhooks, "webhooks");
        this.webhooks = webhooks;
    }

    /**
     * A list of webhooks.
     */
    @JsonIgnore
    public List<EntityWebhook> webhooks() {
        return webhooks;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A list of webhooks.
     */
    public ListWebhooksEmbedded withWebhooks(List<EntityWebhook> webhooks) {
        Utils.checkNotNull(webhooks, "webhooks");
        this.webhooks = webhooks;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListWebhooksEmbedded other = (ListWebhooksEmbedded) o;
        return 
            Utils.enhancedDeepEquals(this.webhooks, other.webhooks);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            webhooks);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListWebhooksEmbedded.class,
                "webhooks", webhooks);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<EntityWebhook> webhooks;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A list of webhooks.
         */
        public Builder webhooks(List<EntityWebhook> webhooks) {
            Utils.checkNotNull(webhooks, "webhooks");
            this.webhooks = webhooks;
            return this;
        }

        public ListWebhooksEmbedded build() {

            return new ListWebhooksEmbedded(
                webhooks);
        }

    }
}
