/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class ListWebhooksEmbedded {

    /**
     * A list of webhooks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhooks")
    private Optional<? extends List<Webhooks>> webhooks;

    @JsonCreator
    public ListWebhooksEmbedded(
            @JsonProperty("webhooks") Optional<? extends List<Webhooks>> webhooks) {
        Utils.checkNotNull(webhooks, "webhooks");
        this.webhooks = webhooks;
    }
    
    public ListWebhooksEmbedded() {
        this(Optional.empty());
    }

    /**
     * A list of webhooks.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Webhooks>> webhooks() {
        return (Optional<List<Webhooks>>) webhooks;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A list of webhooks.
     */
    public ListWebhooksEmbedded withWebhooks(List<Webhooks> webhooks) {
        Utils.checkNotNull(webhooks, "webhooks");
        this.webhooks = Optional.ofNullable(webhooks);
        return this;
    }

    /**
     * A list of webhooks.
     */
    public ListWebhooksEmbedded withWebhooks(Optional<? extends List<Webhooks>> webhooks) {
        Utils.checkNotNull(webhooks, "webhooks");
        this.webhooks = webhooks;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListWebhooksEmbedded other = (ListWebhooksEmbedded) o;
        return 
            Utils.enhancedDeepEquals(this.webhooks, other.webhooks);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            webhooks);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListWebhooksEmbedded.class,
                "webhooks", webhooks);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Webhooks>> webhooks = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A list of webhooks.
         */
        public Builder webhooks(List<Webhooks> webhooks) {
            Utils.checkNotNull(webhooks, "webhooks");
            this.webhooks = Optional.ofNullable(webhooks);
            return this;
        }

        /**
         * A list of webhooks.
         */
        public Builder webhooks(Optional<? extends List<Webhooks>> webhooks) {
            Utils.checkNotNull(webhooks, "webhooks");
            this.webhooks = webhooks;
            return this;
        }
        
        public ListWebhooksEmbedded build() {
            return new ListWebhooksEmbedded(
                webhooks);
        }
    }
}
