/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class UpdatePaymentLinkRequestBody {

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
     * 
     * <p>Updating the description does not affect any previously existing payments created for this payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumAmount")
    private Optional<? extends UpdatePaymentLinkMinimumAmount> minimumAmount;

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    private Optional<Boolean> archived;

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedMethods")
    private JsonNullable<? extends List<UpdatePaymentLinkAllowedMethods>> allowedMethods;

    @JsonCreator
    public UpdatePaymentLinkRequestBody(
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("minimumAmount") Optional<? extends UpdatePaymentLinkMinimumAmount> minimumAmount,
            @JsonProperty("archived") Optional<Boolean> archived,
            @JsonProperty("allowedMethods") JsonNullable<? extends List<UpdatePaymentLinkAllowedMethods>> allowedMethods) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        Utils.checkNotNull(archived, "archived");
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.description = description;
        this.minimumAmount = minimumAmount;
        this.archived = archived;
        this.allowedMethods = allowedMethods;
    }
    
    public UpdatePaymentLinkRequestBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
     * 
     * <p>Updating the description does not affect any previously existing payments created for this payment link.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdatePaymentLinkMinimumAmount> minimumAmount() {
        return (Optional<UpdatePaymentLinkMinimumAmount>) minimumAmount;
    }

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
     */
    @JsonIgnore
    public Optional<Boolean> archived() {
        return archived;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<UpdatePaymentLinkAllowedMethods>> allowedMethods() {
        return (JsonNullable<List<UpdatePaymentLinkAllowedMethods>>) allowedMethods;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
     * 
     * <p>Updating the description does not affect any previously existing payments created for this payment link.
     */
    public UpdatePaymentLinkRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
     * 
     * <p>Updating the description does not affect any previously existing payments created for this payment link.
     */
    public UpdatePaymentLinkRequestBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    public UpdatePaymentLinkRequestBody withMinimumAmount(UpdatePaymentLinkMinimumAmount minimumAmount) {
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        this.minimumAmount = Optional.ofNullable(minimumAmount);
        return this;
    }

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    public UpdatePaymentLinkRequestBody withMinimumAmount(Optional<? extends UpdatePaymentLinkMinimumAmount> minimumAmount) {
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        this.minimumAmount = minimumAmount;
        return this;
    }

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
     */
    public UpdatePaymentLinkRequestBody withArchived(boolean archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = Optional.ofNullable(archived);
        return this;
    }

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
     */
    public UpdatePaymentLinkRequestBody withArchived(Optional<Boolean> archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = archived;
        return this;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
     */
    public UpdatePaymentLinkRequestBody withAllowedMethods(List<UpdatePaymentLinkAllowedMethods> allowedMethods) {
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.allowedMethods = JsonNullable.of(allowedMethods);
        return this;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
     */
    public UpdatePaymentLinkRequestBody withAllowedMethods(JsonNullable<? extends List<UpdatePaymentLinkAllowedMethods>> allowedMethods) {
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.allowedMethods = allowedMethods;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdatePaymentLinkRequestBody other = (UpdatePaymentLinkRequestBody) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.minimumAmount, other.minimumAmount) &&
            Objects.deepEquals(this.archived, other.archived) &&
            Objects.deepEquals(this.allowedMethods, other.allowedMethods);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            minimumAmount,
            archived,
            allowedMethods);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdatePaymentLinkRequestBody.class,
                "description", description,
                "minimumAmount", minimumAmount,
                "archived", archived,
                "allowedMethods", allowedMethods);
    }
    
    public final static class Builder {
 
        private Optional<String> description = Optional.empty();
 
        private Optional<? extends UpdatePaymentLinkMinimumAmount> minimumAmount = Optional.empty();
 
        private Optional<Boolean> archived = Optional.empty();
 
        private JsonNullable<? extends List<UpdatePaymentLinkAllowedMethods>> allowedMethods = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
         * 
         * <p>Updating the description does not affect any previously existing payments created for this payment link.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
         * 
         * <p>Updating the description does not affect any previously existing payments created for this payment link.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
         */
        public Builder minimumAmount(UpdatePaymentLinkMinimumAmount minimumAmount) {
            Utils.checkNotNull(minimumAmount, "minimumAmount");
            this.minimumAmount = Optional.ofNullable(minimumAmount);
            return this;
        }

        /**
         * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
         */
        public Builder minimumAmount(Optional<? extends UpdatePaymentLinkMinimumAmount> minimumAmount) {
            Utils.checkNotNull(minimumAmount, "minimumAmount");
            this.minimumAmount = minimumAmount;
            return this;
        }

        /**
         * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
         */
        public Builder archived(boolean archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = Optional.ofNullable(archived);
            return this;
        }

        /**
         * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
         */
        public Builder archived(Optional<Boolean> archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = archived;
            return this;
        }

        /**
         * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
         */
        public Builder allowedMethods(List<UpdatePaymentLinkAllowedMethods> allowedMethods) {
            Utils.checkNotNull(allowedMethods, "allowedMethods");
            this.allowedMethods = JsonNullable.of(allowedMethods);
            return this;
        }

        /**
         * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
         */
        public Builder allowedMethods(JsonNullable<? extends List<UpdatePaymentLinkAllowedMethods>> allowedMethods) {
            Utils.checkNotNull(allowedMethods, "allowedMethods");
            this.allowedMethods = allowedMethods;
            return this;
        }
        
        public UpdatePaymentLinkRequestBody build() {
            return new UpdatePaymentLinkRequestBody(
                description,
                minimumAmount,
                archived,
                allowedMethods);
        }
    }
}
