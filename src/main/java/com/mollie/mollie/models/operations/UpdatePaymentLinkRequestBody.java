/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class UpdatePaymentLinkRequestBody {

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
     * 
     * <p>Updating the description does not affect any previously existing payments created for this payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumAmount")
    private Optional<? extends UpdatePaymentLinkMinimumAmount> minimumAmount;

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    private Optional<Boolean> archived;

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
     * 
     * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard', 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedMethods")
    private JsonNullable<? extends List<String>> allowedMethods;

    /**
     * Optionally provide the order lines for the payment. Each line contains details such as a description of the item ordered and its price.
     * 
     * <p>All lines must have the same currency as the payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    private JsonNullable<? extends List<UpdatePaymentLinkLines>> lines;

    /**
     * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
     * 
     * <p>Required for payment method `in3`, `klarna`, `billie` and `riverty`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingAddress")
    private Optional<? extends UpdatePaymentLinkBillingAddress> billingAddress;

    /**
     * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippingAddress")
    private Optional<? extends UpdatePaymentLinkShippingAddress> shippingAddress;

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public UpdatePaymentLinkRequestBody(
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("minimumAmount") Optional<? extends UpdatePaymentLinkMinimumAmount> minimumAmount,
            @JsonProperty("archived") Optional<Boolean> archived,
            @JsonProperty("allowedMethods") JsonNullable<? extends List<String>> allowedMethods,
            @JsonProperty("lines") JsonNullable<? extends List<UpdatePaymentLinkLines>> lines,
            @JsonProperty("billingAddress") Optional<? extends UpdatePaymentLinkBillingAddress> billingAddress,
            @JsonProperty("shippingAddress") Optional<? extends UpdatePaymentLinkShippingAddress> shippingAddress,
            @JsonProperty("testmode") JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        Utils.checkNotNull(archived, "archived");
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        Utils.checkNotNull(lines, "lines");
        Utils.checkNotNull(billingAddress, "billingAddress");
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        Utils.checkNotNull(testmode, "testmode");
        this.description = description;
        this.minimumAmount = minimumAmount;
        this.archived = archived;
        this.allowedMethods = allowedMethods;
        this.lines = lines;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.testmode = testmode;
    }
    
    public UpdatePaymentLinkRequestBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
     * 
     * <p>Updating the description does not affect any previously existing payments created for this payment link.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdatePaymentLinkMinimumAmount> minimumAmount() {
        return (Optional<UpdatePaymentLinkMinimumAmount>) minimumAmount;
    }

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
     */
    @JsonIgnore
    public Optional<Boolean> archived() {
        return archived;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
     * 
     * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard', 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint'.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> allowedMethods() {
        return (JsonNullable<List<String>>) allowedMethods;
    }

    /**
     * Optionally provide the order lines for the payment. Each line contains details such as a description of the item ordered and its price.
     * 
     * <p>All lines must have the same currency as the payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<UpdatePaymentLinkLines>> lines() {
        return (JsonNullable<List<UpdatePaymentLinkLines>>) lines;
    }

    /**
     * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
     * 
     * <p>Required for payment method `in3`, `klarna`, `billie` and `riverty`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdatePaymentLinkBillingAddress> billingAddress() {
        return (Optional<UpdatePaymentLinkBillingAddress>) billingAddress;
    }

    /**
     * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdatePaymentLinkShippingAddress> shippingAddress() {
        return (Optional<UpdatePaymentLinkShippingAddress>) shippingAddress;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
     * 
     * <p>Updating the description does not affect any previously existing payments created for this payment link.
     */
    public UpdatePaymentLinkRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
     * 
     * <p>Updating the description does not affect any previously existing payments created for this payment link.
     */
    public UpdatePaymentLinkRequestBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    public UpdatePaymentLinkRequestBody withMinimumAmount(UpdatePaymentLinkMinimumAmount minimumAmount) {
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        this.minimumAmount = Optional.ofNullable(minimumAmount);
        return this;
    }

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    public UpdatePaymentLinkRequestBody withMinimumAmount(Optional<? extends UpdatePaymentLinkMinimumAmount> minimumAmount) {
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        this.minimumAmount = minimumAmount;
        return this;
    }

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
     */
    public UpdatePaymentLinkRequestBody withArchived(boolean archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = Optional.ofNullable(archived);
        return this;
    }

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
     */
    public UpdatePaymentLinkRequestBody withArchived(Optional<Boolean> archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = archived;
        return this;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
     * 
     * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard', 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint'.
     */
    public UpdatePaymentLinkRequestBody withAllowedMethods(List<String> allowedMethods) {
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.allowedMethods = JsonNullable.of(allowedMethods);
        return this;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
     * 
     * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard', 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint'.
     */
    public UpdatePaymentLinkRequestBody withAllowedMethods(JsonNullable<? extends List<String>> allowedMethods) {
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.allowedMethods = allowedMethods;
        return this;
    }

    /**
     * Optionally provide the order lines for the payment. Each line contains details such as a description of the item ordered and its price.
     * 
     * <p>All lines must have the same currency as the payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
     */
    public UpdatePaymentLinkRequestBody withLines(List<UpdatePaymentLinkLines> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = JsonNullable.of(lines);
        return this;
    }

    /**
     * Optionally provide the order lines for the payment. Each line contains details such as a description of the item ordered and its price.
     * 
     * <p>All lines must have the same currency as the payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
     */
    public UpdatePaymentLinkRequestBody withLines(JsonNullable<? extends List<UpdatePaymentLinkLines>> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = lines;
        return this;
    }

    /**
     * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
     * 
     * <p>Required for payment method `in3`, `klarna`, `billie` and `riverty`.
     */
    public UpdatePaymentLinkRequestBody withBillingAddress(UpdatePaymentLinkBillingAddress billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = Optional.ofNullable(billingAddress);
        return this;
    }

    /**
     * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
     * 
     * <p>Required for payment method `in3`, `klarna`, `billie` and `riverty`.
     */
    public UpdatePaymentLinkRequestBody withBillingAddress(Optional<? extends UpdatePaymentLinkBillingAddress> billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = billingAddress;
        return this;
    }

    /**
     * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
     */
    public UpdatePaymentLinkRequestBody withShippingAddress(UpdatePaymentLinkShippingAddress shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = Optional.ofNullable(shippingAddress);
        return this;
    }

    /**
     * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
     */
    public UpdatePaymentLinkRequestBody withShippingAddress(Optional<? extends UpdatePaymentLinkShippingAddress> shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = shippingAddress;
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public UpdatePaymentLinkRequestBody withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
     * 
     * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     */
    public UpdatePaymentLinkRequestBody withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdatePaymentLinkRequestBody other = (UpdatePaymentLinkRequestBody) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.minimumAmount, other.minimumAmount) &&
            Objects.deepEquals(this.archived, other.archived) &&
            Objects.deepEquals(this.allowedMethods, other.allowedMethods) &&
            Objects.deepEquals(this.lines, other.lines) &&
            Objects.deepEquals(this.billingAddress, other.billingAddress) &&
            Objects.deepEquals(this.shippingAddress, other.shippingAddress) &&
            Objects.deepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            minimumAmount,
            archived,
            allowedMethods,
            lines,
            billingAddress,
            shippingAddress,
            testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdatePaymentLinkRequestBody.class,
                "description", description,
                "minimumAmount", minimumAmount,
                "archived", archived,
                "allowedMethods", allowedMethods,
                "lines", lines,
                "billingAddress", billingAddress,
                "shippingAddress", shippingAddress,
                "testmode", testmode);
    }
    
    public final static class Builder {
 
        private Optional<String> description = Optional.empty();
 
        private Optional<? extends UpdatePaymentLinkMinimumAmount> minimumAmount = Optional.empty();
 
        private Optional<Boolean> archived = Optional.empty();
 
        private JsonNullable<? extends List<String>> allowedMethods = JsonNullable.undefined();
 
        private JsonNullable<? extends List<UpdatePaymentLinkLines>> lines = JsonNullable.undefined();
 
        private Optional<? extends UpdatePaymentLinkBillingAddress> billingAddress = Optional.empty();
 
        private Optional<? extends UpdatePaymentLinkShippingAddress> shippingAddress = Optional.empty();
 
        private JsonNullable<Boolean> testmode = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
         * 
         * <p>Updating the description does not affect any previously existing payments created for this payment link.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
         * 
         * <p>Updating the description does not affect any previously existing payments created for this payment link.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
         */
        public Builder minimumAmount(UpdatePaymentLinkMinimumAmount minimumAmount) {
            Utils.checkNotNull(minimumAmount, "minimumAmount");
            this.minimumAmount = Optional.ofNullable(minimumAmount);
            return this;
        }

        /**
         * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
         */
        public Builder minimumAmount(Optional<? extends UpdatePaymentLinkMinimumAmount> minimumAmount) {
            Utils.checkNotNull(minimumAmount, "minimumAmount");
            this.minimumAmount = minimumAmount;
            return this;
        }

        /**
         * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
         */
        public Builder archived(boolean archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = Optional.ofNullable(archived);
            return this;
        }

        /**
         * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
         */
        public Builder archived(Optional<Boolean> archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = archived;
            return this;
        }

        /**
         * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
         * 
         * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard', 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint'.
         */
        public Builder allowedMethods(List<String> allowedMethods) {
            Utils.checkNotNull(allowedMethods, "allowedMethods");
            this.allowedMethods = JsonNullable.of(allowedMethods);
            return this;
        }

        /**
         * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
         * 
         * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard', 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint'.
         */
        public Builder allowedMethods(JsonNullable<? extends List<String>> allowedMethods) {
            Utils.checkNotNull(allowedMethods, "allowedMethods");
            this.allowedMethods = allowedMethods;
            return this;
        }

        /**
         * Optionally provide the order lines for the payment. Each line contains details such as a description of the item ordered and its price.
         * 
         * <p>All lines must have the same currency as the payment.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
         */
        public Builder lines(List<UpdatePaymentLinkLines> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = JsonNullable.of(lines);
            return this;
        }

        /**
         * Optionally provide the order lines for the payment. Each line contains details such as a description of the item ordered and its price.
         * 
         * <p>All lines must have the same currency as the payment.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
         */
        public Builder lines(JsonNullable<? extends List<UpdatePaymentLinkLines>> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = lines;
            return this;
        }

        /**
         * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
         * 
         * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
         * 
         * <p>Required for payment method `in3`, `klarna`, `billie` and `riverty`.
         */
        public Builder billingAddress(UpdatePaymentLinkBillingAddress billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        /**
         * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion.
         * 
         * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
         * 
         * <p>Required for payment method `in3`, `klarna`, `billie` and `riverty`.
         */
        public Builder billingAddress(Optional<? extends UpdatePaymentLinkBillingAddress> billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = billingAddress;
            return this;
        }

        /**
         * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
         * 
         * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
         */
        public Builder shippingAddress(UpdatePaymentLinkShippingAddress shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        /**
         * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion.
         * 
         * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and `country`.
         */
        public Builder shippingAddress(Optional<? extends UpdatePaymentLinkShippingAddress> shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = shippingAddress;
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
         * 
         * <p>Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }
        
        public UpdatePaymentLinkRequestBody build() {
            return new UpdatePaymentLinkRequestBody(
                description,
                minimumAmount,
                archived,
                allowedMethods,
                lines,
                billingAddress,
                shippingAddress,
                testmode);
        }
    }
}
