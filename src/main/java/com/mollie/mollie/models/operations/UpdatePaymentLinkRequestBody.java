/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class UpdatePaymentLinkRequestBody {

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown
     * on the customer's bank or card statement when possible.
     * 
     * Updating the description does not affect any previously existing payments created for this payment link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived
     * payment links.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    private Optional<Boolean> archived;

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is
     * not provided or is an empty array, all enabled payment methods will be available.
     * 
     * All methods supported by the Payments API are also supported here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedMethods")
    private JsonNullable<? extends List<Object>> allowedMethods;

    @JsonCreator
    public UpdatePaymentLinkRequestBody(
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("archived") Optional<Boolean> archived,
            @JsonProperty("allowedMethods") JsonNullable<? extends List<Object>> allowedMethods) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(archived, "archived");
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.description = description;
        this.archived = archived;
        this.allowedMethods = allowedMethods;
    }
    
    public UpdatePaymentLinkRequestBody() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown
     * on the customer's bank or card statement when possible.
     * 
     * Updating the description does not affect any previously existing payments created for this payment link.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived
     * payment links.
     */
    @JsonIgnore
    public Optional<Boolean> archived() {
        return archived;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is
     * not provided or is an empty array, all enabled payment methods will be available.
     * 
     * All methods supported by the Payments API are also supported here.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<Object>> allowedMethods() {
        return (JsonNullable<List<Object>>) allowedMethods;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown
     * on the customer's bank or card statement when possible.
     * 
     * Updating the description does not affect any previously existing payments created for this payment link.
     */
    public UpdatePaymentLinkRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown
     * on the customer's bank or card statement when possible.
     * 
     * Updating the description does not affect any previously existing payments created for this payment link.
     */
    public UpdatePaymentLinkRequestBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived
     * payment links.
     */
    public UpdatePaymentLinkRequestBody withArchived(boolean archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = Optional.ofNullable(archived);
        return this;
    }

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived
     * payment links.
     */
    public UpdatePaymentLinkRequestBody withArchived(Optional<Boolean> archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = archived;
        return this;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is
     * not provided or is an empty array, all enabled payment methods will be available.
     * 
     * All methods supported by the Payments API are also supported here.
     */
    public UpdatePaymentLinkRequestBody withAllowedMethods(List<Object> allowedMethods) {
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.allowedMethods = JsonNullable.of(allowedMethods);
        return this;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is
     * not provided or is an empty array, all enabled payment methods will be available.
     * 
     * All methods supported by the Payments API are also supported here.
     */
    public UpdatePaymentLinkRequestBody withAllowedMethods(JsonNullable<? extends List<Object>> allowedMethods) {
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.allowedMethods = allowedMethods;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdatePaymentLinkRequestBody other = (UpdatePaymentLinkRequestBody) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.archived, other.archived) &&
            Objects.deepEquals(this.allowedMethods, other.allowedMethods);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            archived,
            allowedMethods);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdatePaymentLinkRequestBody.class,
                "description", description,
                "archived", archived,
                "allowedMethods", allowedMethods);
    }
    
    public final static class Builder {
 
        private Optional<String> description = Optional.empty();
 
        private Optional<Boolean> archived = Optional.empty();
 
        private JsonNullable<? extends List<Object>> allowedMethods = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A short description of the payment link. The description is visible in the Dashboard and will be shown
         * on the customer's bank or card statement when possible.
         * 
         * Updating the description does not affect any previously existing payments created for this payment link.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A short description of the payment link. The description is visible in the Dashboard and will be shown
         * on the customer's bank or card statement when possible.
         * 
         * Updating the description does not affect any previously existing payments created for this payment link.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Whether the payment link is archived. Customers will not be able to complete payments on archived
         * payment links.
         */
        public Builder archived(boolean archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = Optional.ofNullable(archived);
            return this;
        }

        /**
         * Whether the payment link is archived. Customers will not be able to complete payments on archived
         * payment links.
         */
        public Builder archived(Optional<Boolean> archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = archived;
            return this;
        }

        /**
         * An array of payment methods that are allowed to be used for this payment link. When this parameter is
         * not provided or is an empty array, all enabled payment methods will be available.
         * 
         * All methods supported by the Payments API are also supported here.
         */
        public Builder allowedMethods(List<Object> allowedMethods) {
            Utils.checkNotNull(allowedMethods, "allowedMethods");
            this.allowedMethods = JsonNullable.of(allowedMethods);
            return this;
        }

        /**
         * An array of payment methods that are allowed to be used for this payment link. When this parameter is
         * not provided or is an empty array, all enabled payment methods will be available.
         * 
         * All methods supported by the Payments API are also supported here.
         */
        public Builder allowedMethods(JsonNullable<? extends List<Object>> allowedMethods) {
            Utils.checkNotNull(allowedMethods, "allowedMethods");
            this.allowedMethods = allowedMethods;
            return this;
        }
        
        public UpdatePaymentLinkRequestBody build() {
            return new UpdatePaymentLinkRequestBody(
                description,
                archived,
                allowedMethods);
        }
    }
}

