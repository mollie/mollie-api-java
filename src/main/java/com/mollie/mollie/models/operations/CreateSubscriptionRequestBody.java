/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateSubscriptionRequestBody {
    /**
     * The amount for each individual payment that is charged with this subscription. For example, for a monthly
     * subscription of €10, the subscription amount should be set to €10.
     */
    @JsonProperty("amount")
    private CreateSubscriptionAmount amount;

    /**
     * Total number of payments for the subscription. Once this number of payments is reached, the subscription is
     * considered completed.
     * 
     * <p>Test mode subscriptions will get canceled automatically after 10 payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("times")
    private JsonNullable<Long> times;

    /**
     * Interval to wait between payments, for example `1 month` or `14 days`.
     * 
     * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
     */
    @JsonProperty("interval")
    private CreateSubscriptionInterval interval;

    /**
     * The start date of the subscription in `YYYY-MM-DD` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    private Optional<String> startDate;

    /**
     * The subscription's description will be used as the description of the resulting individual payments and so showing
     * up on the bank statement of the consumer.
     * 
     * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private JsonNullable<? extends CreateSubscriptionMethod> method;

    /**
     * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
     * 
     * <p>Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
     * information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationFee")
    private Optional<? extends CreateSubscriptionApplicationFee> applicationFee;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
     * Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
     * 1kB.
     * 
     * <p>Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends CreateSubscriptionMetadata> metadata;

    /**
     * We will call this URL for any payment status changes of payments resulting from this subscription.
     * 
     * <p>This webhook will receive **all** events for the subscription's payments. This may include payment failures as
     * well. Be sure to verify the payment's subscription ID and its status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookUrl")
    private Optional<String> webhookUrl;

    /**
     * The mandate used for this subscription, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandateId")
    private JsonNullable<String> mandateId;

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
     * `testmode` to `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public CreateSubscriptionRequestBody(
            @JsonProperty("amount") CreateSubscriptionAmount amount,
            @JsonProperty("times") JsonNullable<Long> times,
            @JsonProperty("interval") CreateSubscriptionInterval interval,
            @JsonProperty("startDate") Optional<String> startDate,
            @JsonProperty("description") String description,
            @JsonProperty("method") JsonNullable<? extends CreateSubscriptionMethod> method,
            @JsonProperty("applicationFee") Optional<? extends CreateSubscriptionApplicationFee> applicationFee,
            @JsonProperty("metadata") JsonNullable<? extends CreateSubscriptionMetadata> metadata,
            @JsonProperty("webhookUrl") Optional<String> webhookUrl,
            @JsonProperty("mandateId") JsonNullable<String> mandateId,
            @JsonProperty("testmode") JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(times, "times");
        Utils.checkNotNull(interval, "interval");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(applicationFee, "applicationFee");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        Utils.checkNotNull(mandateId, "mandateId");
        Utils.checkNotNull(testmode, "testmode");
        this.amount = amount;
        this.times = times;
        this.interval = interval;
        this.startDate = startDate;
        this.description = description;
        this.method = method;
        this.applicationFee = applicationFee;
        this.metadata = metadata;
        this.webhookUrl = webhookUrl;
        this.mandateId = mandateId;
        this.testmode = testmode;
    }
    
    public CreateSubscriptionRequestBody(
            CreateSubscriptionAmount amount,
            CreateSubscriptionInterval interval,
            String description) {
        this(amount, JsonNullable.undefined(), interval,
            Optional.empty(), description, JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The amount for each individual payment that is charged with this subscription. For example, for a monthly
     * subscription of €10, the subscription amount should be set to €10.
     */
    @JsonIgnore
    public CreateSubscriptionAmount amount() {
        return amount;
    }

    /**
     * Total number of payments for the subscription. Once this number of payments is reached, the subscription is
     * considered completed.
     * 
     * <p>Test mode subscriptions will get canceled automatically after 10 payments.
     */
    @JsonIgnore
    public JsonNullable<Long> times() {
        return times;
    }

    /**
     * Interval to wait between payments, for example `1 month` or `14 days`.
     * 
     * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
     */
    @JsonIgnore
    public CreateSubscriptionInterval interval() {
        return interval;
    }

    /**
     * The start date of the subscription in `YYYY-MM-DD` format.
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * The subscription's description will be used as the description of the resulting individual payments and so showing
     * up on the bank statement of the consumer.
     * 
     * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateSubscriptionMethod> method() {
        return (JsonNullable<CreateSubscriptionMethod>) method;
    }

    /**
     * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
     * 
     * <p>Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
     * information.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateSubscriptionApplicationFee> applicationFee() {
        return (Optional<CreateSubscriptionApplicationFee>) applicationFee;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
     * Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
     * 1kB.
     * 
     * <p>Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateSubscriptionMetadata> metadata() {
        return (JsonNullable<CreateSubscriptionMetadata>) metadata;
    }

    /**
     * We will call this URL for any payment status changes of payments resulting from this subscription.
     * 
     * <p>This webhook will receive **all** events for the subscription's payments. This may include payment failures as
     * well. Be sure to verify the payment's subscription ID and its status.
     */
    @JsonIgnore
    public Optional<String> webhookUrl() {
        return webhookUrl;
    }

    /**
     * The mandate used for this subscription, if any.
     */
    @JsonIgnore
    public JsonNullable<String> mandateId() {
        return mandateId;
    }

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
     * `testmode` to `true`.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The amount for each individual payment that is charged with this subscription. For example, for a monthly
     * subscription of €10, the subscription amount should be set to €10.
     */
    public CreateSubscriptionRequestBody withAmount(CreateSubscriptionAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Total number of payments for the subscription. Once this number of payments is reached, the subscription is
     * considered completed.
     * 
     * <p>Test mode subscriptions will get canceled automatically after 10 payments.
     */
    public CreateSubscriptionRequestBody withTimes(long times) {
        Utils.checkNotNull(times, "times");
        this.times = JsonNullable.of(times);
        return this;
    }

    /**
     * Total number of payments for the subscription. Once this number of payments is reached, the subscription is
     * considered completed.
     * 
     * <p>Test mode subscriptions will get canceled automatically after 10 payments.
     */
    public CreateSubscriptionRequestBody withTimes(JsonNullable<Long> times) {
        Utils.checkNotNull(times, "times");
        this.times = times;
        return this;
    }

    /**
     * Interval to wait between payments, for example `1 month` or `14 days`.
     * 
     * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
     */
    public CreateSubscriptionRequestBody withInterval(CreateSubscriptionInterval interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = interval;
        return this;
    }

    /**
     * The start date of the subscription in `YYYY-MM-DD` format.
     */
    public CreateSubscriptionRequestBody withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }


    /**
     * The start date of the subscription in `YYYY-MM-DD` format.
     */
    public CreateSubscriptionRequestBody withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The subscription's description will be used as the description of the resulting individual payments and so showing
     * up on the bank statement of the consumer.
     * 
     * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
     */
    public CreateSubscriptionRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
     */
    public CreateSubscriptionRequestBody withMethod(CreateSubscriptionMethod method) {
        Utils.checkNotNull(method, "method");
        this.method = JsonNullable.of(method);
        return this;
    }

    /**
     * The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
     */
    public CreateSubscriptionRequestBody withMethod(JsonNullable<? extends CreateSubscriptionMethod> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
     * 
     * <p>Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
     * information.
     */
    public CreateSubscriptionRequestBody withApplicationFee(CreateSubscriptionApplicationFee applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = Optional.ofNullable(applicationFee);
        return this;
    }


    /**
     * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
     * 
     * <p>Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
     * information.
     */
    public CreateSubscriptionRequestBody withApplicationFee(Optional<? extends CreateSubscriptionApplicationFee> applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = applicationFee;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
     * Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
     * 1kB.
     * 
     * <p>Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
     */
    public CreateSubscriptionRequestBody withMetadata(CreateSubscriptionMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
     * Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
     * 1kB.
     * 
     * <p>Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
     */
    public CreateSubscriptionRequestBody withMetadata(JsonNullable<? extends CreateSubscriptionMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * We will call this URL for any payment status changes of payments resulting from this subscription.
     * 
     * <p>This webhook will receive **all** events for the subscription's payments. This may include payment failures as
     * well. Be sure to verify the payment's subscription ID and its status.
     */
    public CreateSubscriptionRequestBody withWebhookUrl(String webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = Optional.ofNullable(webhookUrl);
        return this;
    }


    /**
     * We will call this URL for any payment status changes of payments resulting from this subscription.
     * 
     * <p>This webhook will receive **all** events for the subscription's payments. This may include payment failures as
     * well. Be sure to verify the payment's subscription ID and its status.
     */
    public CreateSubscriptionRequestBody withWebhookUrl(Optional<String> webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = webhookUrl;
        return this;
    }

    /**
     * The mandate used for this subscription, if any.
     */
    public CreateSubscriptionRequestBody withMandateId(String mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = JsonNullable.of(mandateId);
        return this;
    }

    /**
     * The mandate used for this subscription, if any.
     */
    public CreateSubscriptionRequestBody withMandateId(JsonNullable<String> mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = mandateId;
        return this;
    }

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
     * `testmode` to `true`.
     */
    public CreateSubscriptionRequestBody withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
     * `testmode` to `true`.
     */
    public CreateSubscriptionRequestBody withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateSubscriptionRequestBody other = (CreateSubscriptionRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.times, other.times) &&
            Utils.enhancedDeepEquals(this.interval, other.interval) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.applicationFee, other.applicationFee) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.webhookUrl, other.webhookUrl) &&
            Utils.enhancedDeepEquals(this.mandateId, other.mandateId) &&
            Utils.enhancedDeepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            amount, times, interval,
            startDate, description, method,
            applicationFee, metadata, webhookUrl,
            mandateId, testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateSubscriptionRequestBody.class,
                "amount", amount,
                "times", times,
                "interval", interval,
                "startDate", startDate,
                "description", description,
                "method", method,
                "applicationFee", applicationFee,
                "metadata", metadata,
                "webhookUrl", webhookUrl,
                "mandateId", mandateId,
                "testmode", testmode);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CreateSubscriptionAmount amount;

        private JsonNullable<Long> times = JsonNullable.undefined();

        private CreateSubscriptionInterval interval;

        private Optional<String> startDate = Optional.empty();

        private String description;

        private JsonNullable<? extends CreateSubscriptionMethod> method = JsonNullable.undefined();

        private Optional<? extends CreateSubscriptionApplicationFee> applicationFee = Optional.empty();

        private JsonNullable<? extends CreateSubscriptionMetadata> metadata = JsonNullable.undefined();

        private Optional<String> webhookUrl = Optional.empty();

        private JsonNullable<String> mandateId = JsonNullable.undefined();

        private JsonNullable<Boolean> testmode = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The amount for each individual payment that is charged with this subscription. For example, for a monthly
         * subscription of €10, the subscription amount should be set to €10.
         */
        public Builder amount(CreateSubscriptionAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * Total number of payments for the subscription. Once this number of payments is reached, the subscription is
         * considered completed.
         * 
         * <p>Test mode subscriptions will get canceled automatically after 10 payments.
         */
        public Builder times(long times) {
            Utils.checkNotNull(times, "times");
            this.times = JsonNullable.of(times);
            return this;
        }

        /**
         * Total number of payments for the subscription. Once this number of payments is reached, the subscription is
         * considered completed.
         * 
         * <p>Test mode subscriptions will get canceled automatically after 10 payments.
         */
        public Builder times(JsonNullable<Long> times) {
            Utils.checkNotNull(times, "times");
            this.times = times;
            return this;
        }


        /**
         * Interval to wait between payments, for example `1 month` or `14 days`.
         * 
         * <p>The maximum interval is one year (`12 months`, `52 weeks`, or `365 days`).
         */
        public Builder interval(CreateSubscriptionInterval interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = interval;
            return this;
        }


        /**
         * The start date of the subscription in `YYYY-MM-DD` format.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The start date of the subscription in `YYYY-MM-DD` format.
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        /**
         * The subscription's description will be used as the description of the resulting individual payments and so showing
         * up on the bank statement of the consumer.
         * 
         * <p>**Please note:** the description needs to be unique for the Customer in case it has multiple active subscriptions.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
         */
        public Builder method(CreateSubscriptionMethod method) {
            Utils.checkNotNull(method, "method");
            this.method = JsonNullable.of(method);
            return this;
        }

        /**
         * The payment method used for this subscription. If omitted, any of the customer's valid mandates may be used.
         */
        public Builder method(JsonNullable<? extends CreateSubscriptionMethod> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }


        /**
         * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
         * merchants.
         * 
         * <p>Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
         * 
         * <p>Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
         * information.
         */
        public Builder applicationFee(CreateSubscriptionApplicationFee applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = Optional.ofNullable(applicationFee);
            return this;
        }

        /**
         * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie
         * merchants.
         * 
         * <p>Setting an application fee on the subscription will ensure this fee is charged on each individual payment.
         * 
         * <p>Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for more
         * information.
         */
        public Builder applicationFee(Optional<? extends CreateSubscriptionApplicationFee> applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = applicationFee;
            return this;
        }


        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
         * Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
         * 1kB.
         * 
         * <p>Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
         */
        public Builder metadata(CreateSubscriptionMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity.
         * Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately
         * 1kB.
         * 
         * <p>Any metadata added to the subscription will be automatically forwarded to the payments generated for it.
         */
        public Builder metadata(JsonNullable<? extends CreateSubscriptionMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * We will call this URL for any payment status changes of payments resulting from this subscription.
         * 
         * <p>This webhook will receive **all** events for the subscription's payments. This may include payment failures as
         * well. Be sure to verify the payment's subscription ID and its status.
         */
        public Builder webhookUrl(String webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = Optional.ofNullable(webhookUrl);
            return this;
        }

        /**
         * We will call this URL for any payment status changes of payments resulting from this subscription.
         * 
         * <p>This webhook will receive **all** events for the subscription's payments. This may include payment failures as
         * well. Be sure to verify the payment's subscription ID and its status.
         */
        public Builder webhookUrl(Optional<String> webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = webhookUrl;
            return this;
        }


        /**
         * The mandate used for this subscription, if any.
         */
        public Builder mandateId(String mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = JsonNullable.of(mandateId);
            return this;
        }

        /**
         * The mandate used for this subscription, if any.
         */
        public Builder mandateId(JsonNullable<String> mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = mandateId;
            return this;
        }


        /**
         * Whether to create the entity in test mode or live mode.
         * 
         * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
         * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
         * `testmode` to `true`.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Whether to create the entity in test mode or live mode.
         * 
         * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
         * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
         * `testmode` to `true`.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }

        public CreateSubscriptionRequestBody build() {

            return new CreateSubscriptionRequestBody(
                amount, times, interval,
                startDate, description, method,
                applicationFee, metadata, webhookUrl,
                mandateId, testmode);
        }

    }
}
