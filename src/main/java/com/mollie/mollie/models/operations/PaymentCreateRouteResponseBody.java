/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
/**
 * PaymentCreateRouteResponseBody - The route object.
 */

public class PaymentCreateRouteResponseBody {

    /**
     * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this route. Mollie assigns this identifier at route creation time. Mollie will always refer to the route by this ID. Example: `crt_dyARQ3JzCgtPDhU2Pbq3J`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The unique identifier of the payment. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentId")
    private Optional<String> paymentId;

    /**
     * The amount of the route. That amount that will be routed to the specified destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends PaymentCreateRouteDelayedRoutingAmount> amount;

    /**
     * The description of the route. This description is shown in the reports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The destination of the route.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination")
    private Optional<? extends PaymentCreateRouteDelayedRoutingDestination> destination;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends PaymentCreateRouteLinks> links;

    @JsonCreator
    public PaymentCreateRouteResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("paymentId") Optional<String> paymentId,
            @JsonProperty("amount") Optional<? extends PaymentCreateRouteDelayedRoutingAmount> amount,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("destination") Optional<? extends PaymentCreateRouteDelayedRoutingDestination> destination,
            @JsonProperty("_links") Optional<? extends PaymentCreateRouteLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(destination, "destination");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.paymentId = paymentId;
        this.amount = amount;
        this.description = description;
        this.destination = destination;
        this.links = links;
    }
    
    public PaymentCreateRouteResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this route. Mollie assigns this identifier at route creation time. Mollie will always refer to the route by this ID. Example: `crt_dyARQ3JzCgtPDhU2Pbq3J`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The unique identifier of the payment. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    @JsonIgnore
    public Optional<String> paymentId() {
        return paymentId;
    }

    /**
     * The amount of the route. That amount that will be routed to the specified destination.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentCreateRouteDelayedRoutingAmount> amount() {
        return (Optional<PaymentCreateRouteDelayedRoutingAmount>) amount;
    }

    /**
     * The description of the route. This description is shown in the reports.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The destination of the route.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentCreateRouteDelayedRoutingDestination> destination() {
        return (Optional<PaymentCreateRouteDelayedRoutingDestination>) destination;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentCreateRouteLinks> links() {
        return (Optional<PaymentCreateRouteLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
     */
    public PaymentCreateRouteResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
     */
    public PaymentCreateRouteResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this route. Mollie assigns this identifier at route creation time. Mollie will always refer to the route by this ID. Example: `crt_dyARQ3JzCgtPDhU2Pbq3J`.
     */
    public PaymentCreateRouteResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The identifier uniquely referring to this route. Mollie assigns this identifier at route creation time. Mollie will always refer to the route by this ID. Example: `crt_dyARQ3JzCgtPDhU2Pbq3J`.
     */
    public PaymentCreateRouteResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The unique identifier of the payment. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    public PaymentCreateRouteResponseBody withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = Optional.ofNullable(paymentId);
        return this;
    }

    /**
     * The unique identifier of the payment. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
     */
    public PaymentCreateRouteResponseBody withPaymentId(Optional<String> paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    /**
     * The amount of the route. That amount that will be routed to the specified destination.
     */
    public PaymentCreateRouteResponseBody withAmount(PaymentCreateRouteDelayedRoutingAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The amount of the route. That amount that will be routed to the specified destination.
     */
    public PaymentCreateRouteResponseBody withAmount(Optional<? extends PaymentCreateRouteDelayedRoutingAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The description of the route. This description is shown in the reports.
     */
    public PaymentCreateRouteResponseBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of the route. This description is shown in the reports.
     */
    public PaymentCreateRouteResponseBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The destination of the route.
     */
    public PaymentCreateRouteResponseBody withDestination(PaymentCreateRouteDelayedRoutingDestination destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = Optional.ofNullable(destination);
        return this;
    }

    /**
     * The destination of the route.
     */
    public PaymentCreateRouteResponseBody withDestination(Optional<? extends PaymentCreateRouteDelayedRoutingDestination> destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = destination;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public PaymentCreateRouteResponseBody withLinks(PaymentCreateRouteLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public PaymentCreateRouteResponseBody withLinks(Optional<? extends PaymentCreateRouteLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentCreateRouteResponseBody other = (PaymentCreateRouteResponseBody) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.paymentId, other.paymentId) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.destination, other.destination) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            paymentId,
            amount,
            description,
            destination,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentCreateRouteResponseBody.class,
                "resource", resource,
                "id", id,
                "paymentId", paymentId,
                "amount", amount,
                "description", description,
                "destination", destination,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> paymentId = Optional.empty();
 
        private Optional<? extends PaymentCreateRouteDelayedRoutingAmount> amount = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<? extends PaymentCreateRouteDelayedRoutingDestination> destination = Optional.empty();
 
        private Optional<? extends PaymentCreateRouteLinks> links = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a route object. Will always contain the string `route` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this route. Mollie assigns this identifier at route creation time. Mollie will always refer to the route by this ID. Example: `crt_dyARQ3JzCgtPDhU2Pbq3J`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this route. Mollie assigns this identifier at route creation time. Mollie will always refer to the route by this ID. Example: `crt_dyARQ3JzCgtPDhU2Pbq3J`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The unique identifier of the payment. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
         */
        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        /**
         * The unique identifier of the payment. For example: `tr_5B8cwPMGnU6qLbRvo7qEZo`. The full payment object can be retrieved via the payment URL in the `_links` object.
         */
        public Builder paymentId(Optional<String> paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }

        /**
         * The amount of the route. That amount that will be routed to the specified destination.
         */
        public Builder amount(PaymentCreateRouteDelayedRoutingAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount of the route. That amount that will be routed to the specified destination.
         */
        public Builder amount(Optional<? extends PaymentCreateRouteDelayedRoutingAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The description of the route. This description is shown in the reports.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the route. This description is shown in the reports.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The destination of the route.
         */
        public Builder destination(PaymentCreateRouteDelayedRoutingDestination destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = Optional.ofNullable(destination);
            return this;
        }

        /**
         * The destination of the route.
         */
        public Builder destination(Optional<? extends PaymentCreateRouteDelayedRoutingDestination> destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = destination;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(PaymentCreateRouteLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends PaymentCreateRouteLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public PaymentCreateRouteResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }            return new PaymentCreateRouteResponseBody(
                resource,
                id,
                paymentId,
                amount,
                description,
                destination,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"route\"",
                        new TypeReference<Optional<String>>() {});
    }
}

