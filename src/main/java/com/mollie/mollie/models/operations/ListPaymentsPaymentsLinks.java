/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * ListPaymentsPaymentsLinks
 * 
 * <p>An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
public class ListPaymentsPaymentsLinks {

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonProperty("self")
    private ListPaymentsPaymentsSelf self;

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkout")
    private Optional<? extends ListPaymentsCheckout> checkout;

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobileAppCheckout")
    private Optional<? extends ListPaymentsMobileAppCheckout> mobileAppCheckout;

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("changePaymentState")
    private Optional<? extends ListPaymentsChangePaymentState> changePaymentState;

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    @JsonProperty("dashboard")
    private ListPaymentsDashboard dashboard;

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunds")
    private Optional<? extends ListPaymentsRefunds> refunds;

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargebacks")
    private Optional<? extends ListPaymentsChargebacks> chargebacks;

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("captures")
    private Optional<? extends ListPaymentsCaptures> captures;

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement")
    private Optional<? extends ListPaymentsSettlement> settlement;

    /**
     * The API resource URL of the [customer](get-customer).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    private Optional<? extends ListPaymentsCustomer> customer;

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandate")
    private Optional<? extends ListPaymentsMandate> mandate;

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription")
    private Optional<? extends ListPaymentsSubscription> subscription;

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order")
    private Optional<? extends ListPaymentsOrder> order;

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terminal")
    private Optional<? extends ListPaymentsTerminal> terminal;

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonProperty("documentation")
    private ListPaymentsPaymentsDocumentation documentation;

    @JsonCreator
    public ListPaymentsPaymentsLinks(
            @JsonProperty("self") ListPaymentsPaymentsSelf self,
            @JsonProperty("checkout") Optional<? extends ListPaymentsCheckout> checkout,
            @JsonProperty("mobileAppCheckout") Optional<? extends ListPaymentsMobileAppCheckout> mobileAppCheckout,
            @JsonProperty("changePaymentState") Optional<? extends ListPaymentsChangePaymentState> changePaymentState,
            @JsonProperty("dashboard") ListPaymentsDashboard dashboard,
            @JsonProperty("refunds") Optional<? extends ListPaymentsRefunds> refunds,
            @JsonProperty("chargebacks") Optional<? extends ListPaymentsChargebacks> chargebacks,
            @JsonProperty("captures") Optional<? extends ListPaymentsCaptures> captures,
            @JsonProperty("settlement") Optional<? extends ListPaymentsSettlement> settlement,
            @JsonProperty("customer") Optional<? extends ListPaymentsCustomer> customer,
            @JsonProperty("mandate") Optional<? extends ListPaymentsMandate> mandate,
            @JsonProperty("subscription") Optional<? extends ListPaymentsSubscription> subscription,
            @JsonProperty("order") Optional<? extends ListPaymentsOrder> order,
            @JsonProperty("terminal") Optional<? extends ListPaymentsTerminal> terminal,
            @JsonProperty("documentation") ListPaymentsPaymentsDocumentation documentation) {
        Utils.checkNotNull(self, "self");
        Utils.checkNotNull(checkout, "checkout");
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        Utils.checkNotNull(dashboard, "dashboard");
        Utils.checkNotNull(refunds, "refunds");
        Utils.checkNotNull(chargebacks, "chargebacks");
        Utils.checkNotNull(captures, "captures");
        Utils.checkNotNull(settlement, "settlement");
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(mandate, "mandate");
        Utils.checkNotNull(subscription, "subscription");
        Utils.checkNotNull(order, "order");
        Utils.checkNotNull(terminal, "terminal");
        Utils.checkNotNull(documentation, "documentation");
        this.self = self;
        this.checkout = checkout;
        this.mobileAppCheckout = mobileAppCheckout;
        this.changePaymentState = changePaymentState;
        this.dashboard = dashboard;
        this.refunds = refunds;
        this.chargebacks = chargebacks;
        this.captures = captures;
        this.settlement = settlement;
        this.customer = customer;
        this.mandate = mandate;
        this.subscription = subscription;
        this.order = order;
        this.terminal = terminal;
        this.documentation = documentation;
    }
    
    public ListPaymentsPaymentsLinks(
            ListPaymentsPaymentsSelf self,
            ListPaymentsDashboard dashboard,
            ListPaymentsPaymentsDocumentation documentation) {
        this(self, Optional.empty(), Optional.empty(), Optional.empty(), dashboard, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), documentation);
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonIgnore
    public ListPaymentsPaymentsSelf self() {
        return self;
    }

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListPaymentsCheckout> checkout() {
        return (Optional<ListPaymentsCheckout>) checkout;
    }

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListPaymentsMobileAppCheckout> mobileAppCheckout() {
        return (Optional<ListPaymentsMobileAppCheckout>) mobileAppCheckout;
    }

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListPaymentsChangePaymentState> changePaymentState() {
        return (Optional<ListPaymentsChangePaymentState>) changePaymentState;
    }

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    @JsonIgnore
    public ListPaymentsDashboard dashboard() {
        return dashboard;
    }

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListPaymentsRefunds> refunds() {
        return (Optional<ListPaymentsRefunds>) refunds;
    }

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListPaymentsChargebacks> chargebacks() {
        return (Optional<ListPaymentsChargebacks>) chargebacks;
    }

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListPaymentsCaptures> captures() {
        return (Optional<ListPaymentsCaptures>) captures;
    }

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListPaymentsSettlement> settlement() {
        return (Optional<ListPaymentsSettlement>) settlement;
    }

    /**
     * The API resource URL of the [customer](get-customer).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListPaymentsCustomer> customer() {
        return (Optional<ListPaymentsCustomer>) customer;
    }

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListPaymentsMandate> mandate() {
        return (Optional<ListPaymentsMandate>) mandate;
    }

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListPaymentsSubscription> subscription() {
        return (Optional<ListPaymentsSubscription>) subscription;
    }

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListPaymentsOrder> order() {
        return (Optional<ListPaymentsOrder>) order;
    }

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListPaymentsTerminal> terminal() {
        return (Optional<ListPaymentsTerminal>) terminal;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonIgnore
    public ListPaymentsPaymentsDocumentation documentation() {
        return documentation;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public ListPaymentsPaymentsLinks withSelf(ListPaymentsPaymentsSelf self) {
        Utils.checkNotNull(self, "self");
        this.self = self;
        return this;
    }

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    public ListPaymentsPaymentsLinks withCheckout(ListPaymentsCheckout checkout) {
        Utils.checkNotNull(checkout, "checkout");
        this.checkout = Optional.ofNullable(checkout);
        return this;
    }

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    public ListPaymentsPaymentsLinks withCheckout(Optional<? extends ListPaymentsCheckout> checkout) {
        Utils.checkNotNull(checkout, "checkout");
        this.checkout = checkout;
        return this;
    }

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    public ListPaymentsPaymentsLinks withMobileAppCheckout(ListPaymentsMobileAppCheckout mobileAppCheckout) {
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        this.mobileAppCheckout = Optional.ofNullable(mobileAppCheckout);
        return this;
    }

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    public ListPaymentsPaymentsLinks withMobileAppCheckout(Optional<? extends ListPaymentsMobileAppCheckout> mobileAppCheckout) {
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        this.mobileAppCheckout = mobileAppCheckout;
        return this;
    }

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
     */
    public ListPaymentsPaymentsLinks withChangePaymentState(ListPaymentsChangePaymentState changePaymentState) {
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        this.changePaymentState = Optional.ofNullable(changePaymentState);
        return this;
    }

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
     * 
     * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
     * 
     * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
     */
    public ListPaymentsPaymentsLinks withChangePaymentState(Optional<? extends ListPaymentsChangePaymentState> changePaymentState) {
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        this.changePaymentState = changePaymentState;
        return this;
    }

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    public ListPaymentsPaymentsLinks withDashboard(ListPaymentsDashboard dashboard) {
        Utils.checkNotNull(dashboard, "dashboard");
        this.dashboard = dashboard;
        return this;
    }

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    public ListPaymentsPaymentsLinks withRefunds(ListPaymentsRefunds refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = Optional.ofNullable(refunds);
        return this;
    }

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    public ListPaymentsPaymentsLinks withRefunds(Optional<? extends ListPaymentsRefunds> refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = refunds;
        return this;
    }

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
     */
    public ListPaymentsPaymentsLinks withChargebacks(ListPaymentsChargebacks chargebacks) {
        Utils.checkNotNull(chargebacks, "chargebacks");
        this.chargebacks = Optional.ofNullable(chargebacks);
        return this;
    }

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
     */
    public ListPaymentsPaymentsLinks withChargebacks(Optional<? extends ListPaymentsChargebacks> chargebacks) {
        Utils.checkNotNull(chargebacks, "chargebacks");
        this.chargebacks = chargebacks;
        return this;
    }

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    public ListPaymentsPaymentsLinks withCaptures(ListPaymentsCaptures captures) {
        Utils.checkNotNull(captures, "captures");
        this.captures = Optional.ofNullable(captures);
        return this;
    }

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    public ListPaymentsPaymentsLinks withCaptures(Optional<? extends ListPaymentsCaptures> captures) {
        Utils.checkNotNull(captures, "captures");
        this.captures = captures;
        return this;
    }

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
     */
    public ListPaymentsPaymentsLinks withSettlement(ListPaymentsSettlement settlement) {
        Utils.checkNotNull(settlement, "settlement");
        this.settlement = Optional.ofNullable(settlement);
        return this;
    }

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
     */
    public ListPaymentsPaymentsLinks withSettlement(Optional<? extends ListPaymentsSettlement> settlement) {
        Utils.checkNotNull(settlement, "settlement");
        this.settlement = settlement;
        return this;
    }

    /**
     * The API resource URL of the [customer](get-customer).
     */
    public ListPaymentsPaymentsLinks withCustomer(ListPaymentsCustomer customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = Optional.ofNullable(customer);
        return this;
    }

    /**
     * The API resource URL of the [customer](get-customer).
     */
    public ListPaymentsPaymentsLinks withCustomer(Optional<? extends ListPaymentsCustomer> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    public ListPaymentsPaymentsLinks withMandate(ListPaymentsMandate mandate) {
        Utils.checkNotNull(mandate, "mandate");
        this.mandate = Optional.ofNullable(mandate);
        return this;
    }

    /**
     * The API resource URL of the [mandate](get-mandate).
     */
    public ListPaymentsPaymentsLinks withMandate(Optional<? extends ListPaymentsMandate> mandate) {
        Utils.checkNotNull(mandate, "mandate");
        this.mandate = mandate;
        return this;
    }

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    public ListPaymentsPaymentsLinks withSubscription(ListPaymentsSubscription subscription) {
        Utils.checkNotNull(subscription, "subscription");
        this.subscription = Optional.ofNullable(subscription);
        return this;
    }

    /**
     * The API resource URL of the [subscription](get-subscription).
     */
    public ListPaymentsPaymentsLinks withSubscription(Optional<? extends ListPaymentsSubscription> subscription) {
        Utils.checkNotNull(subscription, "subscription");
        this.subscription = subscription;
        return this;
    }

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
     */
    public ListPaymentsPaymentsLinks withOrder(ListPaymentsOrder order) {
        Utils.checkNotNull(order, "order");
        this.order = Optional.ofNullable(order);
        return this;
    }

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
     */
    public ListPaymentsPaymentsLinks withOrder(Optional<? extends ListPaymentsOrder> order) {
        Utils.checkNotNull(order, "order");
        this.order = order;
        return this;
    }

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
     */
    public ListPaymentsPaymentsLinks withTerminal(ListPaymentsTerminal terminal) {
        Utils.checkNotNull(terminal, "terminal");
        this.terminal = Optional.ofNullable(terminal);
        return this;
    }

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
     */
    public ListPaymentsPaymentsLinks withTerminal(Optional<? extends ListPaymentsTerminal> terminal) {
        Utils.checkNotNull(terminal, "terminal");
        this.terminal = terminal;
        return this;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public ListPaymentsPaymentsLinks withDocumentation(ListPaymentsPaymentsDocumentation documentation) {
        Utils.checkNotNull(documentation, "documentation");
        this.documentation = documentation;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListPaymentsPaymentsLinks other = (ListPaymentsPaymentsLinks) o;
        return 
            Objects.deepEquals(this.self, other.self) &&
            Objects.deepEquals(this.checkout, other.checkout) &&
            Objects.deepEquals(this.mobileAppCheckout, other.mobileAppCheckout) &&
            Objects.deepEquals(this.changePaymentState, other.changePaymentState) &&
            Objects.deepEquals(this.dashboard, other.dashboard) &&
            Objects.deepEquals(this.refunds, other.refunds) &&
            Objects.deepEquals(this.chargebacks, other.chargebacks) &&
            Objects.deepEquals(this.captures, other.captures) &&
            Objects.deepEquals(this.settlement, other.settlement) &&
            Objects.deepEquals(this.customer, other.customer) &&
            Objects.deepEquals(this.mandate, other.mandate) &&
            Objects.deepEquals(this.subscription, other.subscription) &&
            Objects.deepEquals(this.order, other.order) &&
            Objects.deepEquals(this.terminal, other.terminal) &&
            Objects.deepEquals(this.documentation, other.documentation);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            self,
            checkout,
            mobileAppCheckout,
            changePaymentState,
            dashboard,
            refunds,
            chargebacks,
            captures,
            settlement,
            customer,
            mandate,
            subscription,
            order,
            terminal,
            documentation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListPaymentsPaymentsLinks.class,
                "self", self,
                "checkout", checkout,
                "mobileAppCheckout", mobileAppCheckout,
                "changePaymentState", changePaymentState,
                "dashboard", dashboard,
                "refunds", refunds,
                "chargebacks", chargebacks,
                "captures", captures,
                "settlement", settlement,
                "customer", customer,
                "mandate", mandate,
                "subscription", subscription,
                "order", order,
                "terminal", terminal,
                "documentation", documentation);
    }
    
    public final static class Builder {
 
        private ListPaymentsPaymentsSelf self;
 
        private Optional<? extends ListPaymentsCheckout> checkout = Optional.empty();
 
        private Optional<? extends ListPaymentsMobileAppCheckout> mobileAppCheckout = Optional.empty();
 
        private Optional<? extends ListPaymentsChangePaymentState> changePaymentState = Optional.empty();
 
        private ListPaymentsDashboard dashboard;
 
        private Optional<? extends ListPaymentsRefunds> refunds = Optional.empty();
 
        private Optional<? extends ListPaymentsChargebacks> chargebacks = Optional.empty();
 
        private Optional<? extends ListPaymentsCaptures> captures = Optional.empty();
 
        private Optional<? extends ListPaymentsSettlement> settlement = Optional.empty();
 
        private Optional<? extends ListPaymentsCustomer> customer = Optional.empty();
 
        private Optional<? extends ListPaymentsMandate> mandate = Optional.empty();
 
        private Optional<? extends ListPaymentsSubscription> subscription = Optional.empty();
 
        private Optional<? extends ListPaymentsOrder> order = Optional.empty();
 
        private Optional<? extends ListPaymentsTerminal> terminal = Optional.empty();
 
        private ListPaymentsPaymentsDocumentation documentation;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder self(ListPaymentsPaymentsSelf self) {
            Utils.checkNotNull(self, "self");
            this.self = self;
            return this;
        }

        /**
         * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
         */
        public Builder checkout(ListPaymentsCheckout checkout) {
            Utils.checkNotNull(checkout, "checkout");
            this.checkout = Optional.ofNullable(checkout);
            return this;
        }

        /**
         * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
         */
        public Builder checkout(Optional<? extends ListPaymentsCheckout> checkout) {
            Utils.checkNotNull(checkout, "checkout");
            this.checkout = checkout;
            return this;
        }

        /**
         * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
         */
        public Builder mobileAppCheckout(ListPaymentsMobileAppCheckout mobileAppCheckout) {
            Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
            this.mobileAppCheckout = Optional.ofNullable(mobileAppCheckout);
            return this;
        }

        /**
         * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
         */
        public Builder mobileAppCheckout(Optional<? extends ListPaymentsMobileAppCheckout> mobileAppCheckout) {
            Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
            this.mobileAppCheckout = mobileAppCheckout;
            return this;
        }

        /**
         * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
         * 
         * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
         * 
         * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
         */
        public Builder changePaymentState(ListPaymentsChangePaymentState changePaymentState) {
            Utils.checkNotNull(changePaymentState, "changePaymentState");
            this.changePaymentState = Optional.ofNullable(changePaymentState);
            return this;
        }

        /**
         * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
         * 
         * <p>Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
         * 
         * <p>Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
         */
        public Builder changePaymentState(Optional<? extends ListPaymentsChangePaymentState> changePaymentState) {
            Utils.checkNotNull(changePaymentState, "changePaymentState");
            this.changePaymentState = changePaymentState;
            return this;
        }

        /**
         * Direct link to the payment in the Mollie Dashboard.
         */
        public Builder dashboard(ListPaymentsDashboard dashboard) {
            Utils.checkNotNull(dashboard, "dashboard");
            this.dashboard = dashboard;
            return this;
        }

        /**
         * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
         */
        public Builder refunds(ListPaymentsRefunds refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = Optional.ofNullable(refunds);
            return this;
        }

        /**
         * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
         */
        public Builder refunds(Optional<? extends ListPaymentsRefunds> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = refunds;
            return this;
        }

        /**
         * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
         */
        public Builder chargebacks(ListPaymentsChargebacks chargebacks) {
            Utils.checkNotNull(chargebacks, "chargebacks");
            this.chargebacks = Optional.ofNullable(chargebacks);
            return this;
        }

        /**
         * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
         */
        public Builder chargebacks(Optional<? extends ListPaymentsChargebacks> chargebacks) {
            Utils.checkNotNull(chargebacks, "chargebacks");
            this.chargebacks = chargebacks;
            return this;
        }

        /**
         * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
         */
        public Builder captures(ListPaymentsCaptures captures) {
            Utils.checkNotNull(captures, "captures");
            this.captures = Optional.ofNullable(captures);
            return this;
        }

        /**
         * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
         */
        public Builder captures(Optional<? extends ListPaymentsCaptures> captures) {
            Utils.checkNotNull(captures, "captures");
            this.captures = captures;
            return this;
        }

        /**
         * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
         */
        public Builder settlement(ListPaymentsSettlement settlement) {
            Utils.checkNotNull(settlement, "settlement");
            this.settlement = Optional.ofNullable(settlement);
            return this;
        }

        /**
         * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
         */
        public Builder settlement(Optional<? extends ListPaymentsSettlement> settlement) {
            Utils.checkNotNull(settlement, "settlement");
            this.settlement = settlement;
            return this;
        }

        /**
         * The API resource URL of the [customer](get-customer).
         */
        public Builder customer(ListPaymentsCustomer customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        /**
         * The API resource URL of the [customer](get-customer).
         */
        public Builder customer(Optional<? extends ListPaymentsCustomer> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }

        /**
         * The API resource URL of the [mandate](get-mandate).
         */
        public Builder mandate(ListPaymentsMandate mandate) {
            Utils.checkNotNull(mandate, "mandate");
            this.mandate = Optional.ofNullable(mandate);
            return this;
        }

        /**
         * The API resource URL of the [mandate](get-mandate).
         */
        public Builder mandate(Optional<? extends ListPaymentsMandate> mandate) {
            Utils.checkNotNull(mandate, "mandate");
            this.mandate = mandate;
            return this;
        }

        /**
         * The API resource URL of the [subscription](get-subscription).
         */
        public Builder subscription(ListPaymentsSubscription subscription) {
            Utils.checkNotNull(subscription, "subscription");
            this.subscription = Optional.ofNullable(subscription);
            return this;
        }

        /**
         * The API resource URL of the [subscription](get-subscription).
         */
        public Builder subscription(Optional<? extends ListPaymentsSubscription> subscription) {
            Utils.checkNotNull(subscription, "subscription");
            this.subscription = subscription;
            return this;
        }

        /**
         * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
         */
        public Builder order(ListPaymentsOrder order) {
            Utils.checkNotNull(order, "order");
            this.order = Optional.ofNullable(order);
            return this;
        }

        /**
         * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
         */
        public Builder order(Optional<? extends ListPaymentsOrder> order) {
            Utils.checkNotNull(order, "order");
            this.order = order;
            return this;
        }

        /**
         * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
         */
        public Builder terminal(ListPaymentsTerminal terminal) {
            Utils.checkNotNull(terminal, "terminal");
            this.terminal = Optional.ofNullable(terminal);
            return this;
        }

        /**
         * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
         */
        public Builder terminal(Optional<? extends ListPaymentsTerminal> terminal) {
            Utils.checkNotNull(terminal, "terminal");
            this.terminal = terminal;
            return this;
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder documentation(ListPaymentsPaymentsDocumentation documentation) {
            Utils.checkNotNull(documentation, "documentation");
            this.documentation = documentation;
            return this;
        }
        
        public ListPaymentsPaymentsLinks build() {
            return new ListPaymentsPaymentsLinks(
                self,
                checkout,
                mobileAppCheckout,
                changePaymentState,
                dashboard,
                refunds,
                chargebacks,
                captures,
                settlement,
                customer,
                mandate,
                subscription,
                order,
                terminal,
                documentation);
        }
    }
}
