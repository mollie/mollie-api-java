/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.models.components.EntityCapability;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;


public class ListCapabilitiesEmbedded {

    @JsonProperty("capabilities")
    private List<EntityCapability> capabilities;

    @JsonCreator
    public ListCapabilitiesEmbedded(
            @JsonProperty("capabilities") List<EntityCapability> capabilities) {
        Utils.checkNotNull(capabilities, "capabilities");
        this.capabilities = capabilities;
    }

    @JsonIgnore
    public List<EntityCapability> capabilities() {
        return capabilities;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ListCapabilitiesEmbedded withCapabilities(List<EntityCapability> capabilities) {
        Utils.checkNotNull(capabilities, "capabilities");
        this.capabilities = capabilities;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListCapabilitiesEmbedded other = (ListCapabilitiesEmbedded) o;
        return 
            Utils.enhancedDeepEquals(this.capabilities, other.capabilities);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            capabilities);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListCapabilitiesEmbedded.class,
                "capabilities", capabilities);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<EntityCapability> capabilities;

        private Builder() {
          // force use of static builder() method
        }


        public Builder capabilities(List<EntityCapability> capabilities) {
            Utils.checkNotNull(capabilities, "capabilities");
            this.capabilities = capabilities;
            return this;
        }

        public ListCapabilitiesEmbedded build() {

            return new ListCapabilitiesEmbedded(
                capabilities);
        }

    }
}
