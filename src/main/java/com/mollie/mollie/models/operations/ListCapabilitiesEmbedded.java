/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class ListCapabilitiesEmbedded {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capabilities")
    private Optional<? extends List<Capabilities>> capabilities;

    @JsonCreator
    public ListCapabilitiesEmbedded(
            @JsonProperty("capabilities") Optional<? extends List<Capabilities>> capabilities) {
        Utils.checkNotNull(capabilities, "capabilities");
        this.capabilities = capabilities;
    }
    
    public ListCapabilitiesEmbedded() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Capabilities>> capabilities() {
        return (Optional<List<Capabilities>>) capabilities;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListCapabilitiesEmbedded withCapabilities(List<Capabilities> capabilities) {
        Utils.checkNotNull(capabilities, "capabilities");
        this.capabilities = Optional.ofNullable(capabilities);
        return this;
    }

    public ListCapabilitiesEmbedded withCapabilities(Optional<? extends List<Capabilities>> capabilities) {
        Utils.checkNotNull(capabilities, "capabilities");
        this.capabilities = capabilities;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListCapabilitiesEmbedded other = (ListCapabilitiesEmbedded) o;
        return 
            Objects.deepEquals(this.capabilities, other.capabilities);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            capabilities);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListCapabilitiesEmbedded.class,
                "capabilities", capabilities);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Capabilities>> capabilities = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder capabilities(List<Capabilities> capabilities) {
            Utils.checkNotNull(capabilities, "capabilities");
            this.capabilities = Optional.ofNullable(capabilities);
            return this;
        }

        public Builder capabilities(Optional<? extends List<Capabilities>> capabilities) {
            Utils.checkNotNull(capabilities, "capabilities");
            this.capabilities = capabilities;
            return this;
        }
        
        public ListCapabilitiesEmbedded build() {
            return new ListCapabilitiesEmbedded(
                capabilities);
        }
    }
}

