/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GetPaymentLinks - An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */

public class GetPaymentLinks {

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("self")
    private Optional<? extends GetPaymentSelf> self;

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkout")
    private JsonNullable<? extends GetPaymentCheckout> checkout;

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobileAppCheckout")
    private JsonNullable<? extends MobileAppCheckout> mobileAppCheckout;

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different
     * payment states.
     * 
     * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
     * payments are executed without any user interaction.
     * 
     * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
     * chargeback for the test payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("changePaymentState")
    private JsonNullable<? extends ChangePaymentState> changePaymentState;

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dashboard")
    private Optional<? extends GetPaymentDashboard> dashboard;

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunds")
    private JsonNullable<? extends GetPaymentRefunds> refunds;

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
     * payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargebacks")
    private Optional<? extends GetPaymentChargebacks> chargebacks;

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("captures")
    private Optional<? extends GetPaymentCaptures> captures;

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
     * Not present if not yet settled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlement")
    private JsonNullable<? extends Settlement> settlement;

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
     * order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order")
    private JsonNullable<? extends GetPaymentOrder> order;

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
     * point-of-sale payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terminal")
    private JsonNullable<? extends Terminal> terminal;

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentation")
    private Optional<? extends GetPaymentDocumentation> documentation;

    @JsonCreator
    public GetPaymentLinks(
            @JsonProperty("self") Optional<? extends GetPaymentSelf> self,
            @JsonProperty("checkout") JsonNullable<? extends GetPaymentCheckout> checkout,
            @JsonProperty("mobileAppCheckout") JsonNullable<? extends MobileAppCheckout> mobileAppCheckout,
            @JsonProperty("changePaymentState") JsonNullable<? extends ChangePaymentState> changePaymentState,
            @JsonProperty("dashboard") Optional<? extends GetPaymentDashboard> dashboard,
            @JsonProperty("refunds") JsonNullable<? extends GetPaymentRefunds> refunds,
            @JsonProperty("chargebacks") Optional<? extends GetPaymentChargebacks> chargebacks,
            @JsonProperty("captures") Optional<? extends GetPaymentCaptures> captures,
            @JsonProperty("settlement") JsonNullable<? extends Settlement> settlement,
            @JsonProperty("order") JsonNullable<? extends GetPaymentOrder> order,
            @JsonProperty("terminal") JsonNullable<? extends Terminal> terminal,
            @JsonProperty("documentation") Optional<? extends GetPaymentDocumentation> documentation) {
        Utils.checkNotNull(self, "self");
        Utils.checkNotNull(checkout, "checkout");
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        Utils.checkNotNull(dashboard, "dashboard");
        Utils.checkNotNull(refunds, "refunds");
        Utils.checkNotNull(chargebacks, "chargebacks");
        Utils.checkNotNull(captures, "captures");
        Utils.checkNotNull(settlement, "settlement");
        Utils.checkNotNull(order, "order");
        Utils.checkNotNull(terminal, "terminal");
        Utils.checkNotNull(documentation, "documentation");
        this.self = self;
        this.checkout = checkout;
        this.mobileAppCheckout = mobileAppCheckout;
        this.changePaymentState = changePaymentState;
        this.dashboard = dashboard;
        this.refunds = refunds;
        this.chargebacks = chargebacks;
        this.captures = captures;
        this.settlement = settlement;
        this.order = order;
        this.terminal = terminal;
        this.documentation = documentation;
    }
    
    public GetPaymentLinks() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetPaymentSelf> self() {
        return (Optional<GetPaymentSelf>) self;
    }

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetPaymentCheckout> checkout() {
        return (JsonNullable<GetPaymentCheckout>) checkout;
    }

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<MobileAppCheckout> mobileAppCheckout() {
        return (JsonNullable<MobileAppCheckout>) mobileAppCheckout;
    }

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different
     * payment states.
     * 
     * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
     * payments are executed without any user interaction.
     * 
     * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
     * chargeback for the test payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ChangePaymentState> changePaymentState() {
        return (JsonNullable<ChangePaymentState>) changePaymentState;
    }

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetPaymentDashboard> dashboard() {
        return (Optional<GetPaymentDashboard>) dashboard;
    }

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetPaymentRefunds> refunds() {
        return (JsonNullable<GetPaymentRefunds>) refunds;
    }

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
     * payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetPaymentChargebacks> chargebacks() {
        return (Optional<GetPaymentChargebacks>) chargebacks;
    }

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetPaymentCaptures> captures() {
        return (Optional<GetPaymentCaptures>) captures;
    }

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
     * Not present if not yet settled.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Settlement> settlement() {
        return (JsonNullable<Settlement>) settlement;
    }

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
     * order.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetPaymentOrder> order() {
        return (JsonNullable<GetPaymentOrder>) order;
    }

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
     * point-of-sale payments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Terminal> terminal() {
        return (JsonNullable<Terminal>) terminal;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetPaymentDocumentation> documentation() {
        return (Optional<GetPaymentDocumentation>) documentation;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public GetPaymentLinks withSelf(GetPaymentSelf self) {
        Utils.checkNotNull(self, "self");
        this.self = Optional.ofNullable(self);
        return this;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public GetPaymentLinks withSelf(Optional<? extends GetPaymentSelf> self) {
        Utils.checkNotNull(self, "self");
        this.self = self;
        return this;
    }

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    public GetPaymentLinks withCheckout(GetPaymentCheckout checkout) {
        Utils.checkNotNull(checkout, "checkout");
        this.checkout = JsonNullable.of(checkout);
        return this;
    }

    /**
     * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
     */
    public GetPaymentLinks withCheckout(JsonNullable<? extends GetPaymentCheckout> checkout) {
        Utils.checkNotNull(checkout, "checkout");
        this.checkout = checkout;
        return this;
    }

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    public GetPaymentLinks withMobileAppCheckout(MobileAppCheckout mobileAppCheckout) {
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        this.mobileAppCheckout = JsonNullable.of(mobileAppCheckout);
        return this;
    }

    /**
     * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
     */
    public GetPaymentLinks withMobileAppCheckout(JsonNullable<? extends MobileAppCheckout> mobileAppCheckout) {
        Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
        this.mobileAppCheckout = mobileAppCheckout;
        return this;
    }

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different
     * payment states.
     * 
     * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
     * payments are executed without any user interaction.
     * 
     * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
     * chargeback for the test payment.
     */
    public GetPaymentLinks withChangePaymentState(ChangePaymentState changePaymentState) {
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        this.changePaymentState = JsonNullable.of(changePaymentState);
        return this;
    }

    /**
     * For test mode payments in certain scenarios, a hosted interface is available to help you test different
     * payment states.
     * 
     * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
     * payments are executed without any user interaction.
     * 
     * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
     * chargeback for the test payment.
     */
    public GetPaymentLinks withChangePaymentState(JsonNullable<? extends ChangePaymentState> changePaymentState) {
        Utils.checkNotNull(changePaymentState, "changePaymentState");
        this.changePaymentState = changePaymentState;
        return this;
    }

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    public GetPaymentLinks withDashboard(GetPaymentDashboard dashboard) {
        Utils.checkNotNull(dashboard, "dashboard");
        this.dashboard = Optional.ofNullable(dashboard);
        return this;
    }

    /**
     * Direct link to the payment in the Mollie Dashboard.
     */
    public GetPaymentLinks withDashboard(Optional<? extends GetPaymentDashboard> dashboard) {
        Utils.checkNotNull(dashboard, "dashboard");
        this.dashboard = dashboard;
        return this;
    }

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    public GetPaymentLinks withRefunds(GetPaymentRefunds refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = JsonNullable.of(refunds);
        return this;
    }

    /**
     * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
     */
    public GetPaymentLinks withRefunds(JsonNullable<? extends GetPaymentRefunds> refunds) {
        Utils.checkNotNull(refunds, "refunds");
        this.refunds = refunds;
        return this;
    }

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
     * payment.
     */
    public GetPaymentLinks withChargebacks(GetPaymentChargebacks chargebacks) {
        Utils.checkNotNull(chargebacks, "chargebacks");
        this.chargebacks = Optional.ofNullable(chargebacks);
        return this;
    }

    /**
     * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
     * payment.
     */
    public GetPaymentLinks withChargebacks(Optional<? extends GetPaymentChargebacks> chargebacks) {
        Utils.checkNotNull(chargebacks, "chargebacks");
        this.chargebacks = chargebacks;
        return this;
    }

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    public GetPaymentLinks withCaptures(GetPaymentCaptures captures) {
        Utils.checkNotNull(captures, "captures");
        this.captures = Optional.ofNullable(captures);
        return this;
    }

    /**
     * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
     */
    public GetPaymentLinks withCaptures(Optional<? extends GetPaymentCaptures> captures) {
        Utils.checkNotNull(captures, "captures");
        this.captures = captures;
        return this;
    }

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
     * Not present if not yet settled.
     */
    public GetPaymentLinks withSettlement(Settlement settlement) {
        Utils.checkNotNull(settlement, "settlement");
        this.settlement = JsonNullable.of(settlement);
        return this;
    }

    /**
     * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
     * Not present if not yet settled.
     */
    public GetPaymentLinks withSettlement(JsonNullable<? extends Settlement> settlement) {
        Utils.checkNotNull(settlement, "settlement");
        this.settlement = settlement;
        return this;
    }

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
     * order.
     */
    public GetPaymentLinks withOrder(GetPaymentOrder order) {
        Utils.checkNotNull(order, "order");
        this.order = JsonNullable.of(order);
        return this;
    }

    /**
     * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
     * order.
     */
    public GetPaymentLinks withOrder(JsonNullable<? extends GetPaymentOrder> order) {
        Utils.checkNotNull(order, "order");
        this.order = order;
        return this;
    }

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
     * point-of-sale payments.
     */
    public GetPaymentLinks withTerminal(Terminal terminal) {
        Utils.checkNotNull(terminal, "terminal");
        this.terminal = JsonNullable.of(terminal);
        return this;
    }

    /**
     * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
     * point-of-sale payments.
     */
    public GetPaymentLinks withTerminal(JsonNullable<? extends Terminal> terminal) {
        Utils.checkNotNull(terminal, "terminal");
        this.terminal = terminal;
        return this;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public GetPaymentLinks withDocumentation(GetPaymentDocumentation documentation) {
        Utils.checkNotNull(documentation, "documentation");
        this.documentation = Optional.ofNullable(documentation);
        return this;
    }

    /**
     * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
     */
    public GetPaymentLinks withDocumentation(Optional<? extends GetPaymentDocumentation> documentation) {
        Utils.checkNotNull(documentation, "documentation");
        this.documentation = documentation;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPaymentLinks other = (GetPaymentLinks) o;
        return 
            Objects.deepEquals(this.self, other.self) &&
            Objects.deepEquals(this.checkout, other.checkout) &&
            Objects.deepEquals(this.mobileAppCheckout, other.mobileAppCheckout) &&
            Objects.deepEquals(this.changePaymentState, other.changePaymentState) &&
            Objects.deepEquals(this.dashboard, other.dashboard) &&
            Objects.deepEquals(this.refunds, other.refunds) &&
            Objects.deepEquals(this.chargebacks, other.chargebacks) &&
            Objects.deepEquals(this.captures, other.captures) &&
            Objects.deepEquals(this.settlement, other.settlement) &&
            Objects.deepEquals(this.order, other.order) &&
            Objects.deepEquals(this.terminal, other.terminal) &&
            Objects.deepEquals(this.documentation, other.documentation);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            self,
            checkout,
            mobileAppCheckout,
            changePaymentState,
            dashboard,
            refunds,
            chargebacks,
            captures,
            settlement,
            order,
            terminal,
            documentation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPaymentLinks.class,
                "self", self,
                "checkout", checkout,
                "mobileAppCheckout", mobileAppCheckout,
                "changePaymentState", changePaymentState,
                "dashboard", dashboard,
                "refunds", refunds,
                "chargebacks", chargebacks,
                "captures", captures,
                "settlement", settlement,
                "order", order,
                "terminal", terminal,
                "documentation", documentation);
    }
    
    public final static class Builder {
 
        private Optional<? extends GetPaymentSelf> self = Optional.empty();
 
        private JsonNullable<? extends GetPaymentCheckout> checkout = JsonNullable.undefined();
 
        private JsonNullable<? extends MobileAppCheckout> mobileAppCheckout = JsonNullable.undefined();
 
        private JsonNullable<? extends ChangePaymentState> changePaymentState = JsonNullable.undefined();
 
        private Optional<? extends GetPaymentDashboard> dashboard = Optional.empty();
 
        private JsonNullable<? extends GetPaymentRefunds> refunds = JsonNullable.undefined();
 
        private Optional<? extends GetPaymentChargebacks> chargebacks = Optional.empty();
 
        private Optional<? extends GetPaymentCaptures> captures = Optional.empty();
 
        private JsonNullable<? extends Settlement> settlement = JsonNullable.undefined();
 
        private JsonNullable<? extends GetPaymentOrder> order = JsonNullable.undefined();
 
        private JsonNullable<? extends Terminal> terminal = JsonNullable.undefined();
 
        private Optional<? extends GetPaymentDocumentation> documentation = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder self(GetPaymentSelf self) {
            Utils.checkNotNull(self, "self");
            this.self = Optional.ofNullable(self);
            return this;
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder self(Optional<? extends GetPaymentSelf> self) {
            Utils.checkNotNull(self, "self");
            this.self = self;
            return this;
        }

        /**
         * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
         */
        public Builder checkout(GetPaymentCheckout checkout) {
            Utils.checkNotNull(checkout, "checkout");
            this.checkout = JsonNullable.of(checkout);
            return this;
        }

        /**
         * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
         */
        public Builder checkout(JsonNullable<? extends GetPaymentCheckout> checkout) {
            Utils.checkNotNull(checkout, "checkout");
            this.checkout = checkout;
            return this;
        }

        /**
         * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
         */
        public Builder mobileAppCheckout(MobileAppCheckout mobileAppCheckout) {
            Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
            this.mobileAppCheckout = JsonNullable.of(mobileAppCheckout);
            return this;
        }

        /**
         * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
         */
        public Builder mobileAppCheckout(JsonNullable<? extends MobileAppCheckout> mobileAppCheckout) {
            Utils.checkNotNull(mobileAppCheckout, "mobileAppCheckout");
            this.mobileAppCheckout = mobileAppCheckout;
            return this;
        }

        /**
         * For test mode payments in certain scenarios, a hosted interface is available to help you test different
         * payment states.
         * 
         * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
         * payments are executed without any user interaction.
         * 
         * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
         * chargeback for the test payment.
         */
        public Builder changePaymentState(ChangePaymentState changePaymentState) {
            Utils.checkNotNull(changePaymentState, "changePaymentState");
            this.changePaymentState = JsonNullable.of(changePaymentState);
            return this;
        }

        /**
         * For test mode payments in certain scenarios, a hosted interface is available to help you test different
         * payment states.
         * 
         * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these
         * payments are executed without any user interaction.
         * 
         * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or
         * chargeback for the test payment.
         */
        public Builder changePaymentState(JsonNullable<? extends ChangePaymentState> changePaymentState) {
            Utils.checkNotNull(changePaymentState, "changePaymentState");
            this.changePaymentState = changePaymentState;
            return this;
        }

        /**
         * Direct link to the payment in the Mollie Dashboard.
         */
        public Builder dashboard(GetPaymentDashboard dashboard) {
            Utils.checkNotNull(dashboard, "dashboard");
            this.dashboard = Optional.ofNullable(dashboard);
            return this;
        }

        /**
         * Direct link to the payment in the Mollie Dashboard.
         */
        public Builder dashboard(Optional<? extends GetPaymentDashboard> dashboard) {
            Utils.checkNotNull(dashboard, "dashboard");
            this.dashboard = dashboard;
            return this;
        }

        /**
         * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
         */
        public Builder refunds(GetPaymentRefunds refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = JsonNullable.of(refunds);
            return this;
        }

        /**
         * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
         */
        public Builder refunds(JsonNullable<? extends GetPaymentRefunds> refunds) {
            Utils.checkNotNull(refunds, "refunds");
            this.refunds = refunds;
            return this;
        }

        /**
         * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
         * payment.
         */
        public Builder chargebacks(GetPaymentChargebacks chargebacks) {
            Utils.checkNotNull(chargebacks, "chargebacks");
            this.chargebacks = Optional.ofNullable(chargebacks);
            return this;
        }

        /**
         * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this
         * payment.
         */
        public Builder chargebacks(Optional<? extends GetPaymentChargebacks> chargebacks) {
            Utils.checkNotNull(chargebacks, "chargebacks");
            this.chargebacks = chargebacks;
            return this;
        }

        /**
         * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
         */
        public Builder captures(GetPaymentCaptures captures) {
            Utils.checkNotNull(captures, "captures");
            this.captures = Optional.ofNullable(captures);
            return this;
        }

        /**
         * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
         */
        public Builder captures(Optional<? extends GetPaymentCaptures> captures) {
            Utils.checkNotNull(captures, "captures");
            this.captures = captures;
            return this;
        }

        /**
         * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
         * Not present if not yet settled.
         */
        public Builder settlement(Settlement settlement) {
            Utils.checkNotNull(settlement, "settlement");
            this.settlement = JsonNullable.of(settlement);
            return this;
        }

        /**
         * The API resource URL of the [settlement](get-settlement) this payment has been settled with.
         * Not present if not yet settled.
         */
        public Builder settlement(JsonNullable<? extends Settlement> settlement) {
            Utils.checkNotNull(settlement, "settlement");
            this.settlement = settlement;
            return this;
        }

        /**
         * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
         * order.
         */
        public Builder order(GetPaymentOrder order) {
            Utils.checkNotNull(order, "order");
            this.order = JsonNullable.of(order);
            return this;
        }

        /**
         * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an
         * order.
         */
        public Builder order(JsonNullable<? extends GetPaymentOrder> order) {
            Utils.checkNotNull(order, "order");
            this.order = order;
            return this;
        }

        /**
         * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
         * point-of-sale payments.
         */
        public Builder terminal(Terminal terminal) {
            Utils.checkNotNull(terminal, "terminal");
            this.terminal = JsonNullable.of(terminal);
            return this;
        }

        /**
         * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for
         * point-of-sale payments.
         */
        public Builder terminal(JsonNullable<? extends Terminal> terminal) {
            Utils.checkNotNull(terminal, "terminal");
            this.terminal = terminal;
            return this;
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder documentation(GetPaymentDocumentation documentation) {
            Utils.checkNotNull(documentation, "documentation");
            this.documentation = Optional.ofNullable(documentation);
            return this;
        }

        /**
         * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
         */
        public Builder documentation(Optional<? extends GetPaymentDocumentation> documentation) {
            Utils.checkNotNull(documentation, "documentation");
            this.documentation = documentation;
            return this;
        }
        
        public GetPaymentLinks build() {
            return new GetPaymentLinks(
                self,
                checkout,
                mobileAppCheckout,
                changePaymentState,
                dashboard,
                refunds,
                chargebacks,
                captures,
                settlement,
                order,
                terminal,
                documentation);
        }
    }
}

