/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreatePaymentLinkRequestBody {
    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the
     * customer's bank or card statement when possible.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
     * amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<? extends CreatePaymentLinkAmount> amount;

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
     * customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumAmount")
    private JsonNullable<? extends MinimumAmount> minimumAmount;

    /**
     * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
     * the customer will be shown a generic message after completing the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirectUrl")
    private JsonNullable<String> redirectUrl;

    /**
     * The webhook URL where we will send payment status updates to.
     * 
     * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
     * resulting from the payment link.
     * 
     * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
     * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
     * local machine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookUrl")
    private JsonNullable<String> webhookUrl;

    /**
     * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    private JsonNullable<? extends List<CreatePaymentLinkLines>> lines;

    /**
     * The customer's billing address details. We advise to provide these details to improve fraud protection and
     * conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
     * `country`.
     * 
     * <p>Required for payment method `in3`, `klarna`, `billie` and `riverty`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingAddress")
    private Optional<? extends CreatePaymentLinkBillingAddress> billingAddress;

    /**
     * The customer's shipping address details. We advise to provide these details to improve fraud protection and
     * conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
     * `country`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippingAddress")
    private Optional<? extends CreatePaymentLinkShippingAddress> shippingAddress;

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileId")
    private JsonNullable<String> profileId;

    /**
     * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
     * payments using the same link.
     * 
     * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reusable")
    private JsonNullable<Boolean> reusable;

    /**
     * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
     * the payment link will not expire automatically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresAt")
    private JsonNullable<String> expiresAt;

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is
     * not provided or is an empty array, all enabled payment methods will be available.
     * 
     * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
     * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
     * 'in3', 'riverty', 'klarna', 'billie'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedMethods")
    private JsonNullable<? extends List<String>> allowedMethods;

    /**
     * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
     * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
     * to your own account balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationFee")
    private Optional<? extends CreatePaymentLinkApplicationFee> applicationFee;

    /**
     * If set to `first`, a payment mandate is established right after a payment is made by the customer.
     * 
     * <p>Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
     * 
     * <p>The mandate ID can be retrieved by making a call to the
     * [Payment Link Payments Endpoint](get-payment-link-payments).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequenceType")
    private JsonNullable<? extends CreatePaymentLinkSequenceType> sequenceType;

    /**
     * **Only relevant when `sequenceType` is set to `first`**
     * 
     * <p>The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
     * the customer will be required to input relevant information which will be used to establish a mandate after
     * the payment is made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerId")
    private JsonNullable<String> customerId;

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
     * `testmode` to `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public CreatePaymentLinkRequestBody(
            @JsonProperty("description") String description,
            @JsonProperty("amount") JsonNullable<? extends CreatePaymentLinkAmount> amount,
            @JsonProperty("minimumAmount") JsonNullable<? extends MinimumAmount> minimumAmount,
            @JsonProperty("redirectUrl") JsonNullable<String> redirectUrl,
            @JsonProperty("webhookUrl") JsonNullable<String> webhookUrl,
            @JsonProperty("lines") JsonNullable<? extends List<CreatePaymentLinkLines>> lines,
            @JsonProperty("billingAddress") Optional<? extends CreatePaymentLinkBillingAddress> billingAddress,
            @JsonProperty("shippingAddress") Optional<? extends CreatePaymentLinkShippingAddress> shippingAddress,
            @JsonProperty("profileId") JsonNullable<String> profileId,
            @JsonProperty("reusable") JsonNullable<Boolean> reusable,
            @JsonProperty("expiresAt") JsonNullable<String> expiresAt,
            @JsonProperty("allowedMethods") JsonNullable<? extends List<String>> allowedMethods,
            @JsonProperty("applicationFee") Optional<? extends CreatePaymentLinkApplicationFee> applicationFee,
            @JsonProperty("sequenceType") JsonNullable<? extends CreatePaymentLinkSequenceType> sequenceType,
            @JsonProperty("customerId") JsonNullable<String> customerId,
            @JsonProperty("testmode") JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        Utils.checkNotNull(lines, "lines");
        Utils.checkNotNull(billingAddress, "billingAddress");
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(reusable, "reusable");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        Utils.checkNotNull(applicationFee, "applicationFee");
        Utils.checkNotNull(sequenceType, "sequenceType");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(testmode, "testmode");
        this.description = description;
        this.amount = amount;
        this.minimumAmount = minimumAmount;
        this.redirectUrl = redirectUrl;
        this.webhookUrl = webhookUrl;
        this.lines = lines;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.profileId = profileId;
        this.reusable = reusable;
        this.expiresAt = expiresAt;
        this.allowedMethods = allowedMethods;
        this.applicationFee = applicationFee;
        this.sequenceType = sequenceType;
        this.customerId = customerId;
        this.testmode = testmode;
    }
    
    public CreatePaymentLinkRequestBody(
            String description) {
        this(description, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the
     * customer's bank or card statement when possible.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
     * amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreatePaymentLinkAmount> amount() {
        return (JsonNullable<CreatePaymentLinkAmount>) amount;
    }

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
     * customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<MinimumAmount> minimumAmount() {
        return (JsonNullable<MinimumAmount>) minimumAmount;
    }

    /**
     * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
     * the customer will be shown a generic message after completing the payment.
     */
    @JsonIgnore
    public JsonNullable<String> redirectUrl() {
        return redirectUrl;
    }

    /**
     * The webhook URL where we will send payment status updates to.
     * 
     * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
     * resulting from the payment link.
     * 
     * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
     * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
     * local machine.
     */
    @JsonIgnore
    public JsonNullable<String> webhookUrl() {
        return webhookUrl;
    }

    /**
     * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CreatePaymentLinkLines>> lines() {
        return (JsonNullable<List<CreatePaymentLinkLines>>) lines;
    }

    /**
     * The customer's billing address details. We advise to provide these details to improve fraud protection and
     * conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
     * `country`.
     * 
     * <p>Required for payment method `in3`, `klarna`, `billie` and `riverty`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreatePaymentLinkBillingAddress> billingAddress() {
        return (Optional<CreatePaymentLinkBillingAddress>) billingAddress;
    }

    /**
     * The customer's shipping address details. We advise to provide these details to improve fraud protection and
     * conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
     * `country`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreatePaymentLinkShippingAddress> shippingAddress() {
        return (Optional<CreatePaymentLinkShippingAddress>) shippingAddress;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @JsonIgnore
    public JsonNullable<String> profileId() {
        return profileId;
    }

    /**
     * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
     * payments using the same link.
     * 
     * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
     */
    @JsonIgnore
    public JsonNullable<Boolean> reusable() {
        return reusable;
    }

    /**
     * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
     * the payment link will not expire automatically.
     */
    @JsonIgnore
    public JsonNullable<String> expiresAt() {
        return expiresAt;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is
     * not provided or is an empty array, all enabled payment methods will be available.
     * 
     * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
     * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
     * 'in3', 'riverty', 'klarna', 'billie'.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> allowedMethods() {
        return (JsonNullable<List<String>>) allowedMethods;
    }

    /**
     * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
     * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
     * to your own account balance.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreatePaymentLinkApplicationFee> applicationFee() {
        return (Optional<CreatePaymentLinkApplicationFee>) applicationFee;
    }

    /**
     * If set to `first`, a payment mandate is established right after a payment is made by the customer.
     * 
     * <p>Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
     * 
     * <p>The mandate ID can be retrieved by making a call to the
     * [Payment Link Payments Endpoint](get-payment-link-payments).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreatePaymentLinkSequenceType> sequenceType() {
        return (JsonNullable<CreatePaymentLinkSequenceType>) sequenceType;
    }

    /**
     * **Only relevant when `sequenceType` is set to `first`**
     * 
     * <p>The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
     * the customer will be required to input relevant information which will be used to establish a mandate after
     * the payment is made.
     */
    @JsonIgnore
    public JsonNullable<String> customerId() {
        return customerId;
    }

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
     * `testmode` to `true`.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the
     * customer's bank or card statement when possible.
     */
    public CreatePaymentLinkRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
     * amount.
     */
    public CreatePaymentLinkRequestBody withAmount(CreatePaymentLinkAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
     * amount.
     */
    public CreatePaymentLinkRequestBody withAmount(JsonNullable<? extends CreatePaymentLinkAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
     * customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    public CreatePaymentLinkRequestBody withMinimumAmount(MinimumAmount minimumAmount) {
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        this.minimumAmount = JsonNullable.of(minimumAmount);
        return this;
    }

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
     * customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    public CreatePaymentLinkRequestBody withMinimumAmount(JsonNullable<? extends MinimumAmount> minimumAmount) {
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        this.minimumAmount = minimumAmount;
        return this;
    }

    /**
     * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
     * the customer will be shown a generic message after completing the payment.
     */
    public CreatePaymentLinkRequestBody withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = JsonNullable.of(redirectUrl);
        return this;
    }

    /**
     * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
     * the customer will be shown a generic message after completing the payment.
     */
    public CreatePaymentLinkRequestBody withRedirectUrl(JsonNullable<String> redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    /**
     * The webhook URL where we will send payment status updates to.
     * 
     * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
     * resulting from the payment link.
     * 
     * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
     * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
     * local machine.
     */
    public CreatePaymentLinkRequestBody withWebhookUrl(String webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = JsonNullable.of(webhookUrl);
        return this;
    }

    /**
     * The webhook URL where we will send payment status updates to.
     * 
     * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
     * resulting from the payment link.
     * 
     * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
     * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
     * local machine.
     */
    public CreatePaymentLinkRequestBody withWebhookUrl(JsonNullable<String> webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = webhookUrl;
        return this;
    }

    /**
     * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
     */
    public CreatePaymentLinkRequestBody withLines(List<CreatePaymentLinkLines> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = JsonNullable.of(lines);
        return this;
    }

    /**
     * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
     */
    public CreatePaymentLinkRequestBody withLines(JsonNullable<? extends List<CreatePaymentLinkLines>> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = lines;
        return this;
    }

    /**
     * The customer's billing address details. We advise to provide these details to improve fraud protection and
     * conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
     * `country`.
     * 
     * <p>Required for payment method `in3`, `klarna`, `billie` and `riverty`.
     */
    public CreatePaymentLinkRequestBody withBillingAddress(CreatePaymentLinkBillingAddress billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = Optional.ofNullable(billingAddress);
        return this;
    }


    /**
     * The customer's billing address details. We advise to provide these details to improve fraud protection and
     * conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
     * `country`.
     * 
     * <p>Required for payment method `in3`, `klarna`, `billie` and `riverty`.
     */
    public CreatePaymentLinkRequestBody withBillingAddress(Optional<? extends CreatePaymentLinkBillingAddress> billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = billingAddress;
        return this;
    }

    /**
     * The customer's shipping address details. We advise to provide these details to improve fraud protection and
     * conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
     * `country`.
     */
    public CreatePaymentLinkRequestBody withShippingAddress(CreatePaymentLinkShippingAddress shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = Optional.ofNullable(shippingAddress);
        return this;
    }


    /**
     * The customer's shipping address details. We advise to provide these details to improve fraud protection and
     * conversion.
     * 
     * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
     * `country`.
     */
    public CreatePaymentLinkRequestBody withShippingAddress(Optional<? extends CreatePaymentLinkShippingAddress> shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = shippingAddress;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    public CreatePaymentLinkRequestBody withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = JsonNullable.of(profileId);
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    public CreatePaymentLinkRequestBody withProfileId(JsonNullable<String> profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
     * payments using the same link.
     * 
     * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
     */
    public CreatePaymentLinkRequestBody withReusable(boolean reusable) {
        Utils.checkNotNull(reusable, "reusable");
        this.reusable = JsonNullable.of(reusable);
        return this;
    }

    /**
     * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
     * payments using the same link.
     * 
     * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
     */
    public CreatePaymentLinkRequestBody withReusable(JsonNullable<Boolean> reusable) {
        Utils.checkNotNull(reusable, "reusable");
        this.reusable = reusable;
        return this;
    }

    /**
     * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
     * the payment link will not expire automatically.
     */
    public CreatePaymentLinkRequestBody withExpiresAt(String expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = JsonNullable.of(expiresAt);
        return this;
    }

    /**
     * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
     * the payment link will not expire automatically.
     */
    public CreatePaymentLinkRequestBody withExpiresAt(JsonNullable<String> expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is
     * not provided or is an empty array, all enabled payment methods will be available.
     * 
     * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
     * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
     * 'in3', 'riverty', 'klarna', 'billie'.
     */
    public CreatePaymentLinkRequestBody withAllowedMethods(List<String> allowedMethods) {
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.allowedMethods = JsonNullable.of(allowedMethods);
        return this;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is
     * not provided or is an empty array, all enabled payment methods will be available.
     * 
     * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
     * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
     * 'in3', 'riverty', 'klarna', 'billie'.
     */
    public CreatePaymentLinkRequestBody withAllowedMethods(JsonNullable<? extends List<String>> allowedMethods) {
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.allowedMethods = allowedMethods;
        return this;
    }

    /**
     * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
     * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
     * to your own account balance.
     */
    public CreatePaymentLinkRequestBody withApplicationFee(CreatePaymentLinkApplicationFee applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = Optional.ofNullable(applicationFee);
        return this;
    }


    /**
     * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
     * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
     * to your own account balance.
     */
    public CreatePaymentLinkRequestBody withApplicationFee(Optional<? extends CreatePaymentLinkApplicationFee> applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = applicationFee;
        return this;
    }

    /**
     * If set to `first`, a payment mandate is established right after a payment is made by the customer.
     * 
     * <p>Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
     * 
     * <p>The mandate ID can be retrieved by making a call to the
     * [Payment Link Payments Endpoint](get-payment-link-payments).
     */
    public CreatePaymentLinkRequestBody withSequenceType(CreatePaymentLinkSequenceType sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = JsonNullable.of(sequenceType);
        return this;
    }

    /**
     * If set to `first`, a payment mandate is established right after a payment is made by the customer.
     * 
     * <p>Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
     * 
     * <p>The mandate ID can be retrieved by making a call to the
     * [Payment Link Payments Endpoint](get-payment-link-payments).
     */
    public CreatePaymentLinkRequestBody withSequenceType(JsonNullable<? extends CreatePaymentLinkSequenceType> sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = sequenceType;
        return this;
    }

    /**
     * **Only relevant when `sequenceType` is set to `first`**
     * 
     * <p>The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
     * the customer will be required to input relevant information which will be used to establish a mandate after
     * the payment is made.
     */
    public CreatePaymentLinkRequestBody withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = JsonNullable.of(customerId);
        return this;
    }

    /**
     * **Only relevant when `sequenceType` is set to `first`**
     * 
     * <p>The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
     * the customer will be required to input relevant information which will be used to establish a mandate after
     * the payment is made.
     */
    public CreatePaymentLinkRequestBody withCustomerId(JsonNullable<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
     * `testmode` to `true`.
     */
    public CreatePaymentLinkRequestBody withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
     * `testmode` to `true`.
     */
    public CreatePaymentLinkRequestBody withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreatePaymentLinkRequestBody other = (CreatePaymentLinkRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.minimumAmount, other.minimumAmount) &&
            Utils.enhancedDeepEquals(this.redirectUrl, other.redirectUrl) &&
            Utils.enhancedDeepEquals(this.webhookUrl, other.webhookUrl) &&
            Utils.enhancedDeepEquals(this.lines, other.lines) &&
            Utils.enhancedDeepEquals(this.billingAddress, other.billingAddress) &&
            Utils.enhancedDeepEquals(this.shippingAddress, other.shippingAddress) &&
            Utils.enhancedDeepEquals(this.profileId, other.profileId) &&
            Utils.enhancedDeepEquals(this.reusable, other.reusable) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt) &&
            Utils.enhancedDeepEquals(this.allowedMethods, other.allowedMethods) &&
            Utils.enhancedDeepEquals(this.applicationFee, other.applicationFee) &&
            Utils.enhancedDeepEquals(this.sequenceType, other.sequenceType) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            description, amount, minimumAmount,
            redirectUrl, webhookUrl, lines,
            billingAddress, shippingAddress, profileId,
            reusable, expiresAt, allowedMethods,
            applicationFee, sequenceType, customerId,
            testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreatePaymentLinkRequestBody.class,
                "description", description,
                "amount", amount,
                "minimumAmount", minimumAmount,
                "redirectUrl", redirectUrl,
                "webhookUrl", webhookUrl,
                "lines", lines,
                "billingAddress", billingAddress,
                "shippingAddress", shippingAddress,
                "profileId", profileId,
                "reusable", reusable,
                "expiresAt", expiresAt,
                "allowedMethods", allowedMethods,
                "applicationFee", applicationFee,
                "sequenceType", sequenceType,
                "customerId", customerId,
                "testmode", testmode);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String description;

        private JsonNullable<? extends CreatePaymentLinkAmount> amount = JsonNullable.undefined();

        private JsonNullable<? extends MinimumAmount> minimumAmount = JsonNullable.undefined();

        private JsonNullable<String> redirectUrl = JsonNullable.undefined();

        private JsonNullable<String> webhookUrl = JsonNullable.undefined();

        private JsonNullable<? extends List<CreatePaymentLinkLines>> lines = JsonNullable.undefined();

        private Optional<? extends CreatePaymentLinkBillingAddress> billingAddress = Optional.empty();

        private Optional<? extends CreatePaymentLinkShippingAddress> shippingAddress = Optional.empty();

        private JsonNullable<String> profileId = JsonNullable.undefined();

        private JsonNullable<Boolean> reusable = JsonNullable.undefined();

        private JsonNullable<String> expiresAt = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> allowedMethods = JsonNullable.undefined();

        private Optional<? extends CreatePaymentLinkApplicationFee> applicationFee = Optional.empty();

        private JsonNullable<? extends CreatePaymentLinkSequenceType> sequenceType = JsonNullable.undefined();

        private JsonNullable<String> customerId = JsonNullable.undefined();

        private JsonNullable<Boolean> testmode = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A short description of the payment link. The description is visible in the Dashboard and will be shown on the
         * customer's bank or card statement when possible.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
         * amount.
         */
        public Builder amount(CreatePaymentLinkAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an
         * amount.
         */
        public Builder amount(JsonNullable<? extends CreatePaymentLinkAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
         * customer will be prompted to enter a value greater than or equal to the minimum amount.
         */
        public Builder minimumAmount(MinimumAmount minimumAmount) {
            Utils.checkNotNull(minimumAmount, "minimumAmount");
            this.minimumAmount = JsonNullable.of(minimumAmount);
            return this;
        }

        /**
         * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The
         * customer will be prompted to enter a value greater than or equal to the minimum amount.
         */
        public Builder minimumAmount(JsonNullable<? extends MinimumAmount> minimumAmount) {
            Utils.checkNotNull(minimumAmount, "minimumAmount");
            this.minimumAmount = minimumAmount;
            return this;
        }


        /**
         * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
         * the customer will be shown a generic message after completing the payment.
         */
        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = JsonNullable.of(redirectUrl);
            return this;
        }

        /**
         * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
         * the customer will be shown a generic message after completing the payment.
         */
        public Builder redirectUrl(JsonNullable<String> redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }


        /**
         * The webhook URL where we will send payment status updates to.
         * 
         * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
         * resulting from the payment link.
         * 
         * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
         * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
         * local machine.
         */
        public Builder webhookUrl(String webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = JsonNullable.of(webhookUrl);
            return this;
        }

        /**
         * The webhook URL where we will send payment status updates to.
         * 
         * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
         * resulting from the payment link.
         * 
         * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
         * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
         * local machine.
         */
        public Builder webhookUrl(JsonNullable<String> webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = webhookUrl;
            return this;
        }


        /**
         * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
         * ordered and its price.
         * 
         * <p>All lines must have the same currency as the payment.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
         */
        public Builder lines(List<CreatePaymentLinkLines> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = JsonNullable.of(lines);
            return this;
        }

        /**
         * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
         * ordered and its price.
         * 
         * <p>All lines must have the same currency as the payment.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
         */
        public Builder lines(JsonNullable<? extends List<CreatePaymentLinkLines>> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = lines;
            return this;
        }


        /**
         * The customer's billing address details. We advise to provide these details to improve fraud protection and
         * conversion.
         * 
         * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
         * `country`.
         * 
         * <p>Required for payment method `in3`, `klarna`, `billie` and `riverty`.
         */
        public Builder billingAddress(CreatePaymentLinkBillingAddress billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        /**
         * The customer's billing address details. We advise to provide these details to improve fraud protection and
         * conversion.
         * 
         * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
         * `country`.
         * 
         * <p>Required for payment method `in3`, `klarna`, `billie` and `riverty`.
         */
        public Builder billingAddress(Optional<? extends CreatePaymentLinkBillingAddress> billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = billingAddress;
            return this;
        }


        /**
         * The customer's shipping address details. We advise to provide these details to improve fraud protection and
         * conversion.
         * 
         * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
         * `country`.
         */
        public Builder shippingAddress(CreatePaymentLinkShippingAddress shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        /**
         * The customer's shipping address details. We advise to provide these details to improve fraud protection and
         * conversion.
         * 
         * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`, `city` and
         * `country`.
         */
        public Builder shippingAddress(Optional<? extends CreatePaymentLinkShippingAddress> shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = shippingAddress;
            return this;
        }


        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
         * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
         * required.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = JsonNullable.of(profileId);
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
         * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
         * required.
         */
        public Builder profileId(JsonNullable<String> profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }


        /**
         * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
         * payments using the same link.
         * 
         * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
         */
        public Builder reusable(boolean reusable) {
            Utils.checkNotNull(reusable, "reusable");
            this.reusable = JsonNullable.of(reusable);
            return this;
        }

        /**
         * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
         * payments using the same link.
         * 
         * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
         */
        public Builder reusable(JsonNullable<Boolean> reusable) {
            Utils.checkNotNull(reusable, "reusable");
            this.reusable = reusable;
            return this;
        }


        /**
         * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
         * the payment link will not expire automatically.
         */
        public Builder expiresAt(String expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = JsonNullable.of(expiresAt);
            return this;
        }

        /**
         * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
         * the payment link will not expire automatically.
         */
        public Builder expiresAt(JsonNullable<String> expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }


        /**
         * An array of payment methods that are allowed to be used for this payment link. When this parameter is
         * not provided or is an empty array, all enabled payment methods will be available.
         * 
         * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
         * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
         * 'in3', 'riverty', 'klarna', 'billie'.
         */
        public Builder allowedMethods(List<String> allowedMethods) {
            Utils.checkNotNull(allowedMethods, "allowedMethods");
            this.allowedMethods = JsonNullable.of(allowedMethods);
            return this;
        }

        /**
         * An array of payment methods that are allowed to be used for this payment link. When this parameter is
         * not provided or is an empty array, all enabled payment methods will be available.
         * 
         * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
         * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
         * 'in3', 'riverty', 'klarna', 'billie'.
         */
        public Builder allowedMethods(JsonNullable<? extends List<String>> allowedMethods) {
            Utils.checkNotNull(allowedMethods, "allowedMethods");
            this.allowedMethods = allowedMethods;
            return this;
        }


        /**
         * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
         * merchants.
         * 
         * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
         * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
         * to your own account balance.
         */
        public Builder applicationFee(CreatePaymentLinkApplicationFee applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = Optional.ofNullable(applicationFee);
            return this;
        }

        /**
         * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
         * merchants.
         * 
         * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
         * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
         * to your own account balance.
         */
        public Builder applicationFee(Optional<? extends CreatePaymentLinkApplicationFee> applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = applicationFee;
            return this;
        }


        /**
         * If set to `first`, a payment mandate is established right after a payment is made by the customer.
         * 
         * <p>Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
         * 
         * <p>The mandate ID can be retrieved by making a call to the
         * [Payment Link Payments Endpoint](get-payment-link-payments).
         */
        public Builder sequenceType(CreatePaymentLinkSequenceType sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = JsonNullable.of(sequenceType);
            return this;
        }

        /**
         * If set to `first`, a payment mandate is established right after a payment is made by the customer.
         * 
         * <p>Defaults to `oneoff`, which is a regular payment link and will not establish a mandate after payment.
         * 
         * <p>The mandate ID can be retrieved by making a call to the
         * [Payment Link Payments Endpoint](get-payment-link-payments).
         */
        public Builder sequenceType(JsonNullable<? extends CreatePaymentLinkSequenceType> sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = sequenceType;
            return this;
        }


        /**
         * **Only relevant when `sequenceType` is set to `first`**
         * 
         * <p>The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
         * the customer will be required to input relevant information which will be used to establish a mandate after
         * the payment is made.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = JsonNullable.of(customerId);
            return this;
        }

        /**
         * **Only relevant when `sequenceType` is set to `first`**
         * 
         * <p>The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
         * the customer will be required to input relevant information which will be used to establish a mandate after
         * the payment is made.
         */
        public Builder customerId(JsonNullable<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * Whether to create the entity in test mode or live mode.
         * 
         * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
         * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
         * `testmode` to `true`.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Whether to create the entity in test mode or live mode.
         * 
         * <p>Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be
         * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting
         * `testmode` to `true`.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }

        public CreatePaymentLinkRequestBody build() {

            return new CreatePaymentLinkRequestBody(
                description, amount, minimumAmount,
                redirectUrl, webhookUrl, lines,
                billingAddress, shippingAddress, profileId,
                reusable, expiresAt, allowedMethods,
                applicationFee, sequenceType, customerId,
                testmode);
        }

    }
}
