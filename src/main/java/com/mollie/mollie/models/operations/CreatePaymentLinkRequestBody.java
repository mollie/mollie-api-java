/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreatePaymentLinkRequestBody {

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<? extends CreatePaymentLinkAmount> amount;

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumAmount")
    private JsonNullable<? extends MinimumAmount> minimumAmount;

    /**
     * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided, the customer will be shown a generic message after completing the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirectUrl")
    private JsonNullable<String> redirectUrl;

    /**
     * The webhook URL where we will send payment status updates to.
     * 
     * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments resulting from the payment link.
     * 
     * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your local machine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookUrl")
    private JsonNullable<String> webhookUrl;

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileId")
    private JsonNullable<String> profileId;

    /**
     * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple payments using the same link.
     * 
     * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reusable")
    private JsonNullable<Boolean> reusable;

    /**
     * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front, the payment link will not expire automatically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresAt")
    private JsonNullable<String> expiresAt;

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedMethods")
    private JsonNullable<? extends List<AllowedMethods>> allowedMethods;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequenceType")
    private Optional<? extends SequenceType> sequenceType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerId")
    private Optional<String> customerId;

    /**
     * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie merchants.
     * 
     * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationFee")
    private Optional<? extends CreatePaymentLinkApplicationFee> applicationFee;

    @JsonCreator
    public CreatePaymentLinkRequestBody(
            @JsonProperty("description") String description,
            @JsonProperty("amount") JsonNullable<? extends CreatePaymentLinkAmount> amount,
            @JsonProperty("minimumAmount") JsonNullable<? extends MinimumAmount> minimumAmount,
            @JsonProperty("redirectUrl") JsonNullable<String> redirectUrl,
            @JsonProperty("webhookUrl") JsonNullable<String> webhookUrl,
            @JsonProperty("profileId") JsonNullable<String> profileId,
            @JsonProperty("reusable") JsonNullable<Boolean> reusable,
            @JsonProperty("expiresAt") JsonNullable<String> expiresAt,
            @JsonProperty("allowedMethods") JsonNullable<? extends List<AllowedMethods>> allowedMethods,
            @JsonProperty("sequenceType") Optional<? extends SequenceType> sequenceType,
            @JsonProperty("customerId") Optional<String> customerId,
            @JsonProperty("applicationFee") Optional<? extends CreatePaymentLinkApplicationFee> applicationFee) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(reusable, "reusable");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        Utils.checkNotNull(sequenceType, "sequenceType");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.description = description;
        this.amount = amount;
        this.minimumAmount = minimumAmount;
        this.redirectUrl = redirectUrl;
        this.webhookUrl = webhookUrl;
        this.profileId = profileId;
        this.reusable = reusable;
        this.expiresAt = expiresAt;
        this.allowedMethods = allowedMethods;
        this.sequenceType = sequenceType;
        this.customerId = customerId;
        this.applicationFee = applicationFee;
    }
    
    public CreatePaymentLinkRequestBody(
            String description) {
        this(description, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreatePaymentLinkAmount> amount() {
        return (JsonNullable<CreatePaymentLinkAmount>) amount;
    }

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<MinimumAmount> minimumAmount() {
        return (JsonNullable<MinimumAmount>) minimumAmount;
    }

    /**
     * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided, the customer will be shown a generic message after completing the payment.
     */
    @JsonIgnore
    public JsonNullable<String> redirectUrl() {
        return redirectUrl;
    }

    /**
     * The webhook URL where we will send payment status updates to.
     * 
     * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments resulting from the payment link.
     * 
     * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your local machine.
     */
    @JsonIgnore
    public JsonNullable<String> webhookUrl() {
        return webhookUrl;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    @JsonIgnore
    public JsonNullable<String> profileId() {
        return profileId;
    }

    /**
     * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple payments using the same link.
     * 
     * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
     */
    @JsonIgnore
    public JsonNullable<Boolean> reusable() {
        return reusable;
    }

    /**
     * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front, the payment link will not expire automatically.
     */
    @JsonIgnore
    public JsonNullable<String> expiresAt() {
        return expiresAt;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<AllowedMethods>> allowedMethods() {
        return (JsonNullable<List<AllowedMethods>>) allowedMethods;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SequenceType> sequenceType() {
        return (Optional<SequenceType>) sequenceType;
    }

    @JsonIgnore
    public Optional<String> customerId() {
        return customerId;
    }

    /**
     * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie merchants.
     * 
     * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreatePaymentLinkApplicationFee> applicationFee() {
        return (Optional<CreatePaymentLinkApplicationFee>) applicationFee;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
     */
    public CreatePaymentLinkRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an amount.
     */
    public CreatePaymentLinkRequestBody withAmount(CreatePaymentLinkAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an amount.
     */
    public CreatePaymentLinkRequestBody withAmount(JsonNullable<? extends CreatePaymentLinkAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    public CreatePaymentLinkRequestBody withMinimumAmount(MinimumAmount minimumAmount) {
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        this.minimumAmount = JsonNullable.of(minimumAmount);
        return this;
    }

    /**
     * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
     */
    public CreatePaymentLinkRequestBody withMinimumAmount(JsonNullable<? extends MinimumAmount> minimumAmount) {
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        this.minimumAmount = minimumAmount;
        return this;
    }

    /**
     * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided, the customer will be shown a generic message after completing the payment.
     */
    public CreatePaymentLinkRequestBody withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = JsonNullable.of(redirectUrl);
        return this;
    }

    /**
     * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided, the customer will be shown a generic message after completing the payment.
     */
    public CreatePaymentLinkRequestBody withRedirectUrl(JsonNullable<String> redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    /**
     * The webhook URL where we will send payment status updates to.
     * 
     * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments resulting from the payment link.
     * 
     * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your local machine.
     */
    public CreatePaymentLinkRequestBody withWebhookUrl(String webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = JsonNullable.of(webhookUrl);
        return this;
    }

    /**
     * The webhook URL where we will send payment status updates to.
     * 
     * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments resulting from the payment link.
     * 
     * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your local machine.
     */
    public CreatePaymentLinkRequestBody withWebhookUrl(JsonNullable<String> webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = webhookUrl;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    public CreatePaymentLinkRequestBody withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = JsonNullable.of(profileId);
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
     */
    public CreatePaymentLinkRequestBody withProfileId(JsonNullable<String> profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple payments using the same link.
     * 
     * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
     */
    public CreatePaymentLinkRequestBody withReusable(boolean reusable) {
        Utils.checkNotNull(reusable, "reusable");
        this.reusable = JsonNullable.of(reusable);
        return this;
    }

    /**
     * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple payments using the same link.
     * 
     * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
     */
    public CreatePaymentLinkRequestBody withReusable(JsonNullable<Boolean> reusable) {
        Utils.checkNotNull(reusable, "reusable");
        this.reusable = reusable;
        return this;
    }

    /**
     * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front, the payment link will not expire automatically.
     */
    public CreatePaymentLinkRequestBody withExpiresAt(String expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = JsonNullable.of(expiresAt);
        return this;
    }

    /**
     * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front, the payment link will not expire automatically.
     */
    public CreatePaymentLinkRequestBody withExpiresAt(JsonNullable<String> expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
     */
    public CreatePaymentLinkRequestBody withAllowedMethods(List<AllowedMethods> allowedMethods) {
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.allowedMethods = JsonNullable.of(allowedMethods);
        return this;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
     */
    public CreatePaymentLinkRequestBody withAllowedMethods(JsonNullable<? extends List<AllowedMethods>> allowedMethods) {
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.allowedMethods = allowedMethods;
        return this;
    }

    public CreatePaymentLinkRequestBody withSequenceType(SequenceType sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = Optional.ofNullable(sequenceType);
        return this;
    }

    public CreatePaymentLinkRequestBody withSequenceType(Optional<? extends SequenceType> sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = sequenceType;
        return this;
    }

    public CreatePaymentLinkRequestBody withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = Optional.ofNullable(customerId);
        return this;
    }

    public CreatePaymentLinkRequestBody withCustomerId(Optional<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie merchants.
     * 
     * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
     */
    public CreatePaymentLinkRequestBody withApplicationFee(CreatePaymentLinkApplicationFee applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = Optional.ofNullable(applicationFee);
        return this;
    }

    /**
     * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie merchants.
     * 
     * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
     */
    public CreatePaymentLinkRequestBody withApplicationFee(Optional<? extends CreatePaymentLinkApplicationFee> applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = applicationFee;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreatePaymentLinkRequestBody other = (CreatePaymentLinkRequestBody) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.minimumAmount, other.minimumAmount) &&
            Objects.deepEquals(this.redirectUrl, other.redirectUrl) &&
            Objects.deepEquals(this.webhookUrl, other.webhookUrl) &&
            Objects.deepEquals(this.profileId, other.profileId) &&
            Objects.deepEquals(this.reusable, other.reusable) &&
            Objects.deepEquals(this.expiresAt, other.expiresAt) &&
            Objects.deepEquals(this.allowedMethods, other.allowedMethods) &&
            Objects.deepEquals(this.sequenceType, other.sequenceType) &&
            Objects.deepEquals(this.customerId, other.customerId) &&
            Objects.deepEquals(this.applicationFee, other.applicationFee);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            amount,
            minimumAmount,
            redirectUrl,
            webhookUrl,
            profileId,
            reusable,
            expiresAt,
            allowedMethods,
            sequenceType,
            customerId,
            applicationFee);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreatePaymentLinkRequestBody.class,
                "description", description,
                "amount", amount,
                "minimumAmount", minimumAmount,
                "redirectUrl", redirectUrl,
                "webhookUrl", webhookUrl,
                "profileId", profileId,
                "reusable", reusable,
                "expiresAt", expiresAt,
                "allowedMethods", allowedMethods,
                "sequenceType", sequenceType,
                "customerId", customerId,
                "applicationFee", applicationFee);
    }
    
    public final static class Builder {
 
        private String description;
 
        private JsonNullable<? extends CreatePaymentLinkAmount> amount = JsonNullable.undefined();
 
        private JsonNullable<? extends MinimumAmount> minimumAmount = JsonNullable.undefined();
 
        private JsonNullable<String> redirectUrl = JsonNullable.undefined();
 
        private JsonNullable<String> webhookUrl = JsonNullable.undefined();
 
        private JsonNullable<String> profileId = JsonNullable.undefined();
 
        private JsonNullable<Boolean> reusable;
 
        private JsonNullable<String> expiresAt = JsonNullable.undefined();
 
        private JsonNullable<? extends List<AllowedMethods>> allowedMethods = JsonNullable.undefined();
 
        private Optional<? extends SequenceType> sequenceType;
 
        private Optional<String> customerId = Optional.empty();
 
        private Optional<? extends CreatePaymentLinkApplicationFee> applicationFee = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A short description of the payment link. The description is visible in the Dashboard and will be shown on the customer's bank or card statement when possible.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an amount.
         */
        public Builder amount(CreatePaymentLinkAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * The amount of the payment link. If no amount is provided initially, the customer will be prompted to enter an amount.
         */
        public Builder amount(JsonNullable<? extends CreatePaymentLinkAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
         */
        public Builder minimumAmount(MinimumAmount minimumAmount) {
            Utils.checkNotNull(minimumAmount, "minimumAmount");
            this.minimumAmount = JsonNullable.of(minimumAmount);
            return this;
        }

        /**
         * The minimum amount of the payment link. This property is only allowed when there is no amount provided. The customer will be prompted to enter a value greater than or equal to the minimum amount.
         */
        public Builder minimumAmount(JsonNullable<? extends MinimumAmount> minimumAmount) {
            Utils.checkNotNull(minimumAmount, "minimumAmount");
            this.minimumAmount = minimumAmount;
            return this;
        }

        /**
         * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided, the customer will be shown a generic message after completing the payment.
         */
        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = JsonNullable.of(redirectUrl);
            return this;
        }

        /**
         * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided, the customer will be shown a generic message after completing the payment.
         */
        public Builder redirectUrl(JsonNullable<String> redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * The webhook URL where we will send payment status updates to.
         * 
         * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments resulting from the payment link.
         * 
         * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your local machine.
         */
        public Builder webhookUrl(String webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = JsonNullable.of(webhookUrl);
            return this;
        }

        /**
         * The webhook URL where we will send payment status updates to.
         * 
         * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments resulting from the payment link.
         * 
         * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your local machine.
         */
        public Builder webhookUrl(JsonNullable<String> webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = webhookUrl;
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = JsonNullable.of(profileId);
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
         */
        public Builder profileId(JsonNullable<String> profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }

        /**
         * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple payments using the same link.
         * 
         * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
         */
        public Builder reusable(boolean reusable) {
            Utils.checkNotNull(reusable, "reusable");
            this.reusable = JsonNullable.of(reusable);
            return this;
        }

        /**
         * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple payments using the same link.
         * 
         * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
         */
        public Builder reusable(JsonNullable<Boolean> reusable) {
            Utils.checkNotNull(reusable, "reusable");
            this.reusable = reusable;
            return this;
        }

        /**
         * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front, the payment link will not expire automatically.
         */
        public Builder expiresAt(String expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = JsonNullable.of(expiresAt);
            return this;
        }

        /**
         * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front, the payment link will not expire automatically.
         */
        public Builder expiresAt(JsonNullable<String> expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
         */
        public Builder allowedMethods(List<AllowedMethods> allowedMethods) {
            Utils.checkNotNull(allowedMethods, "allowedMethods");
            this.allowedMethods = JsonNullable.of(allowedMethods);
            return this;
        }

        /**
         * An array of payment methods that are allowed to be used for this payment link. When this parameter is not provided or is an empty array, all enabled payment methods will be available.
         */
        public Builder allowedMethods(JsonNullable<? extends List<AllowedMethods>> allowedMethods) {
            Utils.checkNotNull(allowedMethods, "allowedMethods");
            this.allowedMethods = allowedMethods;
            return this;
        }

        public Builder sequenceType(SequenceType sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = Optional.ofNullable(sequenceType);
            return this;
        }

        public Builder sequenceType(Optional<? extends SequenceType> sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = sequenceType;
            return this;
        }

        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        public Builder customerId(Optional<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }

        /**
         * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie merchants.
         * 
         * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
         */
        public Builder applicationFee(CreatePaymentLinkApplicationFee applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = Optional.ofNullable(applicationFee);
            return this;
        }

        /**
         * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie merchants.
         * 
         * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
         */
        public Builder applicationFee(Optional<? extends CreatePaymentLinkApplicationFee> applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = applicationFee;
            return this;
        }
        
        public CreatePaymentLinkRequestBody build() {
            if (reusable == null) {
                reusable = _SINGLETON_VALUE_Reusable.value();
            }
            if (sequenceType == null) {
                sequenceType = _SINGLETON_VALUE_SequenceType.value();
            }
            return new CreatePaymentLinkRequestBody(
                description,
                amount,
                minimumAmount,
                redirectUrl,
                webhookUrl,
                profileId,
                reusable,
                expiresAt,
                allowedMethods,
                sequenceType,
                customerId,
                applicationFee);
        }

        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_Reusable =
                new LazySingletonValue<>(
                        "reusable",
                        "false",
                        new TypeReference<JsonNullable<Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends SequenceType>> _SINGLETON_VALUE_SequenceType =
                new LazySingletonValue<>(
                        "sequenceType",
                        "\"oneoff\"",
                        new TypeReference<Optional<? extends SequenceType>>() {});
    }
}
