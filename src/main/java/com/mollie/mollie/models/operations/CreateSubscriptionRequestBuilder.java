/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.SDKConfiguration;
import com.mollie.mollie.models.components.SubscriptionRequest;
import com.mollie.mollie.operations.CreateSubscription;
import com.mollie.mollie.utils.Options;
import com.mollie.mollie.utils.RetryConfig;
import com.mollie.mollie.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class CreateSubscriptionRequestBuilder {

    private String customerId;
    private Optional<String> idempotencyKey = Optional.empty();
    private Optional<? extends SubscriptionRequest> subscriptionRequest = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public CreateSubscriptionRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreateSubscriptionRequestBuilder customerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }
                
    public CreateSubscriptionRequestBuilder idempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.of(idempotencyKey);
        return this;
    }

    public CreateSubscriptionRequestBuilder idempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }
                
    public CreateSubscriptionRequestBuilder subscriptionRequest(SubscriptionRequest subscriptionRequest) {
        Utils.checkNotNull(subscriptionRequest, "subscriptionRequest");
        this.subscriptionRequest = Optional.of(subscriptionRequest);
        return this;
    }

    public CreateSubscriptionRequestBuilder subscriptionRequest(Optional<? extends SubscriptionRequest> subscriptionRequest) {
        Utils.checkNotNull(subscriptionRequest, "subscriptionRequest");
        this.subscriptionRequest = subscriptionRequest;
        return this;
    }
                
    public CreateSubscriptionRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public CreateSubscriptionRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private CreateSubscriptionRequest buildRequest() {

        CreateSubscriptionRequest request = new CreateSubscriptionRequest(customerId,
            idempotencyKey,
            subscriptionRequest);

        return request;
    }

    public CreateSubscriptionResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<CreateSubscriptionRequest, CreateSubscriptionResponse> operation
              = new CreateSubscription.Sync(sdkConfiguration, options);
        CreateSubscriptionRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
