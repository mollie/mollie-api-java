/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateOrderRefundLines {
    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private JsonNullable<String> sku;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends Type> type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends Status> status;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends CreateOrderRefundRefundsMetadata> metadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isCancelable")
    private Optional<Boolean> isCancelable;

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * <p>Must be less than the number of items already refunded for this order line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<Long> quantity;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityShipped")
    private Optional<Long> quantityShipped;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountShipped")
    private Optional<? extends AmountShipped> amountShipped;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityRefunded")
    private Optional<Long> quantityRefunded;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountRefunded")
    private Optional<? extends AmountRefunded> amountRefunded;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityCanceled")
    private Optional<Long> quantityCanceled;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountCanceled")
    private Optional<? extends AmountCanceled> amountCanceled;

    /**
     * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
     * 
     * <p>The amount is required only if you are partially refunding an order line which has a non-zero `discountAmount`.
     * 
     * <p>The amount you can refund depends on various properties of the order line and the create order refund request. The maximum that can be refunded is `unit price x quantity to ship`.
     * 
     * <p>The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped, the amounts already refunded or shipped and the quantity you want to refund.
     * 
     * <p>If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and `extra.maximumAmount` properties that allow you pick the right amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends CreateOrderRefundRefundsAmount> amount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippableQuantity")
    private Optional<Long> shippableQuantity;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refundableQuantity")
    private Optional<Long> refundableQuantity;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancelableQuantity")
    private Optional<Long> cancelableQuantity;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatRate")
    private Optional<String> vatRate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    @JsonCreator
    public CreateOrderRefundLines(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("sku") JsonNullable<String> sku,
            @JsonProperty("type") Optional<? extends Type> type,
            @JsonProperty("status") Optional<? extends Status> status,
            @JsonProperty("metadata") JsonNullable<? extends CreateOrderRefundRefundsMetadata> metadata,
            @JsonProperty("isCancelable") Optional<Boolean> isCancelable,
            @JsonProperty("quantity") Optional<Long> quantity,
            @JsonProperty("quantityShipped") Optional<Long> quantityShipped,
            @JsonProperty("amountShipped") Optional<? extends AmountShipped> amountShipped,
            @JsonProperty("quantityRefunded") Optional<Long> quantityRefunded,
            @JsonProperty("amountRefunded") Optional<? extends AmountRefunded> amountRefunded,
            @JsonProperty("quantityCanceled") Optional<Long> quantityCanceled,
            @JsonProperty("amountCanceled") Optional<? extends AmountCanceled> amountCanceled,
            @JsonProperty("amount") Optional<? extends CreateOrderRefundRefundsAmount> amount,
            @JsonProperty("shippableQuantity") Optional<Long> shippableQuantity,
            @JsonProperty("refundableQuantity") Optional<Long> refundableQuantity,
            @JsonProperty("cancelableQuantity") Optional<Long> cancelableQuantity,
            @JsonProperty("vatRate") Optional<String> vatRate,
            @JsonProperty("createdAt") Optional<String> createdAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(isCancelable, "isCancelable");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(quantityShipped, "quantityShipped");
        Utils.checkNotNull(amountShipped, "amountShipped");
        Utils.checkNotNull(quantityRefunded, "quantityRefunded");
        Utils.checkNotNull(amountRefunded, "amountRefunded");
        Utils.checkNotNull(quantityCanceled, "quantityCanceled");
        Utils.checkNotNull(amountCanceled, "amountCanceled");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(shippableQuantity, "shippableQuantity");
        Utils.checkNotNull(refundableQuantity, "refundableQuantity");
        Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
        Utils.checkNotNull(vatRate, "vatRate");
        Utils.checkNotNull(createdAt, "createdAt");
        this.id = id;
        this.name = name;
        this.sku = sku;
        this.type = type;
        this.status = status;
        this.metadata = metadata;
        this.isCancelable = isCancelable;
        this.quantity = quantity;
        this.quantityShipped = quantityShipped;
        this.amountShipped = amountShipped;
        this.quantityRefunded = quantityRefunded;
        this.amountRefunded = amountRefunded;
        this.quantityCanceled = quantityCanceled;
        this.amountCanceled = amountCanceled;
        this.amount = amount;
        this.shippableQuantity = shippableQuantity;
        this.refundableQuantity = refundableQuantity;
        this.cancelableQuantity = cancelableQuantity;
        this.vatRate = vatRate;
        this.createdAt = createdAt;
    }
    
    public CreateOrderRefundLines() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public JsonNullable<String> sku() {
        return sku;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Type> type() {
        return (Optional<Type>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Status> status() {
        return (Optional<Status>) status;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreateOrderRefundRefundsMetadata> metadata() {
        return (JsonNullable<CreateOrderRefundRefundsMetadata>) metadata;
    }

    @JsonIgnore
    public Optional<Boolean> isCancelable() {
        return isCancelable;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * <p>Must be less than the number of items already refunded for this order line.
     */
    @JsonIgnore
    public Optional<Long> quantity() {
        return quantity;
    }

    @JsonIgnore
    public Optional<Long> quantityShipped() {
        return quantityShipped;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountShipped> amountShipped() {
        return (Optional<AmountShipped>) amountShipped;
    }

    @JsonIgnore
    public Optional<Long> quantityRefunded() {
        return quantityRefunded;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountRefunded> amountRefunded() {
        return (Optional<AmountRefunded>) amountRefunded;
    }

    @JsonIgnore
    public Optional<Long> quantityCanceled() {
        return quantityCanceled;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountCanceled> amountCanceled() {
        return (Optional<AmountCanceled>) amountCanceled;
    }

    /**
     * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
     * 
     * <p>The amount is required only if you are partially refunding an order line which has a non-zero `discountAmount`.
     * 
     * <p>The amount you can refund depends on various properties of the order line and the create order refund request. The maximum that can be refunded is `unit price x quantity to ship`.
     * 
     * <p>The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped, the amounts already refunded or shipped and the quantity you want to refund.
     * 
     * <p>If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and `extra.maximumAmount` properties that allow you pick the right amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundRefundsAmount> amount() {
        return (Optional<CreateOrderRefundRefundsAmount>) amount;
    }

    @JsonIgnore
    public Optional<Long> shippableQuantity() {
        return shippableQuantity;
    }

    @JsonIgnore
    public Optional<Long> refundableQuantity() {
        return refundableQuantity;
    }

    @JsonIgnore
    public Optional<Long> cancelableQuantity() {
        return cancelableQuantity;
    }

    @JsonIgnore
    public Optional<String> vatRate() {
        return vatRate;
    }

    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
     */
    public CreateOrderRefundLines withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
     */
    public CreateOrderRefundLines withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CreateOrderRefundLines withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public CreateOrderRefundLines withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CreateOrderRefundLines withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = JsonNullable.of(sku);
        return this;
    }

    public CreateOrderRefundLines withSku(JsonNullable<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    public CreateOrderRefundLines withType(Type type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    public CreateOrderRefundLines withType(Optional<? extends Type> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public CreateOrderRefundLines withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public CreateOrderRefundLines withStatus(Optional<? extends Status> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateOrderRefundLines withMetadata(CreateOrderRefundRefundsMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
     */
    public CreateOrderRefundLines withMetadata(JsonNullable<? extends CreateOrderRefundRefundsMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public CreateOrderRefundLines withIsCancelable(boolean isCancelable) {
        Utils.checkNotNull(isCancelable, "isCancelable");
        this.isCancelable = Optional.ofNullable(isCancelable);
        return this;
    }


    public CreateOrderRefundLines withIsCancelable(Optional<Boolean> isCancelable) {
        Utils.checkNotNull(isCancelable, "isCancelable");
        this.isCancelable = isCancelable;
        return this;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * <p>Must be less than the number of items already refunded for this order line.
     */
    public CreateOrderRefundLines withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }


    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
     * 
     * <p>Must be less than the number of items already refunded for this order line.
     */
    public CreateOrderRefundLines withQuantity(Optional<Long> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    public CreateOrderRefundLines withQuantityShipped(long quantityShipped) {
        Utils.checkNotNull(quantityShipped, "quantityShipped");
        this.quantityShipped = Optional.ofNullable(quantityShipped);
        return this;
    }


    public CreateOrderRefundLines withQuantityShipped(Optional<Long> quantityShipped) {
        Utils.checkNotNull(quantityShipped, "quantityShipped");
        this.quantityShipped = quantityShipped;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLines withAmountShipped(AmountShipped amountShipped) {
        Utils.checkNotNull(amountShipped, "amountShipped");
        this.amountShipped = Optional.ofNullable(amountShipped);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLines withAmountShipped(Optional<? extends AmountShipped> amountShipped) {
        Utils.checkNotNull(amountShipped, "amountShipped");
        this.amountShipped = amountShipped;
        return this;
    }

    public CreateOrderRefundLines withQuantityRefunded(long quantityRefunded) {
        Utils.checkNotNull(quantityRefunded, "quantityRefunded");
        this.quantityRefunded = Optional.ofNullable(quantityRefunded);
        return this;
    }


    public CreateOrderRefundLines withQuantityRefunded(Optional<Long> quantityRefunded) {
        Utils.checkNotNull(quantityRefunded, "quantityRefunded");
        this.quantityRefunded = quantityRefunded;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLines withAmountRefunded(AmountRefunded amountRefunded) {
        Utils.checkNotNull(amountRefunded, "amountRefunded");
        this.amountRefunded = Optional.ofNullable(amountRefunded);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLines withAmountRefunded(Optional<? extends AmountRefunded> amountRefunded) {
        Utils.checkNotNull(amountRefunded, "amountRefunded");
        this.amountRefunded = amountRefunded;
        return this;
    }

    public CreateOrderRefundLines withQuantityCanceled(long quantityCanceled) {
        Utils.checkNotNull(quantityCanceled, "quantityCanceled");
        this.quantityCanceled = Optional.ofNullable(quantityCanceled);
        return this;
    }


    public CreateOrderRefundLines withQuantityCanceled(Optional<Long> quantityCanceled) {
        Utils.checkNotNull(quantityCanceled, "quantityCanceled");
        this.quantityCanceled = quantityCanceled;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLines withAmountCanceled(AmountCanceled amountCanceled) {
        Utils.checkNotNull(amountCanceled, "amountCanceled");
        this.amountCanceled = Optional.ofNullable(amountCanceled);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public CreateOrderRefundLines withAmountCanceled(Optional<? extends AmountCanceled> amountCanceled) {
        Utils.checkNotNull(amountCanceled, "amountCanceled");
        this.amountCanceled = amountCanceled;
        return this;
    }

    /**
     * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
     * 
     * <p>The amount is required only if you are partially refunding an order line which has a non-zero `discountAmount`.
     * 
     * <p>The amount you can refund depends on various properties of the order line and the create order refund request. The maximum that can be refunded is `unit price x quantity to ship`.
     * 
     * <p>The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped, the amounts already refunded or shipped and the quantity you want to refund.
     * 
     * <p>If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and `extra.maximumAmount` properties that allow you pick the right amount.
     */
    public CreateOrderRefundLines withAmount(CreateOrderRefundRefundsAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
     * 
     * <p>The amount is required only if you are partially refunding an order line which has a non-zero `discountAmount`.
     * 
     * <p>The amount you can refund depends on various properties of the order line and the create order refund request. The maximum that can be refunded is `unit price x quantity to ship`.
     * 
     * <p>The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped, the amounts already refunded or shipped and the quantity you want to refund.
     * 
     * <p>If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and `extra.maximumAmount` properties that allow you pick the right amount.
     */
    public CreateOrderRefundLines withAmount(Optional<? extends CreateOrderRefundRefundsAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public CreateOrderRefundLines withShippableQuantity(long shippableQuantity) {
        Utils.checkNotNull(shippableQuantity, "shippableQuantity");
        this.shippableQuantity = Optional.ofNullable(shippableQuantity);
        return this;
    }


    public CreateOrderRefundLines withShippableQuantity(Optional<Long> shippableQuantity) {
        Utils.checkNotNull(shippableQuantity, "shippableQuantity");
        this.shippableQuantity = shippableQuantity;
        return this;
    }

    public CreateOrderRefundLines withRefundableQuantity(long refundableQuantity) {
        Utils.checkNotNull(refundableQuantity, "refundableQuantity");
        this.refundableQuantity = Optional.ofNullable(refundableQuantity);
        return this;
    }


    public CreateOrderRefundLines withRefundableQuantity(Optional<Long> refundableQuantity) {
        Utils.checkNotNull(refundableQuantity, "refundableQuantity");
        this.refundableQuantity = refundableQuantity;
        return this;
    }

    public CreateOrderRefundLines withCancelableQuantity(long cancelableQuantity) {
        Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
        this.cancelableQuantity = Optional.ofNullable(cancelableQuantity);
        return this;
    }


    public CreateOrderRefundLines withCancelableQuantity(Optional<Long> cancelableQuantity) {
        Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
        this.cancelableQuantity = cancelableQuantity;
        return this;
    }

    public CreateOrderRefundLines withVatRate(String vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = Optional.ofNullable(vatRate);
        return this;
    }


    public CreateOrderRefundLines withVatRate(Optional<String> vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = vatRate;
        return this;
    }

    public CreateOrderRefundLines withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    public CreateOrderRefundLines withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOrderRefundLines other = (CreateOrderRefundLines) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.sku, other.sku) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.isCancelable, other.isCancelable) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.quantityShipped, other.quantityShipped) &&
            Utils.enhancedDeepEquals(this.amountShipped, other.amountShipped) &&
            Utils.enhancedDeepEquals(this.quantityRefunded, other.quantityRefunded) &&
            Utils.enhancedDeepEquals(this.amountRefunded, other.amountRefunded) &&
            Utils.enhancedDeepEquals(this.quantityCanceled, other.quantityCanceled) &&
            Utils.enhancedDeepEquals(this.amountCanceled, other.amountCanceled) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.shippableQuantity, other.shippableQuantity) &&
            Utils.enhancedDeepEquals(this.refundableQuantity, other.refundableQuantity) &&
            Utils.enhancedDeepEquals(this.cancelableQuantity, other.cancelableQuantity) &&
            Utils.enhancedDeepEquals(this.vatRate, other.vatRate) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, name, sku,
            type, status, metadata,
            isCancelable, quantity, quantityShipped,
            amountShipped, quantityRefunded, amountRefunded,
            quantityCanceled, amountCanceled, amount,
            shippableQuantity, refundableQuantity, cancelableQuantity,
            vatRate, createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOrderRefundLines.class,
                "id", id,
                "name", name,
                "sku", sku,
                "type", type,
                "status", status,
                "metadata", metadata,
                "isCancelable", isCancelable,
                "quantity", quantity,
                "quantityShipped", quantityShipped,
                "amountShipped", amountShipped,
                "quantityRefunded", quantityRefunded,
                "amountRefunded", amountRefunded,
                "quantityCanceled", quantityCanceled,
                "amountCanceled", amountCanceled,
                "amount", amount,
                "shippableQuantity", shippableQuantity,
                "refundableQuantity", refundableQuantity,
                "cancelableQuantity", cancelableQuantity,
                "vatRate", vatRate,
                "createdAt", createdAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> id = Optional.empty();

        private Optional<String> name = Optional.empty();

        private JsonNullable<String> sku = JsonNullable.undefined();

        private Optional<? extends Type> type = Optional.empty();

        private Optional<? extends Status> status = Optional.empty();

        private JsonNullable<? extends CreateOrderRefundRefundsMetadata> metadata = JsonNullable.undefined();

        private Optional<Boolean> isCancelable = Optional.empty();

        private Optional<Long> quantity = Optional.empty();

        private Optional<Long> quantityShipped = Optional.empty();

        private Optional<? extends AmountShipped> amountShipped = Optional.empty();

        private Optional<Long> quantityRefunded = Optional.empty();

        private Optional<? extends AmountRefunded> amountRefunded = Optional.empty();

        private Optional<Long> quantityCanceled = Optional.empty();

        private Optional<? extends AmountCanceled> amountCanceled = Optional.empty();

        private Optional<? extends CreateOrderRefundRefundsAmount> amount = Optional.empty();

        private Optional<Long> shippableQuantity = Optional.empty();

        private Optional<Long> refundableQuantity = Optional.empty();

        private Optional<Long> cancelableQuantity = Optional.empty();

        private Optional<String> vatRate = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the order line you wish to refund. For example: `odl_jp31y97yjz`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = JsonNullable.of(sku);
            return this;
        }

        public Builder sku(JsonNullable<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }


        public Builder type(Type type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends Type> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends Status> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(CreateOrderRefundRefundsMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends CreateOrderRefundRefundsMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        public Builder isCancelable(boolean isCancelable) {
            Utils.checkNotNull(isCancelable, "isCancelable");
            this.isCancelable = Optional.ofNullable(isCancelable);
            return this;
        }

        public Builder isCancelable(Optional<Boolean> isCancelable) {
            Utils.checkNotNull(isCancelable, "isCancelable");
            this.isCancelable = isCancelable;
            return this;
        }


        /**
         * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
         * 
         * <p>Must be less than the number of items already refunded for this order line.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * The number of items that should be refunded for this order line. When this parameter is omitted, the whole order line will be refunded.
         * 
         * <p>Must be less than the number of items already refunded for this order line.
         */
        public Builder quantity(Optional<Long> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }


        public Builder quantityShipped(long quantityShipped) {
            Utils.checkNotNull(quantityShipped, "quantityShipped");
            this.quantityShipped = Optional.ofNullable(quantityShipped);
            return this;
        }

        public Builder quantityShipped(Optional<Long> quantityShipped) {
            Utils.checkNotNull(quantityShipped, "quantityShipped");
            this.quantityShipped = quantityShipped;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountShipped(AmountShipped amountShipped) {
            Utils.checkNotNull(amountShipped, "amountShipped");
            this.amountShipped = Optional.ofNullable(amountShipped);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountShipped(Optional<? extends AmountShipped> amountShipped) {
            Utils.checkNotNull(amountShipped, "amountShipped");
            this.amountShipped = amountShipped;
            return this;
        }


        public Builder quantityRefunded(long quantityRefunded) {
            Utils.checkNotNull(quantityRefunded, "quantityRefunded");
            this.quantityRefunded = Optional.ofNullable(quantityRefunded);
            return this;
        }

        public Builder quantityRefunded(Optional<Long> quantityRefunded) {
            Utils.checkNotNull(quantityRefunded, "quantityRefunded");
            this.quantityRefunded = quantityRefunded;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountRefunded(AmountRefunded amountRefunded) {
            Utils.checkNotNull(amountRefunded, "amountRefunded");
            this.amountRefunded = Optional.ofNullable(amountRefunded);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountRefunded(Optional<? extends AmountRefunded> amountRefunded) {
            Utils.checkNotNull(amountRefunded, "amountRefunded");
            this.amountRefunded = amountRefunded;
            return this;
        }


        public Builder quantityCanceled(long quantityCanceled) {
            Utils.checkNotNull(quantityCanceled, "quantityCanceled");
            this.quantityCanceled = Optional.ofNullable(quantityCanceled);
            return this;
        }

        public Builder quantityCanceled(Optional<Long> quantityCanceled) {
            Utils.checkNotNull(quantityCanceled, "quantityCanceled");
            this.quantityCanceled = quantityCanceled;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountCanceled(AmountCanceled amountCanceled) {
            Utils.checkNotNull(amountCanceled, "amountCanceled");
            this.amountCanceled = Optional.ofNullable(amountCanceled);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountCanceled(Optional<? extends AmountCanceled> amountCanceled) {
            Utils.checkNotNull(amountCanceled, "amountCanceled");
            this.amountCanceled = amountCanceled;
            return this;
        }


        /**
         * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
         * 
         * <p>The amount is required only if you are partially refunding an order line which has a non-zero `discountAmount`.
         * 
         * <p>The amount you can refund depends on various properties of the order line and the create order refund request. The maximum that can be refunded is `unit price x quantity to ship`.
         * 
         * <p>The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped, the amounts already refunded or shipped and the quantity you want to refund.
         * 
         * <p>If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and `extra.maximumAmount` properties that allow you pick the right amount.
         */
        public Builder amount(CreateOrderRefundRefundsAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
         * 
         * <p>The amount is required only if you are partially refunding an order line which has a non-zero `discountAmount`.
         * 
         * <p>The amount you can refund depends on various properties of the order line and the create order refund request. The maximum that can be refunded is `unit price x quantity to ship`.
         * 
         * <p>The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped, the amounts already refunded or shipped and the quantity you want to refund.
         * 
         * <p>If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and `extra.maximumAmount` properties that allow you pick the right amount.
         */
        public Builder amount(Optional<? extends CreateOrderRefundRefundsAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        public Builder shippableQuantity(long shippableQuantity) {
            Utils.checkNotNull(shippableQuantity, "shippableQuantity");
            this.shippableQuantity = Optional.ofNullable(shippableQuantity);
            return this;
        }

        public Builder shippableQuantity(Optional<Long> shippableQuantity) {
            Utils.checkNotNull(shippableQuantity, "shippableQuantity");
            this.shippableQuantity = shippableQuantity;
            return this;
        }


        public Builder refundableQuantity(long refundableQuantity) {
            Utils.checkNotNull(refundableQuantity, "refundableQuantity");
            this.refundableQuantity = Optional.ofNullable(refundableQuantity);
            return this;
        }

        public Builder refundableQuantity(Optional<Long> refundableQuantity) {
            Utils.checkNotNull(refundableQuantity, "refundableQuantity");
            this.refundableQuantity = refundableQuantity;
            return this;
        }


        public Builder cancelableQuantity(long cancelableQuantity) {
            Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
            this.cancelableQuantity = Optional.ofNullable(cancelableQuantity);
            return this;
        }

        public Builder cancelableQuantity(Optional<Long> cancelableQuantity) {
            Utils.checkNotNull(cancelableQuantity, "cancelableQuantity");
            this.cancelableQuantity = cancelableQuantity;
            return this;
        }


        public Builder vatRate(String vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = Optional.ofNullable(vatRate);
            return this;
        }

        public Builder vatRate(Optional<String> vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = vatRate;
            return this;
        }


        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public CreateOrderRefundLines build() {

            return new CreateOrderRefundLines(
                id, name, sku,
                type, status, metadata,
                isCancelable, quantity, quantityShipped,
                amountShipped, quantityRefunded, amountRefunded,
                quantityCanceled, amountCanceled, amount,
                shippableQuantity, refundableQuantity, cancelableQuantity,
                vatRate, createdAt);
        }

    }
}
