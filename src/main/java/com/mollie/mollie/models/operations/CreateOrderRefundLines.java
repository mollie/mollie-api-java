/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class CreateOrderRefundLines {

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31jz`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole
     * order line will be refunded.
     * 
     * Must be less than the number of items already refunded for this order line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<Long> quantity;

    /**
     * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
     * 
     * The amount is required only if you are partially refunding an order line which has a non-zero
     * `discountAmount`.
     * 
     * The amount you can refund depends on various properties of the order line and the create order refund
     * request. The maximum that can be refunded is `unit price x quantity to ship`.
     * 
     * The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped,
     * the amounts already refunded or shipped and the quantity you want to refund.
     * 
     * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the
     * amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and
     * `extra.maximumAmount` properties that allow you pick the right amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends CreateOrderRefundAmount> amount;

    @JsonCreator
    public CreateOrderRefundLines(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("quantity") Optional<Long> quantity,
            @JsonProperty("amount") Optional<? extends CreateOrderRefundAmount> amount) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(amount, "amount");
        this.id = id;
        this.quantity = quantity;
        this.amount = amount;
    }
    
    public CreateOrderRefundLines() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31jz`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole
     * order line will be refunded.
     * 
     * Must be less than the number of items already refunded for this order line.
     */
    @JsonIgnore
    public Optional<Long> quantity() {
        return quantity;
    }

    /**
     * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
     * 
     * The amount is required only if you are partially refunding an order line which has a non-zero
     * `discountAmount`.
     * 
     * The amount you can refund depends on various properties of the order line and the create order refund
     * request. The maximum that can be refunded is `unit price x quantity to ship`.
     * 
     * The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped,
     * the amounts already refunded or shipped and the quantity you want to refund.
     * 
     * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the
     * amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and
     * `extra.maximumAmount` properties that allow you pick the right amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateOrderRefundAmount> amount() {
        return (Optional<CreateOrderRefundAmount>) amount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31jz`.
     */
    public CreateOrderRefundLines withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The ID of the order line you wish to refund. For example: `odl_jp31jz`.
     */
    public CreateOrderRefundLines withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole
     * order line will be refunded.
     * 
     * Must be less than the number of items already refunded for this order line.
     */
    public CreateOrderRefundLines withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }

    /**
     * The number of items that should be refunded for this order line. When this parameter is omitted, the whole
     * order line will be refunded.
     * 
     * Must be less than the number of items already refunded for this order line.
     */
    public CreateOrderRefundLines withQuantity(Optional<Long> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
     * 
     * The amount is required only if you are partially refunding an order line which has a non-zero
     * `discountAmount`.
     * 
     * The amount you can refund depends on various properties of the order line and the create order refund
     * request. The maximum that can be refunded is `unit price x quantity to ship`.
     * 
     * The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped,
     * the amounts already refunded or shipped and the quantity you want to refund.
     * 
     * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the
     * amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and
     * `extra.maximumAmount` properties that allow you pick the right amount.
     */
    public CreateOrderRefundLines withAmount(CreateOrderRefundAmount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
     * 
     * The amount is required only if you are partially refunding an order line which has a non-zero
     * `discountAmount`.
     * 
     * The amount you can refund depends on various properties of the order line and the create order refund
     * request. The maximum that can be refunded is `unit price x quantity to ship`.
     * 
     * The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped,
     * the amounts already refunded or shipped and the quantity you want to refund.
     * 
     * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the
     * amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and
     * `extra.maximumAmount` properties that allow you pick the right amount.
     */
    public CreateOrderRefundLines withAmount(Optional<? extends CreateOrderRefundAmount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOrderRefundLines other = (CreateOrderRefundLines) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            quantity,
            amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOrderRefundLines.class,
                "id", id,
                "quantity", quantity,
                "amount", amount);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<Long> quantity = Optional.empty();
 
        private Optional<? extends CreateOrderRefundAmount> amount = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the order line you wish to refund. For example: `odl_jp31jz`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the order line you wish to refund. For example: `odl_jp31jz`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The number of items that should be refunded for this order line. When this parameter is omitted, the whole
         * order line will be refunded.
         * 
         * Must be less than the number of items already refunded for this order line.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * The number of items that should be refunded for this order line. When this parameter is omitted, the whole
         * order line will be refunded.
         * 
         * Must be less than the number of items already refunded for this order line.
         */
        public Builder quantity(Optional<Long> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
         * 
         * The amount is required only if you are partially refunding an order line which has a non-zero
         * `discountAmount`.
         * 
         * The amount you can refund depends on various properties of the order line and the create order refund
         * request. The maximum that can be refunded is `unit price x quantity to ship`.
         * 
         * The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped,
         * the amounts already refunded or shipped and the quantity you want to refund.
         * 
         * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the
         * amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and
         * `extra.maximumAmount` properties that allow you pick the right amount.
         */
        public Builder amount(CreateOrderRefundAmount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount that you want to refund. In almost all cases, Mollie can determine the amount automatically.
         * 
         * The amount is required only if you are partially refunding an order line which has a non-zero
         * `discountAmount`.
         * 
         * The amount you can refund depends on various properties of the order line and the create order refund
         * request. The maximum that can be refunded is `unit price x quantity to ship`.
         * 
         * The minimum amount depends on the discount applied to the line, the quantity already refunded or shipped,
         * the amounts already refunded or shipped and the quantity you want to refund.
         * 
         * If you do not send an amount, Mollie will determine the amount automatically or respond with an error if the
         * amount cannot be determined automatically. The error will contain the `extra.minimumAmount` and
         * `extra.maximumAmount` properties that allow you pick the right amount.
         */
        public Builder amount(Optional<? extends CreateOrderRefundAmount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }
        
        public CreateOrderRefundLines build() {
            return new CreateOrderRefundLines(
                id,
                quantity,
                amount);
        }
    }
}

