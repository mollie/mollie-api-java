/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GetWebhookEventResponseBody
 * 
 * <p>The webhook event object.
 */
public class GetWebhookEventResponseBody {

    /**
     * Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The event's type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The entity token that triggered the event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entityId")
    private Optional<String> entityId;

    /**
     * The event's date time of creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * Full payload of the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_embedded")
    private JsonNullable<? extends GetWebhookEventEmbedded> embedded;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends GetWebhookEventLinks> links;

    @JsonCreator
    public GetWebhookEventResponseBody(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("entityId") Optional<String> entityId,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("_embedded") JsonNullable<? extends GetWebhookEventEmbedded> embedded,
            @JsonProperty("_links") Optional<? extends GetWebhookEventLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(entityId, "entityId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(embedded, "embedded");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.type = type;
        this.entityId = entityId;
        this.createdAt = createdAt;
        this.embedded = embedded;
        this.links = links;
    }
    
    public GetWebhookEventResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this event.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The event's type.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The entity token that triggered the event
     */
    @JsonIgnore
    public Optional<String> entityId() {
        return entityId;
    }

    /**
     * The event's date time of creation.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * Full payload of the event.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetWebhookEventEmbedded> embedded() {
        return (JsonNullable<GetWebhookEventEmbedded>) embedded;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetWebhookEventLinks> links() {
        return (Optional<GetWebhookEventLinks>) links;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
     */
    public GetWebhookEventResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
     */
    public GetWebhookEventResponseBody withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this event.
     */
    public GetWebhookEventResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The identifier uniquely referring to this event.
     */
    public GetWebhookEventResponseBody withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The event's type.
     */
    public GetWebhookEventResponseBody withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The event's type.
     */
    public GetWebhookEventResponseBody withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The entity token that triggered the event
     */
    public GetWebhookEventResponseBody withEntityId(String entityId) {
        Utils.checkNotNull(entityId, "entityId");
        this.entityId = Optional.ofNullable(entityId);
        return this;
    }

    /**
     * The entity token that triggered the event
     */
    public GetWebhookEventResponseBody withEntityId(Optional<String> entityId) {
        Utils.checkNotNull(entityId, "entityId");
        this.entityId = entityId;
        return this;
    }

    /**
     * The event's date time of creation.
     */
    public GetWebhookEventResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * The event's date time of creation.
     */
    public GetWebhookEventResponseBody withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Full payload of the event.
     */
    public GetWebhookEventResponseBody withEmbedded(GetWebhookEventEmbedded embedded) {
        Utils.checkNotNull(embedded, "embedded");
        this.embedded = JsonNullable.of(embedded);
        return this;
    }

    /**
     * Full payload of the event.
     */
    public GetWebhookEventResponseBody withEmbedded(JsonNullable<? extends GetWebhookEventEmbedded> embedded) {
        Utils.checkNotNull(embedded, "embedded");
        this.embedded = embedded;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetWebhookEventResponseBody withLinks(GetWebhookEventLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetWebhookEventResponseBody withLinks(Optional<? extends GetWebhookEventLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetWebhookEventResponseBody other = (GetWebhookEventResponseBody) o;
        return 
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.entityId, other.entityId) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.embedded, other.embedded) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            resource,
            id,
            type,
            entityId,
            createdAt,
            embedded,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetWebhookEventResponseBody.class,
                "resource", resource,
                "id", id,
                "type", type,
                "entityId", entityId,
                "createdAt", createdAt,
                "embedded", embedded,
                "links", links);
    }
    
    public final static class Builder {
 
        private Optional<String> resource;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> type = Optional.empty();
 
        private Optional<String> entityId = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();
 
        private JsonNullable<? extends GetWebhookEventEmbedded> embedded = JsonNullable.undefined();
 
        private Optional<? extends GetWebhookEventLinks> links = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * The identifier uniquely referring to this event.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this event.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The event's type.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The event's type.
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The entity token that triggered the event
         */
        public Builder entityId(String entityId) {
            Utils.checkNotNull(entityId, "entityId");
            this.entityId = Optional.ofNullable(entityId);
            return this;
        }

        /**
         * The entity token that triggered the event
         */
        public Builder entityId(Optional<String> entityId) {
            Utils.checkNotNull(entityId, "entityId");
            this.entityId = entityId;
            return this;
        }

        /**
         * The event's date time of creation.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The event's date time of creation.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Full payload of the event.
         */
        public Builder embedded(GetWebhookEventEmbedded embedded) {
            Utils.checkNotNull(embedded, "embedded");
            this.embedded = JsonNullable.of(embedded);
            return this;
        }

        /**
         * Full payload of the event.
         */
        public Builder embedded(JsonNullable<? extends GetWebhookEventEmbedded> embedded) {
            Utils.checkNotNull(embedded, "embedded");
            this.embedded = embedded;
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetWebhookEventLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends GetWebhookEventLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public GetWebhookEventResponseBody build() {
            if (resource == null) {
                resource = _SINGLETON_VALUE_Resource.value();
            }
            return new GetWebhookEventResponseBody(
                resource,
                id,
                type,
                entityId,
                createdAt,
                embedded,
                links);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Resource =
                new LazySingletonValue<>(
                        "resource",
                        "\"event\"",
                        new TypeReference<Optional<String>>() {});
    }
}
