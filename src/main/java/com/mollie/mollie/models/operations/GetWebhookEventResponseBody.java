/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GetWebhookEventResponseBody
 * 
 * <p>The webhook event object.
 */
public class GetWebhookEventResponseBody {
    /**
     * Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
     */
    @JsonProperty("resource")
    private String resource;

    /**
     * The identifier uniquely referring to this event.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The event's type
     */
    @JsonProperty("type")
    private GetWebhookEventWebhookEventTypes webhookEventTypes;

    /**
     * The entity token that triggered the event
     */
    @JsonProperty("entityId")
    private String entityId;

    /**
     * The event's date time of creation.
     */
    @JsonProperty("createdAt")
    private String createdAt;

    /**
     * Full payload of the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_embedded")
    private JsonNullable<? extends GetWebhookEventEmbedded> embedded;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private GetWebhookEventLinks links;

    @JsonCreator
    public GetWebhookEventResponseBody(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") String id,
            @JsonProperty("type") GetWebhookEventWebhookEventTypes webhookEventTypes,
            @JsonProperty("entityId") String entityId,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("_embedded") JsonNullable<? extends GetWebhookEventEmbedded> embedded,
            @JsonProperty("_links") GetWebhookEventLinks links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(webhookEventTypes, "webhookEventTypes");
        Utils.checkNotNull(entityId, "entityId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(embedded, "embedded");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.webhookEventTypes = webhookEventTypes;
        this.entityId = entityId;
        this.createdAt = createdAt;
        this.embedded = embedded;
        this.links = links;
    }
    
    public GetWebhookEventResponseBody(
            String resource,
            String id,
            GetWebhookEventWebhookEventTypes webhookEventTypes,
            String entityId,
            String createdAt,
            GetWebhookEventLinks links) {
        this(resource, id, webhookEventTypes,
            entityId, createdAt, JsonNullable.undefined(),
            links);
    }

    /**
     * Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this event.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The event's type
     */
    @JsonIgnore
    public GetWebhookEventWebhookEventTypes webhookEventTypes() {
        return webhookEventTypes;
    }

    /**
     * The entity token that triggered the event
     */
    @JsonIgnore
    public String entityId() {
        return entityId;
    }

    /**
     * The event's date time of creation.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    /**
     * Full payload of the event.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetWebhookEventEmbedded> embedded() {
        return (JsonNullable<GetWebhookEventEmbedded>) embedded;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public GetWebhookEventLinks links() {
        return links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
     */
    public GetWebhookEventResponseBody withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this event.
     */
    public GetWebhookEventResponseBody withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The event's type
     */
    public GetWebhookEventResponseBody withWebhookEventTypes(GetWebhookEventWebhookEventTypes webhookEventTypes) {
        Utils.checkNotNull(webhookEventTypes, "webhookEventTypes");
        this.webhookEventTypes = webhookEventTypes;
        return this;
    }

    /**
     * The entity token that triggered the event
     */
    public GetWebhookEventResponseBody withEntityId(String entityId) {
        Utils.checkNotNull(entityId, "entityId");
        this.entityId = entityId;
        return this;
    }

    /**
     * The event's date time of creation.
     */
    public GetWebhookEventResponseBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Full payload of the event.
     */
    public GetWebhookEventResponseBody withEmbedded(GetWebhookEventEmbedded embedded) {
        Utils.checkNotNull(embedded, "embedded");
        this.embedded = JsonNullable.of(embedded);
        return this;
    }

    /**
     * Full payload of the event.
     */
    public GetWebhookEventResponseBody withEmbedded(JsonNullable<? extends GetWebhookEventEmbedded> embedded) {
        Utils.checkNotNull(embedded, "embedded");
        this.embedded = embedded;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public GetWebhookEventResponseBody withLinks(GetWebhookEventLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetWebhookEventResponseBody other = (GetWebhookEventResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.webhookEventTypes, other.webhookEventTypes) &&
            Utils.enhancedDeepEquals(this.entityId, other.entityId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.embedded, other.embedded) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, webhookEventTypes,
            entityId, createdAt, embedded,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetWebhookEventResponseBody.class,
                "resource", resource,
                "id", id,
                "webhookEventTypes", webhookEventTypes,
                "entityId", entityId,
                "createdAt", createdAt,
                "embedded", embedded,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private String id;

        private GetWebhookEventWebhookEventTypes webhookEventTypes;

        private String entityId;

        private String createdAt;

        private JsonNullable<? extends GetWebhookEventEmbedded> embedded = JsonNullable.undefined();

        private GetWebhookEventLinks links;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a webhook event object. Will always contain the string `event` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this event.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The event's type
         */
        public Builder webhookEventTypes(GetWebhookEventWebhookEventTypes webhookEventTypes) {
            Utils.checkNotNull(webhookEventTypes, "webhookEventTypes");
            this.webhookEventTypes = webhookEventTypes;
            return this;
        }


        /**
         * The entity token that triggered the event
         */
        public Builder entityId(String entityId) {
            Utils.checkNotNull(entityId, "entityId");
            this.entityId = entityId;
            return this;
        }


        /**
         * The event's date time of creation.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * Full payload of the event.
         */
        public Builder embedded(GetWebhookEventEmbedded embedded) {
            Utils.checkNotNull(embedded, "embedded");
            this.embedded = JsonNullable.of(embedded);
            return this;
        }

        /**
         * Full payload of the event.
         */
        public Builder embedded(JsonNullable<? extends GetWebhookEventEmbedded> embedded) {
            Utils.checkNotNull(embedded, "embedded");
            this.embedded = embedded;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(GetWebhookEventLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public GetWebhookEventResponseBody build() {

            return new GetWebhookEventResponseBody(
                resource, id, webhookEventTypes,
                entityId, createdAt, embedded,
                links);
        }

    }
}
