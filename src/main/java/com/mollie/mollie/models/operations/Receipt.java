/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Receipt
 * 
 * <p>The Point of sale receipt object.
 */
public class Receipt {
    /**
     * A unique code provided by the cardholder’s bank to confirm that the transaction was successfully approved.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationCode")
    private JsonNullable<String> authorizationCode;

    /**
     * The unique number that identifies a specific payment application on a chip card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationIdentifier")
    private JsonNullable<String> applicationIdentifier;

    /**
     * The method by which the card was read by the terminal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardReadMethod")
    private JsonNullable<? extends CardReadMethod> cardReadMethod;

    /**
     * The method used to verify the cardholder's identity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardVerificationMethod")
    private JsonNullable<? extends CardVerificationMethod> cardVerificationMethod;

    @JsonCreator
    public Receipt(
            @JsonProperty("authorizationCode") JsonNullable<String> authorizationCode,
            @JsonProperty("applicationIdentifier") JsonNullable<String> applicationIdentifier,
            @JsonProperty("cardReadMethod") JsonNullable<? extends CardReadMethod> cardReadMethod,
            @JsonProperty("cardVerificationMethod") JsonNullable<? extends CardVerificationMethod> cardVerificationMethod) {
        Utils.checkNotNull(authorizationCode, "authorizationCode");
        Utils.checkNotNull(applicationIdentifier, "applicationIdentifier");
        Utils.checkNotNull(cardReadMethod, "cardReadMethod");
        Utils.checkNotNull(cardVerificationMethod, "cardVerificationMethod");
        this.authorizationCode = authorizationCode;
        this.applicationIdentifier = applicationIdentifier;
        this.cardReadMethod = cardReadMethod;
        this.cardVerificationMethod = cardVerificationMethod;
    }
    
    public Receipt() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * A unique code provided by the cardholder’s bank to confirm that the transaction was successfully approved.
     */
    @JsonIgnore
    public JsonNullable<String> authorizationCode() {
        return authorizationCode;
    }

    /**
     * The unique number that identifies a specific payment application on a chip card.
     */
    @JsonIgnore
    public JsonNullable<String> applicationIdentifier() {
        return applicationIdentifier;
    }

    /**
     * The method by which the card was read by the terminal.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CardReadMethod> cardReadMethod() {
        return (JsonNullable<CardReadMethod>) cardReadMethod;
    }

    /**
     * The method used to verify the cardholder's identity.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CardVerificationMethod> cardVerificationMethod() {
        return (JsonNullable<CardVerificationMethod>) cardVerificationMethod;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique code provided by the cardholder’s bank to confirm that the transaction was successfully approved.
     */
    public Receipt withAuthorizationCode(String authorizationCode) {
        Utils.checkNotNull(authorizationCode, "authorizationCode");
        this.authorizationCode = JsonNullable.of(authorizationCode);
        return this;
    }

    /**
     * A unique code provided by the cardholder’s bank to confirm that the transaction was successfully approved.
     */
    public Receipt withAuthorizationCode(JsonNullable<String> authorizationCode) {
        Utils.checkNotNull(authorizationCode, "authorizationCode");
        this.authorizationCode = authorizationCode;
        return this;
    }

    /**
     * The unique number that identifies a specific payment application on a chip card.
     */
    public Receipt withApplicationIdentifier(String applicationIdentifier) {
        Utils.checkNotNull(applicationIdentifier, "applicationIdentifier");
        this.applicationIdentifier = JsonNullable.of(applicationIdentifier);
        return this;
    }

    /**
     * The unique number that identifies a specific payment application on a chip card.
     */
    public Receipt withApplicationIdentifier(JsonNullable<String> applicationIdentifier) {
        Utils.checkNotNull(applicationIdentifier, "applicationIdentifier");
        this.applicationIdentifier = applicationIdentifier;
        return this;
    }

    /**
     * The method by which the card was read by the terminal.
     */
    public Receipt withCardReadMethod(CardReadMethod cardReadMethod) {
        Utils.checkNotNull(cardReadMethod, "cardReadMethod");
        this.cardReadMethod = JsonNullable.of(cardReadMethod);
        return this;
    }

    /**
     * The method by which the card was read by the terminal.
     */
    public Receipt withCardReadMethod(JsonNullable<? extends CardReadMethod> cardReadMethod) {
        Utils.checkNotNull(cardReadMethod, "cardReadMethod");
        this.cardReadMethod = cardReadMethod;
        return this;
    }

    /**
     * The method used to verify the cardholder's identity.
     */
    public Receipt withCardVerificationMethod(CardVerificationMethod cardVerificationMethod) {
        Utils.checkNotNull(cardVerificationMethod, "cardVerificationMethod");
        this.cardVerificationMethod = JsonNullable.of(cardVerificationMethod);
        return this;
    }

    /**
     * The method used to verify the cardholder's identity.
     */
    public Receipt withCardVerificationMethod(JsonNullable<? extends CardVerificationMethod> cardVerificationMethod) {
        Utils.checkNotNull(cardVerificationMethod, "cardVerificationMethod");
        this.cardVerificationMethod = cardVerificationMethod;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Receipt other = (Receipt) o;
        return 
            Utils.enhancedDeepEquals(this.authorizationCode, other.authorizationCode) &&
            Utils.enhancedDeepEquals(this.applicationIdentifier, other.applicationIdentifier) &&
            Utils.enhancedDeepEquals(this.cardReadMethod, other.cardReadMethod) &&
            Utils.enhancedDeepEquals(this.cardVerificationMethod, other.cardVerificationMethod);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            authorizationCode, applicationIdentifier, cardReadMethod,
            cardVerificationMethod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Receipt.class,
                "authorizationCode", authorizationCode,
                "applicationIdentifier", applicationIdentifier,
                "cardReadMethod", cardReadMethod,
                "cardVerificationMethod", cardVerificationMethod);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> authorizationCode = JsonNullable.undefined();

        private JsonNullable<String> applicationIdentifier = JsonNullable.undefined();

        private JsonNullable<? extends CardReadMethod> cardReadMethod = JsonNullable.undefined();

        private JsonNullable<? extends CardVerificationMethod> cardVerificationMethod = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique code provided by the cardholder’s bank to confirm that the transaction was successfully approved.
         */
        public Builder authorizationCode(String authorizationCode) {
            Utils.checkNotNull(authorizationCode, "authorizationCode");
            this.authorizationCode = JsonNullable.of(authorizationCode);
            return this;
        }

        /**
         * A unique code provided by the cardholder’s bank to confirm that the transaction was successfully approved.
         */
        public Builder authorizationCode(JsonNullable<String> authorizationCode) {
            Utils.checkNotNull(authorizationCode, "authorizationCode");
            this.authorizationCode = authorizationCode;
            return this;
        }


        /**
         * The unique number that identifies a specific payment application on a chip card.
         */
        public Builder applicationIdentifier(String applicationIdentifier) {
            Utils.checkNotNull(applicationIdentifier, "applicationIdentifier");
            this.applicationIdentifier = JsonNullable.of(applicationIdentifier);
            return this;
        }

        /**
         * The unique number that identifies a specific payment application on a chip card.
         */
        public Builder applicationIdentifier(JsonNullable<String> applicationIdentifier) {
            Utils.checkNotNull(applicationIdentifier, "applicationIdentifier");
            this.applicationIdentifier = applicationIdentifier;
            return this;
        }


        /**
         * The method by which the card was read by the terminal.
         */
        public Builder cardReadMethod(CardReadMethod cardReadMethod) {
            Utils.checkNotNull(cardReadMethod, "cardReadMethod");
            this.cardReadMethod = JsonNullable.of(cardReadMethod);
            return this;
        }

        /**
         * The method by which the card was read by the terminal.
         */
        public Builder cardReadMethod(JsonNullable<? extends CardReadMethod> cardReadMethod) {
            Utils.checkNotNull(cardReadMethod, "cardReadMethod");
            this.cardReadMethod = cardReadMethod;
            return this;
        }


        /**
         * The method used to verify the cardholder's identity.
         */
        public Builder cardVerificationMethod(CardVerificationMethod cardVerificationMethod) {
            Utils.checkNotNull(cardVerificationMethod, "cardVerificationMethod");
            this.cardVerificationMethod = JsonNullable.of(cardVerificationMethod);
            return this;
        }

        /**
         * The method used to verify the cardholder's identity.
         */
        public Builder cardVerificationMethod(JsonNullable<? extends CardVerificationMethod> cardVerificationMethod) {
            Utils.checkNotNull(cardVerificationMethod, "cardVerificationMethod");
            this.cardVerificationMethod = cardVerificationMethod;
            return this;
        }

        public Receipt build() {

            return new Receipt(
                authorizationCode, applicationIdentifier, cardReadMethod,
                cardVerificationMethod);
        }

    }
}
