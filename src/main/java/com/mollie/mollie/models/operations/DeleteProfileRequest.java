/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.mollie.mollie.utils.SpeakeasyMetadata;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class DeleteProfileRequest {
    /**
     * Provide the ID of the item you want to perform this operation on.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=idempotency-key")
    private Optional<String> idempotencyKey;

    @JsonCreator
    public DeleteProfileRequest(
            String id,
            Optional<String> idempotencyKey) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.id = id;
        this.idempotencyKey = idempotencyKey;
    }
    
    public DeleteProfileRequest(
            String id) {
        this(id, Optional.empty());
    }

    /**
     * Provide the ID of the item you want to perform this operation on.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Provide the ID of the item you want to perform this operation on.
     */
    public DeleteProfileRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public DeleteProfileRequest withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }


    /**
     * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     */
    public DeleteProfileRequest withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteProfileRequest other = (DeleteProfileRequest) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.idempotencyKey, other.idempotencyKey);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, idempotencyKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteProfileRequest.class,
                "id", id,
                "idempotencyKey", idempotencyKey);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private Optional<String> idempotencyKey = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Provide the ID of the item you want to perform this operation on.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A unique key to ensure idempotent requests. This key should be a UUID v4 string.
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public DeleteProfileRequest build() {

            return new DeleteProfileRequest(
                id, idempotencyKey);
        }

    }
}
