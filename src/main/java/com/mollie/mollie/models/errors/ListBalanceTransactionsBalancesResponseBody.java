/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.io.InputStream;
import java.lang.Long;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpResponse;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * ListBalanceTransactionsBalancesResponseBody
 * 
 * <p>An error response object.
 */
@SuppressWarnings("serial")
public class ListBalanceTransactionsBalancesResponseBody extends RuntimeException {

    /**
     * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<Long> status;

    /**
     * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * A detailed human-readable description of the error that occurred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detail")
    private Optional<String> detail;

    /**
     * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("field")
    private JsonNullable<String> field;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends ListBalanceTransactionsBalancesLinks> links;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RawResponse")
    private Optional<? extends HttpResponse<InputStream>> rawResponse;

    @JsonCreator
    public ListBalanceTransactionsBalancesResponseBody(
            @JsonProperty("status") Optional<Long> status,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("detail") Optional<String> detail,
            @JsonProperty("field") JsonNullable<String> field,
            @JsonProperty("_links") Optional<? extends ListBalanceTransactionsBalancesLinks> links,
            @JsonProperty("RawResponse") Optional<? extends HttpResponse<InputStream>> rawResponse) {
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(detail, "detail");
        Utils.checkNotNull(field, "field");
        Utils.checkNotNull(links, "links");
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.status = status;
        this.title = title;
        this.detail = detail;
        this.field = field;
        this.links = links;
        this.rawResponse = rawResponse;
    }
    
    public ListBalanceTransactionsBalancesResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
     */
    @JsonIgnore
    public Optional<Long> status() {
        return status;
    }

    /**
     * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * A detailed human-readable description of the error that occurred.
     */
    @JsonIgnore
    public Optional<String> detail() {
        return detail;
    }

    /**
     * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
     */
    @JsonIgnore
    public JsonNullable<String> field() {
        return field;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListBalanceTransactionsBalancesLinks> links() {
        return (Optional<ListBalanceTransactionsBalancesLinks>) links;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<HttpResponse<InputStream>> rawResponse() {
        return (Optional<HttpResponse<InputStream>>) rawResponse;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
     */
    public ListBalanceTransactionsBalancesResponseBody withStatus(long status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
     */
    public ListBalanceTransactionsBalancesResponseBody withStatus(Optional<Long> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
     */
    public ListBalanceTransactionsBalancesResponseBody withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
     */
    public ListBalanceTransactionsBalancesResponseBody withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * A detailed human-readable description of the error that occurred.
     */
    public ListBalanceTransactionsBalancesResponseBody withDetail(String detail) {
        Utils.checkNotNull(detail, "detail");
        this.detail = Optional.ofNullable(detail);
        return this;
    }

    /**
     * A detailed human-readable description of the error that occurred.
     */
    public ListBalanceTransactionsBalancesResponseBody withDetail(Optional<String> detail) {
        Utils.checkNotNull(detail, "detail");
        this.detail = detail;
        return this;
    }

    /**
     * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
     */
    public ListBalanceTransactionsBalancesResponseBody withField(String field) {
        Utils.checkNotNull(field, "field");
        this.field = JsonNullable.of(field);
        return this;
    }

    /**
     * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
     */
    public ListBalanceTransactionsBalancesResponseBody withField(JsonNullable<String> field) {
        Utils.checkNotNull(field, "field");
        this.field = field;
        return this;
    }

    public ListBalanceTransactionsBalancesResponseBody withLinks(ListBalanceTransactionsBalancesLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    public ListBalanceTransactionsBalancesResponseBody withLinks(Optional<? extends ListBalanceTransactionsBalancesLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public ListBalanceTransactionsBalancesResponseBody withRawResponse(HttpResponse<InputStream> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = Optional.ofNullable(rawResponse);
        return this;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public ListBalanceTransactionsBalancesResponseBody withRawResponse(Optional<? extends HttpResponse<InputStream>> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = rawResponse;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListBalanceTransactionsBalancesResponseBody other = (ListBalanceTransactionsBalancesResponseBody) o;
        return 
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.detail, other.detail) &&
            Objects.deepEquals(this.field, other.field) &&
            Objects.deepEquals(this.links, other.links) &&
            Objects.deepEquals(this.rawResponse, other.rawResponse);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            status,
            title,
            detail,
            field,
            links,
            rawResponse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListBalanceTransactionsBalancesResponseBody.class,
                "status", status,
                "title", title,
                "detail", detail,
                "field", field,
                "links", links,
                "rawResponse", rawResponse);
    }
    
    public final static class Builder {
 
        private Optional<Long> status = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<String> detail = Optional.empty();
 
        private JsonNullable<String> field = JsonNullable.undefined();
 
        private Optional<? extends ListBalanceTransactionsBalancesLinks> links = Optional.empty();
 
        private Optional<? extends HttpResponse<InputStream>> rawResponse;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
         */
        public Builder status(long status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
         */
        public Builder status(Optional<Long> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * A detailed human-readable description of the error that occurred.
         */
        public Builder detail(String detail) {
            Utils.checkNotNull(detail, "detail");
            this.detail = Optional.ofNullable(detail);
            return this;
        }

        /**
         * A detailed human-readable description of the error that occurred.
         */
        public Builder detail(Optional<String> detail) {
            Utils.checkNotNull(detail, "detail");
            this.detail = detail;
            return this;
        }

        /**
         * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
         */
        public Builder field(String field) {
            Utils.checkNotNull(field, "field");
            this.field = JsonNullable.of(field);
            return this;
        }

        /**
         * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
         */
        public Builder field(JsonNullable<String> field) {
            Utils.checkNotNull(field, "field");
            this.field = field;
            return this;
        }

        public Builder links(ListBalanceTransactionsBalancesLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        public Builder links(Optional<? extends ListBalanceTransactionsBalancesLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(HttpResponse<InputStream> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = Optional.ofNullable(rawResponse);
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(Optional<? extends HttpResponse<InputStream>> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = rawResponse;
            return this;
        }
        
        public ListBalanceTransactionsBalancesResponseBody build() {
            return new ListBalanceTransactionsBalancesResponseBody(
                status,
                title,
                detail,
                field,
                links,
                rawResponse);
        }
    }
}

