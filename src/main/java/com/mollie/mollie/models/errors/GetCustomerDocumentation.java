/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.mollie.mollie.models.errors;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mollie.mollie.utils.LazySingletonValue;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
/**
 * GetCustomerDocumentation - The URL to the generic Mollie API error handling guide.
 */

public class GetCustomerDocumentation {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("href")
    private Optional<String> href;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonCreator
    public GetCustomerDocumentation(
            @JsonProperty("href") Optional<String> href,
            @JsonProperty("type") Optional<String> type) {
        Utils.checkNotNull(href, "href");
        Utils.checkNotNull(type, "type");
        this.href = href;
        this.type = type;
    }
    
    public GetCustomerDocumentation() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> href() {
        return href;
    }

    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetCustomerDocumentation withHref(String href) {
        Utils.checkNotNull(href, "href");
        this.href = Optional.ofNullable(href);
        return this;
    }

    public GetCustomerDocumentation withHref(Optional<String> href) {
        Utils.checkNotNull(href, "href");
        this.href = href;
        return this;
    }

    public GetCustomerDocumentation withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public GetCustomerDocumentation withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCustomerDocumentation other = (GetCustomerDocumentation) o;
        return 
            Objects.deepEquals(this.href, other.href) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            href,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetCustomerDocumentation.class,
                "href", href,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<String> href;
 
        private Optional<String> type;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder href(String href) {
            Utils.checkNotNull(href, "href");
            this.href = Optional.ofNullable(href);
            return this;
        }

        public Builder href(Optional<String> href) {
            Utils.checkNotNull(href, "href");
            this.href = href;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public GetCustomerDocumentation build() {
            if (href == null) {
                href = _SINGLETON_VALUE_Href.value();
            }
            if (type == null) {
                type = _SINGLETON_VALUE_Type.value();
            }            return new GetCustomerDocumentation(
                href,
                type);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Href =
                new LazySingletonValue<>(
                        "href",
                        "\"https://docs.mollie.com/errors\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"text/html\"",
                        new TypeReference<Optional<String>>() {});
    }
}

