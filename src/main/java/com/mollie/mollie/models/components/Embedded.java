/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * Embedded
 * 
 * <p>Full payload of the event.
 */
public class Embedded {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entity")
    private Optional<? extends Entity> entity;

    @JsonCreator
    public Embedded(
            @JsonProperty("entity") Optional<? extends Entity> entity) {
        Utils.checkNotNull(entity, "entity");
        this.entity = entity;
    }
    
    public Embedded() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Entity> entity() {
        return (Optional<Entity>) entity;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Embedded withEntity(Entity entity) {
        Utils.checkNotNull(entity, "entity");
        this.entity = Optional.ofNullable(entity);
        return this;
    }


    public Embedded withEntity(Optional<? extends Entity> entity) {
        Utils.checkNotNull(entity, "entity");
        this.entity = entity;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Embedded other = (Embedded) o;
        return 
            Utils.enhancedDeepEquals(this.entity, other.entity);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            entity);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Embedded.class,
                "entity", entity);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends Entity> entity = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder entity(Entity entity) {
            Utils.checkNotNull(entity, "entity");
            this.entity = Optional.ofNullable(entity);
            return this;
        }

        public Builder entity(Optional<? extends Entity> entity) {
            Utils.checkNotNull(entity, "entity");
            this.entity = entity;
            return this;
        }

        public Embedded build() {

            return new Embedded(
                entity);
        }

    }
}
