/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * EntityBalanceTransferPartyResponse
 * 
 * <p>A party involved in the balance transfer, either the sender or the receiver.
 */
public class EntityBalanceTransferPartyResponse {
    /**
     * Defines the type of the party. At the moment, only `organization` is supported.
     */
    @JsonProperty("type")
    private BalanceTransferPartyTypeResponse type;


    @JsonProperty("id")
    private String id;

    /**
     * The transfer description for the transfer party. This is the description that will appear in the
     * financial reports of the party.
     */
    @JsonProperty("description")
    private String description;

    @JsonCreator
    public EntityBalanceTransferPartyResponse(
            @JsonProperty("type") BalanceTransferPartyTypeResponse type,
            @JsonProperty("id") String id,
            @JsonProperty("description") String description) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(description, "description");
        this.type = type;
        this.id = id;
        this.description = description;
    }

    /**
     * Defines the type of the party. At the moment, only `organization` is supported.
     */
    @JsonIgnore
    public BalanceTransferPartyTypeResponse type() {
        return type;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The transfer description for the transfer party. This is the description that will appear in the
     * financial reports of the party.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Defines the type of the party. At the moment, only `organization` is supported.
     */
    public EntityBalanceTransferPartyResponse withType(BalanceTransferPartyTypeResponse type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public EntityBalanceTransferPartyResponse withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The transfer description for the transfer party. This is the description that will appear in the
     * financial reports of the party.
     */
    public EntityBalanceTransferPartyResponse withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityBalanceTransferPartyResponse other = (EntityBalanceTransferPartyResponse) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.description, other.description);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, id, description);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityBalanceTransferPartyResponse.class,
                "type", type,
                "id", id,
                "description", description);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private BalanceTransferPartyTypeResponse type;

        private String id;

        private String description;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Defines the type of the party. At the moment, only `organization` is supported.
         */
        public Builder type(BalanceTransferPartyTypeResponse type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The transfer description for the transfer party. This is the description that will appear in the
         * financial reports of the party.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public EntityBalanceTransferPartyResponse build() {

            return new EntityBalanceTransferPartyResponse(
                type, id, description);
        }

    }
}
