/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class Costs {
    /**
     * A description of the cost subtotal
     */
    @JsonProperty("description")
    private String description;

    /**
     * The payment method, if applicable
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("method")
    private Optional<? extends PaymentMethod> method;

    /**
     * The number of fees
     */
    @JsonProperty("count")
    private long count;

    /**
     * The service rates, further divided into `fixed` and `percentage` costs.
     */
    @JsonProperty("rate")
    private Rate rate;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("amountNet")
    private Amount amountNet;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("amountVat")
    private Optional<? extends AmountNullable> amountVat;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("amountGross")
    private Amount amountGross;

    @JsonCreator
    public Costs(
            @JsonProperty("description") String description,
            @JsonProperty("method") Optional<? extends PaymentMethod> method,
            @JsonProperty("count") long count,
            @JsonProperty("rate") Rate rate,
            @JsonProperty("amountNet") Amount amountNet,
            @JsonProperty("amountVat") Optional<? extends AmountNullable> amountVat,
            @JsonProperty("amountGross") Amount amountGross) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(rate, "rate");
        Utils.checkNotNull(amountNet, "amountNet");
        Utils.checkNotNull(amountVat, "amountVat");
        Utils.checkNotNull(amountGross, "amountGross");
        this.description = description;
        this.method = method;
        this.count = count;
        this.rate = rate;
        this.amountNet = amountNet;
        this.amountVat = amountVat;
        this.amountGross = amountGross;
    }
    
    public Costs(
            String description,
            long count,
            Rate rate,
            Amount amountNet,
            Amount amountGross) {
        this(description, Optional.empty(), count,
            rate, amountNet, Optional.empty(),
            amountGross);
    }

    /**
     * A description of the cost subtotal
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The payment method, if applicable
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentMethod> method() {
        return (Optional<PaymentMethod>) method;
    }

    /**
     * The number of fees
     */
    @JsonIgnore
    public long count() {
        return count;
    }

    /**
     * The service rates, further divided into `fixed` and `percentage` costs.
     */
    @JsonIgnore
    public Rate rate() {
        return rate;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount amountNet() {
        return amountNet;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountNullable> amountVat() {
        return (Optional<AmountNullable>) amountVat;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount amountGross() {
        return amountGross;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A description of the cost subtotal
     */
    public Costs withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The payment method, if applicable
     */
    public Costs withMethod(PaymentMethod method) {
        Utils.checkNotNull(method, "method");
        this.method = Optional.ofNullable(method);
        return this;
    }


    /**
     * The payment method, if applicable
     */
    public Costs withMethod(Optional<? extends PaymentMethod> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * The number of fees
     */
    public Costs withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * The service rates, further divided into `fixed` and `percentage` costs.
     */
    public Costs withRate(Rate rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = rate;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public Costs withAmountNet(Amount amountNet) {
        Utils.checkNotNull(amountNet, "amountNet");
        this.amountNet = amountNet;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public Costs withAmountVat(AmountNullable amountVat) {
        Utils.checkNotNull(amountVat, "amountVat");
        this.amountVat = Optional.ofNullable(amountVat);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public Costs withAmountVat(Optional<? extends AmountNullable> amountVat) {
        Utils.checkNotNull(amountVat, "amountVat");
        this.amountVat = amountVat;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public Costs withAmountGross(Amount amountGross) {
        Utils.checkNotNull(amountGross, "amountGross");
        this.amountGross = amountGross;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Costs other = (Costs) o;
        return 
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.count, other.count) &&
            Utils.enhancedDeepEquals(this.rate, other.rate) &&
            Utils.enhancedDeepEquals(this.amountNet, other.amountNet) &&
            Utils.enhancedDeepEquals(this.amountVat, other.amountVat) &&
            Utils.enhancedDeepEquals(this.amountGross, other.amountGross);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            description, method, count,
            rate, amountNet, amountVat,
            amountGross);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Costs.class,
                "description", description,
                "method", method,
                "count", count,
                "rate", rate,
                "amountNet", amountNet,
                "amountVat", amountVat,
                "amountGross", amountGross);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String description;

        private Optional<? extends PaymentMethod> method = Optional.empty();

        private Long count;

        private Rate rate;

        private Amount amountNet;

        private Optional<? extends AmountNullable> amountVat = Optional.empty();

        private Amount amountGross;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A description of the cost subtotal
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The payment method, if applicable
         */
        public Builder method(PaymentMethod method) {
            Utils.checkNotNull(method, "method");
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * The payment method, if applicable
         */
        public Builder method(Optional<? extends PaymentMethod> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }


        /**
         * The number of fees
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }


        /**
         * The service rates, further divided into `fixed` and `percentage` costs.
         */
        public Builder rate(Rate rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = rate;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountNet(Amount amountNet) {
            Utils.checkNotNull(amountNet, "amountNet");
            this.amountNet = amountNet;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountVat(AmountNullable amountVat) {
            Utils.checkNotNull(amountVat, "amountVat");
            this.amountVat = Optional.ofNullable(amountVat);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountVat(Optional<? extends AmountNullable> amountVat) {
            Utils.checkNotNull(amountVat, "amountVat");
            this.amountVat = amountVat;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountGross(Amount amountGross) {
            Utils.checkNotNull(amountGross, "amountGross");
            this.amountGross = amountGross;
            return this;
        }

        public Costs build() {

            return new Costs(
                description, method, count,
                rate, amountNet, amountVat,
                amountGross);
        }

    }
}
