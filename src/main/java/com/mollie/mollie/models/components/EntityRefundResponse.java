/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EntityRefundResponse {
    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this
     * endpoint.
     */
    @JsonProperty("resource")
    private String resource;


    @JsonProperty("id")
    private String id;

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonProperty("mode")
    private Mode mode;

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method
     * used.
     */
    @JsonProperty("description")
    private String description;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("amount")
    private Amount amount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementAmount")
    private JsonNullable<? extends AmountNullable> settlementAmount;

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside
     * the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("metadata")
    private Optional<? extends Metadata> metadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentId")
    private Optional<String> paymentId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementId")
    private Optional<String> settlementId;


    @JsonProperty("status")
    private RefundStatus status;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonProperty("createdAt")
    private String createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalReference")
    private Optional<? extends ExternalReference> externalReference;

    /**
     * *This feature is only available to marketplace operators.*
     * 
     * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your
     * balance.
     * 
     * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify
     * what amount
     * needs to be reversed from which merchant(s).
     * 
     * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting`
     * parameter instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routingReversals")
    private JsonNullable<? extends List<RoutingReversals>> routingReversals;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private EntityRefundResponseLinks links;

    @JsonCreator
    public EntityRefundResponse(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") String id,
            @JsonProperty("mode") Mode mode,
            @JsonProperty("description") String description,
            @JsonProperty("amount") Amount amount,
            @JsonProperty("settlementAmount") JsonNullable<? extends AmountNullable> settlementAmount,
            @JsonProperty("metadata") Optional<? extends Metadata> metadata,
            @JsonProperty("paymentId") Optional<String> paymentId,
            @JsonProperty("settlementId") Optional<String> settlementId,
            @JsonProperty("status") RefundStatus status,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("externalReference") Optional<? extends ExternalReference> externalReference,
            @JsonProperty("routingReversals") JsonNullable<? extends List<RoutingReversals>> routingReversals,
            @JsonProperty("_links") EntityRefundResponseLinks links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(settlementId, "settlementId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(externalReference, "externalReference");
        Utils.checkNotNull(routingReversals, "routingReversals");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.description = description;
        this.amount = amount;
        this.settlementAmount = settlementAmount;
        this.metadata = metadata;
        this.paymentId = paymentId;
        this.settlementId = settlementId;
        this.status = status;
        this.createdAt = createdAt;
        this.externalReference = externalReference;
        this.routingReversals = routingReversals;
        this.links = links;
    }
    
    public EntityRefundResponse(
            String resource,
            String id,
            Mode mode,
            String description,
            Amount amount,
            RefundStatus status,
            String createdAt,
            EntityRefundResponseLinks links) {
        this(resource, id, mode,
            description, amount, JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            status, createdAt, Optional.empty(),
            JsonNullable.undefined(), links);
    }

    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this
     * endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonIgnore
    public Mode mode() {
        return mode;
    }

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method
     * used.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount amount() {
        return amount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<AmountNullable> settlementAmount() {
        return (JsonNullable<AmountNullable>) settlementAmount;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside
     * the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Metadata> metadata() {
        return (Optional<Metadata>) metadata;
    }

    @JsonIgnore
    public Optional<String> paymentId() {
        return paymentId;
    }

    @JsonIgnore
    public Optional<String> settlementId() {
        return settlementId;
    }

    @JsonIgnore
    public RefundStatus status() {
        return status;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ExternalReference> externalReference() {
        return (Optional<ExternalReference>) externalReference;
    }

    /**
     * *This feature is only available to marketplace operators.*
     * 
     * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your
     * balance.
     * 
     * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify
     * what amount
     * needs to be reversed from which merchant(s).
     * 
     * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting`
     * parameter instead.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<RoutingReversals>> routingReversals() {
        return (JsonNullable<List<RoutingReversals>>) routingReversals;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public EntityRefundResponseLinks links() {
        return links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a refund object. Will always contain the string `refund` for this
     * endpoint.
     */
    public EntityRefundResponse withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public EntityRefundResponse withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public EntityRefundResponse withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The description of the refund that may be shown to your customer, depending on the payment method
     * used.
     */
    public EntityRefundResponse withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityRefundResponse withAmount(Amount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityRefundResponse withSettlementAmount(AmountNullable settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = JsonNullable.of(settlementAmount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityRefundResponse withSettlementAmount(JsonNullable<? extends AmountNullable> settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = settlementAmount;
        return this;
    }

    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside
     * the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    public EntityRefundResponse withMetadata(Metadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }


    /**
     * Provide any data you like, for example a string or a JSON object. We will save the data alongside
     * the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    public EntityRefundResponse withMetadata(Optional<? extends Metadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public EntityRefundResponse withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = Optional.ofNullable(paymentId);
        return this;
    }


    public EntityRefundResponse withPaymentId(Optional<String> paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    public EntityRefundResponse withSettlementId(String settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = Optional.ofNullable(settlementId);
        return this;
    }


    public EntityRefundResponse withSettlementId(Optional<String> settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = settlementId;
        return this;
    }

    public EntityRefundResponse withStatus(RefundStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public EntityRefundResponse withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public EntityRefundResponse withExternalReference(ExternalReference externalReference) {
        Utils.checkNotNull(externalReference, "externalReference");
        this.externalReference = Optional.ofNullable(externalReference);
        return this;
    }


    public EntityRefundResponse withExternalReference(Optional<? extends ExternalReference> externalReference) {
        Utils.checkNotNull(externalReference, "externalReference");
        this.externalReference = externalReference;
        return this;
    }

    /**
     * *This feature is only available to marketplace operators.*
     * 
     * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your
     * balance.
     * 
     * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify
     * what amount
     * needs to be reversed from which merchant(s).
     * 
     * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting`
     * parameter instead.
     */
    public EntityRefundResponse withRoutingReversals(List<RoutingReversals> routingReversals) {
        Utils.checkNotNull(routingReversals, "routingReversals");
        this.routingReversals = JsonNullable.of(routingReversals);
        return this;
    }

    /**
     * *This feature is only available to marketplace operators.*
     * 
     * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your
     * balance.
     * 
     * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify
     * what amount
     * needs to be reversed from which merchant(s).
     * 
     * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting`
     * parameter instead.
     */
    public EntityRefundResponse withRoutingReversals(JsonNullable<? extends List<RoutingReversals>> routingReversals) {
        Utils.checkNotNull(routingReversals, "routingReversals");
        this.routingReversals = routingReversals;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityRefundResponse withLinks(EntityRefundResponseLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityRefundResponse other = (EntityRefundResponse) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.settlementAmount, other.settlementAmount) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.paymentId, other.paymentId) &&
            Utils.enhancedDeepEquals(this.settlementId, other.settlementId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.externalReference, other.externalReference) &&
            Utils.enhancedDeepEquals(this.routingReversals, other.routingReversals) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, mode,
            description, amount, settlementAmount,
            metadata, paymentId, settlementId,
            status, createdAt, externalReference,
            routingReversals, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityRefundResponse.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "description", description,
                "amount", amount,
                "settlementAmount", settlementAmount,
                "metadata", metadata,
                "paymentId", paymentId,
                "settlementId", settlementId,
                "status", status,
                "createdAt", createdAt,
                "externalReference", externalReference,
                "routingReversals", routingReversals,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private String id;

        private Mode mode;

        private String description;

        private Amount amount;

        private JsonNullable<? extends AmountNullable> settlementAmount = JsonNullable.undefined();

        private Optional<? extends Metadata> metadata = Optional.empty();

        private Optional<String> paymentId = Optional.empty();

        private Optional<String> settlementId = Optional.empty();

        private RefundStatus status;

        private String createdAt;

        private Optional<? extends ExternalReference> externalReference = Optional.empty();

        private JsonNullable<? extends List<RoutingReversals>> routingReversals = JsonNullable.undefined();

        private EntityRefundResponseLinks links;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a refund object. Will always contain the string `refund` for this
         * endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * The description of the refund that may be shown to your customer, depending on the payment method
         * used.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(Amount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder settlementAmount(AmountNullable settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = JsonNullable.of(settlementAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder settlementAmount(JsonNullable<? extends AmountNullable> settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = settlementAmount;
            return this;
        }


        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside
         * the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to
         * approximately 1kB.
         */
        public Builder metadata(Metadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Provide any data you like, for example a string or a JSON object. We will save the data alongside
         * the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to
         * approximately 1kB.
         */
        public Builder metadata(Optional<? extends Metadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        public Builder paymentId(Optional<String> paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }


        public Builder settlementId(String settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = Optional.ofNullable(settlementId);
            return this;
        }

        public Builder settlementId(Optional<String> settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = settlementId;
            return this;
        }


        public Builder status(RefundStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder externalReference(ExternalReference externalReference) {
            Utils.checkNotNull(externalReference, "externalReference");
            this.externalReference = Optional.ofNullable(externalReference);
            return this;
        }

        public Builder externalReference(Optional<? extends ExternalReference> externalReference) {
            Utils.checkNotNull(externalReference, "externalReference");
            this.externalReference = externalReference;
            return this;
        }


        /**
         * *This feature is only available to marketplace operators.*
         * 
         * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your
         * balance.
         * 
         * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify
         * what amount
         * needs to be reversed from which merchant(s).
         * 
         * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting`
         * parameter instead.
         */
        public Builder routingReversals(List<RoutingReversals> routingReversals) {
            Utils.checkNotNull(routingReversals, "routingReversals");
            this.routingReversals = JsonNullable.of(routingReversals);
            return this;
        }

        /**
         * *This feature is only available to marketplace operators.*
         * 
         * <p>When creating refunds for *routed* payments, by default the full amount is deducted from your
         * balance.
         * 
         * <p>If you want to pull back funds from the connected merchant(s), you can use this parameter to specify
         * what amount
         * needs to be reversed from which merchant(s).
         * 
         * <p>If you simply want to fully reverse the routed funds, you can also use the `reverseRouting`
         * parameter instead.
         */
        public Builder routingReversals(JsonNullable<? extends List<RoutingReversals>> routingReversals) {
            Utils.checkNotNull(routingReversals, "routingReversals");
            this.routingReversals = routingReversals;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(EntityRefundResponseLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public EntityRefundResponse build() {

            return new EntityRefundResponse(
                resource, id, mode,
                description, amount, settlementAmount,
                metadata, paymentId, settlementId,
                status, createdAt, externalReference,
                routingReversals, links);
        }

    }
}
