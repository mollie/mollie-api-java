/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * EntityMethodAllIssuersImage
 * 
 * <p>URLs of images representing the issuer.
 * required:
 *   - size1x
 *   - size2x
 *   - svg
 */
public class EntityMethodAllIssuersImage {
    /**
     * The URL pointing to an icon of 32 by 24 pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size1x")
    private Optional<String> size1x;

    /**
     * The URL pointing to an icon of 64 by 48 pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size2x")
    private Optional<String> size2x;

    /**
     * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
     * scale to any desired size without compromising visual quality.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("svg")
    private Optional<String> svg;

    @JsonCreator
    public EntityMethodAllIssuersImage(
            @JsonProperty("size1x") Optional<String> size1x,
            @JsonProperty("size2x") Optional<String> size2x,
            @JsonProperty("svg") Optional<String> svg) {
        Utils.checkNotNull(size1x, "size1x");
        Utils.checkNotNull(size2x, "size2x");
        Utils.checkNotNull(svg, "svg");
        this.size1x = size1x;
        this.size2x = size2x;
        this.svg = svg;
    }
    
    public EntityMethodAllIssuersImage() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The URL pointing to an icon of 32 by 24 pixels.
     */
    @JsonIgnore
    public Optional<String> size1x() {
        return size1x;
    }

    /**
     * The URL pointing to an icon of 64 by 48 pixels.
     */
    @JsonIgnore
    public Optional<String> size2x() {
        return size2x;
    }

    /**
     * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
     * scale to any desired size without compromising visual quality.
     */
    @JsonIgnore
    public Optional<String> svg() {
        return svg;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The URL pointing to an icon of 32 by 24 pixels.
     */
    public EntityMethodAllIssuersImage withSize1x(String size1x) {
        Utils.checkNotNull(size1x, "size1x");
        this.size1x = Optional.ofNullable(size1x);
        return this;
    }


    /**
     * The URL pointing to an icon of 32 by 24 pixels.
     */
    public EntityMethodAllIssuersImage withSize1x(Optional<String> size1x) {
        Utils.checkNotNull(size1x, "size1x");
        this.size1x = size1x;
        return this;
    }

    /**
     * The URL pointing to an icon of 64 by 48 pixels.
     */
    public EntityMethodAllIssuersImage withSize2x(String size2x) {
        Utils.checkNotNull(size2x, "size2x");
        this.size2x = Optional.ofNullable(size2x);
        return this;
    }


    /**
     * The URL pointing to an icon of 64 by 48 pixels.
     */
    public EntityMethodAllIssuersImage withSize2x(Optional<String> size2x) {
        Utils.checkNotNull(size2x, "size2x");
        this.size2x = size2x;
        return this;
    }

    /**
     * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
     * scale to any desired size without compromising visual quality.
     */
    public EntityMethodAllIssuersImage withSvg(String svg) {
        Utils.checkNotNull(svg, "svg");
        this.svg = Optional.ofNullable(svg);
        return this;
    }


    /**
     * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
     * scale to any desired size without compromising visual quality.
     */
    public EntityMethodAllIssuersImage withSvg(Optional<String> svg) {
        Utils.checkNotNull(svg, "svg");
        this.svg = svg;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityMethodAllIssuersImage other = (EntityMethodAllIssuersImage) o;
        return 
            Utils.enhancedDeepEquals(this.size1x, other.size1x) &&
            Utils.enhancedDeepEquals(this.size2x, other.size2x) &&
            Utils.enhancedDeepEquals(this.svg, other.svg);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            size1x, size2x, svg);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityMethodAllIssuersImage.class,
                "size1x", size1x,
                "size2x", size2x,
                "svg", svg);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> size1x = Optional.empty();

        private Optional<String> size2x = Optional.empty();

        private Optional<String> svg = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The URL pointing to an icon of 32 by 24 pixels.
         */
        public Builder size1x(String size1x) {
            Utils.checkNotNull(size1x, "size1x");
            this.size1x = Optional.ofNullable(size1x);
            return this;
        }

        /**
         * The URL pointing to an icon of 32 by 24 pixels.
         */
        public Builder size1x(Optional<String> size1x) {
            Utils.checkNotNull(size1x, "size1x");
            this.size1x = size1x;
            return this;
        }


        /**
         * The URL pointing to an icon of 64 by 48 pixels.
         */
        public Builder size2x(String size2x) {
            Utils.checkNotNull(size2x, "size2x");
            this.size2x = Optional.ofNullable(size2x);
            return this;
        }

        /**
         * The URL pointing to an icon of 64 by 48 pixels.
         */
        public Builder size2x(Optional<String> size2x) {
            Utils.checkNotNull(size2x, "size2x");
            this.size2x = size2x;
            return this;
        }


        /**
         * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
         * scale to any desired size without compromising visual quality.
         */
        public Builder svg(String svg) {
            Utils.checkNotNull(svg, "svg");
            this.svg = Optional.ofNullable(svg);
            return this;
        }

        /**
         * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can
         * scale to any desired size without compromising visual quality.
         */
        public Builder svg(Optional<String> svg) {
            Utils.checkNotNull(svg, "svg");
            this.svg = svg;
            return this;
        }

        public EntityMethodAllIssuersImage build() {

            return new EntityMethodAllIssuersImage(
                size1x, size2x, svg);
        }

    }
}
