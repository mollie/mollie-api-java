/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EntityBalanceTransaction {
    /**
     * Indicates the response contains a balance transaction object. Will always contain the string `balance-transaction`
     * for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends BalanceTransactionType> type;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultAmount")
    private Optional<? extends Amount> resultAmount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initialAmount")
    private Optional<? extends Amount> initialAmount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deductions")
    private JsonNullable<? extends AmountNullable> deductions;

    /**
     * Depending on the type of the balance transaction, we will try to give more context about the specific event that
     * triggered it. For example, the context object for a payment transaction will look like
     * `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
     * 
     * <p>Below is a complete list of the context values that each type of transaction will have.
     * 
     * <p>* Type `payment`: `paymentId`, `paymentDescription`
     * * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
     * * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
     * * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
     * * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
     * * Type `failed-payment`: `paymentId`, `paymentDescription`
     * * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `outgoing-transfer`: `settlementId` `transferId`
     * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
     * * Type `returned-transfer`: `settlementId` `transferId`
     * * Type `invoice-compensation`: `invoiceId`
     * * Type `balance-correction`: none
     * * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
     * * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
     * * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
     * * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
     * * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
     * * Type `payment-fee`: `paymentId`, `paymentDescription`
     * * Type `cash-advance-loan`: none
     * * Type `platform-connected-organizations-fee`: none
     * * Type `managed-fee`: `feeType`, `&lt;name of the fee&gt;Id`
     * * Type `returned-managed-fee`:  `feeType`, `&lt;name of the fee&gt;Id`
     * * Type `topup`: none
     * * Type `balance-reserve`: none
     * * Type `balance-reserve-return`: none
     * * Type `movement`: none
     * * Type `post-payment-split-payment`: `paymentId`
     * * Type `cash-collateral-issuance`: none
     * * Type `cash-collateral-release`: none
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context")
    private Optional<? extends Context> context;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    @JsonCreator
    public EntityBalanceTransaction(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("type") Optional<? extends BalanceTransactionType> type,
            @JsonProperty("resultAmount") Optional<? extends Amount> resultAmount,
            @JsonProperty("initialAmount") Optional<? extends Amount> initialAmount,
            @JsonProperty("deductions") JsonNullable<? extends AmountNullable> deductions,
            @JsonProperty("context") Optional<? extends Context> context,
            @JsonProperty("createdAt") Optional<String> createdAt) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(resultAmount, "resultAmount");
        Utils.checkNotNull(initialAmount, "initialAmount");
        Utils.checkNotNull(deductions, "deductions");
        Utils.checkNotNull(context, "context");
        Utils.checkNotNull(createdAt, "createdAt");
        this.resource = resource;
        this.id = id;
        this.type = type;
        this.resultAmount = resultAmount;
        this.initialAmount = initialAmount;
        this.deductions = deductions;
        this.context = context;
        this.createdAt = createdAt;
    }
    
    public EntityBalanceTransaction() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a balance transaction object. Will always contain the string `balance-transaction`
     * for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BalanceTransactionType> type() {
        return (Optional<BalanceTransactionType>) type;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> resultAmount() {
        return (Optional<Amount>) resultAmount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> initialAmount() {
        return (Optional<Amount>) initialAmount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<AmountNullable> deductions() {
        return (JsonNullable<AmountNullable>) deductions;
    }

    /**
     * Depending on the type of the balance transaction, we will try to give more context about the specific event that
     * triggered it. For example, the context object for a payment transaction will look like
     * `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
     * 
     * <p>Below is a complete list of the context values that each type of transaction will have.
     * 
     * <p>* Type `payment`: `paymentId`, `paymentDescription`
     * * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
     * * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
     * * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
     * * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
     * * Type `failed-payment`: `paymentId`, `paymentDescription`
     * * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `outgoing-transfer`: `settlementId` `transferId`
     * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
     * * Type `returned-transfer`: `settlementId` `transferId`
     * * Type `invoice-compensation`: `invoiceId`
     * * Type `balance-correction`: none
     * * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
     * * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
     * * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
     * * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
     * * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
     * * Type `payment-fee`: `paymentId`, `paymentDescription`
     * * Type `cash-advance-loan`: none
     * * Type `platform-connected-organizations-fee`: none
     * * Type `managed-fee`: `feeType`, `&lt;name of the fee&gt;Id`
     * * Type `returned-managed-fee`:  `feeType`, `&lt;name of the fee&gt;Id`
     * * Type `topup`: none
     * * Type `balance-reserve`: none
     * * Type `balance-reserve-return`: none
     * * Type `movement`: none
     * * Type `post-payment-split-payment`: `paymentId`
     * * Type `cash-collateral-issuance`: none
     * * Type `cash-collateral-release`: none
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Context> context() {
        return (Optional<Context>) context;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a balance transaction object. Will always contain the string `balance-transaction`
     * for this endpoint.
     */
    public EntityBalanceTransaction withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains a balance transaction object. Will always contain the string `balance-transaction`
     * for this endpoint.
     */
    public EntityBalanceTransaction withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public EntityBalanceTransaction withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public EntityBalanceTransaction withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public EntityBalanceTransaction withType(BalanceTransactionType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    public EntityBalanceTransaction withType(Optional<? extends BalanceTransactionType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalanceTransaction withResultAmount(Amount resultAmount) {
        Utils.checkNotNull(resultAmount, "resultAmount");
        this.resultAmount = Optional.ofNullable(resultAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalanceTransaction withResultAmount(Optional<? extends Amount> resultAmount) {
        Utils.checkNotNull(resultAmount, "resultAmount");
        this.resultAmount = resultAmount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalanceTransaction withInitialAmount(Amount initialAmount) {
        Utils.checkNotNull(initialAmount, "initialAmount");
        this.initialAmount = Optional.ofNullable(initialAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalanceTransaction withInitialAmount(Optional<? extends Amount> initialAmount) {
        Utils.checkNotNull(initialAmount, "initialAmount");
        this.initialAmount = initialAmount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalanceTransaction withDeductions(AmountNullable deductions) {
        Utils.checkNotNull(deductions, "deductions");
        this.deductions = JsonNullable.of(deductions);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalanceTransaction withDeductions(JsonNullable<? extends AmountNullable> deductions) {
        Utils.checkNotNull(deductions, "deductions");
        this.deductions = deductions;
        return this;
    }

    /**
     * Depending on the type of the balance transaction, we will try to give more context about the specific event that
     * triggered it. For example, the context object for a payment transaction will look like
     * `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
     * 
     * <p>Below is a complete list of the context values that each type of transaction will have.
     * 
     * <p>* Type `payment`: `paymentId`, `paymentDescription`
     * * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
     * * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
     * * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
     * * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
     * * Type `failed-payment`: `paymentId`, `paymentDescription`
     * * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `outgoing-transfer`: `settlementId` `transferId`
     * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
     * * Type `returned-transfer`: `settlementId` `transferId`
     * * Type `invoice-compensation`: `invoiceId`
     * * Type `balance-correction`: none
     * * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
     * * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
     * * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
     * * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
     * * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
     * * Type `payment-fee`: `paymentId`, `paymentDescription`
     * * Type `cash-advance-loan`: none
     * * Type `platform-connected-organizations-fee`: none
     * * Type `managed-fee`: `feeType`, `&lt;name of the fee&gt;Id`
     * * Type `returned-managed-fee`:  `feeType`, `&lt;name of the fee&gt;Id`
     * * Type `topup`: none
     * * Type `balance-reserve`: none
     * * Type `balance-reserve-return`: none
     * * Type `movement`: none
     * * Type `post-payment-split-payment`: `paymentId`
     * * Type `cash-collateral-issuance`: none
     * * Type `cash-collateral-release`: none
     */
    public EntityBalanceTransaction withContext(Context context) {
        Utils.checkNotNull(context, "context");
        this.context = Optional.ofNullable(context);
        return this;
    }


    /**
     * Depending on the type of the balance transaction, we will try to give more context about the specific event that
     * triggered it. For example, the context object for a payment transaction will look like
     * `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
     * 
     * <p>Below is a complete list of the context values that each type of transaction will have.
     * 
     * <p>* Type `payment`: `paymentId`, `paymentDescription`
     * * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
     * * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
     * * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
     * * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
     * * Type `failed-payment`: `paymentId`, `paymentDescription`
     * * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `outgoing-transfer`: `settlementId` `transferId`
     * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
     * * Type `returned-transfer`: `settlementId` `transferId`
     * * Type `invoice-compensation`: `invoiceId`
     * * Type `balance-correction`: none
     * * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
     * * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
     * * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
     * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
     * * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
     * * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
     * * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
     * * Type `payment-fee`: `paymentId`, `paymentDescription`
     * * Type `cash-advance-loan`: none
     * * Type `platform-connected-organizations-fee`: none
     * * Type `managed-fee`: `feeType`, `&lt;name of the fee&gt;Id`
     * * Type `returned-managed-fee`:  `feeType`, `&lt;name of the fee&gt;Id`
     * * Type `topup`: none
     * * Type `balance-reserve`: none
     * * Type `balance-reserve-return`: none
     * * Type `movement`: none
     * * Type `post-payment-split-payment`: `paymentId`
     * * Type `cash-collateral-issuance`: none
     * * Type `cash-collateral-release`: none
     */
    public EntityBalanceTransaction withContext(Optional<? extends Context> context) {
        Utils.checkNotNull(context, "context");
        this.context = context;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public EntityBalanceTransaction withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public EntityBalanceTransaction withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityBalanceTransaction other = (EntityBalanceTransaction) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.resultAmount, other.resultAmount) &&
            Utils.enhancedDeepEquals(this.initialAmount, other.initialAmount) &&
            Utils.enhancedDeepEquals(this.deductions, other.deductions) &&
            Utils.enhancedDeepEquals(this.context, other.context) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, type,
            resultAmount, initialAmount, deductions,
            context, createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityBalanceTransaction.class,
                "resource", resource,
                "id", id,
                "type", type,
                "resultAmount", resultAmount,
                "initialAmount", initialAmount,
                "deductions", deductions,
                "context", context,
                "createdAt", createdAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<? extends BalanceTransactionType> type = Optional.empty();

        private Optional<? extends Amount> resultAmount = Optional.empty();

        private Optional<? extends Amount> initialAmount = Optional.empty();

        private JsonNullable<? extends AmountNullable> deductions = JsonNullable.undefined();

        private Optional<? extends Context> context = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a balance transaction object. Will always contain the string `balance-transaction`
         * for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a balance transaction object. Will always contain the string `balance-transaction`
         * for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder type(BalanceTransactionType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends BalanceTransactionType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder resultAmount(Amount resultAmount) {
            Utils.checkNotNull(resultAmount, "resultAmount");
            this.resultAmount = Optional.ofNullable(resultAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder resultAmount(Optional<? extends Amount> resultAmount) {
            Utils.checkNotNull(resultAmount, "resultAmount");
            this.resultAmount = resultAmount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder initialAmount(Amount initialAmount) {
            Utils.checkNotNull(initialAmount, "initialAmount");
            this.initialAmount = Optional.ofNullable(initialAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder initialAmount(Optional<? extends Amount> initialAmount) {
            Utils.checkNotNull(initialAmount, "initialAmount");
            this.initialAmount = initialAmount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder deductions(AmountNullable deductions) {
            Utils.checkNotNull(deductions, "deductions");
            this.deductions = JsonNullable.of(deductions);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder deductions(JsonNullable<? extends AmountNullable> deductions) {
            Utils.checkNotNull(deductions, "deductions");
            this.deductions = deductions;
            return this;
        }


        /**
         * Depending on the type of the balance transaction, we will try to give more context about the specific event that
         * triggered it. For example, the context object for a payment transaction will look like
         * `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
         * 
         * <p>Below is a complete list of the context values that each type of transaction will have.
         * 
         * <p>* Type `payment`: `paymentId`, `paymentDescription`
         * * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
         * * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
         * * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
         * * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
         * * Type `failed-payment`: `paymentId`, `paymentDescription`
         * * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
         * * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
         * * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
         * * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
         * * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
         * * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
         * * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
         * * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
         * * Type `outgoing-transfer`: `settlementId` `transferId`
         * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
         * * Type `returned-transfer`: `settlementId` `transferId`
         * * Type `invoice-compensation`: `invoiceId`
         * * Type `balance-correction`: none
         * * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
         * * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
         * * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
         * * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
         * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
         * * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
         * * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
         * * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
         * * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
         * * Type `payment-fee`: `paymentId`, `paymentDescription`
         * * Type `cash-advance-loan`: none
         * * Type `platform-connected-organizations-fee`: none
         * * Type `managed-fee`: `feeType`, `&lt;name of the fee&gt;Id`
         * * Type `returned-managed-fee`:  `feeType`, `&lt;name of the fee&gt;Id`
         * * Type `topup`: none
         * * Type `balance-reserve`: none
         * * Type `balance-reserve-return`: none
         * * Type `movement`: none
         * * Type `post-payment-split-payment`: `paymentId`
         * * Type `cash-collateral-issuance`: none
         * * Type `cash-collateral-release`: none
         */
        public Builder context(Context context) {
            Utils.checkNotNull(context, "context");
            this.context = Optional.ofNullable(context);
            return this;
        }

        /**
         * Depending on the type of the balance transaction, we will try to give more context about the specific event that
         * triggered it. For example, the context object for a payment transaction will look like
         * `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
         * 
         * <p>Below is a complete list of the context values that each type of transaction will have.
         * 
         * <p>* Type `payment`: `paymentId`, `paymentDescription`
         * * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
         * * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
         * * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`, `captureDescription`
         * * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
         * * Type `failed-payment`: `paymentId`, `paymentDescription`
         * * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
         * * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
         * * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
         * * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
         * * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
         * * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
         * * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
         * * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`, `chargebackDescription`
         * * Type `outgoing-transfer`: `settlementId` `transferId`
         * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
         * * Type `returned-transfer`: `settlementId` `transferId`
         * * Type `invoice-compensation`: `invoiceId`
         * * Type `balance-correction`: none
         * * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
         * * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
         * * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
         * * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
         * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
         * * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
         * * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
         * * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
         * * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
         * * Type `payment-fee`: `paymentId`, `paymentDescription`
         * * Type `cash-advance-loan`: none
         * * Type `platform-connected-organizations-fee`: none
         * * Type `managed-fee`: `feeType`, `&lt;name of the fee&gt;Id`
         * * Type `returned-managed-fee`:  `feeType`, `&lt;name of the fee&gt;Id`
         * * Type `topup`: none
         * * Type `balance-reserve`: none
         * * Type `balance-reserve-return`: none
         * * Type `movement`: none
         * * Type `post-payment-split-payment`: `paymentId`
         * * Type `cash-collateral-issuance`: none
         * * Type `cash-collateral-release`: none
         */
        public Builder context(Optional<? extends Context> context) {
            Utils.checkNotNull(context, "context");
            this.context = context;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public EntityBalanceTransaction build() {

            return new EntityBalanceTransaction(
                resource, id, type,
                resultAmount, initialAmount, deductions,
                context, createdAt);
        }

    }
}
