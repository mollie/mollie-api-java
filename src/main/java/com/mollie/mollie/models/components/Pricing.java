/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class Pricing {
    /**
     * A description of what the pricing applies to. For example, a specific country (`The Netherlands`) or
     * a
     * category of cards (`American Express`). If a `locale` is provided, the description may be
     * translated.
     */
    @JsonProperty("description")
    private String description;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("fixed")
    private Amount fixed;

    /**
     * The variable price charged per payment, as a percentage string.
     */
    @JsonProperty("variable")
    private String variable;

    /**
     * Only present for credit card pricing. It will correspond with the `feeRegion` of credit card
     * payments as
     * returned in the [Payments API](get-payment).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feeRegion")
    private JsonNullable<String> feeRegion;

    @JsonCreator
    public Pricing(
            @JsonProperty("description") String description,
            @JsonProperty("fixed") Amount fixed,
            @JsonProperty("variable") String variable,
            @JsonProperty("feeRegion") JsonNullable<String> feeRegion) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(fixed, "fixed");
        Utils.checkNotNull(variable, "variable");
        Utils.checkNotNull(feeRegion, "feeRegion");
        this.description = description;
        this.fixed = fixed;
        this.variable = variable;
        this.feeRegion = feeRegion;
    }
    
    public Pricing(
            String description,
            Amount fixed,
            String variable) {
        this(description, fixed, variable,
            JsonNullable.undefined());
    }

    /**
     * A description of what the pricing applies to. For example, a specific country (`The Netherlands`) or
     * a
     * category of cards (`American Express`). If a `locale` is provided, the description may be
     * translated.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount fixed() {
        return fixed;
    }

    /**
     * The variable price charged per payment, as a percentage string.
     */
    @JsonIgnore
    public String variable() {
        return variable;
    }

    /**
     * Only present for credit card pricing. It will correspond with the `feeRegion` of credit card
     * payments as
     * returned in the [Payments API](get-payment).
     */
    @JsonIgnore
    public JsonNullable<String> feeRegion() {
        return feeRegion;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A description of what the pricing applies to. For example, a specific country (`The Netherlands`) or
     * a
     * category of cards (`American Express`). If a `locale` is provided, the description may be
     * translated.
     */
    public Pricing withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public Pricing withFixed(Amount fixed) {
        Utils.checkNotNull(fixed, "fixed");
        this.fixed = fixed;
        return this;
    }

    /**
     * The variable price charged per payment, as a percentage string.
     */
    public Pricing withVariable(String variable) {
        Utils.checkNotNull(variable, "variable");
        this.variable = variable;
        return this;
    }

    /**
     * Only present for credit card pricing. It will correspond with the `feeRegion` of credit card
     * payments as
     * returned in the [Payments API](get-payment).
     */
    public Pricing withFeeRegion(String feeRegion) {
        Utils.checkNotNull(feeRegion, "feeRegion");
        this.feeRegion = JsonNullable.of(feeRegion);
        return this;
    }

    /**
     * Only present for credit card pricing. It will correspond with the `feeRegion` of credit card
     * payments as
     * returned in the [Payments API](get-payment).
     */
    public Pricing withFeeRegion(JsonNullable<String> feeRegion) {
        Utils.checkNotNull(feeRegion, "feeRegion");
        this.feeRegion = feeRegion;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Pricing other = (Pricing) o;
        return 
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.fixed, other.fixed) &&
            Utils.enhancedDeepEquals(this.variable, other.variable) &&
            Utils.enhancedDeepEquals(this.feeRegion, other.feeRegion);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            description, fixed, variable,
            feeRegion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Pricing.class,
                "description", description,
                "fixed", fixed,
                "variable", variable,
                "feeRegion", feeRegion);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String description;

        private Amount fixed;

        private String variable;

        private JsonNullable<String> feeRegion = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A description of what the pricing applies to. For example, a specific country (`The Netherlands`) or
         * a
         * category of cards (`American Express`). If a `locale` is provided, the description may be
         * translated.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder fixed(Amount fixed) {
            Utils.checkNotNull(fixed, "fixed");
            this.fixed = fixed;
            return this;
        }


        /**
         * The variable price charged per payment, as a percentage string.
         */
        public Builder variable(String variable) {
            Utils.checkNotNull(variable, "variable");
            this.variable = variable;
            return this;
        }


        /**
         * Only present for credit card pricing. It will correspond with the `feeRegion` of credit card
         * payments as
         * returned in the [Payments API](get-payment).
         */
        public Builder feeRegion(String feeRegion) {
            Utils.checkNotNull(feeRegion, "feeRegion");
            this.feeRegion = JsonNullable.of(feeRegion);
            return this;
        }

        /**
         * Only present for credit card pricing. It will correspond with the `feeRegion` of credit card
         * payments as
         * returned in the [Payments API](get-payment).
         */
        public Builder feeRegion(JsonNullable<String> feeRegion) {
            Utils.checkNotNull(feeRegion, "feeRegion");
            this.feeRegion = feeRegion;
            return this;
        }

        public Pricing build() {

            return new Pricing(
                description, fixed, variable,
                feeRegion);
        }

    }
}
