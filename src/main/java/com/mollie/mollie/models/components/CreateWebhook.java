/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;


public class CreateWebhook {
    /**
     * Indicates the response contains a webhook subscription object. Will always contain the string
     * `webhook` for this endpoint.
     */
    @JsonProperty("resource")
    private String resource;

    /**
     * The identifier uniquely referring to this subscription.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The subscription's events destination.
     */
    @JsonProperty("url")
    private String url;

    /**
     * The identifier uniquely referring to the profile that created the subscription.
     */
    @JsonProperty("profileId")
    private String profileId;

    /**
     * The subscription's date time of creation.
     */
    @JsonProperty("createdAt")
    private String createdAt;

    /**
     * The subscription's name.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The events types that are subscribed.
     */
    @JsonProperty("eventTypes")
    private List<WebhookEventTypes> eventTypes;

    /**
     * The subscription's current status.
     */
    @JsonProperty("status")
    private WebhookStatus status;

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonProperty("mode")
    private Mode mode;

    /**
     * The subscription's secret.
     */
    @JsonProperty("webhookSecret")
    private String webhookSecret;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private CreateWebhookLinks links;

    @JsonCreator
    public CreateWebhook(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") String id,
            @JsonProperty("url") String url,
            @JsonProperty("profileId") String profileId,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("name") String name,
            @JsonProperty("eventTypes") List<WebhookEventTypes> eventTypes,
            @JsonProperty("status") WebhookStatus status,
            @JsonProperty("mode") Mode mode,
            @JsonProperty("webhookSecret") String webhookSecret,
            @JsonProperty("_links") CreateWebhookLinks links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(eventTypes, "eventTypes");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(webhookSecret, "webhookSecret");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.url = url;
        this.profileId = profileId;
        this.createdAt = createdAt;
        this.name = name;
        this.eventTypes = eventTypes;
        this.status = status;
        this.mode = mode;
        this.webhookSecret = webhookSecret;
        this.links = links;
    }

    /**
     * Indicates the response contains a webhook subscription object. Will always contain the string
     * `webhook` for this endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this subscription.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The subscription's events destination.
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * The identifier uniquely referring to the profile that created the subscription.
     */
    @JsonIgnore
    public String profileId() {
        return profileId;
    }

    /**
     * The subscription's date time of creation.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    /**
     * The subscription's name.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The events types that are subscribed.
     */
    @JsonIgnore
    public List<WebhookEventTypes> eventTypes() {
        return eventTypes;
    }

    /**
     * The subscription's current status.
     */
    @JsonIgnore
    public WebhookStatus status() {
        return status;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonIgnore
    public Mode mode() {
        return mode;
    }

    /**
     * The subscription's secret.
     */
    @JsonIgnore
    public String webhookSecret() {
        return webhookSecret;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public CreateWebhookLinks links() {
        return links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a webhook subscription object. Will always contain the string
     * `webhook` for this endpoint.
     */
    public CreateWebhook withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this subscription.
     */
    public CreateWebhook withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The subscription's events destination.
     */
    public CreateWebhook withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The identifier uniquely referring to the profile that created the subscription.
     */
    public CreateWebhook withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * The subscription's date time of creation.
     */
    public CreateWebhook withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The subscription's name.
     */
    public CreateWebhook withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The events types that are subscribed.
     */
    public CreateWebhook withEventTypes(List<WebhookEventTypes> eventTypes) {
        Utils.checkNotNull(eventTypes, "eventTypes");
        this.eventTypes = eventTypes;
        return this;
    }

    /**
     * The subscription's current status.
     */
    public CreateWebhook withStatus(WebhookStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public CreateWebhook withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The subscription's secret.
     */
    public CreateWebhook withWebhookSecret(String webhookSecret) {
        Utils.checkNotNull(webhookSecret, "webhookSecret");
        this.webhookSecret = webhookSecret;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public CreateWebhook withLinks(CreateWebhookLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateWebhook other = (CreateWebhook) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.profileId, other.profileId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.eventTypes, other.eventTypes) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.webhookSecret, other.webhookSecret) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, url,
            profileId, createdAt, name,
            eventTypes, status, mode,
            webhookSecret, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateWebhook.class,
                "resource", resource,
                "id", id,
                "url", url,
                "profileId", profileId,
                "createdAt", createdAt,
                "name", name,
                "eventTypes", eventTypes,
                "status", status,
                "mode", mode,
                "webhookSecret", webhookSecret,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private String id;

        private String url;

        private String profileId;

        private String createdAt;

        private String name;

        private List<WebhookEventTypes> eventTypes;

        private WebhookStatus status;

        private Mode mode;

        private String webhookSecret;

        private CreateWebhookLinks links;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a webhook subscription object. Will always contain the string
         * `webhook` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this subscription.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The subscription's events destination.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }


        /**
         * The identifier uniquely referring to the profile that created the subscription.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }


        /**
         * The subscription's date time of creation.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The subscription's name.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The events types that are subscribed.
         */
        public Builder eventTypes(List<WebhookEventTypes> eventTypes) {
            Utils.checkNotNull(eventTypes, "eventTypes");
            this.eventTypes = eventTypes;
            return this;
        }


        /**
         * The subscription's current status.
         */
        public Builder status(WebhookStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * The subscription's secret.
         */
        public Builder webhookSecret(String webhookSecret) {
            Utils.checkNotNull(webhookSecret, "webhookSecret");
            this.webhookSecret = webhookSecret;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(CreateWebhookLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public CreateWebhook build() {

            return new CreateWebhook(
                resource, id, url,
                profileId, createdAt, name,
                eventTypes, status, mode,
                webhookSecret, links);
        }

    }
}
