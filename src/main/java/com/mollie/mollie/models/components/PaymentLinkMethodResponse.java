/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
@JsonDeserialize(using = PaymentLinkMethodResponse._Deserializer.class)
@JsonSerialize(using = PaymentLinkMethodResponse._Serializer.class)
public class PaymentLinkMethodResponse {

    public static final PaymentLinkMethodResponse APPLEPAY = new PaymentLinkMethodResponse("applepay");
    public static final PaymentLinkMethodResponse BACS = new PaymentLinkMethodResponse("bacs");
    public static final PaymentLinkMethodResponse BANCOMATPAY = new PaymentLinkMethodResponse("bancomatpay");
    public static final PaymentLinkMethodResponse BANCONTACT = new PaymentLinkMethodResponse("bancontact");
    public static final PaymentLinkMethodResponse BANKTRANSFER = new PaymentLinkMethodResponse("banktransfer");
    public static final PaymentLinkMethodResponse BELFIUS = new PaymentLinkMethodResponse("belfius");
    public static final PaymentLinkMethodResponse BILLIE = new PaymentLinkMethodResponse("billie");
    public static final PaymentLinkMethodResponse BLIK = new PaymentLinkMethodResponse("blik");
    public static final PaymentLinkMethodResponse CREDITCARD = new PaymentLinkMethodResponse("creditcard");
    public static final PaymentLinkMethodResponse EPS = new PaymentLinkMethodResponse("eps");
    public static final PaymentLinkMethodResponse GIFTCARD = new PaymentLinkMethodResponse("giftcard");
    public static final PaymentLinkMethodResponse IDEAL = new PaymentLinkMethodResponse("ideal");
    public static final PaymentLinkMethodResponse IN3 = new PaymentLinkMethodResponse("in3");
    public static final PaymentLinkMethodResponse KBC = new PaymentLinkMethodResponse("kbc");
    public static final PaymentLinkMethodResponse KLARNA = new PaymentLinkMethodResponse("klarna");
    public static final PaymentLinkMethodResponse MBWAY = new PaymentLinkMethodResponse("mbway");
    public static final PaymentLinkMethodResponse MULTIBANCO = new PaymentLinkMethodResponse("multibanco");
    public static final PaymentLinkMethodResponse MYBANK = new PaymentLinkMethodResponse("mybank");
    public static final PaymentLinkMethodResponse PAYBYBANK = new PaymentLinkMethodResponse("paybybank");
    public static final PaymentLinkMethodResponse PAYPAL = new PaymentLinkMethodResponse("paypal");
    public static final PaymentLinkMethodResponse PAYSAFECARD = new PaymentLinkMethodResponse("paysafecard");
    public static final PaymentLinkMethodResponse POINTOFSALE = new PaymentLinkMethodResponse("pointofsale");
    public static final PaymentLinkMethodResponse PRZELEWY24 = new PaymentLinkMethodResponse("przelewy24");
    public static final PaymentLinkMethodResponse RIVERTY = new PaymentLinkMethodResponse("riverty");
    public static final PaymentLinkMethodResponse SATISPAY = new PaymentLinkMethodResponse("satispay");
    public static final PaymentLinkMethodResponse SWISH = new PaymentLinkMethodResponse("swish");
    public static final PaymentLinkMethodResponse TRUSTLY = new PaymentLinkMethodResponse("trustly");
    public static final PaymentLinkMethodResponse TWINT = new PaymentLinkMethodResponse("twint");
    public static final PaymentLinkMethodResponse VOUCHER = new PaymentLinkMethodResponse("voucher");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, PaymentLinkMethodResponse> values = createValuesMap();
    private static final Map<String, PaymentLinkMethodResponseEnum> enums = createEnumsMap();

    private final String value;

    private PaymentLinkMethodResponse(String value) {
        this.value = value;
    }

    /**
     * Returns a PaymentLinkMethodResponse with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as PaymentLinkMethodResponse
     */ 
    public static PaymentLinkMethodResponse of(String value) {
        synchronized (PaymentLinkMethodResponse.class) {
            return values.computeIfAbsent(value, v -> new PaymentLinkMethodResponse(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<PaymentLinkMethodResponseEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        PaymentLinkMethodResponse other = (PaymentLinkMethodResponse) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "PaymentLinkMethodResponse [value=" + value + "]";
    }

    // return an array just like an enum
    public static PaymentLinkMethodResponse[] values() {
        synchronized (PaymentLinkMethodResponse.class) {
            return values.values().toArray(new PaymentLinkMethodResponse[] {});
        }
    }

    private static final Map<String, PaymentLinkMethodResponse> createValuesMap() {
        Map<String, PaymentLinkMethodResponse> map = new LinkedHashMap<>();
        map.put("applepay", APPLEPAY);
        map.put("bacs", BACS);
        map.put("bancomatpay", BANCOMATPAY);
        map.put("bancontact", BANCONTACT);
        map.put("banktransfer", BANKTRANSFER);
        map.put("belfius", BELFIUS);
        map.put("billie", BILLIE);
        map.put("blik", BLIK);
        map.put("creditcard", CREDITCARD);
        map.put("eps", EPS);
        map.put("giftcard", GIFTCARD);
        map.put("ideal", IDEAL);
        map.put("in3", IN3);
        map.put("kbc", KBC);
        map.put("klarna", KLARNA);
        map.put("mbway", MBWAY);
        map.put("multibanco", MULTIBANCO);
        map.put("mybank", MYBANK);
        map.put("paybybank", PAYBYBANK);
        map.put("paypal", PAYPAL);
        map.put("paysafecard", PAYSAFECARD);
        map.put("pointofsale", POINTOFSALE);
        map.put("przelewy24", PRZELEWY24);
        map.put("riverty", RIVERTY);
        map.put("satispay", SATISPAY);
        map.put("swish", SWISH);
        map.put("trustly", TRUSTLY);
        map.put("twint", TWINT);
        map.put("voucher", VOUCHER);
        return map;
    }

    private static final Map<String, PaymentLinkMethodResponseEnum> createEnumsMap() {
        Map<String, PaymentLinkMethodResponseEnum> map = new HashMap<>();
        map.put("applepay", PaymentLinkMethodResponseEnum.APPLEPAY);
        map.put("bacs", PaymentLinkMethodResponseEnum.BACS);
        map.put("bancomatpay", PaymentLinkMethodResponseEnum.BANCOMATPAY);
        map.put("bancontact", PaymentLinkMethodResponseEnum.BANCONTACT);
        map.put("banktransfer", PaymentLinkMethodResponseEnum.BANKTRANSFER);
        map.put("belfius", PaymentLinkMethodResponseEnum.BELFIUS);
        map.put("billie", PaymentLinkMethodResponseEnum.BILLIE);
        map.put("blik", PaymentLinkMethodResponseEnum.BLIK);
        map.put("creditcard", PaymentLinkMethodResponseEnum.CREDITCARD);
        map.put("eps", PaymentLinkMethodResponseEnum.EPS);
        map.put("giftcard", PaymentLinkMethodResponseEnum.GIFTCARD);
        map.put("ideal", PaymentLinkMethodResponseEnum.IDEAL);
        map.put("in3", PaymentLinkMethodResponseEnum.IN3);
        map.put("kbc", PaymentLinkMethodResponseEnum.KBC);
        map.put("klarna", PaymentLinkMethodResponseEnum.KLARNA);
        map.put("mbway", PaymentLinkMethodResponseEnum.MBWAY);
        map.put("multibanco", PaymentLinkMethodResponseEnum.MULTIBANCO);
        map.put("mybank", PaymentLinkMethodResponseEnum.MYBANK);
        map.put("paybybank", PaymentLinkMethodResponseEnum.PAYBYBANK);
        map.put("paypal", PaymentLinkMethodResponseEnum.PAYPAL);
        map.put("paysafecard", PaymentLinkMethodResponseEnum.PAYSAFECARD);
        map.put("pointofsale", PaymentLinkMethodResponseEnum.POINTOFSALE);
        map.put("przelewy24", PaymentLinkMethodResponseEnum.PRZELEWY24);
        map.put("riverty", PaymentLinkMethodResponseEnum.RIVERTY);
        map.put("satispay", PaymentLinkMethodResponseEnum.SATISPAY);
        map.put("swish", PaymentLinkMethodResponseEnum.SWISH);
        map.put("trustly", PaymentLinkMethodResponseEnum.TRUSTLY);
        map.put("twint", PaymentLinkMethodResponseEnum.TWINT);
        map.put("voucher", PaymentLinkMethodResponseEnum.VOUCHER);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<PaymentLinkMethodResponse> {

        protected _Serializer() {
            super(PaymentLinkMethodResponse.class);
        }

        @Override
        public void serialize(PaymentLinkMethodResponse value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<PaymentLinkMethodResponse> {

        protected _Deserializer() {
            super(PaymentLinkMethodResponse.class);
        }

        @Override
        public PaymentLinkMethodResponse deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return PaymentLinkMethodResponse.of(v);
        }
    }
    
    public enum PaymentLinkMethodResponseEnum {

        APPLEPAY("applepay"),
        BACS("bacs"),
        BANCOMATPAY("bancomatpay"),
        BANCONTACT("bancontact"),
        BANKTRANSFER("banktransfer"),
        BELFIUS("belfius"),
        BILLIE("billie"),
        BLIK("blik"),
        CREDITCARD("creditcard"),
        EPS("eps"),
        GIFTCARD("giftcard"),
        IDEAL("ideal"),
        IN3("in3"),
        KBC("kbc"),
        KLARNA("klarna"),
        MBWAY("mbway"),
        MULTIBANCO("multibanco"),
        MYBANK("mybank"),
        PAYBYBANK("paybybank"),
        PAYPAL("paypal"),
        PAYSAFECARD("paysafecard"),
        POINTOFSALE("pointofsale"),
        PRZELEWY24("przelewy24"),
        RIVERTY("riverty"),
        SATISPAY("satispay"),
        SWISH("swish"),
        TRUSTLY("trustly"),
        TWINT("twint"),
        VOUCHER("voucher"),;

        private final String value;

        private PaymentLinkMethodResponseEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

