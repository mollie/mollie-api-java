/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PaymentLinkResponse {
    /**
     * Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
     * endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<? extends Mode> mode;

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the
     * customer's bank or card statement when possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private JsonNullable<? extends AmountNullable> amount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumAmount")
    private JsonNullable<? extends AmountNullable> minimumAmount;

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    private Optional<Boolean> archived;

    /**
     * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
     * the customer will be shown a generic message after completing the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirectUrl")
    private JsonNullable<String> redirectUrl;

    /**
     * The webhook URL where we will send payment status updates to.
     * 
     * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
     * resulting from the payment link.
     * 
     * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
     * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
     * local machine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookUrl")
    private JsonNullable<String> webhookUrl;

    /**
     * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    private JsonNullable<? extends List<PaymentLineItemResponse>> lines;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingAddress")
    private Optional<? extends PaymentAddress> billingAddress;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippingAddress")
    private Optional<? extends PaymentAddress> shippingAddress;

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileId")
    private JsonNullable<String> profileId;

    /**
     * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
     * payments using the same link.
     * 
     * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reusable")
    private JsonNullable<Boolean> reusable;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * The date and time the payment link became paid, in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paidAt")
    private JsonNullable<String> paidAt;

    /**
     * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
     * the payment link will not expire automatically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresAt")
    private JsonNullable<String> expiresAt;

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is
     * not provided or is an empty array, all enabled payment methods will be available.
     * 
     * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
     * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
     * 'in3', 'riverty', 'klarna', 'billie'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedMethods")
    private JsonNullable<? extends List<String>> allowedMethods;

    /**
     * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
     * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
     * to your own account balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationFee")
    private Optional<? extends PaymentLinkResponseApplicationFee> applicationFee;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequenceType")
    private Optional<? extends PaymentLinkSequenceTypeResponse> sequenceType;

    /**
     * **Only relevant when `sequenceType` is set to `first`**
     * 
     * <p>The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
     * the customer will be required to input relevant information which will be used to establish a mandate after
     * the payment is made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerId")
    private JsonNullable<String> customerId;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends PaymentLinkResponseLinks> links;

    @JsonCreator
    public PaymentLinkResponse(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mode") Optional<? extends Mode> mode,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("amount") JsonNullable<? extends AmountNullable> amount,
            @JsonProperty("minimumAmount") JsonNullable<? extends AmountNullable> minimumAmount,
            @JsonProperty("archived") Optional<Boolean> archived,
            @JsonProperty("redirectUrl") JsonNullable<String> redirectUrl,
            @JsonProperty("webhookUrl") JsonNullable<String> webhookUrl,
            @JsonProperty("lines") JsonNullable<? extends List<PaymentLineItemResponse>> lines,
            @JsonProperty("billingAddress") Optional<? extends PaymentAddress> billingAddress,
            @JsonProperty("shippingAddress") Optional<? extends PaymentAddress> shippingAddress,
            @JsonProperty("profileId") JsonNullable<String> profileId,
            @JsonProperty("reusable") JsonNullable<Boolean> reusable,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("paidAt") JsonNullable<String> paidAt,
            @JsonProperty("expiresAt") JsonNullable<String> expiresAt,
            @JsonProperty("allowedMethods") JsonNullable<? extends List<String>> allowedMethods,
            @JsonProperty("applicationFee") Optional<? extends PaymentLinkResponseApplicationFee> applicationFee,
            @JsonProperty("sequenceType") Optional<? extends PaymentLinkSequenceTypeResponse> sequenceType,
            @JsonProperty("customerId") JsonNullable<String> customerId,
            @JsonProperty("_links") Optional<? extends PaymentLinkResponseLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        Utils.checkNotNull(archived, "archived");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        Utils.checkNotNull(lines, "lines");
        Utils.checkNotNull(billingAddress, "billingAddress");
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(reusable, "reusable");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(paidAt, "paidAt");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        Utils.checkNotNull(applicationFee, "applicationFee");
        Utils.checkNotNull(sequenceType, "sequenceType");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.description = description;
        this.amount = amount;
        this.minimumAmount = minimumAmount;
        this.archived = archived;
        this.redirectUrl = redirectUrl;
        this.webhookUrl = webhookUrl;
        this.lines = lines;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.profileId = profileId;
        this.reusable = reusable;
        this.createdAt = createdAt;
        this.paidAt = paidAt;
        this.expiresAt = expiresAt;
        this.allowedMethods = allowedMethods;
        this.applicationFee = applicationFee;
        this.sequenceType = sequenceType;
        this.customerId = customerId;
        this.links = links;
    }
    
    public PaymentLinkResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
     * endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Mode> mode() {
        return (Optional<Mode>) mode;
    }

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the
     * customer's bank or card statement when possible.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<AmountNullable> amount() {
        return (JsonNullable<AmountNullable>) amount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<AmountNullable> minimumAmount() {
        return (JsonNullable<AmountNullable>) minimumAmount;
    }

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
     */
    @JsonIgnore
    public Optional<Boolean> archived() {
        return archived;
    }

    /**
     * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
     * the customer will be shown a generic message after completing the payment.
     */
    @JsonIgnore
    public JsonNullable<String> redirectUrl() {
        return redirectUrl;
    }

    /**
     * The webhook URL where we will send payment status updates to.
     * 
     * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
     * resulting from the payment link.
     * 
     * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
     * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
     * local machine.
     */
    @JsonIgnore
    public JsonNullable<String> webhookUrl() {
        return webhookUrl;
    }

    /**
     * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<PaymentLineItemResponse>> lines() {
        return (JsonNullable<List<PaymentLineItemResponse>>) lines;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentAddress> billingAddress() {
        return (Optional<PaymentAddress>) billingAddress;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentAddress> shippingAddress() {
        return (Optional<PaymentAddress>) shippingAddress;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @JsonIgnore
    public JsonNullable<String> profileId() {
        return profileId;
    }

    /**
     * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
     * payments using the same link.
     * 
     * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
     */
    @JsonIgnore
    public JsonNullable<Boolean> reusable() {
        return reusable;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * The date and time the payment link became paid, in ISO 8601 format.
     */
    @JsonIgnore
    public JsonNullable<String> paidAt() {
        return paidAt;
    }

    /**
     * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
     * the payment link will not expire automatically.
     */
    @JsonIgnore
    public JsonNullable<String> expiresAt() {
        return expiresAt;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is
     * not provided or is an empty array, all enabled payment methods will be available.
     * 
     * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
     * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
     * 'in3', 'riverty', 'klarna', 'billie'.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> allowedMethods() {
        return (JsonNullable<List<String>>) allowedMethods;
    }

    /**
     * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
     * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
     * to your own account balance.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentLinkResponseApplicationFee> applicationFee() {
        return (Optional<PaymentLinkResponseApplicationFee>) applicationFee;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentLinkSequenceTypeResponse> sequenceType() {
        return (Optional<PaymentLinkSequenceTypeResponse>) sequenceType;
    }

    /**
     * **Only relevant when `sequenceType` is set to `first`**
     * 
     * <p>The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
     * the customer will be required to input relevant information which will be used to establish a mandate after
     * the payment is made.
     */
    @JsonIgnore
    public JsonNullable<String> customerId() {
        return customerId;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentLinkResponseLinks> links() {
        return (Optional<PaymentLinkResponseLinks>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
     * endpoint.
     */
    public PaymentLinkResponse withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
     * endpoint.
     */
    public PaymentLinkResponse withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public PaymentLinkResponse withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public PaymentLinkResponse withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public PaymentLinkResponse withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }


    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public PaymentLinkResponse withMode(Optional<? extends Mode> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the
     * customer's bank or card statement when possible.
     */
    public PaymentLinkResponse withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * A short description of the payment link. The description is visible in the Dashboard and will be shown on the
     * customer's bank or card statement when possible.
     */
    public PaymentLinkResponse withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public PaymentLinkResponse withAmount(AmountNullable amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = JsonNullable.of(amount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public PaymentLinkResponse withAmount(JsonNullable<? extends AmountNullable> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public PaymentLinkResponse withMinimumAmount(AmountNullable minimumAmount) {
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        this.minimumAmount = JsonNullable.of(minimumAmount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public PaymentLinkResponse withMinimumAmount(JsonNullable<? extends AmountNullable> minimumAmount) {
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        this.minimumAmount = minimumAmount;
        return this;
    }

    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
     */
    public PaymentLinkResponse withArchived(boolean archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = Optional.ofNullable(archived);
        return this;
    }


    /**
     * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
     */
    public PaymentLinkResponse withArchived(Optional<Boolean> archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = archived;
        return this;
    }

    /**
     * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
     * the customer will be shown a generic message after completing the payment.
     */
    public PaymentLinkResponse withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = JsonNullable.of(redirectUrl);
        return this;
    }

    /**
     * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
     * the customer will be shown a generic message after completing the payment.
     */
    public PaymentLinkResponse withRedirectUrl(JsonNullable<String> redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    /**
     * The webhook URL where we will send payment status updates to.
     * 
     * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
     * resulting from the payment link.
     * 
     * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
     * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
     * local machine.
     */
    public PaymentLinkResponse withWebhookUrl(String webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = JsonNullable.of(webhookUrl);
        return this;
    }

    /**
     * The webhook URL where we will send payment status updates to.
     * 
     * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
     * resulting from the payment link.
     * 
     * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
     * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
     * local machine.
     */
    public PaymentLinkResponse withWebhookUrl(JsonNullable<String> webhookUrl) {
        Utils.checkNotNull(webhookUrl, "webhookUrl");
        this.webhookUrl = webhookUrl;
        return this;
    }

    /**
     * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
     */
    public PaymentLinkResponse withLines(List<PaymentLineItemResponse> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = JsonNullable.of(lines);
        return this;
    }

    /**
     * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
     */
    public PaymentLinkResponse withLines(JsonNullable<? extends List<PaymentLineItemResponse>> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = lines;
        return this;
    }

    public PaymentLinkResponse withBillingAddress(PaymentAddress billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = Optional.ofNullable(billingAddress);
        return this;
    }


    public PaymentLinkResponse withBillingAddress(Optional<? extends PaymentAddress> billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = billingAddress;
        return this;
    }

    public PaymentLinkResponse withShippingAddress(PaymentAddress shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = Optional.ofNullable(shippingAddress);
        return this;
    }


    public PaymentLinkResponse withShippingAddress(Optional<? extends PaymentAddress> shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = shippingAddress;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    public PaymentLinkResponse withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = JsonNullable.of(profileId);
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    public PaymentLinkResponse withProfileId(JsonNullable<String> profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
     * payments using the same link.
     * 
     * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
     */
    public PaymentLinkResponse withReusable(boolean reusable) {
        Utils.checkNotNull(reusable, "reusable");
        this.reusable = JsonNullable.of(reusable);
        return this;
    }

    /**
     * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
     * payments using the same link.
     * 
     * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
     */
    public PaymentLinkResponse withReusable(JsonNullable<Boolean> reusable) {
        Utils.checkNotNull(reusable, "reusable");
        this.reusable = reusable;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public PaymentLinkResponse withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public PaymentLinkResponse withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time the payment link became paid, in ISO 8601 format.
     */
    public PaymentLinkResponse withPaidAt(String paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = JsonNullable.of(paidAt);
        return this;
    }

    /**
     * The date and time the payment link became paid, in ISO 8601 format.
     */
    public PaymentLinkResponse withPaidAt(JsonNullable<String> paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = paidAt;
        return this;
    }

    /**
     * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
     * the payment link will not expire automatically.
     */
    public PaymentLinkResponse withExpiresAt(String expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = JsonNullable.of(expiresAt);
        return this;
    }

    /**
     * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
     * the payment link will not expire automatically.
     */
    public PaymentLinkResponse withExpiresAt(JsonNullable<String> expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is
     * not provided or is an empty array, all enabled payment methods will be available.
     * 
     * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
     * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
     * 'in3', 'riverty', 'klarna', 'billie'.
     */
    public PaymentLinkResponse withAllowedMethods(List<String> allowedMethods) {
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.allowedMethods = JsonNullable.of(allowedMethods);
        return this;
    }

    /**
     * An array of payment methods that are allowed to be used for this payment link. When this parameter is
     * not provided or is an empty array, all enabled payment methods will be available.
     * 
     * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
     * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
     * 'in3', 'riverty', 'klarna', 'billie'.
     */
    public PaymentLinkResponse withAllowedMethods(JsonNullable<? extends List<String>> allowedMethods) {
        Utils.checkNotNull(allowedMethods, "allowedMethods");
        this.allowedMethods = allowedMethods;
        return this;
    }

    /**
     * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
     * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
     * to your own account balance.
     */
    public PaymentLinkResponse withApplicationFee(PaymentLinkResponseApplicationFee applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = Optional.ofNullable(applicationFee);
        return this;
    }


    /**
     * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
     * merchants.
     * 
     * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
     * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
     * to your own account balance.
     */
    public PaymentLinkResponse withApplicationFee(Optional<? extends PaymentLinkResponseApplicationFee> applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = applicationFee;
        return this;
    }

    public PaymentLinkResponse withSequenceType(PaymentLinkSequenceTypeResponse sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = Optional.ofNullable(sequenceType);
        return this;
    }


    public PaymentLinkResponse withSequenceType(Optional<? extends PaymentLinkSequenceTypeResponse> sequenceType) {
        Utils.checkNotNull(sequenceType, "sequenceType");
        this.sequenceType = sequenceType;
        return this;
    }

    /**
     * **Only relevant when `sequenceType` is set to `first`**
     * 
     * <p>The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
     * the customer will be required to input relevant information which will be used to establish a mandate after
     * the payment is made.
     */
    public PaymentLinkResponse withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = JsonNullable.of(customerId);
        return this;
    }

    /**
     * **Only relevant when `sequenceType` is set to `first`**
     * 
     * <p>The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
     * the customer will be required to input relevant information which will be used to establish a mandate after
     * the payment is made.
     */
    public PaymentLinkResponse withCustomerId(JsonNullable<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public PaymentLinkResponse withLinks(PaymentLinkResponseLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public PaymentLinkResponse withLinks(Optional<? extends PaymentLinkResponseLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentLinkResponse other = (PaymentLinkResponse) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.minimumAmount, other.minimumAmount) &&
            Utils.enhancedDeepEquals(this.archived, other.archived) &&
            Utils.enhancedDeepEquals(this.redirectUrl, other.redirectUrl) &&
            Utils.enhancedDeepEquals(this.webhookUrl, other.webhookUrl) &&
            Utils.enhancedDeepEquals(this.lines, other.lines) &&
            Utils.enhancedDeepEquals(this.billingAddress, other.billingAddress) &&
            Utils.enhancedDeepEquals(this.shippingAddress, other.shippingAddress) &&
            Utils.enhancedDeepEquals(this.profileId, other.profileId) &&
            Utils.enhancedDeepEquals(this.reusable, other.reusable) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.paidAt, other.paidAt) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt) &&
            Utils.enhancedDeepEquals(this.allowedMethods, other.allowedMethods) &&
            Utils.enhancedDeepEquals(this.applicationFee, other.applicationFee) &&
            Utils.enhancedDeepEquals(this.sequenceType, other.sequenceType) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, mode,
            description, amount, minimumAmount,
            archived, redirectUrl, webhookUrl,
            lines, billingAddress, shippingAddress,
            profileId, reusable, createdAt,
            paidAt, expiresAt, allowedMethods,
            applicationFee, sequenceType, customerId,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentLinkResponse.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "description", description,
                "amount", amount,
                "minimumAmount", minimumAmount,
                "archived", archived,
                "redirectUrl", redirectUrl,
                "webhookUrl", webhookUrl,
                "lines", lines,
                "billingAddress", billingAddress,
                "shippingAddress", shippingAddress,
                "profileId", profileId,
                "reusable", reusable,
                "createdAt", createdAt,
                "paidAt", paidAt,
                "expiresAt", expiresAt,
                "allowedMethods", allowedMethods,
                "applicationFee", applicationFee,
                "sequenceType", sequenceType,
                "customerId", customerId,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<? extends Mode> mode = Optional.empty();

        private Optional<String> description = Optional.empty();

        private JsonNullable<? extends AmountNullable> amount = JsonNullable.undefined();

        private JsonNullable<? extends AmountNullable> minimumAmount = JsonNullable.undefined();

        private Optional<Boolean> archived = Optional.empty();

        private JsonNullable<String> redirectUrl = JsonNullable.undefined();

        private JsonNullable<String> webhookUrl = JsonNullable.undefined();

        private JsonNullable<? extends List<PaymentLineItemResponse>> lines = JsonNullable.undefined();

        private Optional<? extends PaymentAddress> billingAddress = Optional.empty();

        private Optional<? extends PaymentAddress> shippingAddress = Optional.empty();

        private JsonNullable<String> profileId = JsonNullable.undefined();

        private JsonNullable<Boolean> reusable = JsonNullable.undefined();

        private Optional<String> createdAt = Optional.empty();

        private JsonNullable<String> paidAt = JsonNullable.undefined();

        private JsonNullable<String> expiresAt = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> allowedMethods = JsonNullable.undefined();

        private Optional<? extends PaymentLinkResponseApplicationFee> applicationFee = Optional.empty();

        private Optional<? extends PaymentLinkSequenceTypeResponse> sequenceType = Optional.empty();

        private JsonNullable<String> customerId = JsonNullable.undefined();

        private Optional<? extends PaymentLinkResponseLinks> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
         * endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a payment link object. Will always contain the string `payment-link` for this
         * endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(Optional<? extends Mode> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * A short description of the payment link. The description is visible in the Dashboard and will be shown on the
         * customer's bank or card statement when possible.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A short description of the payment link. The description is visible in the Dashboard and will be shown on the
         * customer's bank or card statement when possible.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(AmountNullable amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = JsonNullable.of(amount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(JsonNullable<? extends AmountNullable> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder minimumAmount(AmountNullable minimumAmount) {
            Utils.checkNotNull(minimumAmount, "minimumAmount");
            this.minimumAmount = JsonNullable.of(minimumAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder minimumAmount(JsonNullable<? extends AmountNullable> minimumAmount) {
            Utils.checkNotNull(minimumAmount, "minimumAmount");
            this.minimumAmount = minimumAmount;
            return this;
        }


        /**
         * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
         */
        public Builder archived(boolean archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = Optional.ofNullable(archived);
            return this;
        }

        /**
         * Whether the payment link is archived. Customers will not be able to complete payments on archived payment links.
         */
        public Builder archived(Optional<Boolean> archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = archived;
            return this;
        }


        /**
         * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
         * the customer will be shown a generic message after completing the payment.
         */
        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = JsonNullable.of(redirectUrl);
            return this;
        }

        /**
         * The URL your customer will be redirected to after completing the payment process. If no redirect URL is provided,
         * the customer will be shown a generic message after completing the payment.
         */
        public Builder redirectUrl(JsonNullable<String> redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }


        /**
         * The webhook URL where we will send payment status updates to.
         * 
         * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
         * resulting from the payment link.
         * 
         * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
         * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
         * local machine.
         */
        public Builder webhookUrl(String webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = JsonNullable.of(webhookUrl);
            return this;
        }

        /**
         * The webhook URL where we will send payment status updates to.
         * 
         * <p>The webhookUrl is optional, but without a webhook you will miss out on important status changes to any payments
         * resulting from the payment link.
         * 
         * <p>The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use
         * webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your
         * local machine.
         */
        public Builder webhookUrl(JsonNullable<String> webhookUrl) {
            Utils.checkNotNull(webhookUrl, "webhookUrl");
            this.webhookUrl = webhookUrl;
            return this;
        }


        /**
         * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
         * ordered and its price.
         * 
         * <p>All lines must have the same currency as the payment.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
         */
        public Builder lines(List<PaymentLineItemResponse> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = JsonNullable.of(lines);
            return this;
        }

        /**
         * Optionally provide the order lines for the payment. Each line contains details such as a description of the item
         * ordered and its price.
         * 
         * <p>All lines must have the same currency as the payment.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna`, `riverty` and `voucher`.
         */
        public Builder lines(JsonNullable<? extends List<PaymentLineItemResponse>> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = lines;
            return this;
        }


        public Builder billingAddress(PaymentAddress billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        public Builder billingAddress(Optional<? extends PaymentAddress> billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = billingAddress;
            return this;
        }


        public Builder shippingAddress(PaymentAddress shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        public Builder shippingAddress(Optional<? extends PaymentAddress> shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = shippingAddress;
            return this;
        }


        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
         * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
         * required.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = JsonNullable.of(profileId);
            return this;
        }

        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
         * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
         * required.
         */
        public Builder profileId(JsonNullable<String> profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }


        /**
         * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
         * payments using the same link.
         * 
         * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
         */
        public Builder reusable(boolean reusable) {
            Utils.checkNotNull(reusable, "reusable");
            this.reusable = JsonNullable.of(reusable);
            return this;
        }

        /**
         * Indicates whether the payment link is reusable. If this field is set to `true`, customers can make multiple
         * payments using the same link.
         * 
         * <p>If no value is specified, the field defaults to `false`, allowing only a single payment per link.
         */
        public Builder reusable(JsonNullable<Boolean> reusable) {
            Utils.checkNotNull(reusable, "reusable");
            this.reusable = reusable;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The date and time the payment link became paid, in ISO 8601 format.
         */
        public Builder paidAt(String paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = JsonNullable.of(paidAt);
            return this;
        }

        /**
         * The date and time the payment link became paid, in ISO 8601 format.
         */
        public Builder paidAt(JsonNullable<String> paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = paidAt;
            return this;
        }


        /**
         * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
         * the payment link will not expire automatically.
         */
        public Builder expiresAt(String expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = JsonNullable.of(expiresAt);
            return this;
        }

        /**
         * The date and time the payment link is set to expire, in ISO 8601 format. If no expiry date was provided up front,
         * the payment link will not expire automatically.
         */
        public Builder expiresAt(JsonNullable<String> expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }


        /**
         * An array of payment methods that are allowed to be used for this payment link. When this parameter is
         * not provided or is an empty array, all enabled payment methods will be available.
         * 
         * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
         * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
         * 'in3', 'riverty', 'klarna', 'billie'.
         */
        public Builder allowedMethods(List<String> allowedMethods) {
            Utils.checkNotNull(allowedMethods, "allowedMethods");
            this.allowedMethods = JsonNullable.of(allowedMethods);
            return this;
        }

        /**
         * An array of payment methods that are allowed to be used for this payment link. When this parameter is
         * not provided or is an empty array, all enabled payment methods will be available.
         * 
         * <p>Enum: 'applepay', 'bancomatpay', 'bancontact', 'banktransfer', 'belfius', 'blik', 'creditcard', 'eps', 'giftcard',
         * 'ideal', 'kbc', 'mybank', 'paybybank', 'paypal', 'paysafecard', 'pointofsale', 'przelewy24', 'satispay', 'trustly', 'twint',
         * 'in3', 'riverty', 'klarna', 'billie'.
         */
        public Builder allowedMethods(JsonNullable<? extends List<String>> allowedMethods) {
            Utils.checkNotNull(allowedMethods, "allowedMethods");
            this.allowedMethods = allowedMethods;
            return this;
        }


        /**
         * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
         * merchants.
         * 
         * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
         * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
         * to your own account balance.
         */
        public Builder applicationFee(PaymentLinkResponseApplicationFee applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = Optional.ofNullable(applicationFee);
            return this;
        }

        /**
         * With Mollie Connect you can charge fees on payment links that your app is processing on behalf of other Mollie
         * merchants.
         * 
         * <p>If you use OAuth to create payment links on a connected merchant's account, you can charge a fee using this
         * `applicationFee` parameter. If a payment on the payment link succeeds, the fee will be deducted from the merchant's balance and sent
         * to your own account balance.
         */
        public Builder applicationFee(Optional<? extends PaymentLinkResponseApplicationFee> applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = applicationFee;
            return this;
        }


        public Builder sequenceType(PaymentLinkSequenceTypeResponse sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = Optional.ofNullable(sequenceType);
            return this;
        }

        public Builder sequenceType(Optional<? extends PaymentLinkSequenceTypeResponse> sequenceType) {
            Utils.checkNotNull(sequenceType, "sequenceType");
            this.sequenceType = sequenceType;
            return this;
        }


        /**
         * **Only relevant when `sequenceType` is set to `first`**
         * 
         * <p>The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
         * the customer will be required to input relevant information which will be used to establish a mandate after
         * the payment is made.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = JsonNullable.of(customerId);
            return this;
        }

        /**
         * **Only relevant when `sequenceType` is set to `first`**
         * 
         * <p>The ID of the [customer](get-customer) the payment link is being created for. If a value is not provided,
         * the customer will be required to input relevant information which will be used to establish a mandate after
         * the payment is made.
         */
        public Builder customerId(JsonNullable<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(PaymentLinkResponseLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends PaymentLinkResponseLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public PaymentLinkResponse build() {

            return new PaymentLinkResponse(
                resource, id, mode,
                description, amount, minimumAmount,
                archived, redirectUrl, webhookUrl,
                lines, billingAddress, shippingAddress,
                profileId, reusable, createdAt,
                paidAt, expiresAt, allowedMethods,
                applicationFee, sequenceType, customerId,
                links);
        }

    }
}
