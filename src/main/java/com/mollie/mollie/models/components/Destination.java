/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * Destination
 * 
 * <p>The destination of this portion of the payment.
 */
public class Destination {
    /**
     * The type of destination. Currently only the destination type `organization` is supported.
     */
    @JsonProperty("type")
    private EntityPaymentRouteResponseType type;


    @JsonProperty("organizationId")
    private String organizationId;

    @JsonCreator
    public Destination(
            @JsonProperty("type") EntityPaymentRouteResponseType type,
            @JsonProperty("organizationId") String organizationId) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(organizationId, "organizationId");
        this.type = type;
        this.organizationId = organizationId;
    }

    /**
     * The type of destination. Currently only the destination type `organization` is supported.
     */
    @JsonIgnore
    public EntityPaymentRouteResponseType type() {
        return type;
    }

    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The type of destination. Currently only the destination type `organization` is supported.
     */
    public Destination withType(EntityPaymentRouteResponseType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public Destination withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Destination other = (Destination) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, organizationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Destination.class,
                "type", type,
                "organizationId", organizationId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private EntityPaymentRouteResponseType type;

        private String organizationId;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The type of destination. Currently only the destination type `organization` is supported.
         */
        public Builder type(EntityPaymentRouteResponseType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Destination build() {

            return new Destination(
                type, organizationId);
        }

    }
}
