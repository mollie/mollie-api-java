/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class EntityInvoiceLines {
    /**
     * The administrative period in `YYYY-MM` on which the line should be booked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("period")
    private Optional<String> period;

    /**
     * Description of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Number of products invoiced. For example, the number of payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    /**
     * VAT percentage rate that applies to this product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatPercentage")
    private Optional<Long> vatPercentage;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends Amount> amount;

    @JsonCreator
    public EntityInvoiceLines(
            @JsonProperty("period") Optional<String> period,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("count") Optional<Long> count,
            @JsonProperty("vatPercentage") Optional<Long> vatPercentage,
            @JsonProperty("amount") Optional<? extends Amount> amount) {
        Utils.checkNotNull(period, "period");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(vatPercentage, "vatPercentage");
        Utils.checkNotNull(amount, "amount");
        this.period = period;
        this.description = description;
        this.count = count;
        this.vatPercentage = vatPercentage;
        this.amount = amount;
    }
    
    public EntityInvoiceLines() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * The administrative period in `YYYY-MM` on which the line should be booked.
     */
    @JsonIgnore
    public Optional<String> period() {
        return period;
    }

    /**
     * Description of the product.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Number of products invoiced. For example, the number of payments.
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    /**
     * VAT percentage rate that applies to this product.
     */
    @JsonIgnore
    public Optional<Long> vatPercentage() {
        return vatPercentage;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> amount() {
        return (Optional<Amount>) amount;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The administrative period in `YYYY-MM` on which the line should be booked.
     */
    public EntityInvoiceLines withPeriod(String period) {
        Utils.checkNotNull(period, "period");
        this.period = Optional.ofNullable(period);
        return this;
    }


    /**
     * The administrative period in `YYYY-MM` on which the line should be booked.
     */
    public EntityInvoiceLines withPeriod(Optional<String> period) {
        Utils.checkNotNull(period, "period");
        this.period = period;
        return this;
    }

    /**
     * Description of the product.
     */
    public EntityInvoiceLines withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * Description of the product.
     */
    public EntityInvoiceLines withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Number of products invoiced. For example, the number of payments.
     */
    public EntityInvoiceLines withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }


    /**
     * Number of products invoiced. For example, the number of payments.
     */
    public EntityInvoiceLines withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * VAT percentage rate that applies to this product.
     */
    public EntityInvoiceLines withVatPercentage(long vatPercentage) {
        Utils.checkNotNull(vatPercentage, "vatPercentage");
        this.vatPercentage = Optional.ofNullable(vatPercentage);
        return this;
    }


    /**
     * VAT percentage rate that applies to this product.
     */
    public EntityInvoiceLines withVatPercentage(Optional<Long> vatPercentage) {
        Utils.checkNotNull(vatPercentage, "vatPercentage");
        this.vatPercentage = vatPercentage;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityInvoiceLines withAmount(Amount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityInvoiceLines withAmount(Optional<? extends Amount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityInvoiceLines other = (EntityInvoiceLines) o;
        return 
            Utils.enhancedDeepEquals(this.period, other.period) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.count, other.count) &&
            Utils.enhancedDeepEquals(this.vatPercentage, other.vatPercentage) &&
            Utils.enhancedDeepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            period, description, count,
            vatPercentage, amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityInvoiceLines.class,
                "period", period,
                "description", description,
                "count", count,
                "vatPercentage", vatPercentage,
                "amount", amount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> period = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<Long> count = Optional.empty();

        private Optional<Long> vatPercentage = Optional.empty();

        private Optional<? extends Amount> amount = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The administrative period in `YYYY-MM` on which the line should be booked.
         */
        public Builder period(String period) {
            Utils.checkNotNull(period, "period");
            this.period = Optional.ofNullable(period);
            return this;
        }

        /**
         * The administrative period in `YYYY-MM` on which the line should be booked.
         */
        public Builder period(Optional<String> period) {
            Utils.checkNotNull(period, "period");
            this.period = period;
            return this;
        }


        /**
         * Description of the product.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Description of the product.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * Number of products invoiced. For example, the number of payments.
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * Number of products invoiced. For example, the number of payments.
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }


        /**
         * VAT percentage rate that applies to this product.
         */
        public Builder vatPercentage(long vatPercentage) {
            Utils.checkNotNull(vatPercentage, "vatPercentage");
            this.vatPercentage = Optional.ofNullable(vatPercentage);
            return this;
        }

        /**
         * VAT percentage rate that applies to this product.
         */
        public Builder vatPercentage(Optional<Long> vatPercentage) {
            Utils.checkNotNull(vatPercentage, "vatPercentage");
            this.vatPercentage = vatPercentage;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(Amount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(Optional<? extends Amount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public EntityInvoiceLines build() {

            return new EntityInvoiceLines(
                period, description, count,
                vatPercentage, amount);
        }

    }
}
