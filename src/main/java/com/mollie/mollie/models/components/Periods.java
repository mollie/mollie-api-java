/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Periods {
    /**
     * An array of cost objects, describing the fees withheld for each payment method during this period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("costs")
    private Optional<? extends List<Costs>> costs;

    /**
     * An array of revenue objects containing the total revenue for each payment method during this period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revenue")
    private Optional<? extends List<Revenue>> revenue;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceId")
    private Optional<String> invoiceId;

    /**
     * The invoice reference, if the invoice has been created already.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceReference")
    private JsonNullable<String> invoiceReference;

    @JsonCreator
    public Periods(
            @JsonProperty("costs") Optional<? extends List<Costs>> costs,
            @JsonProperty("revenue") Optional<? extends List<Revenue>> revenue,
            @JsonProperty("invoiceId") Optional<String> invoiceId,
            @JsonProperty("invoiceReference") JsonNullable<String> invoiceReference) {
        Utils.checkNotNull(costs, "costs");
        Utils.checkNotNull(revenue, "revenue");
        Utils.checkNotNull(invoiceId, "invoiceId");
        Utils.checkNotNull(invoiceReference, "invoiceReference");
        this.costs = costs;
        this.revenue = revenue;
        this.invoiceId = invoiceId;
        this.invoiceReference = invoiceReference;
    }
    
    public Periods() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined());
    }

    /**
     * An array of cost objects, describing the fees withheld for each payment method during this period.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Costs>> costs() {
        return (Optional<List<Costs>>) costs;
    }

    /**
     * An array of revenue objects containing the total revenue for each payment method during this period.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Revenue>> revenue() {
        return (Optional<List<Revenue>>) revenue;
    }

    @JsonIgnore
    public Optional<String> invoiceId() {
        return invoiceId;
    }

    /**
     * The invoice reference, if the invoice has been created already.
     */
    @JsonIgnore
    public JsonNullable<String> invoiceReference() {
        return invoiceReference;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An array of cost objects, describing the fees withheld for each payment method during this period.
     */
    public Periods withCosts(List<Costs> costs) {
        Utils.checkNotNull(costs, "costs");
        this.costs = Optional.ofNullable(costs);
        return this;
    }


    /**
     * An array of cost objects, describing the fees withheld for each payment method during this period.
     */
    public Periods withCosts(Optional<? extends List<Costs>> costs) {
        Utils.checkNotNull(costs, "costs");
        this.costs = costs;
        return this;
    }

    /**
     * An array of revenue objects containing the total revenue for each payment method during this period.
     */
    public Periods withRevenue(List<Revenue> revenue) {
        Utils.checkNotNull(revenue, "revenue");
        this.revenue = Optional.ofNullable(revenue);
        return this;
    }


    /**
     * An array of revenue objects containing the total revenue for each payment method during this period.
     */
    public Periods withRevenue(Optional<? extends List<Revenue>> revenue) {
        Utils.checkNotNull(revenue, "revenue");
        this.revenue = revenue;
        return this;
    }

    public Periods withInvoiceId(String invoiceId) {
        Utils.checkNotNull(invoiceId, "invoiceId");
        this.invoiceId = Optional.ofNullable(invoiceId);
        return this;
    }


    public Periods withInvoiceId(Optional<String> invoiceId) {
        Utils.checkNotNull(invoiceId, "invoiceId");
        this.invoiceId = invoiceId;
        return this;
    }

    /**
     * The invoice reference, if the invoice has been created already.
     */
    public Periods withInvoiceReference(String invoiceReference) {
        Utils.checkNotNull(invoiceReference, "invoiceReference");
        this.invoiceReference = JsonNullable.of(invoiceReference);
        return this;
    }

    /**
     * The invoice reference, if the invoice has been created already.
     */
    public Periods withInvoiceReference(JsonNullable<String> invoiceReference) {
        Utils.checkNotNull(invoiceReference, "invoiceReference");
        this.invoiceReference = invoiceReference;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Periods other = (Periods) o;
        return 
            Utils.enhancedDeepEquals(this.costs, other.costs) &&
            Utils.enhancedDeepEquals(this.revenue, other.revenue) &&
            Utils.enhancedDeepEquals(this.invoiceId, other.invoiceId) &&
            Utils.enhancedDeepEquals(this.invoiceReference, other.invoiceReference);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            costs, revenue, invoiceId,
            invoiceReference);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Periods.class,
                "costs", costs,
                "revenue", revenue,
                "invoiceId", invoiceId,
                "invoiceReference", invoiceReference);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<Costs>> costs = Optional.empty();

        private Optional<? extends List<Revenue>> revenue = Optional.empty();

        private Optional<String> invoiceId = Optional.empty();

        private JsonNullable<String> invoiceReference = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * An array of cost objects, describing the fees withheld for each payment method during this period.
         */
        public Builder costs(List<Costs> costs) {
            Utils.checkNotNull(costs, "costs");
            this.costs = Optional.ofNullable(costs);
            return this;
        }

        /**
         * An array of cost objects, describing the fees withheld for each payment method during this period.
         */
        public Builder costs(Optional<? extends List<Costs>> costs) {
            Utils.checkNotNull(costs, "costs");
            this.costs = costs;
            return this;
        }


        /**
         * An array of revenue objects containing the total revenue for each payment method during this period.
         */
        public Builder revenue(List<Revenue> revenue) {
            Utils.checkNotNull(revenue, "revenue");
            this.revenue = Optional.ofNullable(revenue);
            return this;
        }

        /**
         * An array of revenue objects containing the total revenue for each payment method during this period.
         */
        public Builder revenue(Optional<? extends List<Revenue>> revenue) {
            Utils.checkNotNull(revenue, "revenue");
            this.revenue = revenue;
            return this;
        }


        public Builder invoiceId(String invoiceId) {
            Utils.checkNotNull(invoiceId, "invoiceId");
            this.invoiceId = Optional.ofNullable(invoiceId);
            return this;
        }

        public Builder invoiceId(Optional<String> invoiceId) {
            Utils.checkNotNull(invoiceId, "invoiceId");
            this.invoiceId = invoiceId;
            return this;
        }


        /**
         * The invoice reference, if the invoice has been created already.
         */
        public Builder invoiceReference(String invoiceReference) {
            Utils.checkNotNull(invoiceReference, "invoiceReference");
            this.invoiceReference = JsonNullable.of(invoiceReference);
            return this;
        }

        /**
         * The invoice reference, if the invoice has been created already.
         */
        public Builder invoiceReference(JsonNullable<String> invoiceReference) {
            Utils.checkNotNull(invoiceReference, "invoiceReference");
            this.invoiceReference = invoiceReference;
            return this;
        }

        public Periods build() {

            return new Periods(
                costs, revenue, invoiceId,
                invoiceReference);
        }

    }
}
