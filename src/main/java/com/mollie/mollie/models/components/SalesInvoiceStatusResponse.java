/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * SalesInvoiceStatusResponse
 * 
 * <p>The status for the invoice to end up in.
 * 
 * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued` sends it to
 * the recipient so they may then pay through our payment system. To skip our payment process, set this to `paid` to
 * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
 * 
 * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
 * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
 * 
 * <p>Dependent parameters:
 *   - `paymentDetails` is required if invoice should be set directly to `paid`
 *   - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice to `paid`
 *   - `emailDetails` optional for `issued` and `paid` to send the invoice by email
 */
@JsonDeserialize(using = SalesInvoiceStatusResponse._Deserializer.class)
@JsonSerialize(using = SalesInvoiceStatusResponse._Serializer.class)
public class SalesInvoiceStatusResponse {

    public static final SalesInvoiceStatusResponse DRAFT = new SalesInvoiceStatusResponse("draft");
    public static final SalesInvoiceStatusResponse ISSUED = new SalesInvoiceStatusResponse("issued");
    public static final SalesInvoiceStatusResponse PAID = new SalesInvoiceStatusResponse("paid");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, SalesInvoiceStatusResponse> values = createValuesMap();
    private static final Map<String, SalesInvoiceStatusResponseEnum> enums = createEnumsMap();

    private final String value;

    private SalesInvoiceStatusResponse(String value) {
        this.value = value;
    }

    /**
     * Returns a SalesInvoiceStatusResponse with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as SalesInvoiceStatusResponse
     */ 
    public static SalesInvoiceStatusResponse of(String value) {
        synchronized (SalesInvoiceStatusResponse.class) {
            return values.computeIfAbsent(value, v -> new SalesInvoiceStatusResponse(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<SalesInvoiceStatusResponseEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        SalesInvoiceStatusResponse other = (SalesInvoiceStatusResponse) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "SalesInvoiceStatusResponse [value=" + value + "]";
    }

    // return an array just like an enum
    public static SalesInvoiceStatusResponse[] values() {
        synchronized (SalesInvoiceStatusResponse.class) {
            return values.values().toArray(new SalesInvoiceStatusResponse[] {});
        }
    }

    private static final Map<String, SalesInvoiceStatusResponse> createValuesMap() {
        Map<String, SalesInvoiceStatusResponse> map = new LinkedHashMap<>();
        map.put("draft", DRAFT);
        map.put("issued", ISSUED);
        map.put("paid", PAID);
        return map;
    }

    private static final Map<String, SalesInvoiceStatusResponseEnum> createEnumsMap() {
        Map<String, SalesInvoiceStatusResponseEnum> map = new HashMap<>();
        map.put("draft", SalesInvoiceStatusResponseEnum.DRAFT);
        map.put("issued", SalesInvoiceStatusResponseEnum.ISSUED);
        map.put("paid", SalesInvoiceStatusResponseEnum.PAID);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<SalesInvoiceStatusResponse> {

        protected _Serializer() {
            super(SalesInvoiceStatusResponse.class);
        }

        @Override
        public void serialize(SalesInvoiceStatusResponse value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<SalesInvoiceStatusResponse> {

        protected _Deserializer() {
            super(SalesInvoiceStatusResponse.class);
        }

        @Override
        public SalesInvoiceStatusResponse deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return SalesInvoiceStatusResponse.of(v);
        }
    }
    
    public enum SalesInvoiceStatusResponseEnum {

        DRAFT("draft"),
        ISSUED("issued"),
        PAID("paid"),;

        private final String value;

        private SalesInvoiceStatusResponseEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

