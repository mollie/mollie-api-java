/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class EntityMethod {
    /**
     * Indicates the response contains a payment method object. Will always contain the string `method` for this
     * endpoint.
     */
    @JsonProperty("resource")
    private String resource;

    /**
     * Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
     * method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
     * parameter enables you to fully integrate the payment method selection into your website.
     * 
     * <p>You can also specify the methods in an array. By doing so we will still show the payment method selection screen
     * but will only show the methods specified in the array. For example, you can use this functionality to only show
     * payment methods from a specific country to your customer `['bancontact', 'belfius']`.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("id")
    private Optional<? extends MethodResponse> id;

    /**
     * The full name of the payment method.
     * 
     * <p>If a `locale` parameter is provided, the name is translated to the given locale if possible.
     */
    @JsonProperty("description")
    private String description;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("minimumAmount")
    private Amount minimumAmount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("maximumAmount")
    private Optional<? extends AmountNullable> maximumAmount;

    /**
     * URLs of images representing the payment method.
     */
    @JsonProperty("image")
    private Image image;

    /**
     * The payment method's activation status for this profile.
     */
    @JsonProperty("status")
    private MethodStatus status;

    /**
     * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant
     * for iDEAL, KBC/CBC, gift cards, and vouchers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuers")
    private Optional<? extends List<Issuers>> issuers;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private EntityMethodLinks links;

    @JsonCreator
    public EntityMethod(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") Optional<? extends MethodResponse> id,
            @JsonProperty("description") String description,
            @JsonProperty("minimumAmount") Amount minimumAmount,
            @JsonProperty("maximumAmount") Optional<? extends AmountNullable> maximumAmount,
            @JsonProperty("image") Image image,
            @JsonProperty("status") MethodStatus status,
            @JsonProperty("issuers") Optional<? extends List<Issuers>> issuers,
            @JsonProperty("_links") EntityMethodLinks links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        Utils.checkNotNull(maximumAmount, "maximumAmount");
        Utils.checkNotNull(image, "image");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(issuers, "issuers");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.description = description;
        this.minimumAmount = minimumAmount;
        this.maximumAmount = maximumAmount;
        this.image = image;
        this.status = status;
        this.issuers = issuers;
        this.links = links;
    }
    
    public EntityMethod(
            String resource,
            String description,
            Amount minimumAmount,
            Image image,
            MethodStatus status,
            EntityMethodLinks links) {
        this(resource, Optional.empty(), description,
            minimumAmount, Optional.empty(), image,
            status, Optional.empty(), links);
    }

    /**
     * Indicates the response contains a payment method object. Will always contain the string `method` for this
     * endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    /**
     * Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
     * method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
     * parameter enables you to fully integrate the payment method selection into your website.
     * 
     * <p>You can also specify the methods in an array. By doing so we will still show the payment method selection screen
     * but will only show the methods specified in the array. For example, you can use this functionality to only show
     * payment methods from a specific country to your customer `['bancontact', 'belfius']`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MethodResponse> id() {
        return (Optional<MethodResponse>) id;
    }

    /**
     * The full name of the payment method.
     * 
     * <p>If a `locale` parameter is provided, the name is translated to the given locale if possible.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount minimumAmount() {
        return minimumAmount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AmountNullable> maximumAmount() {
        return (Optional<AmountNullable>) maximumAmount;
    }

    /**
     * URLs of images representing the payment method.
     */
    @JsonIgnore
    public Image image() {
        return image;
    }

    /**
     * The payment method's activation status for this profile.
     */
    @JsonIgnore
    public MethodStatus status() {
        return status;
    }

    /**
     * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant
     * for iDEAL, KBC/CBC, gift cards, and vouchers.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Issuers>> issuers() {
        return (Optional<List<Issuers>>) issuers;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public EntityMethodLinks links() {
        return links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a payment method object. Will always contain the string `method` for this
     * endpoint.
     */
    public EntityMethod withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
     * method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
     * parameter enables you to fully integrate the payment method selection into your website.
     * 
     * <p>You can also specify the methods in an array. By doing so we will still show the payment method selection screen
     * but will only show the methods specified in the array. For example, you can use this functionality to only show
     * payment methods from a specific country to your customer `['bancontact', 'belfius']`.
     */
    public EntityMethod withId(MethodResponse id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
     * method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
     * parameter enables you to fully integrate the payment method selection into your website.
     * 
     * <p>You can also specify the methods in an array. By doing so we will still show the payment method selection screen
     * but will only show the methods specified in the array. For example, you can use this functionality to only show
     * payment methods from a specific country to your customer `['bancontact', 'belfius']`.
     */
    public EntityMethod withId(Optional<? extends MethodResponse> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The full name of the payment method.
     * 
     * <p>If a `locale` parameter is provided, the name is translated to the given locale if possible.
     */
    public EntityMethod withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityMethod withMinimumAmount(Amount minimumAmount) {
        Utils.checkNotNull(minimumAmount, "minimumAmount");
        this.minimumAmount = minimumAmount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityMethod withMaximumAmount(AmountNullable maximumAmount) {
        Utils.checkNotNull(maximumAmount, "maximumAmount");
        this.maximumAmount = Optional.ofNullable(maximumAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityMethod withMaximumAmount(Optional<? extends AmountNullable> maximumAmount) {
        Utils.checkNotNull(maximumAmount, "maximumAmount");
        this.maximumAmount = maximumAmount;
        return this;
    }

    /**
     * URLs of images representing the payment method.
     */
    public EntityMethod withImage(Image image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
        return this;
    }

    /**
     * The payment method's activation status for this profile.
     */
    public EntityMethod withStatus(MethodStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant
     * for iDEAL, KBC/CBC, gift cards, and vouchers.
     */
    public EntityMethod withIssuers(List<Issuers> issuers) {
        Utils.checkNotNull(issuers, "issuers");
        this.issuers = Optional.ofNullable(issuers);
        return this;
    }


    /**
     * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant
     * for iDEAL, KBC/CBC, gift cards, and vouchers.
     */
    public EntityMethod withIssuers(Optional<? extends List<Issuers>> issuers) {
        Utils.checkNotNull(issuers, "issuers");
        this.issuers = issuers;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityMethod withLinks(EntityMethodLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityMethod other = (EntityMethod) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.minimumAmount, other.minimumAmount) &&
            Utils.enhancedDeepEquals(this.maximumAmount, other.maximumAmount) &&
            Utils.enhancedDeepEquals(this.image, other.image) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.issuers, other.issuers) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, description,
            minimumAmount, maximumAmount, image,
            status, issuers, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityMethod.class,
                "resource", resource,
                "id", id,
                "description", description,
                "minimumAmount", minimumAmount,
                "maximumAmount", maximumAmount,
                "image", image,
                "status", status,
                "issuers", issuers,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private Optional<? extends MethodResponse> id = Optional.empty();

        private String description;

        private Amount minimumAmount;

        private Optional<? extends AmountNullable> maximumAmount = Optional.empty();

        private Image image;

        private MethodStatus status;

        private Optional<? extends List<Issuers>> issuers = Optional.empty();

        private EntityMethodLinks links;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a payment method object. Will always contain the string `method` for this
         * endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
         * method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
         * parameter enables you to fully integrate the payment method selection into your website.
         * 
         * <p>You can also specify the methods in an array. By doing so we will still show the payment method selection screen
         * but will only show the methods specified in the array. For example, you can use this functionality to only show
         * payment methods from a specific country to your customer `['bancontact', 'belfius']`.
         */
        public Builder id(MethodResponse id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
         * method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
         * parameter enables you to fully integrate the payment method selection into your website.
         * 
         * <p>You can also specify the methods in an array. By doing so we will still show the payment method selection screen
         * but will only show the methods specified in the array. For example, you can use this functionality to only show
         * payment methods from a specific country to your customer `['bancontact', 'belfius']`.
         */
        public Builder id(Optional<? extends MethodResponse> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The full name of the payment method.
         * 
         * <p>If a `locale` parameter is provided, the name is translated to the given locale if possible.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder minimumAmount(Amount minimumAmount) {
            Utils.checkNotNull(minimumAmount, "minimumAmount");
            this.minimumAmount = minimumAmount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder maximumAmount(AmountNullable maximumAmount) {
            Utils.checkNotNull(maximumAmount, "maximumAmount");
            this.maximumAmount = Optional.ofNullable(maximumAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder maximumAmount(Optional<? extends AmountNullable> maximumAmount) {
            Utils.checkNotNull(maximumAmount, "maximumAmount");
            this.maximumAmount = maximumAmount;
            return this;
        }


        /**
         * URLs of images representing the payment method.
         */
        public Builder image(Image image) {
            Utils.checkNotNull(image, "image");
            this.image = image;
            return this;
        }


        /**
         * The payment method's activation status for this profile.
         */
        public Builder status(MethodStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant
         * for iDEAL, KBC/CBC, gift cards, and vouchers.
         */
        public Builder issuers(List<Issuers> issuers) {
            Utils.checkNotNull(issuers, "issuers");
            this.issuers = Optional.ofNullable(issuers);
            return this;
        }

        /**
         * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant
         * for iDEAL, KBC/CBC, gift cards, and vouchers.
         */
        public Builder issuers(Optional<? extends List<Issuers>> issuers) {
            Utils.checkNotNull(issuers, "issuers");
            this.issuers = issuers;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(EntityMethodLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public EntityMethod build() {

            return new EntityMethod(
                resource, id, description,
                minimumAmount, maximumAmount, image,
                status, issuers, links);
        }

    }
}
