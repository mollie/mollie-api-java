/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * SubscriptionResponseApplicationFee
 * 
 * <p>With Mollie Connect you can charge fees on payments that your app is processing on behalf of other
 * Mollie
 * merchants.
 * 
 * <p>Setting an application fee on the subscription will ensure this fee is charged on each individual
 * payment.
 * 
 * <p>Refer to the `applicationFee` parameter on the [Get payment endpoint](get-payment) documentation for
 * more
 * information.
 */
public class SubscriptionResponseApplicationFee {
    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("amount")
    private Amount amount;


    @JsonProperty("description")
    private String description;

    @JsonCreator
    public SubscriptionResponseApplicationFee(
            @JsonProperty("amount") Amount amount,
            @JsonProperty("description") String description) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        this.amount = amount;
        this.description = description;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount amount() {
        return amount;
    }

    @JsonIgnore
    public String description() {
        return description;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public SubscriptionResponseApplicationFee withAmount(Amount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public SubscriptionResponseApplicationFee withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscriptionResponseApplicationFee other = (SubscriptionResponseApplicationFee) o;
        return 
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.description, other.description);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            amount, description);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SubscriptionResponseApplicationFee.class,
                "amount", amount,
                "description", description);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Amount amount;

        private String description;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(Amount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public SubscriptionResponseApplicationFee build() {

            return new SubscriptionResponseApplicationFee(
                amount, description);
        }

    }
}
