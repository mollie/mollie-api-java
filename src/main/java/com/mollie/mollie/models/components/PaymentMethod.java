/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * PaymentMethod
 * 
 * <p>The payment method, if applicable
 */
@JsonDeserialize(using = PaymentMethod._Deserializer.class)
@JsonSerialize(using = PaymentMethod._Serializer.class)
public class PaymentMethod {

    public static final PaymentMethod ALMA = new PaymentMethod("alma");
    public static final PaymentMethod BACS = new PaymentMethod("bacs");
    public static final PaymentMethod APPLEPAY = new PaymentMethod("applepay");
    public static final PaymentMethod BANCOMATPAY = new PaymentMethod("bancomatpay");
    public static final PaymentMethod BANCONTACT = new PaymentMethod("bancontact");
    public static final PaymentMethod BANKTRANSFER = new PaymentMethod("banktransfer");
    public static final PaymentMethod BELFIUS = new PaymentMethod("belfius");
    public static final PaymentMethod BILLIE = new PaymentMethod("billie");
    public static final PaymentMethod BIZUM = new PaymentMethod("bizum");
    public static final PaymentMethod BITCOIN = new PaymentMethod("bitcoin");
    public static final PaymentMethod BLIK = new PaymentMethod("blik");
    public static final PaymentMethod CREDITCARD = new PaymentMethod("creditcard");
    public static final PaymentMethod DIRECTDEBIT = new PaymentMethod("directdebit");
    public static final PaymentMethod EPS = new PaymentMethod("eps");
    public static final PaymentMethod GIFTCARD = new PaymentMethod("giftcard");
    public static final PaymentMethod GIROPAY = new PaymentMethod("giropay");
    public static final PaymentMethod GOOGLEPAY = new PaymentMethod("googlepay");
    public static final PaymentMethod IDEAL = new PaymentMethod("ideal");
    public static final PaymentMethod IN3 = new PaymentMethod("in3");
    public static final PaymentMethod INGHOMEPAY = new PaymentMethod("inghomepay");
    public static final PaymentMethod KBC = new PaymentMethod("kbc");
    public static final PaymentMethod KLARNAPAYLATER = new PaymentMethod("klarnapaylater");
    public static final PaymentMethod KLARNAPAYNOW = new PaymentMethod("klarnapaynow");
    public static final PaymentMethod KLARNASLICEIT = new PaymentMethod("klarnasliceit");
    public static final PaymentMethod KLARNA = new PaymentMethod("klarna");
    public static final PaymentMethod MBWAY = new PaymentMethod("mbway");
    public static final PaymentMethod MULTIBANCO = new PaymentMethod("multibanco");
    public static final PaymentMethod MYBANK = new PaymentMethod("mybank");
    public static final PaymentMethod PAYBYBANK = new PaymentMethod("paybybank");
    public static final PaymentMethod PAYCONIQ = new PaymentMethod("payconiq");
    public static final PaymentMethod PAYPAL = new PaymentMethod("paypal");
    public static final PaymentMethod PAYSAFECARD = new PaymentMethod("paysafecard");
    public static final PaymentMethod PRZELEWY24 = new PaymentMethod("przelewy24");
    public static final PaymentMethod RIVERTY = new PaymentMethod("riverty");
    public static final PaymentMethod SATISPAY = new PaymentMethod("satispay");
    public static final PaymentMethod PODIUMCADEAUKAART = new PaymentMethod("podiumcadeaukaart");
    public static final PaymentMethod POINTOFSALE = new PaymentMethod("pointofsale");
    public static final PaymentMethod SOFORT = new PaymentMethod("sofort");
    public static final PaymentMethod SWISH = new PaymentMethod("swish");
    public static final PaymentMethod TRUSTLY = new PaymentMethod("trustly");
    public static final PaymentMethod TWINT = new PaymentMethod("twint");
    public static final PaymentMethod VOUCHER = new PaymentMethod("voucher");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, PaymentMethod> values = createValuesMap();
    private static final Map<String, PaymentMethodEnum> enums = createEnumsMap();

    private final String value;

    private PaymentMethod(String value) {
        this.value = value;
    }

    /**
     * Returns a PaymentMethod with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as PaymentMethod
     */ 
    public static PaymentMethod of(String value) {
        synchronized (PaymentMethod.class) {
            return values.computeIfAbsent(value, v -> new PaymentMethod(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<PaymentMethodEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        PaymentMethod other = (PaymentMethod) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "PaymentMethod [value=" + value + "]";
    }

    // return an array just like an enum
    public static PaymentMethod[] values() {
        synchronized (PaymentMethod.class) {
            return values.values().toArray(new PaymentMethod[] {});
        }
    }

    private static final Map<String, PaymentMethod> createValuesMap() {
        Map<String, PaymentMethod> map = new LinkedHashMap<>();
        map.put("alma", ALMA);
        map.put("bacs", BACS);
        map.put("applepay", APPLEPAY);
        map.put("bancomatpay", BANCOMATPAY);
        map.put("bancontact", BANCONTACT);
        map.put("banktransfer", BANKTRANSFER);
        map.put("belfius", BELFIUS);
        map.put("billie", BILLIE);
        map.put("bizum", BIZUM);
        map.put("bitcoin", BITCOIN);
        map.put("blik", BLIK);
        map.put("creditcard", CREDITCARD);
        map.put("directdebit", DIRECTDEBIT);
        map.put("eps", EPS);
        map.put("giftcard", GIFTCARD);
        map.put("giropay", GIROPAY);
        map.put("googlepay", GOOGLEPAY);
        map.put("ideal", IDEAL);
        map.put("in3", IN3);
        map.put("inghomepay", INGHOMEPAY);
        map.put("kbc", KBC);
        map.put("klarnapaylater", KLARNAPAYLATER);
        map.put("klarnapaynow", KLARNAPAYNOW);
        map.put("klarnasliceit", KLARNASLICEIT);
        map.put("klarna", KLARNA);
        map.put("mbway", MBWAY);
        map.put("multibanco", MULTIBANCO);
        map.put("mybank", MYBANK);
        map.put("paybybank", PAYBYBANK);
        map.put("payconiq", PAYCONIQ);
        map.put("paypal", PAYPAL);
        map.put("paysafecard", PAYSAFECARD);
        map.put("przelewy24", PRZELEWY24);
        map.put("riverty", RIVERTY);
        map.put("satispay", SATISPAY);
        map.put("podiumcadeaukaart", PODIUMCADEAUKAART);
        map.put("pointofsale", POINTOFSALE);
        map.put("sofort", SOFORT);
        map.put("swish", SWISH);
        map.put("trustly", TRUSTLY);
        map.put("twint", TWINT);
        map.put("voucher", VOUCHER);
        return map;
    }

    private static final Map<String, PaymentMethodEnum> createEnumsMap() {
        Map<String, PaymentMethodEnum> map = new HashMap<>();
        map.put("alma", PaymentMethodEnum.ALMA);
        map.put("bacs", PaymentMethodEnum.BACS);
        map.put("applepay", PaymentMethodEnum.APPLEPAY);
        map.put("bancomatpay", PaymentMethodEnum.BANCOMATPAY);
        map.put("bancontact", PaymentMethodEnum.BANCONTACT);
        map.put("banktransfer", PaymentMethodEnum.BANKTRANSFER);
        map.put("belfius", PaymentMethodEnum.BELFIUS);
        map.put("billie", PaymentMethodEnum.BILLIE);
        map.put("bizum", PaymentMethodEnum.BIZUM);
        map.put("bitcoin", PaymentMethodEnum.BITCOIN);
        map.put("blik", PaymentMethodEnum.BLIK);
        map.put("creditcard", PaymentMethodEnum.CREDITCARD);
        map.put("directdebit", PaymentMethodEnum.DIRECTDEBIT);
        map.put("eps", PaymentMethodEnum.EPS);
        map.put("giftcard", PaymentMethodEnum.GIFTCARD);
        map.put("giropay", PaymentMethodEnum.GIROPAY);
        map.put("googlepay", PaymentMethodEnum.GOOGLEPAY);
        map.put("ideal", PaymentMethodEnum.IDEAL);
        map.put("in3", PaymentMethodEnum.IN3);
        map.put("inghomepay", PaymentMethodEnum.INGHOMEPAY);
        map.put("kbc", PaymentMethodEnum.KBC);
        map.put("klarnapaylater", PaymentMethodEnum.KLARNAPAYLATER);
        map.put("klarnapaynow", PaymentMethodEnum.KLARNAPAYNOW);
        map.put("klarnasliceit", PaymentMethodEnum.KLARNASLICEIT);
        map.put("klarna", PaymentMethodEnum.KLARNA);
        map.put("mbway", PaymentMethodEnum.MBWAY);
        map.put("multibanco", PaymentMethodEnum.MULTIBANCO);
        map.put("mybank", PaymentMethodEnum.MYBANK);
        map.put("paybybank", PaymentMethodEnum.PAYBYBANK);
        map.put("payconiq", PaymentMethodEnum.PAYCONIQ);
        map.put("paypal", PaymentMethodEnum.PAYPAL);
        map.put("paysafecard", PaymentMethodEnum.PAYSAFECARD);
        map.put("przelewy24", PaymentMethodEnum.PRZELEWY24);
        map.put("riverty", PaymentMethodEnum.RIVERTY);
        map.put("satispay", PaymentMethodEnum.SATISPAY);
        map.put("podiumcadeaukaart", PaymentMethodEnum.PODIUMCADEAUKAART);
        map.put("pointofsale", PaymentMethodEnum.POINTOFSALE);
        map.put("sofort", PaymentMethodEnum.SOFORT);
        map.put("swish", PaymentMethodEnum.SWISH);
        map.put("trustly", PaymentMethodEnum.TRUSTLY);
        map.put("twint", PaymentMethodEnum.TWINT);
        map.put("voucher", PaymentMethodEnum.VOUCHER);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<PaymentMethod> {

        protected _Serializer() {
            super(PaymentMethod.class);
        }

        @Override
        public void serialize(PaymentMethod value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<PaymentMethod> {

        protected _Deserializer() {
            super(PaymentMethod.class);
        }

        @Override
        public PaymentMethod deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return PaymentMethod.of(v);
        }
    }
    
    public enum PaymentMethodEnum {

        ALMA("alma"),
        BACS("bacs"),
        APPLEPAY("applepay"),
        BANCOMATPAY("bancomatpay"),
        BANCONTACT("bancontact"),
        BANKTRANSFER("banktransfer"),
        BELFIUS("belfius"),
        BILLIE("billie"),
        BIZUM("bizum"),
        BITCOIN("bitcoin"),
        BLIK("blik"),
        CREDITCARD("creditcard"),
        DIRECTDEBIT("directdebit"),
        EPS("eps"),
        GIFTCARD("giftcard"),
        GIROPAY("giropay"),
        GOOGLEPAY("googlepay"),
        IDEAL("ideal"),
        IN3("in3"),
        INGHOMEPAY("inghomepay"),
        KBC("kbc"),
        KLARNAPAYLATER("klarnapaylater"),
        KLARNAPAYNOW("klarnapaynow"),
        KLARNASLICEIT("klarnasliceit"),
        KLARNA("klarna"),
        MBWAY("mbway"),
        MULTIBANCO("multibanco"),
        MYBANK("mybank"),
        PAYBYBANK("paybybank"),
        PAYCONIQ("payconiq"),
        PAYPAL("paypal"),
        PAYSAFECARD("paysafecard"),
        PRZELEWY24("przelewy24"),
        RIVERTY("riverty"),
        SATISPAY("satispay"),
        PODIUMCADEAUKAART("podiumcadeaukaart"),
        POINTOFSALE("pointofsale"),
        SOFORT("sofort"),
        SWISH("swish"),
        TRUSTLY("trustly"),
        TWINT("twint"),
        VOUCHER("voucher"),;

        private final String value;

        private PaymentMethodEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

