/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EntityBalance {
    /**
     * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<? extends Mode> mode;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends Currencies> currency;

    /**
     * The description or name of the balance. Can be used to denote the purpose of the balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The status of the balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends Status> status;

    /**
     * The frequency with which the available amount on the balance will be settled to the configured transfer
     * destination.
     * 
     * <p>Settlements created during weekends or on bank holidays will take place on the next business day.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferFrequency")
    private Optional<? extends TransferFrequency> transferFrequency;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferThreshold")
    private Optional<? extends Amount> transferThreshold;

    /**
     * The transfer reference set to be included in all the transfers for this balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferReference")
    private JsonNullable<String> transferReference;

    /**
     * The destination where the available amount will be automatically transferred to according to the configured
     * transfer frequency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferDestination")
    private JsonNullable<? extends TransferDestination> transferDestination;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableAmount")
    private Optional<? extends Amount> availableAmount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingAmount")
    private Optional<? extends Amount> pendingAmount;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends Links> links;

    @JsonCreator
    public EntityBalance(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mode") Optional<? extends Mode> mode,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("currency") Optional<? extends Currencies> currency,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("status") Optional<? extends Status> status,
            @JsonProperty("transferFrequency") Optional<? extends TransferFrequency> transferFrequency,
            @JsonProperty("transferThreshold") Optional<? extends Amount> transferThreshold,
            @JsonProperty("transferReference") JsonNullable<String> transferReference,
            @JsonProperty("transferDestination") JsonNullable<? extends TransferDestination> transferDestination,
            @JsonProperty("availableAmount") Optional<? extends Amount> availableAmount,
            @JsonProperty("pendingAmount") Optional<? extends Amount> pendingAmount,
            @JsonProperty("_links") Optional<? extends Links> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(transferFrequency, "transferFrequency");
        Utils.checkNotNull(transferThreshold, "transferThreshold");
        Utils.checkNotNull(transferReference, "transferReference");
        Utils.checkNotNull(transferDestination, "transferDestination");
        Utils.checkNotNull(availableAmount, "availableAmount");
        Utils.checkNotNull(pendingAmount, "pendingAmount");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.createdAt = createdAt;
        this.currency = currency;
        this.description = description;
        this.status = status;
        this.transferFrequency = transferFrequency;
        this.transferThreshold = transferThreshold;
        this.transferReference = transferReference;
        this.transferDestination = transferDestination;
        this.availableAmount = availableAmount;
        this.pendingAmount = pendingAmount;
        this.links = links;
    }
    
    public EntityBalance() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Mode> mode() {
        return (Optional<Mode>) mode;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Currencies> currency() {
        return (Optional<Currencies>) currency;
    }

    /**
     * The description or name of the balance. Can be used to denote the purpose of the balance.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The status of the balance.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Status> status() {
        return (Optional<Status>) status;
    }

    /**
     * The frequency with which the available amount on the balance will be settled to the configured transfer
     * destination.
     * 
     * <p>Settlements created during weekends or on bank holidays will take place on the next business day.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransferFrequency> transferFrequency() {
        return (Optional<TransferFrequency>) transferFrequency;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> transferThreshold() {
        return (Optional<Amount>) transferThreshold;
    }

    /**
     * The transfer reference set to be included in all the transfers for this balance.
     */
    @JsonIgnore
    public JsonNullable<String> transferReference() {
        return transferReference;
    }

    /**
     * The destination where the available amount will be automatically transferred to according to the configured
     * transfer frequency.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TransferDestination> transferDestination() {
        return (JsonNullable<TransferDestination>) transferDestination;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> availableAmount() {
        return (Optional<Amount>) availableAmount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> pendingAmount() {
        return (Optional<Amount>) pendingAmount;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Links> links() {
        return (Optional<Links>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
     */
    public EntityBalance withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
     */
    public EntityBalance withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public EntityBalance withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public EntityBalance withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public EntityBalance withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = Optional.ofNullable(mode);
        return this;
    }


    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public EntityBalance withMode(Optional<? extends Mode> mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public EntityBalance withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public EntityBalance withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public EntityBalance withCurrency(Currencies currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }


    public EntityBalance withCurrency(Optional<? extends Currencies> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The description or name of the balance. Can be used to denote the purpose of the balance.
     */
    public EntityBalance withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * The description or name of the balance. Can be used to denote the purpose of the balance.
     */
    public EntityBalance withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The status of the balance.
     */
    public EntityBalance withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * The status of the balance.
     */
    public EntityBalance withStatus(Optional<? extends Status> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The frequency with which the available amount on the balance will be settled to the configured transfer
     * destination.
     * 
     * <p>Settlements created during weekends or on bank holidays will take place on the next business day.
     */
    public EntityBalance withTransferFrequency(TransferFrequency transferFrequency) {
        Utils.checkNotNull(transferFrequency, "transferFrequency");
        this.transferFrequency = Optional.ofNullable(transferFrequency);
        return this;
    }


    /**
     * The frequency with which the available amount on the balance will be settled to the configured transfer
     * destination.
     * 
     * <p>Settlements created during weekends or on bank holidays will take place on the next business day.
     */
    public EntityBalance withTransferFrequency(Optional<? extends TransferFrequency> transferFrequency) {
        Utils.checkNotNull(transferFrequency, "transferFrequency");
        this.transferFrequency = transferFrequency;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalance withTransferThreshold(Amount transferThreshold) {
        Utils.checkNotNull(transferThreshold, "transferThreshold");
        this.transferThreshold = Optional.ofNullable(transferThreshold);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalance withTransferThreshold(Optional<? extends Amount> transferThreshold) {
        Utils.checkNotNull(transferThreshold, "transferThreshold");
        this.transferThreshold = transferThreshold;
        return this;
    }

    /**
     * The transfer reference set to be included in all the transfers for this balance.
     */
    public EntityBalance withTransferReference(String transferReference) {
        Utils.checkNotNull(transferReference, "transferReference");
        this.transferReference = JsonNullable.of(transferReference);
        return this;
    }

    /**
     * The transfer reference set to be included in all the transfers for this balance.
     */
    public EntityBalance withTransferReference(JsonNullable<String> transferReference) {
        Utils.checkNotNull(transferReference, "transferReference");
        this.transferReference = transferReference;
        return this;
    }

    /**
     * The destination where the available amount will be automatically transferred to according to the configured
     * transfer frequency.
     */
    public EntityBalance withTransferDestination(TransferDestination transferDestination) {
        Utils.checkNotNull(transferDestination, "transferDestination");
        this.transferDestination = JsonNullable.of(transferDestination);
        return this;
    }

    /**
     * The destination where the available amount will be automatically transferred to according to the configured
     * transfer frequency.
     */
    public EntityBalance withTransferDestination(JsonNullable<? extends TransferDestination> transferDestination) {
        Utils.checkNotNull(transferDestination, "transferDestination");
        this.transferDestination = transferDestination;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalance withAvailableAmount(Amount availableAmount) {
        Utils.checkNotNull(availableAmount, "availableAmount");
        this.availableAmount = Optional.ofNullable(availableAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalance withAvailableAmount(Optional<? extends Amount> availableAmount) {
        Utils.checkNotNull(availableAmount, "availableAmount");
        this.availableAmount = availableAmount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalance withPendingAmount(Amount pendingAmount) {
        Utils.checkNotNull(pendingAmount, "pendingAmount");
        this.pendingAmount = Optional.ofNullable(pendingAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalance withPendingAmount(Optional<? extends Amount> pendingAmount) {
        Utils.checkNotNull(pendingAmount, "pendingAmount");
        this.pendingAmount = pendingAmount;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityBalance withLinks(Links links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityBalance withLinks(Optional<? extends Links> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityBalance other = (EntityBalance) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.transferFrequency, other.transferFrequency) &&
            Utils.enhancedDeepEquals(this.transferThreshold, other.transferThreshold) &&
            Utils.enhancedDeepEquals(this.transferReference, other.transferReference) &&
            Utils.enhancedDeepEquals(this.transferDestination, other.transferDestination) &&
            Utils.enhancedDeepEquals(this.availableAmount, other.availableAmount) &&
            Utils.enhancedDeepEquals(this.pendingAmount, other.pendingAmount) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, mode,
            createdAt, currency, description,
            status, transferFrequency, transferThreshold,
            transferReference, transferDestination, availableAmount,
            pendingAmount, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityBalance.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "createdAt", createdAt,
                "currency", currency,
                "description", description,
                "status", status,
                "transferFrequency", transferFrequency,
                "transferThreshold", transferThreshold,
                "transferReference", transferReference,
                "transferDestination", transferDestination,
                "availableAmount", availableAmount,
                "pendingAmount", pendingAmount,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<? extends Mode> mode = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<? extends Currencies> currency = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<? extends Status> status = Optional.empty();

        private Optional<? extends TransferFrequency> transferFrequency = Optional.empty();

        private Optional<? extends Amount> transferThreshold = Optional.empty();

        private JsonNullable<String> transferReference = JsonNullable.undefined();

        private JsonNullable<? extends TransferDestination> transferDestination = JsonNullable.undefined();

        private Optional<? extends Amount> availableAmount = Optional.empty();

        private Optional<? extends Amount> pendingAmount = Optional.empty();

        private Optional<? extends Links> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a balance object. Will always contain the string `balance` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(Optional<? extends Mode> mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder currency(Currencies currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<? extends Currencies> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * The description or name of the balance. Can be used to denote the purpose of the balance.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description or name of the balance. Can be used to denote the purpose of the balance.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The status of the balance.
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the balance.
         */
        public Builder status(Optional<? extends Status> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The frequency with which the available amount on the balance will be settled to the configured transfer
         * destination.
         * 
         * <p>Settlements created during weekends or on bank holidays will take place on the next business day.
         */
        public Builder transferFrequency(TransferFrequency transferFrequency) {
            Utils.checkNotNull(transferFrequency, "transferFrequency");
            this.transferFrequency = Optional.ofNullable(transferFrequency);
            return this;
        }

        /**
         * The frequency with which the available amount on the balance will be settled to the configured transfer
         * destination.
         * 
         * <p>Settlements created during weekends or on bank holidays will take place on the next business day.
         */
        public Builder transferFrequency(Optional<? extends TransferFrequency> transferFrequency) {
            Utils.checkNotNull(transferFrequency, "transferFrequency");
            this.transferFrequency = transferFrequency;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder transferThreshold(Amount transferThreshold) {
            Utils.checkNotNull(transferThreshold, "transferThreshold");
            this.transferThreshold = Optional.ofNullable(transferThreshold);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder transferThreshold(Optional<? extends Amount> transferThreshold) {
            Utils.checkNotNull(transferThreshold, "transferThreshold");
            this.transferThreshold = transferThreshold;
            return this;
        }


        /**
         * The transfer reference set to be included in all the transfers for this balance.
         */
        public Builder transferReference(String transferReference) {
            Utils.checkNotNull(transferReference, "transferReference");
            this.transferReference = JsonNullable.of(transferReference);
            return this;
        }

        /**
         * The transfer reference set to be included in all the transfers for this balance.
         */
        public Builder transferReference(JsonNullable<String> transferReference) {
            Utils.checkNotNull(transferReference, "transferReference");
            this.transferReference = transferReference;
            return this;
        }


        /**
         * The destination where the available amount will be automatically transferred to according to the configured
         * transfer frequency.
         */
        public Builder transferDestination(TransferDestination transferDestination) {
            Utils.checkNotNull(transferDestination, "transferDestination");
            this.transferDestination = JsonNullable.of(transferDestination);
            return this;
        }

        /**
         * The destination where the available amount will be automatically transferred to according to the configured
         * transfer frequency.
         */
        public Builder transferDestination(JsonNullable<? extends TransferDestination> transferDestination) {
            Utils.checkNotNull(transferDestination, "transferDestination");
            this.transferDestination = transferDestination;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder availableAmount(Amount availableAmount) {
            Utils.checkNotNull(availableAmount, "availableAmount");
            this.availableAmount = Optional.ofNullable(availableAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder availableAmount(Optional<? extends Amount> availableAmount) {
            Utils.checkNotNull(availableAmount, "availableAmount");
            this.availableAmount = availableAmount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder pendingAmount(Amount pendingAmount) {
            Utils.checkNotNull(pendingAmount, "pendingAmount");
            this.pendingAmount = Optional.ofNullable(pendingAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder pendingAmount(Optional<? extends Amount> pendingAmount) {
            Utils.checkNotNull(pendingAmount, "pendingAmount");
            this.pendingAmount = pendingAmount;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Links links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends Links> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public EntityBalance build() {

            return new EntityBalance(
                resource, id, mode,
                createdAt, currency, description,
                status, transferFrequency, transferThreshold,
                transferReference, transferDestination, availableAmount,
                pendingAmount, links);
        }

    }
}
