/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class EntityBalanceReport {
    /**
     * Indicates the response contains a balance report object. Will always contain the string `balance-report` for this
     * endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balanceId")
    private Optional<String> balanceId;

    /**
     * The time zone used for the from and until parameters. Currently only time zone `Europe/Amsterdam` is supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeZone")
    private Optional<String> timeZone;

    /**
     * The start date of the report, in `YYYY-MM-DD` format. The from date is 'inclusive', and in Central European Time.
     * This means a report with for example `from=2024-01-01` will include movements of 2024-01-01 00:00:00 CET and
     * onwards.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    private Optional<String> from;

    /**
     * The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
     * This means a report with for example `until=2024-02-01` will include movements up until 2024-01-31 23:59:59 CET.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("until")
    private Optional<String> until;

    /**
     * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped by
     * status (e.g. `pending`, `available`), then by direction of movement (e.g. moved from pending to available), then
     * by transaction type, and then by other sub-groupings where available (e.g. payment method).
     * 
     * <p>With the `transaction-categories` format, transactions are grouped by transaction type, then by direction of
     * movement, and then again by other sub-groupings where available.
     * 
     * <p>Both reporting formats will always contain opening and closing amounts that correspond to the start and end dates
     * of the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grouping")
    private Optional<? extends Grouping> grouping;

    /**
     * Totals are grouped according to the chosen grouping rule. The example response should give a good idea of what a
     * typical grouping looks like.
     * 
     * <p>If grouping `status-balances` is chosen, the main grouping is as follows:
     * 
     * <p>* `pendingBalance` containing an `open`, `pending`, `movedToAvailable`, and `close` sub-group
     * * `availableBalance` containing an `open`, `movedFromPending`, `immediatelyAvailable`, and `close` sub-group
     * 
     * <p>If grouping `transaction-categories` is chosen, the main grouping is as follows:
     * 
     * <p>* `open` and `close` groups, each containing a `pending` and `available` sub-group
     * * Transaction type groups such as `payments`, `refunds`, `chargebacks`, `capital`, `transfers`, `fee-prepayments`, `corrections`, `topups`
     * each containing a `pending`, `movedToAvailable`, and
     * `immediatelyAvailable` sub-group
     * 
     * <p>Each sub-group typically has:
     * 
     * <p>* An `amount` object containing the group's total amount
     * * A `count` integer if relevant (for example, counting the number of refunds)
     * * A `subtotals` array containing more sub-group objects if applicable
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totals")
    private Optional<? extends Totals> totals;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends EntityBalanceReportLinks> links;

    @JsonCreator
    public EntityBalanceReport(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("balanceId") Optional<String> balanceId,
            @JsonProperty("timeZone") Optional<String> timeZone,
            @JsonProperty("from") Optional<String> from,
            @JsonProperty("until") Optional<String> until,
            @JsonProperty("grouping") Optional<? extends Grouping> grouping,
            @JsonProperty("totals") Optional<? extends Totals> totals,
            @JsonProperty("_links") Optional<? extends EntityBalanceReportLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(balanceId, "balanceId");
        Utils.checkNotNull(timeZone, "timeZone");
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(until, "until");
        Utils.checkNotNull(grouping, "grouping");
        Utils.checkNotNull(totals, "totals");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.balanceId = balanceId;
        this.timeZone = timeZone;
        this.from = from;
        this.until = until;
        this.grouping = grouping;
        this.totals = totals;
        this.links = links;
    }
    
    public EntityBalanceReport() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Indicates the response contains a balance report object. Will always contain the string `balance-report` for this
     * endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    @JsonIgnore
    public Optional<String> balanceId() {
        return balanceId;
    }

    /**
     * The time zone used for the from and until parameters. Currently only time zone `Europe/Amsterdam` is supported.
     */
    @JsonIgnore
    public Optional<String> timeZone() {
        return timeZone;
    }

    /**
     * The start date of the report, in `YYYY-MM-DD` format. The from date is 'inclusive', and in Central European Time.
     * This means a report with for example `from=2024-01-01` will include movements of 2024-01-01 00:00:00 CET and
     * onwards.
     */
    @JsonIgnore
    public Optional<String> from() {
        return from;
    }

    /**
     * The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
     * This means a report with for example `until=2024-02-01` will include movements up until 2024-01-31 23:59:59 CET.
     */
    @JsonIgnore
    public Optional<String> until() {
        return until;
    }

    /**
     * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped by
     * status (e.g. `pending`, `available`), then by direction of movement (e.g. moved from pending to available), then
     * by transaction type, and then by other sub-groupings where available (e.g. payment method).
     * 
     * <p>With the `transaction-categories` format, transactions are grouped by transaction type, then by direction of
     * movement, and then again by other sub-groupings where available.
     * 
     * <p>Both reporting formats will always contain opening and closing amounts that correspond to the start and end dates
     * of the report.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Grouping> grouping() {
        return (Optional<Grouping>) grouping;
    }

    /**
     * Totals are grouped according to the chosen grouping rule. The example response should give a good idea of what a
     * typical grouping looks like.
     * 
     * <p>If grouping `status-balances` is chosen, the main grouping is as follows:
     * 
     * <p>* `pendingBalance` containing an `open`, `pending`, `movedToAvailable`, and `close` sub-group
     * * `availableBalance` containing an `open`, `movedFromPending`, `immediatelyAvailable`, and `close` sub-group
     * 
     * <p>If grouping `transaction-categories` is chosen, the main grouping is as follows:
     * 
     * <p>* `open` and `close` groups, each containing a `pending` and `available` sub-group
     * * Transaction type groups such as `payments`, `refunds`, `chargebacks`, `capital`, `transfers`, `fee-prepayments`, `corrections`, `topups`
     * each containing a `pending`, `movedToAvailable`, and
     * `immediatelyAvailable` sub-group
     * 
     * <p>Each sub-group typically has:
     * 
     * <p>* An `amount` object containing the group's total amount
     * * A `count` integer if relevant (for example, counting the number of refunds)
     * * A `subtotals` array containing more sub-group objects if applicable
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Totals> totals() {
        return (Optional<Totals>) totals;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EntityBalanceReportLinks> links() {
        return (Optional<EntityBalanceReportLinks>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a balance report object. Will always contain the string `balance-report` for this
     * endpoint.
     */
    public EntityBalanceReport withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains a balance report object. Will always contain the string `balance-report` for this
     * endpoint.
     */
    public EntityBalanceReport withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public EntityBalanceReport withBalanceId(String balanceId) {
        Utils.checkNotNull(balanceId, "balanceId");
        this.balanceId = Optional.ofNullable(balanceId);
        return this;
    }


    public EntityBalanceReport withBalanceId(Optional<String> balanceId) {
        Utils.checkNotNull(balanceId, "balanceId");
        this.balanceId = balanceId;
        return this;
    }

    /**
     * The time zone used for the from and until parameters. Currently only time zone `Europe/Amsterdam` is supported.
     */
    public EntityBalanceReport withTimeZone(String timeZone) {
        Utils.checkNotNull(timeZone, "timeZone");
        this.timeZone = Optional.ofNullable(timeZone);
        return this;
    }


    /**
     * The time zone used for the from and until parameters. Currently only time zone `Europe/Amsterdam` is supported.
     */
    public EntityBalanceReport withTimeZone(Optional<String> timeZone) {
        Utils.checkNotNull(timeZone, "timeZone");
        this.timeZone = timeZone;
        return this;
    }

    /**
     * The start date of the report, in `YYYY-MM-DD` format. The from date is 'inclusive', and in Central European Time.
     * This means a report with for example `from=2024-01-01` will include movements of 2024-01-01 00:00:00 CET and
     * onwards.
     */
    public EntityBalanceReport withFrom(String from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }


    /**
     * The start date of the report, in `YYYY-MM-DD` format. The from date is 'inclusive', and in Central European Time.
     * This means a report with for example `from=2024-01-01` will include movements of 2024-01-01 00:00:00 CET and
     * onwards.
     */
    public EntityBalanceReport withFrom(Optional<String> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    /**
     * The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
     * This means a report with for example `until=2024-02-01` will include movements up until 2024-01-31 23:59:59 CET.
     */
    public EntityBalanceReport withUntil(String until) {
        Utils.checkNotNull(until, "until");
        this.until = Optional.ofNullable(until);
        return this;
    }


    /**
     * The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
     * This means a report with for example `until=2024-02-01` will include movements up until 2024-01-31 23:59:59 CET.
     */
    public EntityBalanceReport withUntil(Optional<String> until) {
        Utils.checkNotNull(until, "until");
        this.until = until;
        return this;
    }

    /**
     * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped by
     * status (e.g. `pending`, `available`), then by direction of movement (e.g. moved from pending to available), then
     * by transaction type, and then by other sub-groupings where available (e.g. payment method).
     * 
     * <p>With the `transaction-categories` format, transactions are grouped by transaction type, then by direction of
     * movement, and then again by other sub-groupings where available.
     * 
     * <p>Both reporting formats will always contain opening and closing amounts that correspond to the start and end dates
     * of the report.
     */
    public EntityBalanceReport withGrouping(Grouping grouping) {
        Utils.checkNotNull(grouping, "grouping");
        this.grouping = Optional.ofNullable(grouping);
        return this;
    }


    /**
     * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped by
     * status (e.g. `pending`, `available`), then by direction of movement (e.g. moved from pending to available), then
     * by transaction type, and then by other sub-groupings where available (e.g. payment method).
     * 
     * <p>With the `transaction-categories` format, transactions are grouped by transaction type, then by direction of
     * movement, and then again by other sub-groupings where available.
     * 
     * <p>Both reporting formats will always contain opening and closing amounts that correspond to the start and end dates
     * of the report.
     */
    public EntityBalanceReport withGrouping(Optional<? extends Grouping> grouping) {
        Utils.checkNotNull(grouping, "grouping");
        this.grouping = grouping;
        return this;
    }

    /**
     * Totals are grouped according to the chosen grouping rule. The example response should give a good idea of what a
     * typical grouping looks like.
     * 
     * <p>If grouping `status-balances` is chosen, the main grouping is as follows:
     * 
     * <p>* `pendingBalance` containing an `open`, `pending`, `movedToAvailable`, and `close` sub-group
     * * `availableBalance` containing an `open`, `movedFromPending`, `immediatelyAvailable`, and `close` sub-group
     * 
     * <p>If grouping `transaction-categories` is chosen, the main grouping is as follows:
     * 
     * <p>* `open` and `close` groups, each containing a `pending` and `available` sub-group
     * * Transaction type groups such as `payments`, `refunds`, `chargebacks`, `capital`, `transfers`, `fee-prepayments`, `corrections`, `topups`
     * each containing a `pending`, `movedToAvailable`, and
     * `immediatelyAvailable` sub-group
     * 
     * <p>Each sub-group typically has:
     * 
     * <p>* An `amount` object containing the group's total amount
     * * A `count` integer if relevant (for example, counting the number of refunds)
     * * A `subtotals` array containing more sub-group objects if applicable
     */
    public EntityBalanceReport withTotals(Totals totals) {
        Utils.checkNotNull(totals, "totals");
        this.totals = Optional.ofNullable(totals);
        return this;
    }


    /**
     * Totals are grouped according to the chosen grouping rule. The example response should give a good idea of what a
     * typical grouping looks like.
     * 
     * <p>If grouping `status-balances` is chosen, the main grouping is as follows:
     * 
     * <p>* `pendingBalance` containing an `open`, `pending`, `movedToAvailable`, and `close` sub-group
     * * `availableBalance` containing an `open`, `movedFromPending`, `immediatelyAvailable`, and `close` sub-group
     * 
     * <p>If grouping `transaction-categories` is chosen, the main grouping is as follows:
     * 
     * <p>* `open` and `close` groups, each containing a `pending` and `available` sub-group
     * * Transaction type groups such as `payments`, `refunds`, `chargebacks`, `capital`, `transfers`, `fee-prepayments`, `corrections`, `topups`
     * each containing a `pending`, `movedToAvailable`, and
     * `immediatelyAvailable` sub-group
     * 
     * <p>Each sub-group typically has:
     * 
     * <p>* An `amount` object containing the group's total amount
     * * A `count` integer if relevant (for example, counting the number of refunds)
     * * A `subtotals` array containing more sub-group objects if applicable
     */
    public EntityBalanceReport withTotals(Optional<? extends Totals> totals) {
        Utils.checkNotNull(totals, "totals");
        this.totals = totals;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityBalanceReport withLinks(EntityBalanceReportLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityBalanceReport withLinks(Optional<? extends EntityBalanceReportLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityBalanceReport other = (EntityBalanceReport) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.balanceId, other.balanceId) &&
            Utils.enhancedDeepEquals(this.timeZone, other.timeZone) &&
            Utils.enhancedDeepEquals(this.from, other.from) &&
            Utils.enhancedDeepEquals(this.until, other.until) &&
            Utils.enhancedDeepEquals(this.grouping, other.grouping) &&
            Utils.enhancedDeepEquals(this.totals, other.totals) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, balanceId, timeZone,
            from, until, grouping,
            totals, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityBalanceReport.class,
                "resource", resource,
                "balanceId", balanceId,
                "timeZone", timeZone,
                "from", from,
                "until", until,
                "grouping", grouping,
                "totals", totals,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource = Optional.empty();

        private Optional<String> balanceId = Optional.empty();

        private Optional<String> timeZone = Optional.empty();

        private Optional<String> from = Optional.empty();

        private Optional<String> until = Optional.empty();

        private Optional<? extends Grouping> grouping = Optional.empty();

        private Optional<? extends Totals> totals = Optional.empty();

        private Optional<? extends EntityBalanceReportLinks> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a balance report object. Will always contain the string `balance-report` for this
         * endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a balance report object. Will always contain the string `balance-report` for this
         * endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        public Builder balanceId(String balanceId) {
            Utils.checkNotNull(balanceId, "balanceId");
            this.balanceId = Optional.ofNullable(balanceId);
            return this;
        }

        public Builder balanceId(Optional<String> balanceId) {
            Utils.checkNotNull(balanceId, "balanceId");
            this.balanceId = balanceId;
            return this;
        }


        /**
         * The time zone used for the from and until parameters. Currently only time zone `Europe/Amsterdam` is supported.
         */
        public Builder timeZone(String timeZone) {
            Utils.checkNotNull(timeZone, "timeZone");
            this.timeZone = Optional.ofNullable(timeZone);
            return this;
        }

        /**
         * The time zone used for the from and until parameters. Currently only time zone `Europe/Amsterdam` is supported.
         */
        public Builder timeZone(Optional<String> timeZone) {
            Utils.checkNotNull(timeZone, "timeZone");
            this.timeZone = timeZone;
            return this;
        }


        /**
         * The start date of the report, in `YYYY-MM-DD` format. The from date is 'inclusive', and in Central European Time.
         * This means a report with for example `from=2024-01-01` will include movements of 2024-01-01 00:00:00 CET and
         * onwards.
         */
        public Builder from(String from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        /**
         * The start date of the report, in `YYYY-MM-DD` format. The from date is 'inclusive', and in Central European Time.
         * This means a report with for example `from=2024-01-01` will include movements of 2024-01-01 00:00:00 CET and
         * onwards.
         */
        public Builder from(Optional<String> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }


        /**
         * The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
         * This means a report with for example `until=2024-02-01` will include movements up until 2024-01-31 23:59:59 CET.
         */
        public Builder until(String until) {
            Utils.checkNotNull(until, "until");
            this.until = Optional.ofNullable(until);
            return this;
        }

        /**
         * The end date of the report, in `YYYY-MM-DD` format. The until date is 'exclusive', and in Central European Time.
         * This means a report with for example `until=2024-02-01` will include movements up until 2024-01-31 23:59:59 CET.
         */
        public Builder until(Optional<String> until) {
            Utils.checkNotNull(until, "until");
            this.until = until;
            return this;
        }


        /**
         * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped by
         * status (e.g. `pending`, `available`), then by direction of movement (e.g. moved from pending to available), then
         * by transaction type, and then by other sub-groupings where available (e.g. payment method).
         * 
         * <p>With the `transaction-categories` format, transactions are grouped by transaction type, then by direction of
         * movement, and then again by other sub-groupings where available.
         * 
         * <p>Both reporting formats will always contain opening and closing amounts that correspond to the start and end dates
         * of the report.
         */
        public Builder grouping(Grouping grouping) {
            Utils.checkNotNull(grouping, "grouping");
            this.grouping = Optional.ofNullable(grouping);
            return this;
        }

        /**
         * You can retrieve reports in two different formats. With the `status-balances` format, transactions are grouped by
         * status (e.g. `pending`, `available`), then by direction of movement (e.g. moved from pending to available), then
         * by transaction type, and then by other sub-groupings where available (e.g. payment method).
         * 
         * <p>With the `transaction-categories` format, transactions are grouped by transaction type, then by direction of
         * movement, and then again by other sub-groupings where available.
         * 
         * <p>Both reporting formats will always contain opening and closing amounts that correspond to the start and end dates
         * of the report.
         */
        public Builder grouping(Optional<? extends Grouping> grouping) {
            Utils.checkNotNull(grouping, "grouping");
            this.grouping = grouping;
            return this;
        }


        /**
         * Totals are grouped according to the chosen grouping rule. The example response should give a good idea of what a
         * typical grouping looks like.
         * 
         * <p>If grouping `status-balances` is chosen, the main grouping is as follows:
         * 
         * <p>* `pendingBalance` containing an `open`, `pending`, `movedToAvailable`, and `close` sub-group
         * * `availableBalance` containing an `open`, `movedFromPending`, `immediatelyAvailable`, and `close` sub-group
         * 
         * <p>If grouping `transaction-categories` is chosen, the main grouping is as follows:
         * 
         * <p>* `open` and `close` groups, each containing a `pending` and `available` sub-group
         * * Transaction type groups such as `payments`, `refunds`, `chargebacks`, `capital`, `transfers`, `fee-prepayments`, `corrections`, `topups`
         * each containing a `pending`, `movedToAvailable`, and
         * `immediatelyAvailable` sub-group
         * 
         * <p>Each sub-group typically has:
         * 
         * <p>* An `amount` object containing the group's total amount
         * * A `count` integer if relevant (for example, counting the number of refunds)
         * * A `subtotals` array containing more sub-group objects if applicable
         */
        public Builder totals(Totals totals) {
            Utils.checkNotNull(totals, "totals");
            this.totals = Optional.ofNullable(totals);
            return this;
        }

        /**
         * Totals are grouped according to the chosen grouping rule. The example response should give a good idea of what a
         * typical grouping looks like.
         * 
         * <p>If grouping `status-balances` is chosen, the main grouping is as follows:
         * 
         * <p>* `pendingBalance` containing an `open`, `pending`, `movedToAvailable`, and `close` sub-group
         * * `availableBalance` containing an `open`, `movedFromPending`, `immediatelyAvailable`, and `close` sub-group
         * 
         * <p>If grouping `transaction-categories` is chosen, the main grouping is as follows:
         * 
         * <p>* `open` and `close` groups, each containing a `pending` and `available` sub-group
         * * Transaction type groups such as `payments`, `refunds`, `chargebacks`, `capital`, `transfers`, `fee-prepayments`, `corrections`, `topups`
         * each containing a `pending`, `movedToAvailable`, and
         * `immediatelyAvailable` sub-group
         * 
         * <p>Each sub-group typically has:
         * 
         * <p>* An `amount` object containing the group's total amount
         * * A `count` integer if relevant (for example, counting the number of refunds)
         * * A `subtotals` array containing more sub-group objects if applicable
         */
        public Builder totals(Optional<? extends Totals> totals) {
            Utils.checkNotNull(totals, "totals");
            this.totals = totals;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(EntityBalanceReportLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends EntityBalanceReportLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public EntityBalanceReport build() {

            return new EntityBalanceReport(
                resource, balanceId, timeZone,
                from, until, grouping,
                totals, links);
        }

    }
}
