/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;


public class SalesInvoiceLineItem {
    /**
     * A description of the line item. For example *LEGO 4440 Forest Police Station*.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The number of items.
     */
    @JsonProperty("quantity")
    private long quantity;

    /**
     * The vat rate to be applied to this line item.
     */
    @JsonProperty("vatRate")
    private String vatRate;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("unitPrice")
    private Amount unitPrice;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount")
    private JsonNullable<? extends SalesInvoiceDiscount> discount;

    @JsonCreator
    public SalesInvoiceLineItem(
            @JsonProperty("description") String description,
            @JsonProperty("quantity") long quantity,
            @JsonProperty("vatRate") String vatRate,
            @JsonProperty("unitPrice") Amount unitPrice,
            @JsonProperty("discount") JsonNullable<? extends SalesInvoiceDiscount> discount) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(vatRate, "vatRate");
        Utils.checkNotNull(unitPrice, "unitPrice");
        Utils.checkNotNull(discount, "discount");
        this.description = description;
        this.quantity = quantity;
        this.vatRate = vatRate;
        this.unitPrice = unitPrice;
        this.discount = discount;
    }
    
    public SalesInvoiceLineItem(
            String description,
            long quantity,
            String vatRate,
            Amount unitPrice) {
        this(description, quantity, vatRate,
            unitPrice, JsonNullable.undefined());
    }

    /**
     * A description of the line item. For example *LEGO 4440 Forest Police Station*.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The number of items.
     */
    @JsonIgnore
    public long quantity() {
        return quantity;
    }

    /**
     * The vat rate to be applied to this line item.
     */
    @JsonIgnore
    public String vatRate() {
        return vatRate;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount unitPrice() {
        return unitPrice;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<SalesInvoiceDiscount> discount() {
        return (JsonNullable<SalesInvoiceDiscount>) discount;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A description of the line item. For example *LEGO 4440 Forest Police Station*.
     */
    public SalesInvoiceLineItem withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The number of items.
     */
    public SalesInvoiceLineItem withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * The vat rate to be applied to this line item.
     */
    public SalesInvoiceLineItem withVatRate(String vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = vatRate;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public SalesInvoiceLineItem withUnitPrice(Amount unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = unitPrice;
        return this;
    }

    public SalesInvoiceLineItem withDiscount(SalesInvoiceDiscount discount) {
        Utils.checkNotNull(discount, "discount");
        this.discount = JsonNullable.of(discount);
        return this;
    }

    public SalesInvoiceLineItem withDiscount(JsonNullable<? extends SalesInvoiceDiscount> discount) {
        Utils.checkNotNull(discount, "discount");
        this.discount = discount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SalesInvoiceLineItem other = (SalesInvoiceLineItem) o;
        return 
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.vatRate, other.vatRate) &&
            Utils.enhancedDeepEquals(this.unitPrice, other.unitPrice) &&
            Utils.enhancedDeepEquals(this.discount, other.discount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            description, quantity, vatRate,
            unitPrice, discount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SalesInvoiceLineItem.class,
                "description", description,
                "quantity", quantity,
                "vatRate", vatRate,
                "unitPrice", unitPrice,
                "discount", discount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String description;

        private Long quantity;

        private String vatRate;

        private Amount unitPrice;

        private JsonNullable<? extends SalesInvoiceDiscount> discount = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A description of the line item. For example *LEGO 4440 Forest Police Station*.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The number of items.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }


        /**
         * The vat rate to be applied to this line item.
         */
        public Builder vatRate(String vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = vatRate;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder unitPrice(Amount unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = unitPrice;
            return this;
        }


        public Builder discount(SalesInvoiceDiscount discount) {
            Utils.checkNotNull(discount, "discount");
            this.discount = JsonNullable.of(discount);
            return this;
        }

        public Builder discount(JsonNullable<? extends SalesInvoiceDiscount> discount) {
            Utils.checkNotNull(discount, "discount");
            this.discount = discount;
            return this;
        }

        public SalesInvoiceLineItem build() {

            return new SalesInvoiceLineItem(
                description, quantity, vatRate,
                unitPrice, discount);
        }

    }
}
