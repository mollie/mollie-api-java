/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * MethodResponse
 * 
 * <p>Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment
 * method and your customer will skip the selection screen and is sent directly to the chosen payment method. The
 * parameter enables you to fully integrate the payment method selection into your website.
 * 
 * <p>You can also specify the methods in an array. By doing so we will still show the payment method selection screen
 * but will only show the methods specified in the array. For example, you can use this functionality to only show
 * payment methods from a specific country to your customer `['bancontact', 'belfius']`.
 */
@JsonDeserialize(using = MethodResponse._Deserializer.class)
@JsonSerialize(using = MethodResponse._Serializer.class)
public class MethodResponse {

    public static final MethodResponse ALMA = new MethodResponse("alma");
    public static final MethodResponse APPLEPAY = new MethodResponse("applepay");
    public static final MethodResponse BACS = new MethodResponse("bacs");
    public static final MethodResponse BANCOMATPAY = new MethodResponse("bancomatpay");
    public static final MethodResponse BANCONTACT = new MethodResponse("bancontact");
    public static final MethodResponse BANKTRANSFER = new MethodResponse("banktransfer");
    public static final MethodResponse BELFIUS = new MethodResponse("belfius");
    public static final MethodResponse BILLIE = new MethodResponse("billie");
    public static final MethodResponse BIZUM = new MethodResponse("bizum");
    public static final MethodResponse BLIK = new MethodResponse("blik");
    public static final MethodResponse CREDITCARD = new MethodResponse("creditcard");
    public static final MethodResponse DIRECTDEBIT = new MethodResponse("directdebit");
    public static final MethodResponse EPS = new MethodResponse("eps");
    public static final MethodResponse GIFTCARD = new MethodResponse("giftcard");
    public static final MethodResponse IDEAL = new MethodResponse("ideal");
    public static final MethodResponse IN3 = new MethodResponse("in3");
    public static final MethodResponse KBC = new MethodResponse("kbc");
    public static final MethodResponse KLARNA = new MethodResponse("klarna");
    public static final MethodResponse KLARNAPAYLATER = new MethodResponse("klarnapaylater");
    public static final MethodResponse KLARNAPAYNOW = new MethodResponse("klarnapaynow");
    public static final MethodResponse KLARNASLICEIT = new MethodResponse("klarnasliceit");
    public static final MethodResponse MBWAY = new MethodResponse("mbway");
    public static final MethodResponse MULTIBANCO = new MethodResponse("multibanco");
    public static final MethodResponse MYBANK = new MethodResponse("mybank");
    public static final MethodResponse PAYBYBANK = new MethodResponse("paybybank");
    public static final MethodResponse PAYCONIQ = new MethodResponse("payconiq");
    public static final MethodResponse PAYPAL = new MethodResponse("paypal");
    public static final MethodResponse PAYSAFECARD = new MethodResponse("paysafecard");
    public static final MethodResponse POINTOFSALE = new MethodResponse("pointofsale");
    public static final MethodResponse PRZELEWY24 = new MethodResponse("przelewy24");
    public static final MethodResponse RIVERTY = new MethodResponse("riverty");
    public static final MethodResponse SATISPAY = new MethodResponse("satispay");
    public static final MethodResponse SWISH = new MethodResponse("swish");
    public static final MethodResponse TRUSTLY = new MethodResponse("trustly");
    public static final MethodResponse TWINT = new MethodResponse("twint");
    public static final MethodResponse VOUCHER = new MethodResponse("voucher");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, MethodResponse> values = createValuesMap();
    private static final Map<String, MethodResponseEnum> enums = createEnumsMap();

    private final String value;

    private MethodResponse(String value) {
        this.value = value;
    }

    /**
     * Returns a MethodResponse with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as MethodResponse
     */ 
    public static MethodResponse of(String value) {
        synchronized (MethodResponse.class) {
            return values.computeIfAbsent(value, v -> new MethodResponse(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<MethodResponseEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        MethodResponse other = (MethodResponse) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "MethodResponse [value=" + value + "]";
    }

    // return an array just like an enum
    public static MethodResponse[] values() {
        synchronized (MethodResponse.class) {
            return values.values().toArray(new MethodResponse[] {});
        }
    }

    private static final Map<String, MethodResponse> createValuesMap() {
        Map<String, MethodResponse> map = new LinkedHashMap<>();
        map.put("alma", ALMA);
        map.put("applepay", APPLEPAY);
        map.put("bacs", BACS);
        map.put("bancomatpay", BANCOMATPAY);
        map.put("bancontact", BANCONTACT);
        map.put("banktransfer", BANKTRANSFER);
        map.put("belfius", BELFIUS);
        map.put("billie", BILLIE);
        map.put("bizum", BIZUM);
        map.put("blik", BLIK);
        map.put("creditcard", CREDITCARD);
        map.put("directdebit", DIRECTDEBIT);
        map.put("eps", EPS);
        map.put("giftcard", GIFTCARD);
        map.put("ideal", IDEAL);
        map.put("in3", IN3);
        map.put("kbc", KBC);
        map.put("klarna", KLARNA);
        map.put("klarnapaylater", KLARNAPAYLATER);
        map.put("klarnapaynow", KLARNAPAYNOW);
        map.put("klarnasliceit", KLARNASLICEIT);
        map.put("mbway", MBWAY);
        map.put("multibanco", MULTIBANCO);
        map.put("mybank", MYBANK);
        map.put("paybybank", PAYBYBANK);
        map.put("payconiq", PAYCONIQ);
        map.put("paypal", PAYPAL);
        map.put("paysafecard", PAYSAFECARD);
        map.put("pointofsale", POINTOFSALE);
        map.put("przelewy24", PRZELEWY24);
        map.put("riverty", RIVERTY);
        map.put("satispay", SATISPAY);
        map.put("swish", SWISH);
        map.put("trustly", TRUSTLY);
        map.put("twint", TWINT);
        map.put("voucher", VOUCHER);
        return map;
    }

    private static final Map<String, MethodResponseEnum> createEnumsMap() {
        Map<String, MethodResponseEnum> map = new HashMap<>();
        map.put("alma", MethodResponseEnum.ALMA);
        map.put("applepay", MethodResponseEnum.APPLEPAY);
        map.put("bacs", MethodResponseEnum.BACS);
        map.put("bancomatpay", MethodResponseEnum.BANCOMATPAY);
        map.put("bancontact", MethodResponseEnum.BANCONTACT);
        map.put("banktransfer", MethodResponseEnum.BANKTRANSFER);
        map.put("belfius", MethodResponseEnum.BELFIUS);
        map.put("billie", MethodResponseEnum.BILLIE);
        map.put("bizum", MethodResponseEnum.BIZUM);
        map.put("blik", MethodResponseEnum.BLIK);
        map.put("creditcard", MethodResponseEnum.CREDITCARD);
        map.put("directdebit", MethodResponseEnum.DIRECTDEBIT);
        map.put("eps", MethodResponseEnum.EPS);
        map.put("giftcard", MethodResponseEnum.GIFTCARD);
        map.put("ideal", MethodResponseEnum.IDEAL);
        map.put("in3", MethodResponseEnum.IN3);
        map.put("kbc", MethodResponseEnum.KBC);
        map.put("klarna", MethodResponseEnum.KLARNA);
        map.put("klarnapaylater", MethodResponseEnum.KLARNAPAYLATER);
        map.put("klarnapaynow", MethodResponseEnum.KLARNAPAYNOW);
        map.put("klarnasliceit", MethodResponseEnum.KLARNASLICEIT);
        map.put("mbway", MethodResponseEnum.MBWAY);
        map.put("multibanco", MethodResponseEnum.MULTIBANCO);
        map.put("mybank", MethodResponseEnum.MYBANK);
        map.put("paybybank", MethodResponseEnum.PAYBYBANK);
        map.put("payconiq", MethodResponseEnum.PAYCONIQ);
        map.put("paypal", MethodResponseEnum.PAYPAL);
        map.put("paysafecard", MethodResponseEnum.PAYSAFECARD);
        map.put("pointofsale", MethodResponseEnum.POINTOFSALE);
        map.put("przelewy24", MethodResponseEnum.PRZELEWY24);
        map.put("riverty", MethodResponseEnum.RIVERTY);
        map.put("satispay", MethodResponseEnum.SATISPAY);
        map.put("swish", MethodResponseEnum.SWISH);
        map.put("trustly", MethodResponseEnum.TRUSTLY);
        map.put("twint", MethodResponseEnum.TWINT);
        map.put("voucher", MethodResponseEnum.VOUCHER);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<MethodResponse> {

        protected _Serializer() {
            super(MethodResponse.class);
        }

        @Override
        public void serialize(MethodResponse value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<MethodResponse> {

        protected _Deserializer() {
            super(MethodResponse.class);
        }

        @Override
        public MethodResponse deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return MethodResponse.of(v);
        }
    }
    
    public enum MethodResponseEnum {

        ALMA("alma"),
        APPLEPAY("applepay"),
        BACS("bacs"),
        BANCOMATPAY("bancomatpay"),
        BANCONTACT("bancontact"),
        BANKTRANSFER("banktransfer"),
        BELFIUS("belfius"),
        BILLIE("billie"),
        BIZUM("bizum"),
        BLIK("blik"),
        CREDITCARD("creditcard"),
        DIRECTDEBIT("directdebit"),
        EPS("eps"),
        GIFTCARD("giftcard"),
        IDEAL("ideal"),
        IN3("in3"),
        KBC("kbc"),
        KLARNA("klarna"),
        KLARNAPAYLATER("klarnapaylater"),
        KLARNAPAYNOW("klarnapaynow"),
        KLARNASLICEIT("klarnasliceit"),
        MBWAY("mbway"),
        MULTIBANCO("multibanco"),
        MYBANK("mybank"),
        PAYBYBANK("paybybank"),
        PAYCONIQ("payconiq"),
        PAYPAL("paypal"),
        PAYSAFECARD("paysafecard"),
        POINTOFSALE("pointofsale"),
        PRZELEWY24("przelewy24"),
        RIVERTY("riverty"),
        SATISPAY("satispay"),
        SWISH("swish"),
        TRUSTLY("trustly"),
        TWINT("twint"),
        VOUCHER("voucher"),;

        private final String value;

        private MethodResponseEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

