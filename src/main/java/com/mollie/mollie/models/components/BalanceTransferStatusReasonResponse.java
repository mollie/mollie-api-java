/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * BalanceTransferStatusReasonResponse
 * 
 * <p>A machine-readable code that indicates the reason for the transfer's status.
 */
@JsonDeserialize(using = BalanceTransferStatusReasonResponse._Deserializer.class)
@JsonSerialize(using = BalanceTransferStatusReasonResponse._Serializer.class)
public class BalanceTransferStatusReasonResponse {

    public static final BalanceTransferStatusReasonResponse REQUEST_CREATED = new BalanceTransferStatusReasonResponse("request_created");
    public static final BalanceTransferStatusReasonResponse SUCCESS = new BalanceTransferStatusReasonResponse("success");
    public static final BalanceTransferStatusReasonResponse SOURCE_NOT_ALLOWED = new BalanceTransferStatusReasonResponse("source_not_allowed");
    public static final BalanceTransferStatusReasonResponse DESTINATION_NOT_ALLOWED = new BalanceTransferStatusReasonResponse("destination_not_allowed");
    public static final BalanceTransferStatusReasonResponse INSUFFICIENT_FUNDS = new BalanceTransferStatusReasonResponse("insufficient_funds");
    public static final BalanceTransferStatusReasonResponse INVALID_SOURCE_BALANCE = new BalanceTransferStatusReasonResponse("invalid_source_balance");
    public static final BalanceTransferStatusReasonResponse INVALID_DESTINATION_BALANCE = new BalanceTransferStatusReasonResponse("invalid_destination_balance");
    public static final BalanceTransferStatusReasonResponse TRANSFER_REQUEST_EXPIRED = new BalanceTransferStatusReasonResponse("transfer_request_expired");
    public static final BalanceTransferStatusReasonResponse TRANSFER_LIMIT_REACHED = new BalanceTransferStatusReasonResponse("transfer_limit_reached");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, BalanceTransferStatusReasonResponse> values = createValuesMap();
    private static final Map<String, BalanceTransferStatusReasonResponseEnum> enums = createEnumsMap();

    private final String value;

    private BalanceTransferStatusReasonResponse(String value) {
        this.value = value;
    }

    /**
     * Returns a BalanceTransferStatusReasonResponse with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as BalanceTransferStatusReasonResponse
     */ 
    public static BalanceTransferStatusReasonResponse of(String value) {
        synchronized (BalanceTransferStatusReasonResponse.class) {
            return values.computeIfAbsent(value, v -> new BalanceTransferStatusReasonResponse(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<BalanceTransferStatusReasonResponseEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        BalanceTransferStatusReasonResponse other = (BalanceTransferStatusReasonResponse) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "BalanceTransferStatusReasonResponse [value=" + value + "]";
    }

    // return an array just like an enum
    public static BalanceTransferStatusReasonResponse[] values() {
        synchronized (BalanceTransferStatusReasonResponse.class) {
            return values.values().toArray(new BalanceTransferStatusReasonResponse[] {});
        }
    }

    private static final Map<String, BalanceTransferStatusReasonResponse> createValuesMap() {
        Map<String, BalanceTransferStatusReasonResponse> map = new LinkedHashMap<>();
        map.put("request_created", REQUEST_CREATED);
        map.put("success", SUCCESS);
        map.put("source_not_allowed", SOURCE_NOT_ALLOWED);
        map.put("destination_not_allowed", DESTINATION_NOT_ALLOWED);
        map.put("insufficient_funds", INSUFFICIENT_FUNDS);
        map.put("invalid_source_balance", INVALID_SOURCE_BALANCE);
        map.put("invalid_destination_balance", INVALID_DESTINATION_BALANCE);
        map.put("transfer_request_expired", TRANSFER_REQUEST_EXPIRED);
        map.put("transfer_limit_reached", TRANSFER_LIMIT_REACHED);
        return map;
    }

    private static final Map<String, BalanceTransferStatusReasonResponseEnum> createEnumsMap() {
        Map<String, BalanceTransferStatusReasonResponseEnum> map = new HashMap<>();
        map.put("request_created", BalanceTransferStatusReasonResponseEnum.REQUEST_CREATED);
        map.put("success", BalanceTransferStatusReasonResponseEnum.SUCCESS);
        map.put("source_not_allowed", BalanceTransferStatusReasonResponseEnum.SOURCE_NOT_ALLOWED);
        map.put("destination_not_allowed", BalanceTransferStatusReasonResponseEnum.DESTINATION_NOT_ALLOWED);
        map.put("insufficient_funds", BalanceTransferStatusReasonResponseEnum.INSUFFICIENT_FUNDS);
        map.put("invalid_source_balance", BalanceTransferStatusReasonResponseEnum.INVALID_SOURCE_BALANCE);
        map.put("invalid_destination_balance", BalanceTransferStatusReasonResponseEnum.INVALID_DESTINATION_BALANCE);
        map.put("transfer_request_expired", BalanceTransferStatusReasonResponseEnum.TRANSFER_REQUEST_EXPIRED);
        map.put("transfer_limit_reached", BalanceTransferStatusReasonResponseEnum.TRANSFER_LIMIT_REACHED);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<BalanceTransferStatusReasonResponse> {

        protected _Serializer() {
            super(BalanceTransferStatusReasonResponse.class);
        }

        @Override
        public void serialize(BalanceTransferStatusReasonResponse value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<BalanceTransferStatusReasonResponse> {

        protected _Deserializer() {
            super(BalanceTransferStatusReasonResponse.class);
        }

        @Override
        public BalanceTransferStatusReasonResponse deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return BalanceTransferStatusReasonResponse.of(v);
        }
    }
    
    public enum BalanceTransferStatusReasonResponseEnum {

        REQUEST_CREATED("request_created"),
        SUCCESS("success"),
        SOURCE_NOT_ALLOWED("source_not_allowed"),
        DESTINATION_NOT_ALLOWED("destination_not_allowed"),
        INSUFFICIENT_FUNDS("insufficient_funds"),
        INVALID_SOURCE_BALANCE("invalid_source_balance"),
        INVALID_DESTINATION_BALANCE("invalid_destination_balance"),
        TRANSFER_REQUEST_EXPIRED("transfer_request_expired"),
        TRANSFER_LIMIT_REACHED("transfer_limit_reached"),;

        private final String value;

        private BalanceTransferStatusReasonResponseEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

