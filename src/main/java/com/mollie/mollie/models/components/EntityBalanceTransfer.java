/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EntityBalanceTransfer {

    @JsonProperty("id")
    private String id;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("amount")
    private Amount amount;

    /**
     * A party involved in the balance transfer, either the sender or the receiver.
     */
    @JsonProperty("source")
    private EntityBalanceTransferParty source;

    /**
     * A party involved in the balance transfer, either the sender or the receiver.
     */
    @JsonProperty("destination")
    private EntityBalanceTransferParty destination;

    /**
     * The transfer description for initiating party.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The type of the transfer. Different fees may apply to different types of transfers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    private Optional<? extends BalanceTransferCategory> category;

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this
     * parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting
     * `testmode` to `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testmode")
    private JsonNullable<Boolean> testmode;

    @JsonCreator
    public EntityBalanceTransfer(
            @JsonProperty("id") String id,
            @JsonProperty("amount") Amount amount,
            @JsonProperty("source") EntityBalanceTransferParty source,
            @JsonProperty("destination") EntityBalanceTransferParty destination,
            @JsonProperty("description") String description,
            @JsonProperty("category") Optional<? extends BalanceTransferCategory> category,
            @JsonProperty("testmode") JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(destination, "destination");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(category, "category");
        Utils.checkNotNull(testmode, "testmode");
        this.id = id;
        this.amount = amount;
        this.source = source;
        this.destination = destination;
        this.description = description;
        this.category = category;
        this.testmode = testmode;
    }
    
    public EntityBalanceTransfer(
            String id,
            Amount amount,
            EntityBalanceTransferParty source,
            EntityBalanceTransferParty destination,
            String description) {
        this(id, amount, source,
            destination, description, Optional.empty(),
            JsonNullable.undefined());
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount amount() {
        return amount;
    }

    /**
     * A party involved in the balance transfer, either the sender or the receiver.
     */
    @JsonIgnore
    public EntityBalanceTransferParty source() {
        return source;
    }

    /**
     * A party involved in the balance transfer, either the sender or the receiver.
     */
    @JsonIgnore
    public EntityBalanceTransferParty destination() {
        return destination;
    }

    /**
     * The transfer description for initiating party.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The type of the transfer. Different fees may apply to different types of transfers.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BalanceTransferCategory> category() {
        return (Optional<BalanceTransferCategory>) category;
    }

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this
     * parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting
     * `testmode` to `true`.
     */
    @JsonIgnore
    public JsonNullable<Boolean> testmode() {
        return testmode;
    }

    public static Builder builder() {
        return new Builder();
    }


    public EntityBalanceTransfer withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalanceTransfer withAmount(Amount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * A party involved in the balance transfer, either the sender or the receiver.
     */
    public EntityBalanceTransfer withSource(EntityBalanceTransferParty source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * A party involved in the balance transfer, either the sender or the receiver.
     */
    public EntityBalanceTransfer withDestination(EntityBalanceTransferParty destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = destination;
        return this;
    }

    /**
     * The transfer description for initiating party.
     */
    public EntityBalanceTransfer withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The type of the transfer. Different fees may apply to different types of transfers.
     */
    public EntityBalanceTransfer withCategory(BalanceTransferCategory category) {
        Utils.checkNotNull(category, "category");
        this.category = Optional.ofNullable(category);
        return this;
    }


    /**
     * The type of the transfer. Different fees may apply to different types of transfers.
     */
    public EntityBalanceTransfer withCategory(Optional<? extends BalanceTransferCategory> category) {
        Utils.checkNotNull(category, "category");
        this.category = category;
        return this;
    }

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this
     * parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting
     * `testmode` to `true`.
     */
    public EntityBalanceTransfer withTestmode(boolean testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = JsonNullable.of(testmode);
        return this;
    }

    /**
     * Whether to create the entity in test mode or live mode.
     * 
     * <p>Most API credentials are specifically created for either live mode or test mode, in which case this
     * parameter can be
     * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     * setting
     * `testmode` to `true`.
     */
    public EntityBalanceTransfer withTestmode(JsonNullable<Boolean> testmode) {
        Utils.checkNotNull(testmode, "testmode");
        this.testmode = testmode;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityBalanceTransfer other = (EntityBalanceTransfer) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.source, other.source) &&
            Utils.enhancedDeepEquals(this.destination, other.destination) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.category, other.category) &&
            Utils.enhancedDeepEquals(this.testmode, other.testmode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, amount, source,
            destination, description, category,
            testmode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityBalanceTransfer.class,
                "id", id,
                "amount", amount,
                "source", source,
                "destination", destination,
                "description", description,
                "category", category,
                "testmode", testmode);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private Amount amount;

        private EntityBalanceTransferParty source;

        private EntityBalanceTransferParty destination;

        private String description;

        private Optional<? extends BalanceTransferCategory> category = Optional.empty();

        private JsonNullable<Boolean> testmode = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(Amount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * A party involved in the balance transfer, either the sender or the receiver.
         */
        public Builder source(EntityBalanceTransferParty source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }


        /**
         * A party involved in the balance transfer, either the sender or the receiver.
         */
        public Builder destination(EntityBalanceTransferParty destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = destination;
            return this;
        }


        /**
         * The transfer description for initiating party.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The type of the transfer. Different fees may apply to different types of transfers.
         */
        public Builder category(BalanceTransferCategory category) {
            Utils.checkNotNull(category, "category");
            this.category = Optional.ofNullable(category);
            return this;
        }

        /**
         * The type of the transfer. Different fees may apply to different types of transfers.
         */
        public Builder category(Optional<? extends BalanceTransferCategory> category) {
            Utils.checkNotNull(category, "category");
            this.category = category;
            return this;
        }


        /**
         * Whether to create the entity in test mode or live mode.
         * 
         * <p>Most API credentials are specifically created for either live mode or test mode, in which case this
         * parameter can be
         * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
         * setting
         * `testmode` to `true`.
         */
        public Builder testmode(boolean testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = JsonNullable.of(testmode);
            return this;
        }

        /**
         * Whether to create the entity in test mode or live mode.
         * 
         * <p>Most API credentials are specifically created for either live mode or test mode, in which case this
         * parameter can be
         * omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
         * setting
         * `testmode` to `true`.
         */
        public Builder testmode(JsonNullable<Boolean> testmode) {
            Utils.checkNotNull(testmode, "testmode");
            this.testmode = testmode;
            return this;
        }

        public EntityBalanceTransfer build() {

            return new EntityBalanceTransfer(
                id, amount, source,
                destination, description, category,
                testmode);
        }

    }
}
