/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
@JsonDeserialize(using = BalanceTransactionType._Deserializer.class)
@JsonSerialize(using = BalanceTransactionType._Serializer.class)
public class BalanceTransactionType {

    public static final BalanceTransactionType APPLICATION_FEE = new BalanceTransactionType("application-fee");
    public static final BalanceTransactionType CAPTURE = new BalanceTransactionType("capture");
    public static final BalanceTransactionType CHARGEBACK = new BalanceTransactionType("chargeback");
    public static final BalanceTransactionType CHARGEBACK_REVERSAL = new BalanceTransactionType("chargeback-reversal");
    public static final BalanceTransactionType FAILED_PAYMENT_FEE = new BalanceTransactionType("failed-payment-fee");
    public static final BalanceTransactionType FAILED_PAYMENT = new BalanceTransactionType("failed-payment");
    public static final BalanceTransactionType INVOICE_COMPENSATION = new BalanceTransactionType("invoice-compensation");
    public static final BalanceTransactionType PAYMENT = new BalanceTransactionType("payment");
    public static final BalanceTransactionType PAYMENT_FEE = new BalanceTransactionType("payment-fee");
    public static final BalanceTransactionType PAYMENT_COMMISSION = new BalanceTransactionType("payment-commission");
    public static final BalanceTransactionType REFUND = new BalanceTransactionType("refund");
    public static final BalanceTransactionType RETURNED_REFUND = new BalanceTransactionType("returned-refund");
    public static final BalanceTransactionType RETURNED_TRANSFER = new BalanceTransactionType("returned-transfer");
    public static final BalanceTransactionType SPLIT_PAYMENT = new BalanceTransactionType("split-payment");
    public static final BalanceTransactionType OUTGOING_TRANSFER = new BalanceTransactionType("outgoing-transfer");
    public static final BalanceTransactionType CAPTURE_COMMISSION = new BalanceTransactionType("capture-commission");
    public static final BalanceTransactionType CANCELED_OUTGOING_TRANSFER = new BalanceTransactionType("canceled-outgoing-transfer");
    public static final BalanceTransactionType INCOMING_TRANSFER = new BalanceTransactionType("incoming-transfer");
    public static final BalanceTransactionType API_PAYMENT_ROLLING_RESERVE_RELEASE = new BalanceTransactionType("api-payment-rolling-reserve-release");
    public static final BalanceTransactionType CAPTURE_ROLLING_RESERVE_RELEASE = new BalanceTransactionType("capture-rolling-reserve-release");
    public static final BalanceTransactionType REIMBURSEMENT_FEE = new BalanceTransactionType("reimbursement-fee");
    public static final BalanceTransactionType BALANCE_CORRECTION = new BalanceTransactionType("balance-correction");
    public static final BalanceTransactionType UNAUTHORIZED_DIRECT_DEBIT = new BalanceTransactionType("unauthorized-direct-debit");
    public static final BalanceTransactionType BANK_CHARGED_FAILURE_FEE = new BalanceTransactionType("bank-charged-failure-fee");
    public static final BalanceTransactionType PLATFORM_PAYMENT_REFUND = new BalanceTransactionType("platform-payment-refund");
    public static final BalanceTransactionType REFUND_COMPENSATION = new BalanceTransactionType("refund-compensation");
    public static final BalanceTransactionType RETURNED_REFUND_COMPENSATION = new BalanceTransactionType("returned-refund-compensation");
    public static final BalanceTransactionType RETURNED_PLATFORM_PAYMENT_REFUND = new BalanceTransactionType("returned-platform-payment-refund");
    public static final BalanceTransactionType PLATFORM_PAYMENT_CHARGEBACK = new BalanceTransactionType("platform-payment-chargeback");
    public static final BalanceTransactionType CHARGEBACK_COMPENSATION = new BalanceTransactionType("chargeback-compensation");
    public static final BalanceTransactionType REVERSED_PLATFORM_PAYMENT_CHARGEBACK = new BalanceTransactionType("reversed-platform-payment-chargeback");
    public static final BalanceTransactionType REVERSED_CHARGEBACK_COMPENSATION = new BalanceTransactionType("reversed-chargeback-compensation");
    public static final BalanceTransactionType FAILED_SPLIT_PAYMENT_PLATFORM = new BalanceTransactionType("failed-split-payment-platform");
    public static final BalanceTransactionType FAILED_SPLIT_PAYMENT_COMPENSATION = new BalanceTransactionType("failed-split-payment-compensation");
    public static final BalanceTransactionType CASH_ADVANCE_LOAN = new BalanceTransactionType("cash-advance-loan");
    public static final BalanceTransactionType PLATFORM_CONNECTED_ORGANIZATIONS_FEE = new BalanceTransactionType("platform-connected-organizations-fee");
    public static final BalanceTransactionType SPLIT_TRANSACTION = new BalanceTransactionType("split-transaction");
    public static final BalanceTransactionType MANAGED_FEE = new BalanceTransactionType("managed-fee");
    public static final BalanceTransactionType RETURNED_MANAGED_FEE = new BalanceTransactionType("returned-managed-fee");
    public static final BalanceTransactionType TOPUP = new BalanceTransactionType("topup");
    public static final BalanceTransactionType BALANCE_RESERVE = new BalanceTransactionType("balance-reserve");
    public static final BalanceTransactionType BALANCE_RESERVE_RETURN = new BalanceTransactionType("balance-reserve-return");
    public static final BalanceTransactionType MOVEMENT = new BalanceTransactionType("movement");
    public static final BalanceTransactionType POST_PAYMENT_SPLIT_PAYMENT = new BalanceTransactionType("post-payment-split-payment");
    public static final BalanceTransactionType CASH_COLLATERAL_ISSUANCE = new BalanceTransactionType("cash-collateral-issuance");
    public static final BalanceTransactionType CASH_COLLATERAL_RELEASE = new BalanceTransactionType("cash-collateral-release");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, BalanceTransactionType> values = createValuesMap();
    private static final Map<String, BalanceTransactionTypeEnum> enums = createEnumsMap();

    private final String value;

    private BalanceTransactionType(String value) {
        this.value = value;
    }

    /**
     * Returns a BalanceTransactionType with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as BalanceTransactionType
     */ 
    public static BalanceTransactionType of(String value) {
        synchronized (BalanceTransactionType.class) {
            return values.computeIfAbsent(value, v -> new BalanceTransactionType(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<BalanceTransactionTypeEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        BalanceTransactionType other = (BalanceTransactionType) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "BalanceTransactionType [value=" + value + "]";
    }

    // return an array just like an enum
    public static BalanceTransactionType[] values() {
        synchronized (BalanceTransactionType.class) {
            return values.values().toArray(new BalanceTransactionType[] {});
        }
    }

    private static final Map<String, BalanceTransactionType> createValuesMap() {
        Map<String, BalanceTransactionType> map = new LinkedHashMap<>();
        map.put("application-fee", APPLICATION_FEE);
        map.put("capture", CAPTURE);
        map.put("chargeback", CHARGEBACK);
        map.put("chargeback-reversal", CHARGEBACK_REVERSAL);
        map.put("failed-payment-fee", FAILED_PAYMENT_FEE);
        map.put("failed-payment", FAILED_PAYMENT);
        map.put("invoice-compensation", INVOICE_COMPENSATION);
        map.put("payment", PAYMENT);
        map.put("payment-fee", PAYMENT_FEE);
        map.put("payment-commission", PAYMENT_COMMISSION);
        map.put("refund", REFUND);
        map.put("returned-refund", RETURNED_REFUND);
        map.put("returned-transfer", RETURNED_TRANSFER);
        map.put("split-payment", SPLIT_PAYMENT);
        map.put("outgoing-transfer", OUTGOING_TRANSFER);
        map.put("capture-commission", CAPTURE_COMMISSION);
        map.put("canceled-outgoing-transfer", CANCELED_OUTGOING_TRANSFER);
        map.put("incoming-transfer", INCOMING_TRANSFER);
        map.put("api-payment-rolling-reserve-release", API_PAYMENT_ROLLING_RESERVE_RELEASE);
        map.put("capture-rolling-reserve-release", CAPTURE_ROLLING_RESERVE_RELEASE);
        map.put("reimbursement-fee", REIMBURSEMENT_FEE);
        map.put("balance-correction", BALANCE_CORRECTION);
        map.put("unauthorized-direct-debit", UNAUTHORIZED_DIRECT_DEBIT);
        map.put("bank-charged-failure-fee", BANK_CHARGED_FAILURE_FEE);
        map.put("platform-payment-refund", PLATFORM_PAYMENT_REFUND);
        map.put("refund-compensation", REFUND_COMPENSATION);
        map.put("returned-refund-compensation", RETURNED_REFUND_COMPENSATION);
        map.put("returned-platform-payment-refund", RETURNED_PLATFORM_PAYMENT_REFUND);
        map.put("platform-payment-chargeback", PLATFORM_PAYMENT_CHARGEBACK);
        map.put("chargeback-compensation", CHARGEBACK_COMPENSATION);
        map.put("reversed-platform-payment-chargeback", REVERSED_PLATFORM_PAYMENT_CHARGEBACK);
        map.put("reversed-chargeback-compensation", REVERSED_CHARGEBACK_COMPENSATION);
        map.put("failed-split-payment-platform", FAILED_SPLIT_PAYMENT_PLATFORM);
        map.put("failed-split-payment-compensation", FAILED_SPLIT_PAYMENT_COMPENSATION);
        map.put("cash-advance-loan", CASH_ADVANCE_LOAN);
        map.put("platform-connected-organizations-fee", PLATFORM_CONNECTED_ORGANIZATIONS_FEE);
        map.put("split-transaction", SPLIT_TRANSACTION);
        map.put("managed-fee", MANAGED_FEE);
        map.put("returned-managed-fee", RETURNED_MANAGED_FEE);
        map.put("topup", TOPUP);
        map.put("balance-reserve", BALANCE_RESERVE);
        map.put("balance-reserve-return", BALANCE_RESERVE_RETURN);
        map.put("movement", MOVEMENT);
        map.put("post-payment-split-payment", POST_PAYMENT_SPLIT_PAYMENT);
        map.put("cash-collateral-issuance", CASH_COLLATERAL_ISSUANCE);
        map.put("cash-collateral-release", CASH_COLLATERAL_RELEASE);
        return map;
    }

    private static final Map<String, BalanceTransactionTypeEnum> createEnumsMap() {
        Map<String, BalanceTransactionTypeEnum> map = new HashMap<>();
        map.put("application-fee", BalanceTransactionTypeEnum.APPLICATION_FEE);
        map.put("capture", BalanceTransactionTypeEnum.CAPTURE);
        map.put("chargeback", BalanceTransactionTypeEnum.CHARGEBACK);
        map.put("chargeback-reversal", BalanceTransactionTypeEnum.CHARGEBACK_REVERSAL);
        map.put("failed-payment-fee", BalanceTransactionTypeEnum.FAILED_PAYMENT_FEE);
        map.put("failed-payment", BalanceTransactionTypeEnum.FAILED_PAYMENT);
        map.put("invoice-compensation", BalanceTransactionTypeEnum.INVOICE_COMPENSATION);
        map.put("payment", BalanceTransactionTypeEnum.PAYMENT);
        map.put("payment-fee", BalanceTransactionTypeEnum.PAYMENT_FEE);
        map.put("payment-commission", BalanceTransactionTypeEnum.PAYMENT_COMMISSION);
        map.put("refund", BalanceTransactionTypeEnum.REFUND);
        map.put("returned-refund", BalanceTransactionTypeEnum.RETURNED_REFUND);
        map.put("returned-transfer", BalanceTransactionTypeEnum.RETURNED_TRANSFER);
        map.put("split-payment", BalanceTransactionTypeEnum.SPLIT_PAYMENT);
        map.put("outgoing-transfer", BalanceTransactionTypeEnum.OUTGOING_TRANSFER);
        map.put("capture-commission", BalanceTransactionTypeEnum.CAPTURE_COMMISSION);
        map.put("canceled-outgoing-transfer", BalanceTransactionTypeEnum.CANCELED_OUTGOING_TRANSFER);
        map.put("incoming-transfer", BalanceTransactionTypeEnum.INCOMING_TRANSFER);
        map.put("api-payment-rolling-reserve-release", BalanceTransactionTypeEnum.API_PAYMENT_ROLLING_RESERVE_RELEASE);
        map.put("capture-rolling-reserve-release", BalanceTransactionTypeEnum.CAPTURE_ROLLING_RESERVE_RELEASE);
        map.put("reimbursement-fee", BalanceTransactionTypeEnum.REIMBURSEMENT_FEE);
        map.put("balance-correction", BalanceTransactionTypeEnum.BALANCE_CORRECTION);
        map.put("unauthorized-direct-debit", BalanceTransactionTypeEnum.UNAUTHORIZED_DIRECT_DEBIT);
        map.put("bank-charged-failure-fee", BalanceTransactionTypeEnum.BANK_CHARGED_FAILURE_FEE);
        map.put("platform-payment-refund", BalanceTransactionTypeEnum.PLATFORM_PAYMENT_REFUND);
        map.put("refund-compensation", BalanceTransactionTypeEnum.REFUND_COMPENSATION);
        map.put("returned-refund-compensation", BalanceTransactionTypeEnum.RETURNED_REFUND_COMPENSATION);
        map.put("returned-platform-payment-refund", BalanceTransactionTypeEnum.RETURNED_PLATFORM_PAYMENT_REFUND);
        map.put("platform-payment-chargeback", BalanceTransactionTypeEnum.PLATFORM_PAYMENT_CHARGEBACK);
        map.put("chargeback-compensation", BalanceTransactionTypeEnum.CHARGEBACK_COMPENSATION);
        map.put("reversed-platform-payment-chargeback", BalanceTransactionTypeEnum.REVERSED_PLATFORM_PAYMENT_CHARGEBACK);
        map.put("reversed-chargeback-compensation", BalanceTransactionTypeEnum.REVERSED_CHARGEBACK_COMPENSATION);
        map.put("failed-split-payment-platform", BalanceTransactionTypeEnum.FAILED_SPLIT_PAYMENT_PLATFORM);
        map.put("failed-split-payment-compensation", BalanceTransactionTypeEnum.FAILED_SPLIT_PAYMENT_COMPENSATION);
        map.put("cash-advance-loan", BalanceTransactionTypeEnum.CASH_ADVANCE_LOAN);
        map.put("platform-connected-organizations-fee", BalanceTransactionTypeEnum.PLATFORM_CONNECTED_ORGANIZATIONS_FEE);
        map.put("split-transaction", BalanceTransactionTypeEnum.SPLIT_TRANSACTION);
        map.put("managed-fee", BalanceTransactionTypeEnum.MANAGED_FEE);
        map.put("returned-managed-fee", BalanceTransactionTypeEnum.RETURNED_MANAGED_FEE);
        map.put("topup", BalanceTransactionTypeEnum.TOPUP);
        map.put("balance-reserve", BalanceTransactionTypeEnum.BALANCE_RESERVE);
        map.put("balance-reserve-return", BalanceTransactionTypeEnum.BALANCE_RESERVE_RETURN);
        map.put("movement", BalanceTransactionTypeEnum.MOVEMENT);
        map.put("post-payment-split-payment", BalanceTransactionTypeEnum.POST_PAYMENT_SPLIT_PAYMENT);
        map.put("cash-collateral-issuance", BalanceTransactionTypeEnum.CASH_COLLATERAL_ISSUANCE);
        map.put("cash-collateral-release", BalanceTransactionTypeEnum.CASH_COLLATERAL_RELEASE);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<BalanceTransactionType> {

        protected _Serializer() {
            super(BalanceTransactionType.class);
        }

        @Override
        public void serialize(BalanceTransactionType value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<BalanceTransactionType> {

        protected _Deserializer() {
            super(BalanceTransactionType.class);
        }

        @Override
        public BalanceTransactionType deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return BalanceTransactionType.of(v);
        }
    }
    
    public enum BalanceTransactionTypeEnum {

        APPLICATION_FEE("application-fee"),
        CAPTURE("capture"),
        CHARGEBACK("chargeback"),
        CHARGEBACK_REVERSAL("chargeback-reversal"),
        FAILED_PAYMENT_FEE("failed-payment-fee"),
        FAILED_PAYMENT("failed-payment"),
        INVOICE_COMPENSATION("invoice-compensation"),
        PAYMENT("payment"),
        PAYMENT_FEE("payment-fee"),
        PAYMENT_COMMISSION("payment-commission"),
        REFUND("refund"),
        RETURNED_REFUND("returned-refund"),
        RETURNED_TRANSFER("returned-transfer"),
        SPLIT_PAYMENT("split-payment"),
        OUTGOING_TRANSFER("outgoing-transfer"),
        CAPTURE_COMMISSION("capture-commission"),
        CANCELED_OUTGOING_TRANSFER("canceled-outgoing-transfer"),
        INCOMING_TRANSFER("incoming-transfer"),
        API_PAYMENT_ROLLING_RESERVE_RELEASE("api-payment-rolling-reserve-release"),
        CAPTURE_ROLLING_RESERVE_RELEASE("capture-rolling-reserve-release"),
        REIMBURSEMENT_FEE("reimbursement-fee"),
        BALANCE_CORRECTION("balance-correction"),
        UNAUTHORIZED_DIRECT_DEBIT("unauthorized-direct-debit"),
        BANK_CHARGED_FAILURE_FEE("bank-charged-failure-fee"),
        PLATFORM_PAYMENT_REFUND("platform-payment-refund"),
        REFUND_COMPENSATION("refund-compensation"),
        RETURNED_REFUND_COMPENSATION("returned-refund-compensation"),
        RETURNED_PLATFORM_PAYMENT_REFUND("returned-platform-payment-refund"),
        PLATFORM_PAYMENT_CHARGEBACK("platform-payment-chargeback"),
        CHARGEBACK_COMPENSATION("chargeback-compensation"),
        REVERSED_PLATFORM_PAYMENT_CHARGEBACK("reversed-platform-payment-chargeback"),
        REVERSED_CHARGEBACK_COMPENSATION("reversed-chargeback-compensation"),
        FAILED_SPLIT_PAYMENT_PLATFORM("failed-split-payment-platform"),
        FAILED_SPLIT_PAYMENT_COMPENSATION("failed-split-payment-compensation"),
        CASH_ADVANCE_LOAN("cash-advance-loan"),
        PLATFORM_CONNECTED_ORGANIZATIONS_FEE("platform-connected-organizations-fee"),
        SPLIT_TRANSACTION("split-transaction"),
        MANAGED_FEE("managed-fee"),
        RETURNED_MANAGED_FEE("returned-managed-fee"),
        TOPUP("topup"),
        BALANCE_RESERVE("balance-reserve"),
        BALANCE_RESERVE_RETURN("balance-reserve-return"),
        MOVEMENT("movement"),
        POST_PAYMENT_SPLIT_PAYMENT("post-payment-split-payment"),
        CASH_COLLATERAL_ISSUANCE("cash-collateral-issuance"),
        CASH_COLLATERAL_RELEASE("cash-collateral-release"),;

        private final String value;

        private BalanceTransactionTypeEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

