/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * Company
 * 
 * <p>Billie is a business-to-business (B2B) payment method. It requires extra information to identify the
 * organization
 * that is completing the payment. It is recommended to include these parameters up front for a
 * seamless flow.
 * Otherwise, Billie will ask the customer to complete the missing fields during checkout.
 */
public class Company {
    /**
     * The organization's registration number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrationNumber")
    private Optional<String> registrationNumber;

    /**
     * The organization's VAT number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatNumber")
    private Optional<String> vatNumber;

    /**
     * The organization's entity type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entityType")
    private Optional<String> entityType;

    @JsonCreator
    public Company(
            @JsonProperty("registrationNumber") Optional<String> registrationNumber,
            @JsonProperty("vatNumber") Optional<String> vatNumber,
            @JsonProperty("entityType") Optional<String> entityType) {
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        Utils.checkNotNull(vatNumber, "vatNumber");
        Utils.checkNotNull(entityType, "entityType");
        this.registrationNumber = registrationNumber;
        this.vatNumber = vatNumber;
        this.entityType = entityType;
    }
    
    public Company() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The organization's registration number.
     */
    @JsonIgnore
    public Optional<String> registrationNumber() {
        return registrationNumber;
    }

    /**
     * The organization's VAT number.
     */
    @JsonIgnore
    public Optional<String> vatNumber() {
        return vatNumber;
    }

    /**
     * The organization's entity type.
     */
    @JsonIgnore
    public Optional<String> entityType() {
        return entityType;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The organization's registration number.
     */
    public Company withRegistrationNumber(String registrationNumber) {
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        this.registrationNumber = Optional.ofNullable(registrationNumber);
        return this;
    }


    /**
     * The organization's registration number.
     */
    public Company withRegistrationNumber(Optional<String> registrationNumber) {
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        this.registrationNumber = registrationNumber;
        return this;
    }

    /**
     * The organization's VAT number.
     */
    public Company withVatNumber(String vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = Optional.ofNullable(vatNumber);
        return this;
    }


    /**
     * The organization's VAT number.
     */
    public Company withVatNumber(Optional<String> vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = vatNumber;
        return this;
    }

    /**
     * The organization's entity type.
     */
    public Company withEntityType(String entityType) {
        Utils.checkNotNull(entityType, "entityType");
        this.entityType = Optional.ofNullable(entityType);
        return this;
    }


    /**
     * The organization's entity type.
     */
    public Company withEntityType(Optional<String> entityType) {
        Utils.checkNotNull(entityType, "entityType");
        this.entityType = entityType;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Company other = (Company) o;
        return 
            Utils.enhancedDeepEquals(this.registrationNumber, other.registrationNumber) &&
            Utils.enhancedDeepEquals(this.vatNumber, other.vatNumber) &&
            Utils.enhancedDeepEquals(this.entityType, other.entityType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            registrationNumber, vatNumber, entityType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Company.class,
                "registrationNumber", registrationNumber,
                "vatNumber", vatNumber,
                "entityType", entityType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> registrationNumber = Optional.empty();

        private Optional<String> vatNumber = Optional.empty();

        private Optional<String> entityType = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The organization's registration number.
         */
        public Builder registrationNumber(String registrationNumber) {
            Utils.checkNotNull(registrationNumber, "registrationNumber");
            this.registrationNumber = Optional.ofNullable(registrationNumber);
            return this;
        }

        /**
         * The organization's registration number.
         */
        public Builder registrationNumber(Optional<String> registrationNumber) {
            Utils.checkNotNull(registrationNumber, "registrationNumber");
            this.registrationNumber = registrationNumber;
            return this;
        }


        /**
         * The organization's VAT number.
         */
        public Builder vatNumber(String vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = Optional.ofNullable(vatNumber);
            return this;
        }

        /**
         * The organization's VAT number.
         */
        public Builder vatNumber(Optional<String> vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = vatNumber;
            return this;
        }


        /**
         * The organization's entity type.
         */
        public Builder entityType(String entityType) {
            Utils.checkNotNull(entityType, "entityType");
            this.entityType = Optional.ofNullable(entityType);
            return this;
        }

        /**
         * The organization's entity type.
         */
        public Builder entityType(Optional<String> entityType) {
            Utils.checkNotNull(entityType, "entityType");
            this.entityType = entityType;
            return this;
        }

        public Company build() {

            return new Company(
                registrationNumber, vatNumber, entityType);
        }

    }
}
