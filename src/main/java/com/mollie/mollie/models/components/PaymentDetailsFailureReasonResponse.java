/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * PaymentDetailsFailureReasonResponse
 * 
 * <p>A failure code to help understand why the payment failed.
 */
@JsonDeserialize(using = PaymentDetailsFailureReasonResponse._Deserializer.class)
@JsonSerialize(using = PaymentDetailsFailureReasonResponse._Serializer.class)
public class PaymentDetailsFailureReasonResponse {

    public static final PaymentDetailsFailureReasonResponse AUTHENTICATION_ABANDONED = new PaymentDetailsFailureReasonResponse("authentication_abandoned");
    public static final PaymentDetailsFailureReasonResponse AUTHENTICATION_FAILED = new PaymentDetailsFailureReasonResponse("authentication_failed");
    public static final PaymentDetailsFailureReasonResponse AUTHENTICATION_REQUIRED = new PaymentDetailsFailureReasonResponse("authentication_required");
    public static final PaymentDetailsFailureReasonResponse AUTHENTICATION_UNAVAILABLE_ACS = new PaymentDetailsFailureReasonResponse("authentication_unavailable_acs");
    public static final PaymentDetailsFailureReasonResponse CARD_DECLINED = new PaymentDetailsFailureReasonResponse("card_declined");
    public static final PaymentDetailsFailureReasonResponse CARD_EXPIRED = new PaymentDetailsFailureReasonResponse("card_expired");
    public static final PaymentDetailsFailureReasonResponse INACTIVE_CARD = new PaymentDetailsFailureReasonResponse("inactive_card");
    public static final PaymentDetailsFailureReasonResponse INSUFFICIENT_FUNDS = new PaymentDetailsFailureReasonResponse("insufficient_funds");
    public static final PaymentDetailsFailureReasonResponse INVALID_CVV = new PaymentDetailsFailureReasonResponse("invalid_cvv");
    public static final PaymentDetailsFailureReasonResponse INVALID_CARD_HOLDER_NAME = new PaymentDetailsFailureReasonResponse("invalid_card_holder_name");
    public static final PaymentDetailsFailureReasonResponse INVALID_CARD_NUMBER = new PaymentDetailsFailureReasonResponse("invalid_card_number");
    public static final PaymentDetailsFailureReasonResponse INVALID_CARD_TYPE = new PaymentDetailsFailureReasonResponse("invalid_card_type");
    public static final PaymentDetailsFailureReasonResponse POSSIBLE_FRAUD = new PaymentDetailsFailureReasonResponse("possible_fraud");
    public static final PaymentDetailsFailureReasonResponse REFUSED_BY_ISSUER = new PaymentDetailsFailureReasonResponse("refused_by_issuer");
    public static final PaymentDetailsFailureReasonResponse UNKNOWN_REASON = new PaymentDetailsFailureReasonResponse("unknown_reason");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, PaymentDetailsFailureReasonResponse> values = createValuesMap();
    private static final Map<String, PaymentDetailsFailureReasonResponseEnum> enums = createEnumsMap();

    private final String value;

    private PaymentDetailsFailureReasonResponse(String value) {
        this.value = value;
    }

    /**
     * Returns a PaymentDetailsFailureReasonResponse with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as PaymentDetailsFailureReasonResponse
     */ 
    public static PaymentDetailsFailureReasonResponse of(String value) {
        synchronized (PaymentDetailsFailureReasonResponse.class) {
            return values.computeIfAbsent(value, v -> new PaymentDetailsFailureReasonResponse(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<PaymentDetailsFailureReasonResponseEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        PaymentDetailsFailureReasonResponse other = (PaymentDetailsFailureReasonResponse) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "PaymentDetailsFailureReasonResponse [value=" + value + "]";
    }

    // return an array just like an enum
    public static PaymentDetailsFailureReasonResponse[] values() {
        synchronized (PaymentDetailsFailureReasonResponse.class) {
            return values.values().toArray(new PaymentDetailsFailureReasonResponse[] {});
        }
    }

    private static final Map<String, PaymentDetailsFailureReasonResponse> createValuesMap() {
        Map<String, PaymentDetailsFailureReasonResponse> map = new LinkedHashMap<>();
        map.put("authentication_abandoned", AUTHENTICATION_ABANDONED);
        map.put("authentication_failed", AUTHENTICATION_FAILED);
        map.put("authentication_required", AUTHENTICATION_REQUIRED);
        map.put("authentication_unavailable_acs", AUTHENTICATION_UNAVAILABLE_ACS);
        map.put("card_declined", CARD_DECLINED);
        map.put("card_expired", CARD_EXPIRED);
        map.put("inactive_card", INACTIVE_CARD);
        map.put("insufficient_funds", INSUFFICIENT_FUNDS);
        map.put("invalid_cvv", INVALID_CVV);
        map.put("invalid_card_holder_name", INVALID_CARD_HOLDER_NAME);
        map.put("invalid_card_number", INVALID_CARD_NUMBER);
        map.put("invalid_card_type", INVALID_CARD_TYPE);
        map.put("possible_fraud", POSSIBLE_FRAUD);
        map.put("refused_by_issuer", REFUSED_BY_ISSUER);
        map.put("unknown_reason", UNKNOWN_REASON);
        return map;
    }

    private static final Map<String, PaymentDetailsFailureReasonResponseEnum> createEnumsMap() {
        Map<String, PaymentDetailsFailureReasonResponseEnum> map = new HashMap<>();
        map.put("authentication_abandoned", PaymentDetailsFailureReasonResponseEnum.AUTHENTICATION_ABANDONED);
        map.put("authentication_failed", PaymentDetailsFailureReasonResponseEnum.AUTHENTICATION_FAILED);
        map.put("authentication_required", PaymentDetailsFailureReasonResponseEnum.AUTHENTICATION_REQUIRED);
        map.put("authentication_unavailable_acs", PaymentDetailsFailureReasonResponseEnum.AUTHENTICATION_UNAVAILABLE_ACS);
        map.put("card_declined", PaymentDetailsFailureReasonResponseEnum.CARD_DECLINED);
        map.put("card_expired", PaymentDetailsFailureReasonResponseEnum.CARD_EXPIRED);
        map.put("inactive_card", PaymentDetailsFailureReasonResponseEnum.INACTIVE_CARD);
        map.put("insufficient_funds", PaymentDetailsFailureReasonResponseEnum.INSUFFICIENT_FUNDS);
        map.put("invalid_cvv", PaymentDetailsFailureReasonResponseEnum.INVALID_CVV);
        map.put("invalid_card_holder_name", PaymentDetailsFailureReasonResponseEnum.INVALID_CARD_HOLDER_NAME);
        map.put("invalid_card_number", PaymentDetailsFailureReasonResponseEnum.INVALID_CARD_NUMBER);
        map.put("invalid_card_type", PaymentDetailsFailureReasonResponseEnum.INVALID_CARD_TYPE);
        map.put("possible_fraud", PaymentDetailsFailureReasonResponseEnum.POSSIBLE_FRAUD);
        map.put("refused_by_issuer", PaymentDetailsFailureReasonResponseEnum.REFUSED_BY_ISSUER);
        map.put("unknown_reason", PaymentDetailsFailureReasonResponseEnum.UNKNOWN_REASON);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<PaymentDetailsFailureReasonResponse> {

        protected _Serializer() {
            super(PaymentDetailsFailureReasonResponse.class);
        }

        @Override
        public void serialize(PaymentDetailsFailureReasonResponse value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<PaymentDetailsFailureReasonResponse> {

        protected _Deserializer() {
            super(PaymentDetailsFailureReasonResponse.class);
        }

        @Override
        public PaymentDetailsFailureReasonResponse deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return PaymentDetailsFailureReasonResponse.of(v);
        }
    }
    
    public enum PaymentDetailsFailureReasonResponseEnum {

        AUTHENTICATION_ABANDONED("authentication_abandoned"),
        AUTHENTICATION_FAILED("authentication_failed"),
        AUTHENTICATION_REQUIRED("authentication_required"),
        AUTHENTICATION_UNAVAILABLE_ACS("authentication_unavailable_acs"),
        CARD_DECLINED("card_declined"),
        CARD_EXPIRED("card_expired"),
        INACTIVE_CARD("inactive_card"),
        INSUFFICIENT_FUNDS("insufficient_funds"),
        INVALID_CVV("invalid_cvv"),
        INVALID_CARD_HOLDER_NAME("invalid_card_holder_name"),
        INVALID_CARD_NUMBER("invalid_card_number"),
        INVALID_CARD_TYPE("invalid_card_type"),
        POSSIBLE_FRAUD("possible_fraud"),
        REFUSED_BY_ISSUER("refused_by_issuer"),
        UNKNOWN_REASON("unknown_reason"),;

        private final String value;

        private PaymentDetailsFailureReasonResponseEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

