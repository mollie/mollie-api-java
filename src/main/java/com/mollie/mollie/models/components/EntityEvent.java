/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class EntityEvent {

    @JsonProperty("resource")
    private String resource;


    @JsonProperty("type")
    private long type;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonProperty("createdAt")
    private String createdAt;


    @JsonProperty("message")
    private String message;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends EntityEventLinks> links;

    @JsonCreator
    public EntityEvent(
            @JsonProperty("resource") String resource,
            @JsonProperty("type") long type,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("message") String message,
            @JsonProperty("_links") Optional<? extends EntityEventLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.type = type;
        this.createdAt = createdAt;
        this.message = message;
        this.links = links;
    }
    
    public EntityEvent(
            String resource,
            long type,
            String createdAt,
            String message) {
        this(resource, type, createdAt,
            message, Optional.empty());
    }

    @JsonIgnore
    public String resource() {
        return resource;
    }

    @JsonIgnore
    public long type() {
        return type;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String message() {
        return message;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EntityEventLinks> links() {
        return (Optional<EntityEventLinks>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    public EntityEvent withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public EntityEvent withType(long type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public EntityEvent withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public EntityEvent withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityEvent withLinks(EntityEventLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityEvent withLinks(Optional<? extends EntityEventLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityEvent other = (EntityEvent) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.message, other.message) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, type, createdAt,
            message, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityEvent.class,
                "resource", resource,
                "type", type,
                "createdAt", createdAt,
                "message", message,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private Long type;

        private String createdAt;

        private String message;

        private Optional<? extends EntityEventLinks> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        public Builder type(long type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(EntityEventLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends EntityEventLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public EntityEvent build() {

            return new EntityEvent(
                resource, type, createdAt,
                message, links);
        }

    }
}
