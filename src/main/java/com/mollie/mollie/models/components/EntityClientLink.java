/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EntityClientLink {
    /**
     * Personal data of your customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    private Optional<? extends Owner> owner;

    /**
     * Name of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Address of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends EntityClientLinkAddress> address;

    /**
     * The registration number of the organization at their local chamber of commerce.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrationNumber")
    private JsonNullable<String> registrationNumber;

    /**
     * The VAT number of the organization, if based in the European Union. VAT numbers are verified against
     * the
     * international registry *VIES*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatNumber")
    private JsonNullable<String> vatNumber;

    @JsonCreator
    public EntityClientLink(
            @JsonProperty("owner") Optional<? extends Owner> owner,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("address") Optional<? extends EntityClientLinkAddress> address,
            @JsonProperty("registrationNumber") JsonNullable<String> registrationNumber,
            @JsonProperty("vatNumber") JsonNullable<String> vatNumber) {
        Utils.checkNotNull(owner, "owner");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.owner = owner;
        this.name = name;
        this.address = address;
        this.registrationNumber = registrationNumber;
        this.vatNumber = vatNumber;
    }
    
    public EntityClientLink() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Personal data of your customer.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Owner> owner() {
        return (Optional<Owner>) owner;
    }

    /**
     * Name of the organization.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Address of the organization.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EntityClientLinkAddress> address() {
        return (Optional<EntityClientLinkAddress>) address;
    }

    /**
     * The registration number of the organization at their local chamber of commerce.
     */
    @JsonIgnore
    public JsonNullable<String> registrationNumber() {
        return registrationNumber;
    }

    /**
     * The VAT number of the organization, if based in the European Union. VAT numbers are verified against
     * the
     * international registry *VIES*.
     */
    @JsonIgnore
    public JsonNullable<String> vatNumber() {
        return vatNumber;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Personal data of your customer.
     */
    public EntityClientLink withOwner(Owner owner) {
        Utils.checkNotNull(owner, "owner");
        this.owner = Optional.ofNullable(owner);
        return this;
    }


    /**
     * Personal data of your customer.
     */
    public EntityClientLink withOwner(Optional<? extends Owner> owner) {
        Utils.checkNotNull(owner, "owner");
        this.owner = owner;
        return this;
    }

    /**
     * Name of the organization.
     */
    public EntityClientLink withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * Name of the organization.
     */
    public EntityClientLink withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Address of the organization.
     */
    public EntityClientLink withAddress(EntityClientLinkAddress address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }


    /**
     * Address of the organization.
     */
    public EntityClientLink withAddress(Optional<? extends EntityClientLinkAddress> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    /**
     * The registration number of the organization at their local chamber of commerce.
     */
    public EntityClientLink withRegistrationNumber(String registrationNumber) {
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        this.registrationNumber = JsonNullable.of(registrationNumber);
        return this;
    }

    /**
     * The registration number of the organization at their local chamber of commerce.
     */
    public EntityClientLink withRegistrationNumber(JsonNullable<String> registrationNumber) {
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        this.registrationNumber = registrationNumber;
        return this;
    }

    /**
     * The VAT number of the organization, if based in the European Union. VAT numbers are verified against
     * the
     * international registry *VIES*.
     */
    public EntityClientLink withVatNumber(String vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = JsonNullable.of(vatNumber);
        return this;
    }

    /**
     * The VAT number of the organization, if based in the European Union. VAT numbers are verified against
     * the
     * international registry *VIES*.
     */
    public EntityClientLink withVatNumber(JsonNullable<String> vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = vatNumber;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityClientLink other = (EntityClientLink) o;
        return 
            Utils.enhancedDeepEquals(this.owner, other.owner) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.address, other.address) &&
            Utils.enhancedDeepEquals(this.registrationNumber, other.registrationNumber) &&
            Utils.enhancedDeepEquals(this.vatNumber, other.vatNumber);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            owner, name, address,
            registrationNumber, vatNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityClientLink.class,
                "owner", owner,
                "name", name,
                "address", address,
                "registrationNumber", registrationNumber,
                "vatNumber", vatNumber);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends Owner> owner = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<? extends EntityClientLinkAddress> address = Optional.empty();

        private JsonNullable<String> registrationNumber = JsonNullable.undefined();

        private JsonNullable<String> vatNumber = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Personal data of your customer.
         */
        public Builder owner(Owner owner) {
            Utils.checkNotNull(owner, "owner");
            this.owner = Optional.ofNullable(owner);
            return this;
        }

        /**
         * Personal data of your customer.
         */
        public Builder owner(Optional<? extends Owner> owner) {
            Utils.checkNotNull(owner, "owner");
            this.owner = owner;
            return this;
        }


        /**
         * Name of the organization.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the organization.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * Address of the organization.
         */
        public Builder address(EntityClientLinkAddress address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * Address of the organization.
         */
        public Builder address(Optional<? extends EntityClientLinkAddress> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }


        /**
         * The registration number of the organization at their local chamber of commerce.
         */
        public Builder registrationNumber(String registrationNumber) {
            Utils.checkNotNull(registrationNumber, "registrationNumber");
            this.registrationNumber = JsonNullable.of(registrationNumber);
            return this;
        }

        /**
         * The registration number of the organization at their local chamber of commerce.
         */
        public Builder registrationNumber(JsonNullable<String> registrationNumber) {
            Utils.checkNotNull(registrationNumber, "registrationNumber");
            this.registrationNumber = registrationNumber;
            return this;
        }


        /**
         * The VAT number of the organization, if based in the European Union. VAT numbers are verified against
         * the
         * international registry *VIES*.
         */
        public Builder vatNumber(String vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = JsonNullable.of(vatNumber);
            return this;
        }

        /**
         * The VAT number of the organization, if based in the European Union. VAT numbers are verified against
         * the
         * international registry *VIES*.
         */
        public Builder vatNumber(JsonNullable<String> vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = vatNumber;
            return this;
        }

        public EntityClientLink build() {

            return new EntityClientLink(
                owner, name, address,
                registrationNumber, vatNumber);
        }

    }
}
