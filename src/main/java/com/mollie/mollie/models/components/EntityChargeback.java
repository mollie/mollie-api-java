/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EntityChargeback {
    /**
     * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this
     * endpoint.
     */
    @JsonProperty("resource")
    private String resource;


    @JsonProperty("id")
    private String id;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("amount")
    private Amount amount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementAmount")
    private JsonNullable<? extends AmountNullable> settlementAmount;

    /**
     * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    private JsonNullable<? extends Reason> reason;


    @JsonProperty("paymentId")
    private String paymentId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settlementId")
    private Optional<String> settlementId;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonProperty("createdAt")
    private String createdAt;

    /**
     * The date and time the chargeback was reversed if applicable, in
     * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reversedAt")
    private JsonNullable<String> reversedAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private EntityChargebackLinks links;

    @JsonCreator
    public EntityChargeback(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") String id,
            @JsonProperty("amount") Amount amount,
            @JsonProperty("settlementAmount") JsonNullable<? extends AmountNullable> settlementAmount,
            @JsonProperty("reason") JsonNullable<? extends Reason> reason,
            @JsonProperty("paymentId") String paymentId,
            @JsonProperty("settlementId") Optional<String> settlementId,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("reversedAt") JsonNullable<String> reversedAt,
            @JsonProperty("_links") EntityChargebackLinks links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        Utils.checkNotNull(reason, "reason");
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(settlementId, "settlementId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(reversedAt, "reversedAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.amount = amount;
        this.settlementAmount = settlementAmount;
        this.reason = reason;
        this.paymentId = paymentId;
        this.settlementId = settlementId;
        this.createdAt = createdAt;
        this.reversedAt = reversedAt;
        this.links = links;
    }
    
    public EntityChargeback(
            String resource,
            String id,
            Amount amount,
            String paymentId,
            String createdAt,
            EntityChargebackLinks links) {
        this(resource, id, amount,
            JsonNullable.undefined(), JsonNullable.undefined(), paymentId,
            Optional.empty(), createdAt, JsonNullable.undefined(),
            links);
    }

    /**
     * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this
     * endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount amount() {
        return amount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<AmountNullable> settlementAmount() {
        return (JsonNullable<AmountNullable>) settlementAmount;
    }

    /**
     * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Reason> reason() {
        return (JsonNullable<Reason>) reason;
    }

    @JsonIgnore
    public String paymentId() {
        return paymentId;
    }

    @JsonIgnore
    public Optional<String> settlementId() {
        return settlementId;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    /**
     * The date and time the chargeback was reversed if applicable, in
     * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public JsonNullable<String> reversedAt() {
        return reversedAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public EntityChargebackLinks links() {
        return links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this
     * endpoint.
     */
    public EntityChargeback withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public EntityChargeback withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityChargeback withAmount(Amount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityChargeback withSettlementAmount(AmountNullable settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = JsonNullable.of(settlementAmount);
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityChargeback withSettlementAmount(JsonNullable<? extends AmountNullable> settlementAmount) {
        Utils.checkNotNull(settlementAmount, "settlementAmount");
        this.settlementAmount = settlementAmount;
        return this;
    }

    /**
     * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
     */
    public EntityChargeback withReason(Reason reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = JsonNullable.of(reason);
        return this;
    }

    /**
     * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
     */
    public EntityChargeback withReason(JsonNullable<? extends Reason> reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = reason;
        return this;
    }

    public EntityChargeback withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    public EntityChargeback withSettlementId(String settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = Optional.ofNullable(settlementId);
        return this;
    }


    public EntityChargeback withSettlementId(Optional<String> settlementId) {
        Utils.checkNotNull(settlementId, "settlementId");
        this.settlementId = settlementId;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public EntityChargeback withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time the chargeback was reversed if applicable, in
     * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public EntityChargeback withReversedAt(String reversedAt) {
        Utils.checkNotNull(reversedAt, "reversedAt");
        this.reversedAt = JsonNullable.of(reversedAt);
        return this;
    }

    /**
     * The date and time the chargeback was reversed if applicable, in
     * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public EntityChargeback withReversedAt(JsonNullable<String> reversedAt) {
        Utils.checkNotNull(reversedAt, "reversedAt");
        this.reversedAt = reversedAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityChargeback withLinks(EntityChargebackLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityChargeback other = (EntityChargeback) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.settlementAmount, other.settlementAmount) &&
            Utils.enhancedDeepEquals(this.reason, other.reason) &&
            Utils.enhancedDeepEquals(this.paymentId, other.paymentId) &&
            Utils.enhancedDeepEquals(this.settlementId, other.settlementId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.reversedAt, other.reversedAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, amount,
            settlementAmount, reason, paymentId,
            settlementId, createdAt, reversedAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityChargeback.class,
                "resource", resource,
                "id", id,
                "amount", amount,
                "settlementAmount", settlementAmount,
                "reason", reason,
                "paymentId", paymentId,
                "settlementId", settlementId,
                "createdAt", createdAt,
                "reversedAt", reversedAt,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private String id;

        private Amount amount;

        private JsonNullable<? extends AmountNullable> settlementAmount = JsonNullable.undefined();

        private JsonNullable<? extends Reason> reason = JsonNullable.undefined();

        private String paymentId;

        private Optional<String> settlementId = Optional.empty();

        private String createdAt;

        private JsonNullable<String> reversedAt = JsonNullable.undefined();

        private EntityChargebackLinks links;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a chargeback object. Will always contain the string `chargeback` for this
         * endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(Amount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder settlementAmount(AmountNullable settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = JsonNullable.of(settlementAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder settlementAmount(JsonNullable<? extends AmountNullable> settlementAmount) {
            Utils.checkNotNull(settlementAmount, "settlementAmount");
            this.settlementAmount = settlementAmount;
            return this;
        }


        /**
         * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
         */
        public Builder reason(Reason reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = JsonNullable.of(reason);
            return this;
        }

        /**
         * Reason for the chargeback as given by the bank. Only available for chargebacks of SEPA Direct Debit payments.
         */
        public Builder reason(JsonNullable<? extends Reason> reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = reason;
            return this;
        }


        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }


        public Builder settlementId(String settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = Optional.ofNullable(settlementId);
            return this;
        }

        public Builder settlementId(Optional<String> settlementId) {
            Utils.checkNotNull(settlementId, "settlementId");
            this.settlementId = settlementId;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The date and time the chargeback was reversed if applicable, in
         * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder reversedAt(String reversedAt) {
            Utils.checkNotNull(reversedAt, "reversedAt");
            this.reversedAt = JsonNullable.of(reversedAt);
            return this;
        }

        /**
         * The date and time the chargeback was reversed if applicable, in
         * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder reversedAt(JsonNullable<String> reversedAt) {
            Utils.checkNotNull(reversedAt, "reversedAt");
            this.reversedAt = reversedAt;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(EntityChargebackLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public EntityChargeback build() {

            return new EntityChargeback(
                resource, id, amount,
                settlementAmount, reason, paymentId,
                settlementId, createdAt, reversedAt,
                links);
        }

    }
}
