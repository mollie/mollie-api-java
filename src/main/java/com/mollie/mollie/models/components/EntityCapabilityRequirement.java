/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class EntityCapabilityRequirement {
    /**
     * The name of this requirement, referring to the task to be fulfilled by the organization
     * to enable or re-enable the capability. The name is unique among other requirements
     * of the same capability.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The status of the requirement depends on its due date.
     * If no due date is given, the status will be `requested`.
     */
    @JsonProperty("status")
    private CapabilityRequirementStatus status;

    /**
     * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("dueDate")
    private Optional<String> dueDate;


    @JsonProperty("_links")
    private EntityCapabilityRequirementLinks links;

    @JsonCreator
    public EntityCapabilityRequirement(
            @JsonProperty("id") String id,
            @JsonProperty("status") CapabilityRequirementStatus status,
            @JsonProperty("dueDate") Optional<String> dueDate,
            @JsonProperty("_links") EntityCapabilityRequirementLinks links) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(dueDate, "dueDate");
        Utils.checkNotNull(links, "links");
        this.id = id;
        this.status = status;
        this.dueDate = dueDate;
        this.links = links;
    }
    
    public EntityCapabilityRequirement(
            String id,
            CapabilityRequirementStatus status,
            EntityCapabilityRequirementLinks links) {
        this(id, status, Optional.empty(),
            links);
    }

    /**
     * The name of this requirement, referring to the task to be fulfilled by the organization
     * to enable or re-enable the capability. The name is unique among other requirements
     * of the same capability.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The status of the requirement depends on its due date.
     * If no due date is given, the status will be `requested`.
     */
    @JsonIgnore
    public CapabilityRequirementStatus status() {
        return status;
    }

    /**
     * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
     */
    @JsonIgnore
    public Optional<String> dueDate() {
        return dueDate;
    }

    @JsonIgnore
    public EntityCapabilityRequirementLinks links() {
        return links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of this requirement, referring to the task to be fulfilled by the organization
     * to enable or re-enable the capability. The name is unique among other requirements
     * of the same capability.
     */
    public EntityCapabilityRequirement withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The status of the requirement depends on its due date.
     * If no due date is given, the status will be `requested`.
     */
    public EntityCapabilityRequirement withStatus(CapabilityRequirementStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
     */
    public EntityCapabilityRequirement withDueDate(String dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = Optional.ofNullable(dueDate);
        return this;
    }


    /**
     * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
     */
    public EntityCapabilityRequirement withDueDate(Optional<String> dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = dueDate;
        return this;
    }

    public EntityCapabilityRequirement withLinks(EntityCapabilityRequirementLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityCapabilityRequirement other = (EntityCapabilityRequirement) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.dueDate, other.dueDate) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, status, dueDate,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityCapabilityRequirement.class,
                "id", id,
                "status", status,
                "dueDate", dueDate,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private CapabilityRequirementStatus status;

        private Optional<String> dueDate = Optional.empty();

        private EntityCapabilityRequirementLinks links;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of this requirement, referring to the task to be fulfilled by the organization
         * to enable or re-enable the capability. The name is unique among other requirements
         * of the same capability.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The status of the requirement depends on its due date.
         * If no due date is given, the status will be `requested`.
         */
        public Builder status(CapabilityRequirementStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
         */
        public Builder dueDate(String dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }

        /**
         * Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format.
         */
        public Builder dueDate(Optional<String> dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = dueDate;
            return this;
        }


        public Builder links(EntityCapabilityRequirementLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public EntityCapabilityRequirement build() {

            return new EntityCapabilityRequirement(
                id, status, dueDate,
                links);
        }

    }
}
