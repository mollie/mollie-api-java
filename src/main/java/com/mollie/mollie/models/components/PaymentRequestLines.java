/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class PaymentRequestLines {
    /**
     * The type of product purchased. For example, a physical or a digital product.
     * 
     * <p>The `tip` payment line type is not available when creating a payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends PaymentRequestType> type;

    /**
     * A description of the line item. For example *LEGO 4440 Forest Police Station*.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The number of items.
     */
    @JsonProperty("quantity")
    private long quantity;

    /**
     * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityUnit")
    private Optional<String> quantityUnit;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("unitPrice")
    private Amount unitPrice;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountAmount")
    private Optional<? extends Amount> discountAmount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("totalAmount")
    private Amount totalAmount;

    /**
     * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
     * not as a float, to ensure the correct number of decimals are passed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatRate")
    private Optional<String> vatRate;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatAmount")
    private Optional<? extends Amount> vatAmount;

    /**
     * The SKU, EAN, ISBN or UPC of the product sold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private Optional<String> sku;

    /**
     * An array with the voucher categories, in case of a line eligible for a voucher. See the
     * [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    private Optional<? extends List<PaymentRequestCategories>> categories;

    /**
     * A link pointing to an image of the product sold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageUrl")
    private Optional<String> imageUrl;

    /**
     * A link pointing to the product page in your web shop of the product sold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productUrl")
    private Optional<String> productUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurring")
    private Optional<? extends RecurringLineItem> recurring;

    @JsonCreator
    public PaymentRequestLines(
            @JsonProperty("type") Optional<? extends PaymentRequestType> type,
            @JsonProperty("description") String description,
            @JsonProperty("quantity") long quantity,
            @JsonProperty("quantityUnit") Optional<String> quantityUnit,
            @JsonProperty("unitPrice") Amount unitPrice,
            @JsonProperty("discountAmount") Optional<? extends Amount> discountAmount,
            @JsonProperty("totalAmount") Amount totalAmount,
            @JsonProperty("vatRate") Optional<String> vatRate,
            @JsonProperty("vatAmount") Optional<? extends Amount> vatAmount,
            @JsonProperty("sku") Optional<String> sku,
            @JsonProperty("categories") Optional<? extends List<PaymentRequestCategories>> categories,
            @JsonProperty("imageUrl") Optional<String> imageUrl,
            @JsonProperty("productUrl") Optional<String> productUrl,
            @JsonProperty("recurring") Optional<? extends RecurringLineItem> recurring) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(quantityUnit, "quantityUnit");
        Utils.checkNotNull(unitPrice, "unitPrice");
        Utils.checkNotNull(discountAmount, "discountAmount");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(vatRate, "vatRate");
        Utils.checkNotNull(vatAmount, "vatAmount");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(productUrl, "productUrl");
        Utils.checkNotNull(recurring, "recurring");
        this.type = type;
        this.description = description;
        this.quantity = quantity;
        this.quantityUnit = quantityUnit;
        this.unitPrice = unitPrice;
        this.discountAmount = discountAmount;
        this.totalAmount = totalAmount;
        this.vatRate = vatRate;
        this.vatAmount = vatAmount;
        this.sku = sku;
        this.categories = categories;
        this.imageUrl = imageUrl;
        this.productUrl = productUrl;
        this.recurring = recurring;
    }
    
    public PaymentRequestLines(
            String description,
            long quantity,
            Amount unitPrice,
            Amount totalAmount) {
        this(Optional.empty(), description, quantity,
            Optional.empty(), unitPrice, Optional.empty(),
            totalAmount, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * The type of product purchased. For example, a physical or a digital product.
     * 
     * <p>The `tip` payment line type is not available when creating a payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentRequestType> type() {
        return (Optional<PaymentRequestType>) type;
    }

    /**
     * A description of the line item. For example *LEGO 4440 Forest Police Station*.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The number of items.
     */
    @JsonIgnore
    public long quantity() {
        return quantity;
    }

    /**
     * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
     */
    @JsonIgnore
    public Optional<String> quantityUnit() {
        return quantityUnit;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount unitPrice() {
        return unitPrice;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> discountAmount() {
        return (Optional<Amount>) discountAmount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount totalAmount() {
        return totalAmount;
    }

    /**
     * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
     * not as a float, to ensure the correct number of decimals are passed.
     */
    @JsonIgnore
    public Optional<String> vatRate() {
        return vatRate;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> vatAmount() {
        return (Optional<Amount>) vatAmount;
    }

    /**
     * The SKU, EAN, ISBN or UPC of the product sold.
     */
    @JsonIgnore
    public Optional<String> sku() {
        return sku;
    }

    /**
     * An array with the voucher categories, in case of a line eligible for a voucher. See the
     * [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PaymentRequestCategories>> categories() {
        return (Optional<List<PaymentRequestCategories>>) categories;
    }

    /**
     * A link pointing to an image of the product sold.
     */
    @JsonIgnore
    public Optional<String> imageUrl() {
        return imageUrl;
    }

    /**
     * A link pointing to the product page in your web shop of the product sold.
     */
    @JsonIgnore
    public Optional<String> productUrl() {
        return productUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RecurringLineItem> recurring() {
        return (Optional<RecurringLineItem>) recurring;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The type of product purchased. For example, a physical or a digital product.
     * 
     * <p>The `tip` payment line type is not available when creating a payment.
     */
    public PaymentRequestLines withType(PaymentRequestType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    /**
     * The type of product purchased. For example, a physical or a digital product.
     * 
     * <p>The `tip` payment line type is not available when creating a payment.
     */
    public PaymentRequestLines withType(Optional<? extends PaymentRequestType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * A description of the line item. For example *LEGO 4440 Forest Police Station*.
     */
    public PaymentRequestLines withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The number of items.
     */
    public PaymentRequestLines withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
     */
    public PaymentRequestLines withQuantityUnit(String quantityUnit) {
        Utils.checkNotNull(quantityUnit, "quantityUnit");
        this.quantityUnit = Optional.ofNullable(quantityUnit);
        return this;
    }


    /**
     * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
     */
    public PaymentRequestLines withQuantityUnit(Optional<String> quantityUnit) {
        Utils.checkNotNull(quantityUnit, "quantityUnit");
        this.quantityUnit = quantityUnit;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public PaymentRequestLines withUnitPrice(Amount unitPrice) {
        Utils.checkNotNull(unitPrice, "unitPrice");
        this.unitPrice = unitPrice;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public PaymentRequestLines withDiscountAmount(Amount discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = Optional.ofNullable(discountAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public PaymentRequestLines withDiscountAmount(Optional<? extends Amount> discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = discountAmount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public PaymentRequestLines withTotalAmount(Amount totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
     * not as a float, to ensure the correct number of decimals are passed.
     */
    public PaymentRequestLines withVatRate(String vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = Optional.ofNullable(vatRate);
        return this;
    }


    /**
     * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
     * not as a float, to ensure the correct number of decimals are passed.
     */
    public PaymentRequestLines withVatRate(Optional<String> vatRate) {
        Utils.checkNotNull(vatRate, "vatRate");
        this.vatRate = vatRate;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public PaymentRequestLines withVatAmount(Amount vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = Optional.ofNullable(vatAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public PaymentRequestLines withVatAmount(Optional<? extends Amount> vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = vatAmount;
        return this;
    }

    /**
     * The SKU, EAN, ISBN or UPC of the product sold.
     */
    public PaymentRequestLines withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = Optional.ofNullable(sku);
        return this;
    }


    /**
     * The SKU, EAN, ISBN or UPC of the product sold.
     */
    public PaymentRequestLines withSku(Optional<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * An array with the voucher categories, in case of a line eligible for a voucher. See the
     * [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
     */
    public PaymentRequestLines withCategories(List<PaymentRequestCategories> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = Optional.ofNullable(categories);
        return this;
    }


    /**
     * An array with the voucher categories, in case of a line eligible for a voucher. See the
     * [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
     */
    public PaymentRequestLines withCategories(Optional<? extends List<PaymentRequestCategories>> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    /**
     * A link pointing to an image of the product sold.
     */
    public PaymentRequestLines withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = Optional.ofNullable(imageUrl);
        return this;
    }


    /**
     * A link pointing to an image of the product sold.
     */
    public PaymentRequestLines withImageUrl(Optional<String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    /**
     * A link pointing to the product page in your web shop of the product sold.
     */
    public PaymentRequestLines withProductUrl(String productUrl) {
        Utils.checkNotNull(productUrl, "productUrl");
        this.productUrl = Optional.ofNullable(productUrl);
        return this;
    }


    /**
     * A link pointing to the product page in your web shop of the product sold.
     */
    public PaymentRequestLines withProductUrl(Optional<String> productUrl) {
        Utils.checkNotNull(productUrl, "productUrl");
        this.productUrl = productUrl;
        return this;
    }

    public PaymentRequestLines withRecurring(RecurringLineItem recurring) {
        Utils.checkNotNull(recurring, "recurring");
        this.recurring = Optional.ofNullable(recurring);
        return this;
    }


    public PaymentRequestLines withRecurring(Optional<? extends RecurringLineItem> recurring) {
        Utils.checkNotNull(recurring, "recurring");
        this.recurring = recurring;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentRequestLines other = (PaymentRequestLines) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.quantity, other.quantity) &&
            Utils.enhancedDeepEquals(this.quantityUnit, other.quantityUnit) &&
            Utils.enhancedDeepEquals(this.unitPrice, other.unitPrice) &&
            Utils.enhancedDeepEquals(this.discountAmount, other.discountAmount) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.vatRate, other.vatRate) &&
            Utils.enhancedDeepEquals(this.vatAmount, other.vatAmount) &&
            Utils.enhancedDeepEquals(this.sku, other.sku) &&
            Utils.enhancedDeepEquals(this.categories, other.categories) &&
            Utils.enhancedDeepEquals(this.imageUrl, other.imageUrl) &&
            Utils.enhancedDeepEquals(this.productUrl, other.productUrl) &&
            Utils.enhancedDeepEquals(this.recurring, other.recurring);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, description, quantity,
            quantityUnit, unitPrice, discountAmount,
            totalAmount, vatRate, vatAmount,
            sku, categories, imageUrl,
            productUrl, recurring);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentRequestLines.class,
                "type", type,
                "description", description,
                "quantity", quantity,
                "quantityUnit", quantityUnit,
                "unitPrice", unitPrice,
                "discountAmount", discountAmount,
                "totalAmount", totalAmount,
                "vatRate", vatRate,
                "vatAmount", vatAmount,
                "sku", sku,
                "categories", categories,
                "imageUrl", imageUrl,
                "productUrl", productUrl,
                "recurring", recurring);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends PaymentRequestType> type = Optional.empty();

        private String description;

        private Long quantity;

        private Optional<String> quantityUnit = Optional.empty();

        private Amount unitPrice;

        private Optional<? extends Amount> discountAmount = Optional.empty();

        private Amount totalAmount;

        private Optional<String> vatRate = Optional.empty();

        private Optional<? extends Amount> vatAmount = Optional.empty();

        private Optional<String> sku = Optional.empty();

        private Optional<? extends List<PaymentRequestCategories>> categories = Optional.empty();

        private Optional<String> imageUrl = Optional.empty();

        private Optional<String> productUrl = Optional.empty();

        private Optional<? extends RecurringLineItem> recurring = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The type of product purchased. For example, a physical or a digital product.
         * 
         * <p>The `tip` payment line type is not available when creating a payment.
         */
        public Builder type(PaymentRequestType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of product purchased. For example, a physical or a digital product.
         * 
         * <p>The `tip` payment line type is not available when creating a payment.
         */
        public Builder type(Optional<? extends PaymentRequestType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * A description of the line item. For example *LEGO 4440 Forest Police Station*.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The number of items.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }


        /**
         * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
         */
        public Builder quantityUnit(String quantityUnit) {
            Utils.checkNotNull(quantityUnit, "quantityUnit");
            this.quantityUnit = Optional.ofNullable(quantityUnit);
            return this;
        }

        /**
         * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
         */
        public Builder quantityUnit(Optional<String> quantityUnit) {
            Utils.checkNotNull(quantityUnit, "quantityUnit");
            this.quantityUnit = quantityUnit;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder unitPrice(Amount unitPrice) {
            Utils.checkNotNull(unitPrice, "unitPrice");
            this.unitPrice = unitPrice;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder discountAmount(Amount discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = Optional.ofNullable(discountAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder discountAmount(Optional<? extends Amount> discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = discountAmount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder totalAmount(Amount totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }


        /**
         * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
         * not as a float, to ensure the correct number of decimals are passed.
         */
        public Builder vatRate(String vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = Optional.ofNullable(vatRate);
            return this;
        }

        /**
         * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and
         * not as a float, to ensure the correct number of decimals are passed.
         */
        public Builder vatRate(Optional<String> vatRate) {
            Utils.checkNotNull(vatRate, "vatRate");
            this.vatRate = vatRate;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder vatAmount(Amount vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = Optional.ofNullable(vatAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder vatAmount(Optional<? extends Amount> vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = vatAmount;
            return this;
        }


        /**
         * The SKU, EAN, ISBN or UPC of the product sold.
         */
        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = Optional.ofNullable(sku);
            return this;
        }

        /**
         * The SKU, EAN, ISBN or UPC of the product sold.
         */
        public Builder sku(Optional<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }


        /**
         * An array with the voucher categories, in case of a line eligible for a voucher. See the
         * [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
         */
        public Builder categories(List<PaymentRequestCategories> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        /**
         * An array with the voucher categories, in case of a line eligible for a voucher. See the
         * [Integrating Vouchers](https://docs.mollie.com/docs/integrating-vouchers/) guide for more information.
         */
        public Builder categories(Optional<? extends List<PaymentRequestCategories>> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }


        /**
         * A link pointing to an image of the product sold.
         */
        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = Optional.ofNullable(imageUrl);
            return this;
        }

        /**
         * A link pointing to an image of the product sold.
         */
        public Builder imageUrl(Optional<String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }


        /**
         * A link pointing to the product page in your web shop of the product sold.
         */
        public Builder productUrl(String productUrl) {
            Utils.checkNotNull(productUrl, "productUrl");
            this.productUrl = Optional.ofNullable(productUrl);
            return this;
        }

        /**
         * A link pointing to the product page in your web shop of the product sold.
         */
        public Builder productUrl(Optional<String> productUrl) {
            Utils.checkNotNull(productUrl, "productUrl");
            this.productUrl = productUrl;
            return this;
        }


        public Builder recurring(RecurringLineItem recurring) {
            Utils.checkNotNull(recurring, "recurring");
            this.recurring = Optional.ofNullable(recurring);
            return this;
        }

        public Builder recurring(Optional<? extends RecurringLineItem> recurring) {
            Utils.checkNotNull(recurring, "recurring");
            this.recurring = recurring;
            return this;
        }

        public PaymentRequestLines build() {

            return new PaymentRequestLines(
                type, description, quantity,
                quantityUnit, unitPrice, discountAmount,
                totalAmount, vatRate, vatAmount,
                sku, categories, imageUrl,
                productUrl, recurring);
        }

    }
}
