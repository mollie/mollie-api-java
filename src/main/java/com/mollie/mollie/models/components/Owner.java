/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * Owner
 * 
 * <p>Personal data of your customer.
 */
public class Owner {
    /**
     * The email address of your customer.
     */
    @JsonProperty("email")
    private String email;

    /**
     * The given name (first name) of your customer.
     */
    @JsonProperty("givenName")
    private String givenName;

    /**
     * The family name (surname) of your customer.
     */
    @JsonProperty("familyName")
    private String familyName;

    /**
     * Allows you to preset the language to be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    private Optional<? extends LocaleResponse> locale;

    @JsonCreator
    public Owner(
            @JsonProperty("email") String email,
            @JsonProperty("givenName") String givenName,
            @JsonProperty("familyName") String familyName,
            @JsonProperty("locale") Optional<? extends LocaleResponse> locale) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(givenName, "givenName");
        Utils.checkNotNull(familyName, "familyName");
        Utils.checkNotNull(locale, "locale");
        this.email = email;
        this.givenName = givenName;
        this.familyName = familyName;
        this.locale = locale;
    }
    
    public Owner(
            String email,
            String givenName,
            String familyName) {
        this(email, givenName, familyName,
            Optional.empty());
    }

    /**
     * The email address of your customer.
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * The given name (first name) of your customer.
     */
    @JsonIgnore
    public String givenName() {
        return givenName;
    }

    /**
     * The family name (surname) of your customer.
     */
    @JsonIgnore
    public String familyName() {
        return familyName;
    }

    /**
     * Allows you to preset the language to be used.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LocaleResponse> locale() {
        return (Optional<LocaleResponse>) locale;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The email address of your customer.
     */
    public Owner withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The given name (first name) of your customer.
     */
    public Owner withGivenName(String givenName) {
        Utils.checkNotNull(givenName, "givenName");
        this.givenName = givenName;
        return this;
    }

    /**
     * The family name (surname) of your customer.
     */
    public Owner withFamilyName(String familyName) {
        Utils.checkNotNull(familyName, "familyName");
        this.familyName = familyName;
        return this;
    }

    /**
     * Allows you to preset the language to be used.
     */
    public Owner withLocale(LocaleResponse locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = Optional.ofNullable(locale);
        return this;
    }


    /**
     * Allows you to preset the language to be used.
     */
    public Owner withLocale(Optional<? extends LocaleResponse> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Owner other = (Owner) o;
        return 
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.givenName, other.givenName) &&
            Utils.enhancedDeepEquals(this.familyName, other.familyName) &&
            Utils.enhancedDeepEquals(this.locale, other.locale);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            email, givenName, familyName,
            locale);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Owner.class,
                "email", email,
                "givenName", givenName,
                "familyName", familyName,
                "locale", locale);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String email;

        private String givenName;

        private String familyName;

        private Optional<? extends LocaleResponse> locale = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The email address of your customer.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }


        /**
         * The given name (first name) of your customer.
         */
        public Builder givenName(String givenName) {
            Utils.checkNotNull(givenName, "givenName");
            this.givenName = givenName;
            return this;
        }


        /**
         * The family name (surname) of your customer.
         */
        public Builder familyName(String familyName) {
            Utils.checkNotNull(familyName, "familyName");
            this.familyName = familyName;
            return this;
        }


        /**
         * Allows you to preset the language to be used.
         */
        public Builder locale(LocaleResponse locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = Optional.ofNullable(locale);
            return this;
        }

        /**
         * Allows you to preset the language to be used.
         */
        public Builder locale(Optional<? extends LocaleResponse> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }

        public Owner build() {

            return new Owner(
                email, givenName, familyName,
                locale);
        }

    }
}
