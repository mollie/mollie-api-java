/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EntitySalesInvoiceResponse {
    /**
     * Indicates the response contains a sales invoice object. Will always contain the string
     * `sales-invoice` for this
     * endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * When issued, an invoice number will be set for the sales invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceNumber")
    private JsonNullable<String> invoiceNumber;

    /**
     * The status for the invoice to end up in.
     * 
     * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued`
     * sends it to
     * the recipient so they may then pay through our payment system. To skip our payment process, set this
     * to `paid` to
     * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
     * 
     * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
     * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
     * 
     * <p>Dependent parameters:
     * - `paymentDetails` is required if invoice should be set directly to `paid`
     * - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice
     * to `paid`
     * - `emailDetails` optional for `issued` and `paid` to send the invoice by email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends SalesInvoiceStatusResponse> status;

    /**
     * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatScheme")
    private Optional<? extends SalesInvoiceVatSchemeResponse> vatScheme;

    /**
     * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on
     * top of the
     * price. `inclusive` means the prices you are providing to us already contain the VAT you want to
     * apply.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatMode")
    private Optional<? extends SalesInvoiceVatModeResponse> vatMode;

    /**
     * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memo")
    private JsonNullable<String> memo;

    /**
     * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends EntitySalesInvoiceResponseMetadata> metadata;

    /**
     * The payment term to be set on the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentTerm")
    private JsonNullable<? extends SalesInvoicePaymentTermResponse> paymentTerm;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentDetails")
    private JsonNullable<? extends SalesInvoicePaymentDetailsResponse> paymentDetails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailDetails")
    private JsonNullable<? extends SalesInvoiceEmailDetails> emailDetails;

    /**
     * The identifier referring to the [customer](get-customer) you want to attempt an automated payment
     * for. If
     * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerId")
    private Optional<String> customerId;

    /**
     * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If
     * provided,
     * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandateId")
    private Optional<String> mandateId;

    /**
     * An identifier tied to the recipient data. This should be a unique value based on data your system
     * contains,
     * so that both you and us know who we're referring to. It is a value you provide to us so that
     * recipient management
     * is not required to send a first invoice to a recipient.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipientIdentifier")
    private Optional<String> recipientIdentifier;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient")
    private JsonNullable<? extends SalesInvoiceRecipientResponse> recipient;

    /**
     * Provide the line items for the invoice. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    private JsonNullable<? extends List<SalesInvoiceLineItemResponse>> lines;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount")
    private JsonNullable<? extends SalesInvoiceDiscountResponse> discount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountDue")
    private Optional<? extends Amount> amountDue;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtotalAmount")
    private Optional<? extends Amount> subtotalAmount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private Optional<? extends Amount> totalAmount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalVatAmount")
    private Optional<? extends Amount> totalVatAmount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountedSubtotalAmount")
    private Optional<? extends Amount> discountedSubtotalAmount;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<String> createdAt;

    /**
     * If issued, the date when the sales invoice was issued, in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuedAt")
    private JsonNullable<String> issuedAt;

    /**
     * If paid, the date when the sales invoice was paid, in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paidAt")
    private JsonNullable<String> paidAt;

    /**
     * If issued, the date when the sales invoice payment is due, in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dueAt")
    private JsonNullable<String> dueAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends EntitySalesInvoiceResponseLinks> links;

    @JsonCreator
    public EntitySalesInvoiceResponse(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("invoiceNumber") JsonNullable<String> invoiceNumber,
            @JsonProperty("status") Optional<? extends SalesInvoiceStatusResponse> status,
            @JsonProperty("vatScheme") Optional<? extends SalesInvoiceVatSchemeResponse> vatScheme,
            @JsonProperty("vatMode") Optional<? extends SalesInvoiceVatModeResponse> vatMode,
            @JsonProperty("memo") JsonNullable<String> memo,
            @JsonProperty("metadata") JsonNullable<? extends EntitySalesInvoiceResponseMetadata> metadata,
            @JsonProperty("paymentTerm") JsonNullable<? extends SalesInvoicePaymentTermResponse> paymentTerm,
            @JsonProperty("paymentDetails") JsonNullable<? extends SalesInvoicePaymentDetailsResponse> paymentDetails,
            @JsonProperty("emailDetails") JsonNullable<? extends SalesInvoiceEmailDetails> emailDetails,
            @JsonProperty("customerId") Optional<String> customerId,
            @JsonProperty("mandateId") Optional<String> mandateId,
            @JsonProperty("recipientIdentifier") Optional<String> recipientIdentifier,
            @JsonProperty("recipient") JsonNullable<? extends SalesInvoiceRecipientResponse> recipient,
            @JsonProperty("lines") JsonNullable<? extends List<SalesInvoiceLineItemResponse>> lines,
            @JsonProperty("discount") JsonNullable<? extends SalesInvoiceDiscountResponse> discount,
            @JsonProperty("amountDue") Optional<? extends Amount> amountDue,
            @JsonProperty("subtotalAmount") Optional<? extends Amount> subtotalAmount,
            @JsonProperty("totalAmount") Optional<? extends Amount> totalAmount,
            @JsonProperty("totalVatAmount") Optional<? extends Amount> totalVatAmount,
            @JsonProperty("discountedSubtotalAmount") Optional<? extends Amount> discountedSubtotalAmount,
            @JsonProperty("createdAt") Optional<String> createdAt,
            @JsonProperty("issuedAt") JsonNullable<String> issuedAt,
            @JsonProperty("paidAt") JsonNullable<String> paidAt,
            @JsonProperty("dueAt") JsonNullable<String> dueAt,
            @JsonProperty("_links") Optional<? extends EntitySalesInvoiceResponseLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(vatScheme, "vatScheme");
        Utils.checkNotNull(vatMode, "vatMode");
        Utils.checkNotNull(memo, "memo");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(paymentTerm, "paymentTerm");
        Utils.checkNotNull(paymentDetails, "paymentDetails");
        Utils.checkNotNull(emailDetails, "emailDetails");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(mandateId, "mandateId");
        Utils.checkNotNull(recipientIdentifier, "recipientIdentifier");
        Utils.checkNotNull(recipient, "recipient");
        Utils.checkNotNull(lines, "lines");
        Utils.checkNotNull(discount, "discount");
        Utils.checkNotNull(amountDue, "amountDue");
        Utils.checkNotNull(subtotalAmount, "subtotalAmount");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(totalVatAmount, "totalVatAmount");
        Utils.checkNotNull(discountedSubtotalAmount, "discountedSubtotalAmount");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(issuedAt, "issuedAt");
        Utils.checkNotNull(paidAt, "paidAt");
        Utils.checkNotNull(dueAt, "dueAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.invoiceNumber = invoiceNumber;
        this.status = status;
        this.vatScheme = vatScheme;
        this.vatMode = vatMode;
        this.memo = memo;
        this.metadata = metadata;
        this.paymentTerm = paymentTerm;
        this.paymentDetails = paymentDetails;
        this.emailDetails = emailDetails;
        this.customerId = customerId;
        this.mandateId = mandateId;
        this.recipientIdentifier = recipientIdentifier;
        this.recipient = recipient;
        this.lines = lines;
        this.discount = discount;
        this.amountDue = amountDue;
        this.subtotalAmount = subtotalAmount;
        this.totalAmount = totalAmount;
        this.totalVatAmount = totalVatAmount;
        this.discountedSubtotalAmount = discountedSubtotalAmount;
        this.createdAt = createdAt;
        this.issuedAt = issuedAt;
        this.paidAt = paidAt;
        this.dueAt = dueAt;
        this.links = links;
    }
    
    public EntitySalesInvoiceResponse() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Indicates the response contains a sales invoice object. Will always contain the string
     * `sales-invoice` for this
     * endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * When issued, an invoice number will be set for the sales invoice.
     */
    @JsonIgnore
    public JsonNullable<String> invoiceNumber() {
        return invoiceNumber;
    }

    /**
     * The status for the invoice to end up in.
     * 
     * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued`
     * sends it to
     * the recipient so they may then pay through our payment system. To skip our payment process, set this
     * to `paid` to
     * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
     * 
     * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
     * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
     * 
     * <p>Dependent parameters:
     * - `paymentDetails` is required if invoice should be set directly to `paid`
     * - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice
     * to `paid`
     * - `emailDetails` optional for `issued` and `paid` to send the invoice by email
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SalesInvoiceStatusResponse> status() {
        return (Optional<SalesInvoiceStatusResponse>) status;
    }

    /**
     * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SalesInvoiceVatSchemeResponse> vatScheme() {
        return (Optional<SalesInvoiceVatSchemeResponse>) vatScheme;
    }

    /**
     * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on
     * top of the
     * price. `inclusive` means the prices you are providing to us already contain the VAT you want to
     * apply.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SalesInvoiceVatModeResponse> vatMode() {
        return (Optional<SalesInvoiceVatModeResponse>) vatMode;
    }

    /**
     * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
     */
    @JsonIgnore
    public JsonNullable<String> memo() {
        return memo;
    }

    /**
     * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EntitySalesInvoiceResponseMetadata> metadata() {
        return (JsonNullable<EntitySalesInvoiceResponseMetadata>) metadata;
    }

    /**
     * The payment term to be set on the invoice.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<SalesInvoicePaymentTermResponse> paymentTerm() {
        return (JsonNullable<SalesInvoicePaymentTermResponse>) paymentTerm;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<SalesInvoicePaymentDetailsResponse> paymentDetails() {
        return (JsonNullable<SalesInvoicePaymentDetailsResponse>) paymentDetails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<SalesInvoiceEmailDetails> emailDetails() {
        return (JsonNullable<SalesInvoiceEmailDetails>) emailDetails;
    }

    /**
     * The identifier referring to the [customer](get-customer) you want to attempt an automated payment
     * for. If
     * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    @JsonIgnore
    public Optional<String> customerId() {
        return customerId;
    }

    /**
     * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If
     * provided,
     * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    @JsonIgnore
    public Optional<String> mandateId() {
        return mandateId;
    }

    /**
     * An identifier tied to the recipient data. This should be a unique value based on data your system
     * contains,
     * so that both you and us know who we're referring to. It is a value you provide to us so that
     * recipient management
     * is not required to send a first invoice to a recipient.
     */
    @JsonIgnore
    public Optional<String> recipientIdentifier() {
        return recipientIdentifier;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<SalesInvoiceRecipientResponse> recipient() {
        return (JsonNullable<SalesInvoiceRecipientResponse>) recipient;
    }

    /**
     * Provide the line items for the invoice. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the invoice.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<SalesInvoiceLineItemResponse>> lines() {
        return (JsonNullable<List<SalesInvoiceLineItemResponse>>) lines;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<SalesInvoiceDiscountResponse> discount() {
        return (JsonNullable<SalesInvoiceDiscountResponse>) discount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> amountDue() {
        return (Optional<Amount>) amountDue;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> subtotalAmount() {
        return (Optional<Amount>) subtotalAmount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> totalAmount() {
        return (Optional<Amount>) totalAmount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> totalVatAmount() {
        return (Optional<Amount>) totalVatAmount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> discountedSubtotalAmount() {
        return (Optional<Amount>) discountedSubtotalAmount;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * If issued, the date when the sales invoice was issued, in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonIgnore
    public JsonNullable<String> issuedAt() {
        return issuedAt;
    }

    /**
     * If paid, the date when the sales invoice was paid, in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonIgnore
    public JsonNullable<String> paidAt() {
        return paidAt;
    }

    /**
     * If issued, the date when the sales invoice payment is due, in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonIgnore
    public JsonNullable<String> dueAt() {
        return dueAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EntitySalesInvoiceResponseLinks> links() {
        return (Optional<EntitySalesInvoiceResponseLinks>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a sales invoice object. Will always contain the string
     * `sales-invoice` for this
     * endpoint.
     */
    public EntitySalesInvoiceResponse withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates the response contains a sales invoice object. Will always contain the string
     * `sales-invoice` for this
     * endpoint.
     */
    public EntitySalesInvoiceResponse withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public EntitySalesInvoiceResponse withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public EntitySalesInvoiceResponse withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * When issued, an invoice number will be set for the sales invoice.
     */
    public EntitySalesInvoiceResponse withInvoiceNumber(String invoiceNumber) {
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        this.invoiceNumber = JsonNullable.of(invoiceNumber);
        return this;
    }

    /**
     * When issued, an invoice number will be set for the sales invoice.
     */
    public EntitySalesInvoiceResponse withInvoiceNumber(JsonNullable<String> invoiceNumber) {
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        this.invoiceNumber = invoiceNumber;
        return this;
    }

    /**
     * The status for the invoice to end up in.
     * 
     * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued`
     * sends it to
     * the recipient so they may then pay through our payment system. To skip our payment process, set this
     * to `paid` to
     * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
     * 
     * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
     * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
     * 
     * <p>Dependent parameters:
     * - `paymentDetails` is required if invoice should be set directly to `paid`
     * - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice
     * to `paid`
     * - `emailDetails` optional for `issued` and `paid` to send the invoice by email
     */
    public EntitySalesInvoiceResponse withStatus(SalesInvoiceStatusResponse status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * The status for the invoice to end up in.
     * 
     * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued`
     * sends it to
     * the recipient so they may then pay through our payment system. To skip our payment process, set this
     * to `paid` to
     * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
     * 
     * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
     * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
     * 
     * <p>Dependent parameters:
     * - `paymentDetails` is required if invoice should be set directly to `paid`
     * - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice
     * to `paid`
     * - `emailDetails` optional for `issued` and `paid` to send the invoice by email
     */
    public EntitySalesInvoiceResponse withStatus(Optional<? extends SalesInvoiceStatusResponse> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
     */
    public EntitySalesInvoiceResponse withVatScheme(SalesInvoiceVatSchemeResponse vatScheme) {
        Utils.checkNotNull(vatScheme, "vatScheme");
        this.vatScheme = Optional.ofNullable(vatScheme);
        return this;
    }


    /**
     * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
     */
    public EntitySalesInvoiceResponse withVatScheme(Optional<? extends SalesInvoiceVatSchemeResponse> vatScheme) {
        Utils.checkNotNull(vatScheme, "vatScheme");
        this.vatScheme = vatScheme;
        return this;
    }

    /**
     * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on
     * top of the
     * price. `inclusive` means the prices you are providing to us already contain the VAT you want to
     * apply.
     */
    public EntitySalesInvoiceResponse withVatMode(SalesInvoiceVatModeResponse vatMode) {
        Utils.checkNotNull(vatMode, "vatMode");
        this.vatMode = Optional.ofNullable(vatMode);
        return this;
    }


    /**
     * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on
     * top of the
     * price. `inclusive` means the prices you are providing to us already contain the VAT you want to
     * apply.
     */
    public EntitySalesInvoiceResponse withVatMode(Optional<? extends SalesInvoiceVatModeResponse> vatMode) {
        Utils.checkNotNull(vatMode, "vatMode");
        this.vatMode = vatMode;
        return this;
    }

    /**
     * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
     */
    public EntitySalesInvoiceResponse withMemo(String memo) {
        Utils.checkNotNull(memo, "memo");
        this.memo = JsonNullable.of(memo);
        return this;
    }

    /**
     * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
     */
    public EntitySalesInvoiceResponse withMemo(JsonNullable<String> memo) {
        Utils.checkNotNull(memo, "memo");
        this.memo = memo;
        return this;
    }

    /**
     * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    public EntitySalesInvoiceResponse withMetadata(EntitySalesInvoiceResponseMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    /**
     * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
     * you fetch the entity with our API, we will also include the metadata. You can use up to
     * approximately 1kB.
     */
    public EntitySalesInvoiceResponse withMetadata(JsonNullable<? extends EntitySalesInvoiceResponseMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The payment term to be set on the invoice.
     */
    public EntitySalesInvoiceResponse withPaymentTerm(SalesInvoicePaymentTermResponse paymentTerm) {
        Utils.checkNotNull(paymentTerm, "paymentTerm");
        this.paymentTerm = JsonNullable.of(paymentTerm);
        return this;
    }

    /**
     * The payment term to be set on the invoice.
     */
    public EntitySalesInvoiceResponse withPaymentTerm(JsonNullable<? extends SalesInvoicePaymentTermResponse> paymentTerm) {
        Utils.checkNotNull(paymentTerm, "paymentTerm");
        this.paymentTerm = paymentTerm;
        return this;
    }

    public EntitySalesInvoiceResponse withPaymentDetails(SalesInvoicePaymentDetailsResponse paymentDetails) {
        Utils.checkNotNull(paymentDetails, "paymentDetails");
        this.paymentDetails = JsonNullable.of(paymentDetails);
        return this;
    }

    public EntitySalesInvoiceResponse withPaymentDetails(JsonNullable<? extends SalesInvoicePaymentDetailsResponse> paymentDetails) {
        Utils.checkNotNull(paymentDetails, "paymentDetails");
        this.paymentDetails = paymentDetails;
        return this;
    }

    public EntitySalesInvoiceResponse withEmailDetails(SalesInvoiceEmailDetails emailDetails) {
        Utils.checkNotNull(emailDetails, "emailDetails");
        this.emailDetails = JsonNullable.of(emailDetails);
        return this;
    }

    public EntitySalesInvoiceResponse withEmailDetails(JsonNullable<? extends SalesInvoiceEmailDetails> emailDetails) {
        Utils.checkNotNull(emailDetails, "emailDetails");
        this.emailDetails = emailDetails;
        return this;
    }

    /**
     * The identifier referring to the [customer](get-customer) you want to attempt an automated payment
     * for. If
     * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    public EntitySalesInvoiceResponse withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = Optional.ofNullable(customerId);
        return this;
    }


    /**
     * The identifier referring to the [customer](get-customer) you want to attempt an automated payment
     * for. If
     * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    public EntitySalesInvoiceResponse withCustomerId(Optional<String> customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If
     * provided,
     * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    public EntitySalesInvoiceResponse withMandateId(String mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = Optional.ofNullable(mandateId);
        return this;
    }


    /**
     * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If
     * provided,
     * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
     */
    public EntitySalesInvoiceResponse withMandateId(Optional<String> mandateId) {
        Utils.checkNotNull(mandateId, "mandateId");
        this.mandateId = mandateId;
        return this;
    }

    /**
     * An identifier tied to the recipient data. This should be a unique value based on data your system
     * contains,
     * so that both you and us know who we're referring to. It is a value you provide to us so that
     * recipient management
     * is not required to send a first invoice to a recipient.
     */
    public EntitySalesInvoiceResponse withRecipientIdentifier(String recipientIdentifier) {
        Utils.checkNotNull(recipientIdentifier, "recipientIdentifier");
        this.recipientIdentifier = Optional.ofNullable(recipientIdentifier);
        return this;
    }


    /**
     * An identifier tied to the recipient data. This should be a unique value based on data your system
     * contains,
     * so that both you and us know who we're referring to. It is a value you provide to us so that
     * recipient management
     * is not required to send a first invoice to a recipient.
     */
    public EntitySalesInvoiceResponse withRecipientIdentifier(Optional<String> recipientIdentifier) {
        Utils.checkNotNull(recipientIdentifier, "recipientIdentifier");
        this.recipientIdentifier = recipientIdentifier;
        return this;
    }

    public EntitySalesInvoiceResponse withRecipient(SalesInvoiceRecipientResponse recipient) {
        Utils.checkNotNull(recipient, "recipient");
        this.recipient = JsonNullable.of(recipient);
        return this;
    }

    public EntitySalesInvoiceResponse withRecipient(JsonNullable<? extends SalesInvoiceRecipientResponse> recipient) {
        Utils.checkNotNull(recipient, "recipient");
        this.recipient = recipient;
        return this;
    }

    /**
     * Provide the line items for the invoice. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the invoice.
     */
    public EntitySalesInvoiceResponse withLines(List<SalesInvoiceLineItemResponse> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = JsonNullable.of(lines);
        return this;
    }

    /**
     * Provide the line items for the invoice. Each line contains details such as a description of the item
     * ordered and its price.
     * 
     * <p>All lines must have the same currency as the invoice.
     */
    public EntitySalesInvoiceResponse withLines(JsonNullable<? extends List<SalesInvoiceLineItemResponse>> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = lines;
        return this;
    }

    public EntitySalesInvoiceResponse withDiscount(SalesInvoiceDiscountResponse discount) {
        Utils.checkNotNull(discount, "discount");
        this.discount = JsonNullable.of(discount);
        return this;
    }

    public EntitySalesInvoiceResponse withDiscount(JsonNullable<? extends SalesInvoiceDiscountResponse> discount) {
        Utils.checkNotNull(discount, "discount");
        this.discount = discount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntitySalesInvoiceResponse withAmountDue(Amount amountDue) {
        Utils.checkNotNull(amountDue, "amountDue");
        this.amountDue = Optional.ofNullable(amountDue);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntitySalesInvoiceResponse withAmountDue(Optional<? extends Amount> amountDue) {
        Utils.checkNotNull(amountDue, "amountDue");
        this.amountDue = amountDue;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntitySalesInvoiceResponse withSubtotalAmount(Amount subtotalAmount) {
        Utils.checkNotNull(subtotalAmount, "subtotalAmount");
        this.subtotalAmount = Optional.ofNullable(subtotalAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntitySalesInvoiceResponse withSubtotalAmount(Optional<? extends Amount> subtotalAmount) {
        Utils.checkNotNull(subtotalAmount, "subtotalAmount");
        this.subtotalAmount = subtotalAmount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntitySalesInvoiceResponse withTotalAmount(Amount totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntitySalesInvoiceResponse withTotalAmount(Optional<? extends Amount> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntitySalesInvoiceResponse withTotalVatAmount(Amount totalVatAmount) {
        Utils.checkNotNull(totalVatAmount, "totalVatAmount");
        this.totalVatAmount = Optional.ofNullable(totalVatAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntitySalesInvoiceResponse withTotalVatAmount(Optional<? extends Amount> totalVatAmount) {
        Utils.checkNotNull(totalVatAmount, "totalVatAmount");
        this.totalVatAmount = totalVatAmount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntitySalesInvoiceResponse withDiscountedSubtotalAmount(Amount discountedSubtotalAmount) {
        Utils.checkNotNull(discountedSubtotalAmount, "discountedSubtotalAmount");
        this.discountedSubtotalAmount = Optional.ofNullable(discountedSubtotalAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntitySalesInvoiceResponse withDiscountedSubtotalAmount(Optional<? extends Amount> discountedSubtotalAmount) {
        Utils.checkNotNull(discountedSubtotalAmount, "discountedSubtotalAmount");
        this.discountedSubtotalAmount = discountedSubtotalAmount;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public EntitySalesInvoiceResponse withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public EntitySalesInvoiceResponse withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * If issued, the date when the sales invoice was issued, in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public EntitySalesInvoiceResponse withIssuedAt(String issuedAt) {
        Utils.checkNotNull(issuedAt, "issuedAt");
        this.issuedAt = JsonNullable.of(issuedAt);
        return this;
    }

    /**
     * If issued, the date when the sales invoice was issued, in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public EntitySalesInvoiceResponse withIssuedAt(JsonNullable<String> issuedAt) {
        Utils.checkNotNull(issuedAt, "issuedAt");
        this.issuedAt = issuedAt;
        return this;
    }

    /**
     * If paid, the date when the sales invoice was paid, in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public EntitySalesInvoiceResponse withPaidAt(String paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = JsonNullable.of(paidAt);
        return this;
    }

    /**
     * If paid, the date when the sales invoice was paid, in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public EntitySalesInvoiceResponse withPaidAt(JsonNullable<String> paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = paidAt;
        return this;
    }

    /**
     * If issued, the date when the sales invoice payment is due, in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public EntitySalesInvoiceResponse withDueAt(String dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = JsonNullable.of(dueAt);
        return this;
    }

    /**
     * If issued, the date when the sales invoice payment is due, in [ISO
     * 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public EntitySalesInvoiceResponse withDueAt(JsonNullable<String> dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = dueAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntitySalesInvoiceResponse withLinks(EntitySalesInvoiceResponseLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntitySalesInvoiceResponse withLinks(Optional<? extends EntitySalesInvoiceResponseLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntitySalesInvoiceResponse other = (EntitySalesInvoiceResponse) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.invoiceNumber, other.invoiceNumber) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.vatScheme, other.vatScheme) &&
            Utils.enhancedDeepEquals(this.vatMode, other.vatMode) &&
            Utils.enhancedDeepEquals(this.memo, other.memo) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.paymentTerm, other.paymentTerm) &&
            Utils.enhancedDeepEquals(this.paymentDetails, other.paymentDetails) &&
            Utils.enhancedDeepEquals(this.emailDetails, other.emailDetails) &&
            Utils.enhancedDeepEquals(this.customerId, other.customerId) &&
            Utils.enhancedDeepEquals(this.mandateId, other.mandateId) &&
            Utils.enhancedDeepEquals(this.recipientIdentifier, other.recipientIdentifier) &&
            Utils.enhancedDeepEquals(this.recipient, other.recipient) &&
            Utils.enhancedDeepEquals(this.lines, other.lines) &&
            Utils.enhancedDeepEquals(this.discount, other.discount) &&
            Utils.enhancedDeepEquals(this.amountDue, other.amountDue) &&
            Utils.enhancedDeepEquals(this.subtotalAmount, other.subtotalAmount) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.totalVatAmount, other.totalVatAmount) &&
            Utils.enhancedDeepEquals(this.discountedSubtotalAmount, other.discountedSubtotalAmount) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.issuedAt, other.issuedAt) &&
            Utils.enhancedDeepEquals(this.paidAt, other.paidAt) &&
            Utils.enhancedDeepEquals(this.dueAt, other.dueAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, invoiceNumber,
            status, vatScheme, vatMode,
            memo, metadata, paymentTerm,
            paymentDetails, emailDetails, customerId,
            mandateId, recipientIdentifier, recipient,
            lines, discount, amountDue,
            subtotalAmount, totalAmount, totalVatAmount,
            discountedSubtotalAmount, createdAt, issuedAt,
            paidAt, dueAt, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntitySalesInvoiceResponse.class,
                "resource", resource,
                "id", id,
                "invoiceNumber", invoiceNumber,
                "status", status,
                "vatScheme", vatScheme,
                "vatMode", vatMode,
                "memo", memo,
                "metadata", metadata,
                "paymentTerm", paymentTerm,
                "paymentDetails", paymentDetails,
                "emailDetails", emailDetails,
                "customerId", customerId,
                "mandateId", mandateId,
                "recipientIdentifier", recipientIdentifier,
                "recipient", recipient,
                "lines", lines,
                "discount", discount,
                "amountDue", amountDue,
                "subtotalAmount", subtotalAmount,
                "totalAmount", totalAmount,
                "totalVatAmount", totalVatAmount,
                "discountedSubtotalAmount", discountedSubtotalAmount,
                "createdAt", createdAt,
                "issuedAt", issuedAt,
                "paidAt", paidAt,
                "dueAt", dueAt,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource = Optional.empty();

        private Optional<String> id = Optional.empty();

        private JsonNullable<String> invoiceNumber = JsonNullable.undefined();

        private Optional<? extends SalesInvoiceStatusResponse> status = Optional.empty();

        private Optional<? extends SalesInvoiceVatSchemeResponse> vatScheme = Optional.empty();

        private Optional<? extends SalesInvoiceVatModeResponse> vatMode = Optional.empty();

        private JsonNullable<String> memo = JsonNullable.undefined();

        private JsonNullable<? extends EntitySalesInvoiceResponseMetadata> metadata = JsonNullable.undefined();

        private JsonNullable<? extends SalesInvoicePaymentTermResponse> paymentTerm = JsonNullable.undefined();

        private JsonNullable<? extends SalesInvoicePaymentDetailsResponse> paymentDetails = JsonNullable.undefined();

        private JsonNullable<? extends SalesInvoiceEmailDetails> emailDetails = JsonNullable.undefined();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> mandateId = Optional.empty();

        private Optional<String> recipientIdentifier = Optional.empty();

        private JsonNullable<? extends SalesInvoiceRecipientResponse> recipient = JsonNullable.undefined();

        private JsonNullable<? extends List<SalesInvoiceLineItemResponse>> lines = JsonNullable.undefined();

        private JsonNullable<? extends SalesInvoiceDiscountResponse> discount = JsonNullable.undefined();

        private Optional<? extends Amount> amountDue = Optional.empty();

        private Optional<? extends Amount> subtotalAmount = Optional.empty();

        private Optional<? extends Amount> totalAmount = Optional.empty();

        private Optional<? extends Amount> totalVatAmount = Optional.empty();

        private Optional<? extends Amount> discountedSubtotalAmount = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private JsonNullable<String> issuedAt = JsonNullable.undefined();

        private JsonNullable<String> paidAt = JsonNullable.undefined();

        private JsonNullable<String> dueAt = JsonNullable.undefined();

        private Optional<? extends EntitySalesInvoiceResponseLinks> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a sales invoice object. Will always contain the string
         * `sales-invoice` for this
         * endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates the response contains a sales invoice object. Will always contain the string
         * `sales-invoice` for this
         * endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * When issued, an invoice number will be set for the sales invoice.
         */
        public Builder invoiceNumber(String invoiceNumber) {
            Utils.checkNotNull(invoiceNumber, "invoiceNumber");
            this.invoiceNumber = JsonNullable.of(invoiceNumber);
            return this;
        }

        /**
         * When issued, an invoice number will be set for the sales invoice.
         */
        public Builder invoiceNumber(JsonNullable<String> invoiceNumber) {
            Utils.checkNotNull(invoiceNumber, "invoiceNumber");
            this.invoiceNumber = invoiceNumber;
            return this;
        }


        /**
         * The status for the invoice to end up in.
         * 
         * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued`
         * sends it to
         * the recipient so they may then pay through our payment system. To skip our payment process, set this
         * to `paid` to
         * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
         * 
         * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
         * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
         * 
         * <p>Dependent parameters:
         * - `paymentDetails` is required if invoice should be set directly to `paid`
         * - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice
         * to `paid`
         * - `emailDetails` optional for `issued` and `paid` to send the invoice by email
         */
        public Builder status(SalesInvoiceStatusResponse status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status for the invoice to end up in.
         * 
         * <p>A `draft` invoice is not paid or not sent and can be updated after creation. Setting it to `issued`
         * sends it to
         * the recipient so they may then pay through our payment system. To skip our payment process, set this
         * to `paid` to
         * mark it as paid. It can then subsequently be sent as well, same as with `issued`.
         * 
         * <p>A status value that cannot be set but can be returned is `canceled`, for invoices which were
         * issued, but then canceled. Currently this can only be done for invoices created in the dashboard.
         * 
         * <p>Dependent parameters:
         * - `paymentDetails` is required if invoice should be set directly to `paid`
         * - `customerId` and `mandateId` are required if a recurring payment should be used to set the invoice
         * to `paid`
         * - `emailDetails` optional for `issued` and `paid` to send the invoice by email
         */
        public Builder status(Optional<? extends SalesInvoiceStatusResponse> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
         */
        public Builder vatScheme(SalesInvoiceVatSchemeResponse vatScheme) {
            Utils.checkNotNull(vatScheme, "vatScheme");
            this.vatScheme = Optional.ofNullable(vatScheme);
            return this;
        }

        /**
         * The VAT scheme to create the invoice for. You must be enrolled with One Stop Shop enabled to use it.
         */
        public Builder vatScheme(Optional<? extends SalesInvoiceVatSchemeResponse> vatScheme) {
            Utils.checkNotNull(vatScheme, "vatScheme");
            this.vatScheme = vatScheme;
            return this;
        }


        /**
         * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on
         * top of the
         * price. `inclusive` means the prices you are providing to us already contain the VAT you want to
         * apply.
         */
        public Builder vatMode(SalesInvoiceVatModeResponse vatMode) {
            Utils.checkNotNull(vatMode, "vatMode");
            this.vatMode = Optional.ofNullable(vatMode);
            return this;
        }

        /**
         * The VAT mode to use for VAT calculation. `exclusive` mode means we will apply the relevant VAT on
         * top of the
         * price. `inclusive` means the prices you are providing to us already contain the VAT you want to
         * apply.
         */
        public Builder vatMode(Optional<? extends SalesInvoiceVatModeResponse> vatMode) {
            Utils.checkNotNull(vatMode, "vatMode");
            this.vatMode = vatMode;
            return this;
        }


        /**
         * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
         */
        public Builder memo(String memo) {
            Utils.checkNotNull(memo, "memo");
            this.memo = JsonNullable.of(memo);
            return this;
        }

        /**
         * A free-form memo you can set on the invoice, and will be shown on the invoice PDF.
         */
        public Builder memo(JsonNullable<String> memo) {
            Utils.checkNotNull(memo, "memo");
            this.memo = memo;
            return this;
        }


        /**
         * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to
         * approximately 1kB.
         */
        public Builder metadata(EntitySalesInvoiceResponseMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        /**
         * Provide any data you like as a JSON object. We will save the data alongside the entity. Whenever
         * you fetch the entity with our API, we will also include the metadata. You can use up to
         * approximately 1kB.
         */
        public Builder metadata(JsonNullable<? extends EntitySalesInvoiceResponseMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * The payment term to be set on the invoice.
         */
        public Builder paymentTerm(SalesInvoicePaymentTermResponse paymentTerm) {
            Utils.checkNotNull(paymentTerm, "paymentTerm");
            this.paymentTerm = JsonNullable.of(paymentTerm);
            return this;
        }

        /**
         * The payment term to be set on the invoice.
         */
        public Builder paymentTerm(JsonNullable<? extends SalesInvoicePaymentTermResponse> paymentTerm) {
            Utils.checkNotNull(paymentTerm, "paymentTerm");
            this.paymentTerm = paymentTerm;
            return this;
        }


        public Builder paymentDetails(SalesInvoicePaymentDetailsResponse paymentDetails) {
            Utils.checkNotNull(paymentDetails, "paymentDetails");
            this.paymentDetails = JsonNullable.of(paymentDetails);
            return this;
        }

        public Builder paymentDetails(JsonNullable<? extends SalesInvoicePaymentDetailsResponse> paymentDetails) {
            Utils.checkNotNull(paymentDetails, "paymentDetails");
            this.paymentDetails = paymentDetails;
            return this;
        }


        public Builder emailDetails(SalesInvoiceEmailDetails emailDetails) {
            Utils.checkNotNull(emailDetails, "emailDetails");
            this.emailDetails = JsonNullable.of(emailDetails);
            return this;
        }

        public Builder emailDetails(JsonNullable<? extends SalesInvoiceEmailDetails> emailDetails) {
            Utils.checkNotNull(emailDetails, "emailDetails");
            this.emailDetails = emailDetails;
            return this;
        }


        /**
         * The identifier referring to the [customer](get-customer) you want to attempt an automated payment
         * for. If
         * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * The identifier referring to the [customer](get-customer) you want to attempt an automated payment
         * for. If
         * provided, `mandateId` becomes required as well. Only allowed for invoices with status `paid`.
         */
        public Builder customerId(Optional<String> customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }


        /**
         * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If
         * provided,
         * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
         */
        public Builder mandateId(String mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = Optional.ofNullable(mandateId);
            return this;
        }

        /**
         * The identifier referring to the [mandate](get-mandate) you want to use for the automated payment. If
         * provided,
         * `customerId` becomes required as well. Only allowed for invoices with status `paid`.
         */
        public Builder mandateId(Optional<String> mandateId) {
            Utils.checkNotNull(mandateId, "mandateId");
            this.mandateId = mandateId;
            return this;
        }


        /**
         * An identifier tied to the recipient data. This should be a unique value based on data your system
         * contains,
         * so that both you and us know who we're referring to. It is a value you provide to us so that
         * recipient management
         * is not required to send a first invoice to a recipient.
         */
        public Builder recipientIdentifier(String recipientIdentifier) {
            Utils.checkNotNull(recipientIdentifier, "recipientIdentifier");
            this.recipientIdentifier = Optional.ofNullable(recipientIdentifier);
            return this;
        }

        /**
         * An identifier tied to the recipient data. This should be a unique value based on data your system
         * contains,
         * so that both you and us know who we're referring to. It is a value you provide to us so that
         * recipient management
         * is not required to send a first invoice to a recipient.
         */
        public Builder recipientIdentifier(Optional<String> recipientIdentifier) {
            Utils.checkNotNull(recipientIdentifier, "recipientIdentifier");
            this.recipientIdentifier = recipientIdentifier;
            return this;
        }


        public Builder recipient(SalesInvoiceRecipientResponse recipient) {
            Utils.checkNotNull(recipient, "recipient");
            this.recipient = JsonNullable.of(recipient);
            return this;
        }

        public Builder recipient(JsonNullable<? extends SalesInvoiceRecipientResponse> recipient) {
            Utils.checkNotNull(recipient, "recipient");
            this.recipient = recipient;
            return this;
        }


        /**
         * Provide the line items for the invoice. Each line contains details such as a description of the item
         * ordered and its price.
         * 
         * <p>All lines must have the same currency as the invoice.
         */
        public Builder lines(List<SalesInvoiceLineItemResponse> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = JsonNullable.of(lines);
            return this;
        }

        /**
         * Provide the line items for the invoice. Each line contains details such as a description of the item
         * ordered and its price.
         * 
         * <p>All lines must have the same currency as the invoice.
         */
        public Builder lines(JsonNullable<? extends List<SalesInvoiceLineItemResponse>> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = lines;
            return this;
        }


        public Builder discount(SalesInvoiceDiscountResponse discount) {
            Utils.checkNotNull(discount, "discount");
            this.discount = JsonNullable.of(discount);
            return this;
        }

        public Builder discount(JsonNullable<? extends SalesInvoiceDiscountResponse> discount) {
            Utils.checkNotNull(discount, "discount");
            this.discount = discount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountDue(Amount amountDue) {
            Utils.checkNotNull(amountDue, "amountDue");
            this.amountDue = Optional.ofNullable(amountDue);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amountDue(Optional<? extends Amount> amountDue) {
            Utils.checkNotNull(amountDue, "amountDue");
            this.amountDue = amountDue;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder subtotalAmount(Amount subtotalAmount) {
            Utils.checkNotNull(subtotalAmount, "subtotalAmount");
            this.subtotalAmount = Optional.ofNullable(subtotalAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder subtotalAmount(Optional<? extends Amount> subtotalAmount) {
            Utils.checkNotNull(subtotalAmount, "subtotalAmount");
            this.subtotalAmount = subtotalAmount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder totalAmount(Amount totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder totalAmount(Optional<? extends Amount> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder totalVatAmount(Amount totalVatAmount) {
            Utils.checkNotNull(totalVatAmount, "totalVatAmount");
            this.totalVatAmount = Optional.ofNullable(totalVatAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder totalVatAmount(Optional<? extends Amount> totalVatAmount) {
            Utils.checkNotNull(totalVatAmount, "totalVatAmount");
            this.totalVatAmount = totalVatAmount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder discountedSubtotalAmount(Amount discountedSubtotalAmount) {
            Utils.checkNotNull(discountedSubtotalAmount, "discountedSubtotalAmount");
            this.discountedSubtotalAmount = Optional.ofNullable(discountedSubtotalAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder discountedSubtotalAmount(Optional<? extends Amount> discountedSubtotalAmount) {
            Utils.checkNotNull(discountedSubtotalAmount, "discountedSubtotalAmount");
            this.discountedSubtotalAmount = discountedSubtotalAmount;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * If issued, the date when the sales invoice was issued, in [ISO
         * 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder issuedAt(String issuedAt) {
            Utils.checkNotNull(issuedAt, "issuedAt");
            this.issuedAt = JsonNullable.of(issuedAt);
            return this;
        }

        /**
         * If issued, the date when the sales invoice was issued, in [ISO
         * 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder issuedAt(JsonNullable<String> issuedAt) {
            Utils.checkNotNull(issuedAt, "issuedAt");
            this.issuedAt = issuedAt;
            return this;
        }


        /**
         * If paid, the date when the sales invoice was paid, in [ISO
         * 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder paidAt(String paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = JsonNullable.of(paidAt);
            return this;
        }

        /**
         * If paid, the date when the sales invoice was paid, in [ISO
         * 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder paidAt(JsonNullable<String> paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = paidAt;
            return this;
        }


        /**
         * If issued, the date when the sales invoice payment is due, in [ISO
         * 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder dueAt(String dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = JsonNullable.of(dueAt);
            return this;
        }

        /**
         * If issued, the date when the sales invoice payment is due, in [ISO
         * 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder dueAt(JsonNullable<String> dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = dueAt;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(EntitySalesInvoiceResponseLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends EntitySalesInvoiceResponseLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public EntitySalesInvoiceResponse build() {

            return new EntitySalesInvoiceResponse(
                resource, id, invoiceNumber,
                status, vatScheme, vatMode,
                memo, metadata, paymentTerm,
                paymentDetails, emailDetails, customerId,
                mandateId, recipientIdentifier, recipient,
                lines, discount, amountDue,
                subtotalAmount, totalAmount, totalVatAmount,
                discountedSubtotalAmount, createdAt, issuedAt,
                paidAt, dueAt, links);
        }

    }
}
