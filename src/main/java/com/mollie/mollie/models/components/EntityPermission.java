/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;


public class EntityPermission {
    /**
     * Indicates the response contains a permission object. Will always contain the string `permission` for
     * this
     * endpoint.
     */
    @JsonProperty("resource")
    private String resource;


    @JsonProperty("id")
    private String id;

    /**
     * A short description of what kind of access the permission enables.
     */
    @JsonProperty("description")
    private String description;

    /**
     * Whether this permission is granted to the app by the organization.
     */
    @JsonProperty("granted")
    private boolean granted;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private EntityPermissionLinks links;

    @JsonCreator
    public EntityPermission(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") String id,
            @JsonProperty("description") String description,
            @JsonProperty("granted") boolean granted,
            @JsonProperty("_links") EntityPermissionLinks links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(granted, "granted");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.description = description;
        this.granted = granted;
        this.links = links;
    }

    /**
     * Indicates the response contains a permission object. Will always contain the string `permission` for
     * this
     * endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * A short description of what kind of access the permission enables.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * Whether this permission is granted to the app by the organization.
     */
    @JsonIgnore
    public boolean granted() {
        return granted;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public EntityPermissionLinks links() {
        return links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a permission object. Will always contain the string `permission` for
     * this
     * endpoint.
     */
    public EntityPermission withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public EntityPermission withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A short description of what kind of access the permission enables.
     */
    public EntityPermission withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Whether this permission is granted to the app by the organization.
     */
    public EntityPermission withGranted(boolean granted) {
        Utils.checkNotNull(granted, "granted");
        this.granted = granted;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityPermission withLinks(EntityPermissionLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityPermission other = (EntityPermission) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.granted, other.granted) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, description,
            granted, links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityPermission.class,
                "resource", resource,
                "id", id,
                "description", description,
                "granted", granted,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private String id;

        private String description;

        private Boolean granted;

        private EntityPermissionLinks links;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a permission object. Will always contain the string `permission` for
         * this
         * endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * A short description of what kind of access the permission enables.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * Whether this permission is granted to the app by the organization.
         */
        public Builder granted(boolean granted) {
            Utils.checkNotNull(granted, "granted");
            this.granted = granted;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(EntityPermissionLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public EntityPermission build() {

            return new EntityPermission(
                resource, id, description,
                granted, links);
        }

    }
}
