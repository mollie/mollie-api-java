/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class Chargeback {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentId")
    private Optional<String> paymentId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentDescription")
    private Optional<String> paymentDescription;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargebackId")
    private Optional<String> chargebackId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargebackDescription")
    private Optional<String> chargebackDescription;

    @JsonCreator
    public Chargeback(
            @JsonProperty("paymentId") Optional<String> paymentId,
            @JsonProperty("paymentDescription") Optional<String> paymentDescription,
            @JsonProperty("chargebackId") Optional<String> chargebackId,
            @JsonProperty("chargebackDescription") Optional<String> chargebackDescription) {
        Utils.checkNotNull(paymentId, "paymentId");
        Utils.checkNotNull(paymentDescription, "paymentDescription");
        Utils.checkNotNull(chargebackId, "chargebackId");
        Utils.checkNotNull(chargebackDescription, "chargebackDescription");
        this.paymentId = paymentId;
        this.paymentDescription = paymentDescription;
        this.chargebackId = chargebackId;
        this.chargebackDescription = chargebackDescription;
    }
    
    public Chargeback() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @JsonIgnore
    public Optional<String> paymentId() {
        return paymentId;
    }

    @JsonIgnore
    public Optional<String> paymentDescription() {
        return paymentDescription;
    }

    @JsonIgnore
    public Optional<String> chargebackId() {
        return chargebackId;
    }

    @JsonIgnore
    public Optional<String> chargebackDescription() {
        return chargebackDescription;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Chargeback withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = Optional.ofNullable(paymentId);
        return this;
    }


    public Chargeback withPaymentId(Optional<String> paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }

    public Chargeback withPaymentDescription(String paymentDescription) {
        Utils.checkNotNull(paymentDescription, "paymentDescription");
        this.paymentDescription = Optional.ofNullable(paymentDescription);
        return this;
    }


    public Chargeback withPaymentDescription(Optional<String> paymentDescription) {
        Utils.checkNotNull(paymentDescription, "paymentDescription");
        this.paymentDescription = paymentDescription;
        return this;
    }

    public Chargeback withChargebackId(String chargebackId) {
        Utils.checkNotNull(chargebackId, "chargebackId");
        this.chargebackId = Optional.ofNullable(chargebackId);
        return this;
    }


    public Chargeback withChargebackId(Optional<String> chargebackId) {
        Utils.checkNotNull(chargebackId, "chargebackId");
        this.chargebackId = chargebackId;
        return this;
    }

    public Chargeback withChargebackDescription(String chargebackDescription) {
        Utils.checkNotNull(chargebackDescription, "chargebackDescription");
        this.chargebackDescription = Optional.ofNullable(chargebackDescription);
        return this;
    }


    public Chargeback withChargebackDescription(Optional<String> chargebackDescription) {
        Utils.checkNotNull(chargebackDescription, "chargebackDescription");
        this.chargebackDescription = chargebackDescription;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Chargeback other = (Chargeback) o;
        return 
            Utils.enhancedDeepEquals(this.paymentId, other.paymentId) &&
            Utils.enhancedDeepEquals(this.paymentDescription, other.paymentDescription) &&
            Utils.enhancedDeepEquals(this.chargebackId, other.chargebackId) &&
            Utils.enhancedDeepEquals(this.chargebackDescription, other.chargebackDescription);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            paymentId, paymentDescription, chargebackId,
            chargebackDescription);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Chargeback.class,
                "paymentId", paymentId,
                "paymentDescription", paymentDescription,
                "chargebackId", chargebackId,
                "chargebackDescription", chargebackDescription);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> paymentId = Optional.empty();

        private Optional<String> paymentDescription = Optional.empty();

        private Optional<String> chargebackId = Optional.empty();

        private Optional<String> chargebackDescription = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        public Builder paymentId(Optional<String> paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }


        public Builder paymentDescription(String paymentDescription) {
            Utils.checkNotNull(paymentDescription, "paymentDescription");
            this.paymentDescription = Optional.ofNullable(paymentDescription);
            return this;
        }

        public Builder paymentDescription(Optional<String> paymentDescription) {
            Utils.checkNotNull(paymentDescription, "paymentDescription");
            this.paymentDescription = paymentDescription;
            return this;
        }


        public Builder chargebackId(String chargebackId) {
            Utils.checkNotNull(chargebackId, "chargebackId");
            this.chargebackId = Optional.ofNullable(chargebackId);
            return this;
        }

        public Builder chargebackId(Optional<String> chargebackId) {
            Utils.checkNotNull(chargebackId, "chargebackId");
            this.chargebackId = chargebackId;
            return this;
        }


        public Builder chargebackDescription(String chargebackDescription) {
            Utils.checkNotNull(chargebackDescription, "chargebackDescription");
            this.chargebackDescription = Optional.ofNullable(chargebackDescription);
            return this;
        }

        public Builder chargebackDescription(Optional<String> chargebackDescription) {
            Utils.checkNotNull(chargebackDescription, "chargebackDescription");
            this.chargebackDescription = chargebackDescription;
            return this;
        }

        public Chargeback build() {

            return new Chargeback(
                paymentId, paymentDescription, chargebackId,
                chargebackDescription);
        }

    }
}
