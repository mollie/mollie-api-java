/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * EntityRefundResponseSource
 * 
 * <p>Where the funds will be pulled back from.
 */
public class EntityRefundResponseSource {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationId")
    private Optional<String> organizationId;

    @JsonCreator
    public EntityRefundResponseSource(
            @JsonProperty("organizationId") Optional<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
    }
    
    public EntityRefundResponseSource() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> organizationId() {
        return organizationId;
    }

    public static Builder builder() {
        return new Builder();
    }


    public EntityRefundResponseSource withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }


    public EntityRefundResponseSource withOrganizationId(Optional<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityRefundResponseSource other = (EntityRefundResponseSource) o;
        return 
            Utils.enhancedDeepEquals(this.organizationId, other.organizationId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            organizationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityRefundResponseSource.class,
                "organizationId", organizationId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> organizationId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        public Builder organizationId(Optional<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public EntityRefundResponseSource build() {

            return new EntityRefundResponseSource(
                organizationId);
        }

    }
}
