/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EntityBalanceTransferResponse {
    /**
     * Indicates the response contains a balance transfer object. Will always contain the string
     * `connect-balance-transfer` for this endpoint.
     */
    @JsonProperty("resource")
    private String resource;


    @JsonProperty("id")
    private String id;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("amount")
    private Amount amount;

    /**
     * A party involved in the balance transfer, either the sender or the receiver.
     */
    @JsonProperty("source")
    private EntityBalanceTransferPartyResponse source;

    /**
     * A party involved in the balance transfer, either the sender or the receiver.
     */
    @JsonProperty("destination")
    private EntityBalanceTransferPartyResponse destination;

    /**
     * The transfer description for initiating party.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The status of the transfer.
     */
    @JsonProperty("status")
    private BalanceTransferStatus status;

    /**
     * The reason for the current status of the transfer, if applicable.
     */
    @JsonProperty("statusReason")
    private EntityBalanceTransferResponseStatusReason statusReason;

    /**
     * The type of the transfer. Different fees may apply to different types of transfers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    private Optional<? extends BalanceTransferCategoryResponse> category;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonProperty("createdAt")
    private String createdAt;

    /**
     * The date and time when the transfer was completed, in ISO 8601 format. This parameter is omitted if
     * the transfer is
     * not executed (yet).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("executedAt")
    private JsonNullable<String> executedAt;

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonProperty("mode")
    private Mode mode;

    @JsonCreator
    public EntityBalanceTransferResponse(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") String id,
            @JsonProperty("amount") Amount amount,
            @JsonProperty("source") EntityBalanceTransferPartyResponse source,
            @JsonProperty("destination") EntityBalanceTransferPartyResponse destination,
            @JsonProperty("description") String description,
            @JsonProperty("status") BalanceTransferStatus status,
            @JsonProperty("statusReason") EntityBalanceTransferResponseStatusReason statusReason,
            @JsonProperty("category") Optional<? extends BalanceTransferCategoryResponse> category,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("executedAt") JsonNullable<String> executedAt,
            @JsonProperty("mode") Mode mode) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(destination, "destination");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(statusReason, "statusReason");
        Utils.checkNotNull(category, "category");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(executedAt, "executedAt");
        Utils.checkNotNull(mode, "mode");
        this.resource = resource;
        this.id = id;
        this.amount = amount;
        this.source = source;
        this.destination = destination;
        this.description = description;
        this.status = status;
        this.statusReason = statusReason;
        this.category = category;
        this.createdAt = createdAt;
        this.executedAt = executedAt;
        this.mode = mode;
    }
    
    public EntityBalanceTransferResponse(
            String resource,
            String id,
            Amount amount,
            EntityBalanceTransferPartyResponse source,
            EntityBalanceTransferPartyResponse destination,
            String description,
            BalanceTransferStatus status,
            EntityBalanceTransferResponseStatusReason statusReason,
            String createdAt,
            Mode mode) {
        this(resource, id, amount,
            source, destination, description,
            status, statusReason, Optional.empty(),
            createdAt, JsonNullable.undefined(), mode);
    }

    /**
     * Indicates the response contains a balance transfer object. Will always contain the string
     * `connect-balance-transfer` for this endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount amount() {
        return amount;
    }

    /**
     * A party involved in the balance transfer, either the sender or the receiver.
     */
    @JsonIgnore
    public EntityBalanceTransferPartyResponse source() {
        return source;
    }

    /**
     * A party involved in the balance transfer, either the sender or the receiver.
     */
    @JsonIgnore
    public EntityBalanceTransferPartyResponse destination() {
        return destination;
    }

    /**
     * The transfer description for initiating party.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The status of the transfer.
     */
    @JsonIgnore
    public BalanceTransferStatus status() {
        return status;
    }

    /**
     * The reason for the current status of the transfer, if applicable.
     */
    @JsonIgnore
    public EntityBalanceTransferResponseStatusReason statusReason() {
        return statusReason;
    }

    /**
     * The type of the transfer. Different fees may apply to different types of transfers.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BalanceTransferCategoryResponse> category() {
        return (Optional<BalanceTransferCategoryResponse>) category;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    /**
     * The date and time when the transfer was completed, in ISO 8601 format. This parameter is omitted if
     * the transfer is
     * not executed (yet).
     */
    @JsonIgnore
    public JsonNullable<String> executedAt() {
        return executedAt;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonIgnore
    public Mode mode() {
        return mode;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a balance transfer object. Will always contain the string
     * `connect-balance-transfer` for this endpoint.
     */
    public EntityBalanceTransferResponse withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public EntityBalanceTransferResponse withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityBalanceTransferResponse withAmount(Amount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * A party involved in the balance transfer, either the sender or the receiver.
     */
    public EntityBalanceTransferResponse withSource(EntityBalanceTransferPartyResponse source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * A party involved in the balance transfer, either the sender or the receiver.
     */
    public EntityBalanceTransferResponse withDestination(EntityBalanceTransferPartyResponse destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = destination;
        return this;
    }

    /**
     * The transfer description for initiating party.
     */
    public EntityBalanceTransferResponse withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The status of the transfer.
     */
    public EntityBalanceTransferResponse withStatus(BalanceTransferStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The reason for the current status of the transfer, if applicable.
     */
    public EntityBalanceTransferResponse withStatusReason(EntityBalanceTransferResponseStatusReason statusReason) {
        Utils.checkNotNull(statusReason, "statusReason");
        this.statusReason = statusReason;
        return this;
    }

    /**
     * The type of the transfer. Different fees may apply to different types of transfers.
     */
    public EntityBalanceTransferResponse withCategory(BalanceTransferCategoryResponse category) {
        Utils.checkNotNull(category, "category");
        this.category = Optional.ofNullable(category);
        return this;
    }


    /**
     * The type of the transfer. Different fees may apply to different types of transfers.
     */
    public EntityBalanceTransferResponse withCategory(Optional<? extends BalanceTransferCategoryResponse> category) {
        Utils.checkNotNull(category, "category");
        this.category = category;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     * format.
     */
    public EntityBalanceTransferResponse withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date and time when the transfer was completed, in ISO 8601 format. This parameter is omitted if
     * the transfer is
     * not executed (yet).
     */
    public EntityBalanceTransferResponse withExecutedAt(String executedAt) {
        Utils.checkNotNull(executedAt, "executedAt");
        this.executedAt = JsonNullable.of(executedAt);
        return this;
    }

    /**
     * The date and time when the transfer was completed, in ISO 8601 format. This parameter is omitted if
     * the transfer is
     * not executed (yet).
     */
    public EntityBalanceTransferResponse withExecutedAt(JsonNullable<String> executedAt) {
        Utils.checkNotNull(executedAt, "executedAt");
        this.executedAt = executedAt;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public EntityBalanceTransferResponse withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityBalanceTransferResponse other = (EntityBalanceTransferResponse) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.source, other.source) &&
            Utils.enhancedDeepEquals(this.destination, other.destination) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.statusReason, other.statusReason) &&
            Utils.enhancedDeepEquals(this.category, other.category) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.executedAt, other.executedAt) &&
            Utils.enhancedDeepEquals(this.mode, other.mode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, amount,
            source, destination, description,
            status, statusReason, category,
            createdAt, executedAt, mode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityBalanceTransferResponse.class,
                "resource", resource,
                "id", id,
                "amount", amount,
                "source", source,
                "destination", destination,
                "description", description,
                "status", status,
                "statusReason", statusReason,
                "category", category,
                "createdAt", createdAt,
                "executedAt", executedAt,
                "mode", mode);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private String id;

        private Amount amount;

        private EntityBalanceTransferPartyResponse source;

        private EntityBalanceTransferPartyResponse destination;

        private String description;

        private BalanceTransferStatus status;

        private EntityBalanceTransferResponseStatusReason statusReason;

        private Optional<? extends BalanceTransferCategoryResponse> category = Optional.empty();

        private String createdAt;

        private JsonNullable<String> executedAt = JsonNullable.undefined();

        private Mode mode;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a balance transfer object. Will always contain the string
         * `connect-balance-transfer` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(Amount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * A party involved in the balance transfer, either the sender or the receiver.
         */
        public Builder source(EntityBalanceTransferPartyResponse source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }


        /**
         * A party involved in the balance transfer, either the sender or the receiver.
         */
        public Builder destination(EntityBalanceTransferPartyResponse destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = destination;
            return this;
        }


        /**
         * The transfer description for initiating party.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The status of the transfer.
         */
        public Builder status(BalanceTransferStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The reason for the current status of the transfer, if applicable.
         */
        public Builder statusReason(EntityBalanceTransferResponseStatusReason statusReason) {
            Utils.checkNotNull(statusReason, "statusReason");
            this.statusReason = statusReason;
            return this;
        }


        /**
         * The type of the transfer. Different fees may apply to different types of transfers.
         */
        public Builder category(BalanceTransferCategoryResponse category) {
            Utils.checkNotNull(category, "category");
            this.category = Optional.ofNullable(category);
            return this;
        }

        /**
         * The type of the transfer. Different fees may apply to different types of transfers.
         */
        public Builder category(Optional<? extends BalanceTransferCategoryResponse> category) {
            Utils.checkNotNull(category, "category");
            this.category = category;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         * format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The date and time when the transfer was completed, in ISO 8601 format. This parameter is omitted if
         * the transfer is
         * not executed (yet).
         */
        public Builder executedAt(String executedAt) {
            Utils.checkNotNull(executedAt, "executedAt");
            this.executedAt = JsonNullable.of(executedAt);
            return this;
        }

        /**
         * The date and time when the transfer was completed, in ISO 8601 format. This parameter is omitted if
         * the transfer is
         * not executed (yet).
         */
        public Builder executedAt(JsonNullable<String> executedAt) {
            Utils.checkNotNull(executedAt, "executedAt");
            this.executedAt = executedAt;
            return this;
        }


        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        public EntityBalanceTransferResponse build() {

            return new EntityBalanceTransferResponse(
                resource, id, amount,
                source, destination, description,
                status, statusReason, category,
                createdAt, executedAt, mode);
        }

    }
}
