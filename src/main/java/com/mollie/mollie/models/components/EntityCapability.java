/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EntityCapability {
    /**
     * Always the word `capability` for this resource type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * A unique name for this capability like `payments` / `settlements`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends EntityCapabilityStatus> status;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusReason")
    private JsonNullable<? extends EntityCapabilityStatusReason> statusReason;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requirements")
    private Optional<? extends List<EntityCapabilityRequirement>> requirements;

    @JsonCreator
    public EntityCapability(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("status") Optional<? extends EntityCapabilityStatus> status,
            @JsonProperty("statusReason") JsonNullable<? extends EntityCapabilityStatusReason> statusReason,
            @JsonProperty("requirements") Optional<? extends List<EntityCapabilityRequirement>> requirements) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(statusReason, "statusReason");
        Utils.checkNotNull(requirements, "requirements");
        this.resource = resource;
        this.name = name;
        this.status = status;
        this.statusReason = statusReason;
        this.requirements = requirements;
    }
    
    public EntityCapability() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Always the word `capability` for this resource type.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * A unique name for this capability like `payments` / `settlements`.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EntityCapabilityStatus> status() {
        return (Optional<EntityCapabilityStatus>) status;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EntityCapabilityStatusReason> statusReason() {
        return (JsonNullable<EntityCapabilityStatusReason>) statusReason;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EntityCapabilityRequirement>> requirements() {
        return (Optional<List<EntityCapabilityRequirement>>) requirements;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Always the word `capability` for this resource type.
     */
    public EntityCapability withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Always the word `capability` for this resource type.
     */
    public EntityCapability withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * A unique name for this capability like `payments` / `settlements`.
     */
    public EntityCapability withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * A unique name for this capability like `payments` / `settlements`.
     */
    public EntityCapability withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public EntityCapability withStatus(EntityCapabilityStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public EntityCapability withStatus(Optional<? extends EntityCapabilityStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public EntityCapability withStatusReason(EntityCapabilityStatusReason statusReason) {
        Utils.checkNotNull(statusReason, "statusReason");
        this.statusReason = JsonNullable.of(statusReason);
        return this;
    }

    public EntityCapability withStatusReason(JsonNullable<? extends EntityCapabilityStatusReason> statusReason) {
        Utils.checkNotNull(statusReason, "statusReason");
        this.statusReason = statusReason;
        return this;
    }

    public EntityCapability withRequirements(List<EntityCapabilityRequirement> requirements) {
        Utils.checkNotNull(requirements, "requirements");
        this.requirements = Optional.ofNullable(requirements);
        return this;
    }


    public EntityCapability withRequirements(Optional<? extends List<EntityCapabilityRequirement>> requirements) {
        Utils.checkNotNull(requirements, "requirements");
        this.requirements = requirements;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityCapability other = (EntityCapability) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.statusReason, other.statusReason) &&
            Utils.enhancedDeepEquals(this.requirements, other.requirements);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, name, status,
            statusReason, requirements);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityCapability.class,
                "resource", resource,
                "name", name,
                "status", status,
                "statusReason", statusReason,
                "requirements", requirements);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<? extends EntityCapabilityStatus> status = Optional.empty();

        private JsonNullable<? extends EntityCapabilityStatusReason> statusReason = JsonNullable.undefined();

        private Optional<? extends List<EntityCapabilityRequirement>> requirements = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Always the word `capability` for this resource type.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Always the word `capability` for this resource type.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * A unique name for this capability like `payments` / `settlements`.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * A unique name for this capability like `payments` / `settlements`.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder status(EntityCapabilityStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends EntityCapabilityStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder statusReason(EntityCapabilityStatusReason statusReason) {
            Utils.checkNotNull(statusReason, "statusReason");
            this.statusReason = JsonNullable.of(statusReason);
            return this;
        }

        public Builder statusReason(JsonNullable<? extends EntityCapabilityStatusReason> statusReason) {
            Utils.checkNotNull(statusReason, "statusReason");
            this.statusReason = statusReason;
            return this;
        }


        public Builder requirements(List<EntityCapabilityRequirement> requirements) {
            Utils.checkNotNull(requirements, "requirements");
            this.requirements = Optional.ofNullable(requirements);
            return this;
        }

        public Builder requirements(Optional<? extends List<EntityCapabilityRequirement>> requirements) {
            Utils.checkNotNull(requirements, "requirements");
            this.requirements = requirements;
            return this;
        }

        public EntityCapability build() {

            return new EntityCapability(
                resource, name, status,
                statusReason, requirements);
        }

    }
}
