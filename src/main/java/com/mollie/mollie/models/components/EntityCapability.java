/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class EntityCapability {
    /**
     * Always the word `capability` for this resource type.
     */
    @JsonProperty("resource")
    private String resource;

    /**
     * A unique name for this capability like `payments` / `settlements`.
     */
    @JsonProperty("name")
    private String name;


    @JsonProperty("status")
    private CapabilityStatus status;


    @JsonInclude(Include.ALWAYS)
    @JsonProperty("statusReason")
    private Optional<? extends CapabilityStatusReason> statusReason;


    @JsonProperty("requirements")
    private List<EntityCapabilityRequirement> requirements;

    @JsonCreator
    public EntityCapability(
            @JsonProperty("resource") String resource,
            @JsonProperty("name") String name,
            @JsonProperty("status") CapabilityStatus status,
            @JsonProperty("statusReason") Optional<? extends CapabilityStatusReason> statusReason,
            @JsonProperty("requirements") List<EntityCapabilityRequirement> requirements) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(statusReason, "statusReason");
        Utils.checkNotNull(requirements, "requirements");
        this.resource = resource;
        this.name = name;
        this.status = status;
        this.statusReason = statusReason;
        this.requirements = requirements;
    }
    
    public EntityCapability(
            String resource,
            String name,
            CapabilityStatus status,
            List<EntityCapabilityRequirement> requirements) {
        this(resource, name, status,
            Optional.empty(), requirements);
    }

    /**
     * Always the word `capability` for this resource type.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    /**
     * A unique name for this capability like `payments` / `settlements`.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public CapabilityStatus status() {
        return status;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CapabilityStatusReason> statusReason() {
        return (Optional<CapabilityStatusReason>) statusReason;
    }

    @JsonIgnore
    public List<EntityCapabilityRequirement> requirements() {
        return requirements;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Always the word `capability` for this resource type.
     */
    public EntityCapability withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * A unique name for this capability like `payments` / `settlements`.
     */
    public EntityCapability withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public EntityCapability withStatus(CapabilityStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public EntityCapability withStatusReason(CapabilityStatusReason statusReason) {
        Utils.checkNotNull(statusReason, "statusReason");
        this.statusReason = Optional.ofNullable(statusReason);
        return this;
    }


    public EntityCapability withStatusReason(Optional<? extends CapabilityStatusReason> statusReason) {
        Utils.checkNotNull(statusReason, "statusReason");
        this.statusReason = statusReason;
        return this;
    }

    public EntityCapability withRequirements(List<EntityCapabilityRequirement> requirements) {
        Utils.checkNotNull(requirements, "requirements");
        this.requirements = requirements;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityCapability other = (EntityCapability) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.statusReason, other.statusReason) &&
            Utils.enhancedDeepEquals(this.requirements, other.requirements);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, name, status,
            statusReason, requirements);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityCapability.class,
                "resource", resource,
                "name", name,
                "status", status,
                "statusReason", statusReason,
                "requirements", requirements);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private String name;

        private CapabilityStatus status;

        private Optional<? extends CapabilityStatusReason> statusReason = Optional.empty();

        private List<EntityCapabilityRequirement> requirements;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Always the word `capability` for this resource type.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * A unique name for this capability like `payments` / `settlements`.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder status(CapabilityStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder statusReason(CapabilityStatusReason statusReason) {
            Utils.checkNotNull(statusReason, "statusReason");
            this.statusReason = Optional.ofNullable(statusReason);
            return this;
        }

        public Builder statusReason(Optional<? extends CapabilityStatusReason> statusReason) {
            Utils.checkNotNull(statusReason, "statusReason");
            this.statusReason = statusReason;
            return this;
        }


        public Builder requirements(List<EntityCapabilityRequirement> requirements) {
            Utils.checkNotNull(requirements, "requirements");
            this.requirements = requirements;
            return this;
        }

        public EntityCapability build() {

            return new EntityCapability(
                resource, name, status,
                statusReason, requirements);
        }

    }
}
