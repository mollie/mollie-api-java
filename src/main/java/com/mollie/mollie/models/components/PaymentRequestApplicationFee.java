/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * PaymentRequestApplicationFee
 * 
 * <p>With Mollie Connect you can charge fees on payments that your app is processing on behalf of other
 * Mollie
 * merchants.
 * 
 * <p>If you use OAuth to create payments on a connected merchant's account, you can charge a fee using
 * this
 * `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's
 * balance and sent
 * to your own account balance.
 * 
 * <p>If instead you want to split a payment on your own account between yourself and a connected
 * merchant, refer to the
 * `routing` parameter.
 */
public class PaymentRequestApplicationFee {
    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends Amount> amount;

    /**
     * The description of the application fee. This will appear on settlement reports towards both you and
     * the
     * connected merchant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonCreator
    public PaymentRequestApplicationFee(
            @JsonProperty("amount") Optional<? extends Amount> amount,
            @JsonProperty("description") Optional<String> description) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        this.amount = amount;
        this.description = description;
    }
    
    public PaymentRequestApplicationFee() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> amount() {
        return (Optional<Amount>) amount;
    }

    /**
     * The description of the application fee. This will appear on settlement reports towards both you and
     * the
     * connected merchant.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public PaymentRequestApplicationFee withAmount(Amount amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public PaymentRequestApplicationFee withAmount(Optional<? extends Amount> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The description of the application fee. This will appear on settlement reports towards both you and
     * the
     * connected merchant.
     */
    public PaymentRequestApplicationFee withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * The description of the application fee. This will appear on settlement reports towards both you and
     * the
     * connected merchant.
     */
    public PaymentRequestApplicationFee withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentRequestApplicationFee other = (PaymentRequestApplicationFee) o;
        return 
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.description, other.description);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            amount, description);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentRequestApplicationFee.class,
                "amount", amount,
                "description", description);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends Amount> amount = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(Amount amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder amount(Optional<? extends Amount> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        /**
         * The description of the application fee. This will appear on settlement reports towards both you and
         * the
         * connected merchant.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the application fee. This will appear on settlement reports towards both you and
         * the
         * connected merchant.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public PaymentRequestApplicationFee build() {

            return new PaymentRequestApplicationFee(
                amount, description);
        }

    }
}
