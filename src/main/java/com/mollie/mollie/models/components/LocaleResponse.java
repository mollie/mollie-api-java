/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * LocaleResponse
 * 
 * <p>Allows you to preset the language to be used.
 */
@JsonDeserialize(using = LocaleResponse._Deserializer.class)
@JsonSerialize(using = LocaleResponse._Serializer.class)
public class LocaleResponse {

    public static final LocaleResponse EN_US = new LocaleResponse("en_US");
    public static final LocaleResponse EN_GB = new LocaleResponse("en_GB");
    public static final LocaleResponse NLNL = new LocaleResponse("nl_NL");
    public static final LocaleResponse NL_BE = new LocaleResponse("nl_BE");
    public static final LocaleResponse DEDE = new LocaleResponse("de_DE");
    public static final LocaleResponse DE_AT = new LocaleResponse("de_AT");
    public static final LocaleResponse DE_CH = new LocaleResponse("de_CH");
    public static final LocaleResponse FRFR = new LocaleResponse("fr_FR");
    public static final LocaleResponse FR_BE = new LocaleResponse("fr_BE");
    public static final LocaleResponse ESES = new LocaleResponse("es_ES");
    public static final LocaleResponse CA_ES = new LocaleResponse("ca_ES");
    public static final LocaleResponse PTPT = new LocaleResponse("pt_PT");
    public static final LocaleResponse ITIT = new LocaleResponse("it_IT");
    public static final LocaleResponse NB_NO = new LocaleResponse("nb_NO");
    public static final LocaleResponse SV_SE = new LocaleResponse("sv_SE");
    public static final LocaleResponse FIFI = new LocaleResponse("fi_FI");
    public static final LocaleResponse DA_DK = new LocaleResponse("da_DK");
    public static final LocaleResponse ISIS = new LocaleResponse("is_IS");
    public static final LocaleResponse HUHU = new LocaleResponse("hu_HU");
    public static final LocaleResponse PLPL = new LocaleResponse("pl_PL");
    public static final LocaleResponse LVLV = new LocaleResponse("lv_LV");
    public static final LocaleResponse LTLT = new LocaleResponse("lt_LT");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, LocaleResponse> values = createValuesMap();
    private static final Map<String, LocaleResponseEnum> enums = createEnumsMap();

    private final String value;

    private LocaleResponse(String value) {
        this.value = value;
    }

    /**
     * Returns a LocaleResponse with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as LocaleResponse
     */ 
    public static LocaleResponse of(String value) {
        synchronized (LocaleResponse.class) {
            return values.computeIfAbsent(value, v -> new LocaleResponse(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<LocaleResponseEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        LocaleResponse other = (LocaleResponse) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "LocaleResponse [value=" + value + "]";
    }

    // return an array just like an enum
    public static LocaleResponse[] values() {
        synchronized (LocaleResponse.class) {
            return values.values().toArray(new LocaleResponse[] {});
        }
    }

    private static final Map<String, LocaleResponse> createValuesMap() {
        Map<String, LocaleResponse> map = new LinkedHashMap<>();
        map.put("en_US", EN_US);
        map.put("en_GB", EN_GB);
        map.put("nl_NL", NLNL);
        map.put("nl_BE", NL_BE);
        map.put("de_DE", DEDE);
        map.put("de_AT", DE_AT);
        map.put("de_CH", DE_CH);
        map.put("fr_FR", FRFR);
        map.put("fr_BE", FR_BE);
        map.put("es_ES", ESES);
        map.put("ca_ES", CA_ES);
        map.put("pt_PT", PTPT);
        map.put("it_IT", ITIT);
        map.put("nb_NO", NB_NO);
        map.put("sv_SE", SV_SE);
        map.put("fi_FI", FIFI);
        map.put("da_DK", DA_DK);
        map.put("is_IS", ISIS);
        map.put("hu_HU", HUHU);
        map.put("pl_PL", PLPL);
        map.put("lv_LV", LVLV);
        map.put("lt_LT", LTLT);
        return map;
    }

    private static final Map<String, LocaleResponseEnum> createEnumsMap() {
        Map<String, LocaleResponseEnum> map = new HashMap<>();
        map.put("en_US", LocaleResponseEnum.EN_US);
        map.put("en_GB", LocaleResponseEnum.EN_GB);
        map.put("nl_NL", LocaleResponseEnum.NLNL);
        map.put("nl_BE", LocaleResponseEnum.NL_BE);
        map.put("de_DE", LocaleResponseEnum.DEDE);
        map.put("de_AT", LocaleResponseEnum.DE_AT);
        map.put("de_CH", LocaleResponseEnum.DE_CH);
        map.put("fr_FR", LocaleResponseEnum.FRFR);
        map.put("fr_BE", LocaleResponseEnum.FR_BE);
        map.put("es_ES", LocaleResponseEnum.ESES);
        map.put("ca_ES", LocaleResponseEnum.CA_ES);
        map.put("pt_PT", LocaleResponseEnum.PTPT);
        map.put("it_IT", LocaleResponseEnum.ITIT);
        map.put("nb_NO", LocaleResponseEnum.NB_NO);
        map.put("sv_SE", LocaleResponseEnum.SV_SE);
        map.put("fi_FI", LocaleResponseEnum.FIFI);
        map.put("da_DK", LocaleResponseEnum.DA_DK);
        map.put("is_IS", LocaleResponseEnum.ISIS);
        map.put("hu_HU", LocaleResponseEnum.HUHU);
        map.put("pl_PL", LocaleResponseEnum.PLPL);
        map.put("lv_LV", LocaleResponseEnum.LVLV);
        map.put("lt_LT", LocaleResponseEnum.LTLT);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<LocaleResponse> {

        protected _Serializer() {
            super(LocaleResponse.class);
        }

        @Override
        public void serialize(LocaleResponse value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<LocaleResponse> {

        protected _Deserializer() {
            super(LocaleResponse.class);
        }

        @Override
        public LocaleResponse deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return LocaleResponse.of(v);
        }
    }
    
    public enum LocaleResponseEnum {

        EN_US("en_US"),
        EN_GB("en_GB"),
        NLNL("nl_NL"),
        NL_BE("nl_BE"),
        DEDE("de_DE"),
        DE_AT("de_AT"),
        DE_CH("de_CH"),
        FRFR("fr_FR"),
        FR_BE("fr_BE"),
        ESES("es_ES"),
        CA_ES("ca_ES"),
        PTPT("pt_PT"),
        ITIT("it_IT"),
        NB_NO("nb_NO"),
        SV_SE("sv_SE"),
        FIFI("fi_FI"),
        DA_DK("da_DK"),
        ISIS("is_IS"),
        HUHU("hu_HU"),
        PLPL("pl_PL"),
        LVLV("lv_LV"),
        LTLT("lt_LT"),;

        private final String value;

        private LocaleResponseEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

