/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * PaymentResponseBillingAddress
 * 
 * <p>The customer's billing address details. We advise to provide these details to improve fraud
 * protection and
 * conversion.
 * 
 * <p>Should include `email` or a valid postal address consisting of `streetAndNumber`, `postalCode`,
 * `city` and
 * `country`.
 * 
 * <p>Required for payment method `in3`, `klarna`, `billie` and `riverty`.
 */
public class PaymentResponseBillingAddress {
    /**
     * The title of the person, for example *Mr.* or *Mrs.*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * The given name (first name) of the person should be at least two characters and cannot contain only
     * numbers.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("givenName")
    private Optional<String> givenName;

    /**
     * The given family name (surname) of the person should be at least two characters and cannot contain
     * only
     * numbers.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("familyName")
    private Optional<String> familyName;

    /**
     * The name of the organization, in case the addressee is an organization.
     * 
     * <p>Required for payment method `billie`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationName")
    private Optional<? extends Object> organizationName;

    /**
     * A street and street number.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streetAndNumber")
    private Optional<String> streetAndNumber;

    /**
     * Any additional addressing details, for example an apartment number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streetAdditional")
    private Optional<String> streetAdditional;

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postalCode")
    private Optional<String> postalCode;

    /**
     * A valid e-mail address.
     * 
     * <p>If you provide the email address for a `banktransfer` payment, we will automatically send the
     * instructions
     * email upon payment creation. The language of the email will follow the locale parameter of the
     * payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    /**
     * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example:
     * +31208202070.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<String> phone;

    /**
     * A city name.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<String> city;

    /**
     * The top-level administrative subdivision of the country. For example: Noord-Holland.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private Optional<String> region;

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<String> country;

    @JsonCreator
    public PaymentResponseBillingAddress(
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("givenName") Optional<String> givenName,
            @JsonProperty("familyName") Optional<String> familyName,
            @JsonProperty("organizationName") Optional<? extends Object> organizationName,
            @JsonProperty("streetAndNumber") Optional<String> streetAndNumber,
            @JsonProperty("streetAdditional") Optional<String> streetAdditional,
            @JsonProperty("postalCode") Optional<String> postalCode,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("phone") Optional<String> phone,
            @JsonProperty("city") Optional<String> city,
            @JsonProperty("region") Optional<String> region,
            @JsonProperty("country") Optional<String> country) {
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(givenName, "givenName");
        Utils.checkNotNull(familyName, "familyName");
        Utils.checkNotNull(organizationName, "organizationName");
        Utils.checkNotNull(streetAndNumber, "streetAndNumber");
        Utils.checkNotNull(streetAdditional, "streetAdditional");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(country, "country");
        this.title = title;
        this.givenName = givenName;
        this.familyName = familyName;
        this.organizationName = organizationName;
        this.streetAndNumber = streetAndNumber;
        this.streetAdditional = streetAdditional;
        this.postalCode = postalCode;
        this.email = email;
        this.phone = phone;
        this.city = city;
        this.region = region;
        this.country = country;
    }
    
    public PaymentResponseBillingAddress() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The title of the person, for example *Mr.* or *Mrs.*.
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * The given name (first name) of the person should be at least two characters and cannot contain only
     * numbers.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonIgnore
    public Optional<String> givenName() {
        return givenName;
    }

    /**
     * The given family name (surname) of the person should be at least two characters and cannot contain
     * only
     * numbers.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonIgnore
    public Optional<String> familyName() {
        return familyName;
    }

    /**
     * The name of the organization, in case the addressee is an organization.
     * 
     * <p>Required for payment method `billie`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> organizationName() {
        return (Optional<Object>) organizationName;
    }

    /**
     * A street and street number.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonIgnore
    public Optional<String> streetAndNumber() {
        return streetAndNumber;
    }

    /**
     * Any additional addressing details, for example an apartment number.
     */
    @JsonIgnore
    public Optional<String> streetAdditional() {
        return streetAdditional;
    }

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonIgnore
    public Optional<String> postalCode() {
        return postalCode;
    }

    /**
     * A valid e-mail address.
     * 
     * <p>If you provide the email address for a `banktransfer` payment, we will automatically send the
     * instructions
     * email upon payment creation. The language of the email will follow the locale parameter of the
     * payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    /**
     * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example:
     * +31208202070.
     */
    @JsonIgnore
    public Optional<String> phone() {
        return phone;
    }

    /**
     * A city name.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    /**
     * The top-level administrative subdivision of the country. For example: Noord-Holland.
     */
    @JsonIgnore
    public Optional<String> region() {
        return region;
    }

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The title of the person, for example *Mr.* or *Mrs.*.
     */
    public PaymentResponseBillingAddress withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }


    /**
     * The title of the person, for example *Mr.* or *Mrs.*.
     */
    public PaymentResponseBillingAddress withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The given name (first name) of the person should be at least two characters and cannot contain only
     * numbers.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withGivenName(String givenName) {
        Utils.checkNotNull(givenName, "givenName");
        this.givenName = Optional.ofNullable(givenName);
        return this;
    }


    /**
     * The given name (first name) of the person should be at least two characters and cannot contain only
     * numbers.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withGivenName(Optional<String> givenName) {
        Utils.checkNotNull(givenName, "givenName");
        this.givenName = givenName;
        return this;
    }

    /**
     * The given family name (surname) of the person should be at least two characters and cannot contain
     * only
     * numbers.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withFamilyName(String familyName) {
        Utils.checkNotNull(familyName, "familyName");
        this.familyName = Optional.ofNullable(familyName);
        return this;
    }


    /**
     * The given family name (surname) of the person should be at least two characters and cannot contain
     * only
     * numbers.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withFamilyName(Optional<String> familyName) {
        Utils.checkNotNull(familyName, "familyName");
        this.familyName = familyName;
        return this;
    }

    /**
     * The name of the organization, in case the addressee is an organization.
     * 
     * <p>Required for payment method `billie`.
     */
    public PaymentResponseBillingAddress withOrganizationName(Object organizationName) {
        Utils.checkNotNull(organizationName, "organizationName");
        this.organizationName = Optional.ofNullable(organizationName);
        return this;
    }


    /**
     * The name of the organization, in case the addressee is an organization.
     * 
     * <p>Required for payment method `billie`.
     */
    public PaymentResponseBillingAddress withOrganizationName(Optional<? extends Object> organizationName) {
        Utils.checkNotNull(organizationName, "organizationName");
        this.organizationName = organizationName;
        return this;
    }

    /**
     * A street and street number.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withStreetAndNumber(String streetAndNumber) {
        Utils.checkNotNull(streetAndNumber, "streetAndNumber");
        this.streetAndNumber = Optional.ofNullable(streetAndNumber);
        return this;
    }


    /**
     * A street and street number.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withStreetAndNumber(Optional<String> streetAndNumber) {
        Utils.checkNotNull(streetAndNumber, "streetAndNumber");
        this.streetAndNumber = streetAndNumber;
        return this;
    }

    /**
     * Any additional addressing details, for example an apartment number.
     */
    public PaymentResponseBillingAddress withStreetAdditional(String streetAdditional) {
        Utils.checkNotNull(streetAdditional, "streetAdditional");
        this.streetAdditional = Optional.ofNullable(streetAdditional);
        return this;
    }


    /**
     * Any additional addressing details, for example an apartment number.
     */
    public PaymentResponseBillingAddress withStreetAdditional(Optional<String> streetAdditional) {
        Utils.checkNotNull(streetAdditional, "streetAdditional");
        this.streetAdditional = streetAdditional;
        return this;
    }

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = Optional.ofNullable(postalCode);
        return this;
    }


    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withPostalCode(Optional<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * A valid e-mail address.
     * 
     * <p>If you provide the email address for a `banktransfer` payment, we will automatically send the
     * instructions
     * email upon payment creation. The language of the email will follow the locale parameter of the
     * payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }


    /**
     * A valid e-mail address.
     * 
     * <p>If you provide the email address for a `banktransfer` payment, we will automatically send the
     * instructions
     * email upon payment creation. The language of the email will follow the locale parameter of the
     * payment.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example:
     * +31208202070.
     */
    public PaymentResponseBillingAddress withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }


    /**
     * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example:
     * +31208202070.
     */
    public PaymentResponseBillingAddress withPhone(Optional<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * A city name.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }


    /**
     * A city name.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * The top-level administrative subdivision of the country. For example: Noord-Holland.
     */
    public PaymentResponseBillingAddress withRegion(String region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.ofNullable(region);
        return this;
    }


    /**
     * The top-level administrative subdivision of the country. For example: Noord-Holland.
     */
    public PaymentResponseBillingAddress withRegion(Optional<String> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }


    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     * 
     * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
     */
    public PaymentResponseBillingAddress withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentResponseBillingAddress other = (PaymentResponseBillingAddress) o;
        return 
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.givenName, other.givenName) &&
            Utils.enhancedDeepEquals(this.familyName, other.familyName) &&
            Utils.enhancedDeepEquals(this.organizationName, other.organizationName) &&
            Utils.enhancedDeepEquals(this.streetAndNumber, other.streetAndNumber) &&
            Utils.enhancedDeepEquals(this.streetAdditional, other.streetAdditional) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.phone, other.phone) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.region, other.region) &&
            Utils.enhancedDeepEquals(this.country, other.country);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            title, givenName, familyName,
            organizationName, streetAndNumber, streetAdditional,
            postalCode, email, phone,
            city, region, country);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentResponseBillingAddress.class,
                "title", title,
                "givenName", givenName,
                "familyName", familyName,
                "organizationName", organizationName,
                "streetAndNumber", streetAndNumber,
                "streetAdditional", streetAdditional,
                "postalCode", postalCode,
                "email", email,
                "phone", phone,
                "city", city,
                "region", region,
                "country", country);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> title = Optional.empty();

        private Optional<String> givenName = Optional.empty();

        private Optional<String> familyName = Optional.empty();

        private Optional<? extends Object> organizationName = Optional.empty();

        private Optional<String> streetAndNumber = Optional.empty();

        private Optional<String> streetAdditional = Optional.empty();

        private Optional<String> postalCode = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<String> region = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The title of the person, for example *Mr.* or *Mrs.*.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * The title of the person, for example *Mr.* or *Mrs.*.
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }


        /**
         * The given name (first name) of the person should be at least two characters and cannot contain only
         * numbers.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder givenName(String givenName) {
            Utils.checkNotNull(givenName, "givenName");
            this.givenName = Optional.ofNullable(givenName);
            return this;
        }

        /**
         * The given name (first name) of the person should be at least two characters and cannot contain only
         * numbers.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder givenName(Optional<String> givenName) {
            Utils.checkNotNull(givenName, "givenName");
            this.givenName = givenName;
            return this;
        }


        /**
         * The given family name (surname) of the person should be at least two characters and cannot contain
         * only
         * numbers.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder familyName(String familyName) {
            Utils.checkNotNull(familyName, "familyName");
            this.familyName = Optional.ofNullable(familyName);
            return this;
        }

        /**
         * The given family name (surname) of the person should be at least two characters and cannot contain
         * only
         * numbers.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder familyName(Optional<String> familyName) {
            Utils.checkNotNull(familyName, "familyName");
            this.familyName = familyName;
            return this;
        }


        /**
         * The name of the organization, in case the addressee is an organization.
         * 
         * <p>Required for payment method `billie`.
         */
        public Builder organizationName(Object organizationName) {
            Utils.checkNotNull(organizationName, "organizationName");
            this.organizationName = Optional.ofNullable(organizationName);
            return this;
        }

        /**
         * The name of the organization, in case the addressee is an organization.
         * 
         * <p>Required for payment method `billie`.
         */
        public Builder organizationName(Optional<? extends Object> organizationName) {
            Utils.checkNotNull(organizationName, "organizationName");
            this.organizationName = organizationName;
            return this;
        }


        /**
         * A street and street number.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder streetAndNumber(String streetAndNumber) {
            Utils.checkNotNull(streetAndNumber, "streetAndNumber");
            this.streetAndNumber = Optional.ofNullable(streetAndNumber);
            return this;
        }

        /**
         * A street and street number.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder streetAndNumber(Optional<String> streetAndNumber) {
            Utils.checkNotNull(streetAndNumber, "streetAndNumber");
            this.streetAndNumber = streetAndNumber;
            return this;
        }


        /**
         * Any additional addressing details, for example an apartment number.
         */
        public Builder streetAdditional(String streetAdditional) {
            Utils.checkNotNull(streetAdditional, "streetAdditional");
            this.streetAdditional = Optional.ofNullable(streetAdditional);
            return this;
        }

        /**
         * Any additional addressing details, for example an apartment number.
         */
        public Builder streetAdditional(Optional<String> streetAdditional) {
            Utils.checkNotNull(streetAdditional, "streetAdditional");
            this.streetAdditional = streetAdditional;
            return this;
        }


        /**
         * A postal code. This field may be required if the provided country has a postal code system.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        /**
         * A postal code. This field may be required if the provided country has a postal code system.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder postalCode(Optional<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }


        /**
         * A valid e-mail address.
         * 
         * <p>If you provide the email address for a `banktransfer` payment, we will automatically send the
         * instructions
         * email upon payment creation. The language of the email will follow the locale parameter of the
         * payment.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * A valid e-mail address.
         * 
         * <p>If you provide the email address for a `banktransfer` payment, we will automatically send the
         * instructions
         * email upon payment creation. The language of the email will follow the locale parameter of the
         * payment.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }


        /**
         * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example:
         * +31208202070.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example:
         * +31208202070.
         */
        public Builder phone(Optional<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }


        /**
         * A city name.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * A city name.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }


        /**
         * The top-level administrative subdivision of the country. For example: Noord-Holland.
         */
        public Builder region(String region) {
            Utils.checkNotNull(region, "region");
            this.region = Optional.ofNullable(region);
            return this;
        }

        /**
         * The top-level administrative subdivision of the country. For example: Noord-Holland.
         */
        public Builder region(Optional<String> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }


        /**
         * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         * 
         * <p>Required for payment methods `billie`, `in3`, `klarna` and `riverty`.
         */
        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public PaymentResponseBillingAddress build() {

            return new PaymentResponseBillingAddress(
                title, givenName, familyName,
                organizationName, streetAndNumber, streetAdditional,
                postalCode, email, phone,
                city, region, country);
        }

    }
}
