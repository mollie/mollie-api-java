/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EntityInvoice {
    /**
     * Indicates that the response contains an invoice object.
     * Will always contain the string `invoice` for this endpoint.
     */
    @JsonProperty("resource")
    private String resource;


    @JsonProperty("id")
    private String id;

    /**
     * The reference number of the invoice. An example value would be: `2024.10000`.
     */
    @JsonProperty("reference")
    private String reference;

    /**
     * The VAT number to which the invoice was issued to, if applicable.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("vatNumber")
    private Optional<String> vatNumber;

    /**
     * Status of the invoice.
     */
    @JsonProperty("status")
    private InvoiceStatus status;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("netAmount")
    private Amount netAmount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("vatAmount")
    private Amount vatAmount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonProperty("grossAmount")
    private Amount grossAmount;

    /**
     * The collection of products which make up the invoice.
     */
    @JsonProperty("lines")
    private List<EntityInvoiceLines> lines;

    /**
     * The invoice date in `YYYY-MM-DD` format.
     */
    @JsonProperty("issuedAt")
    private String issuedAt;

    /**
     * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paidAt")
    private JsonNullable<String> paidAt;

    /**
     * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dueAt")
    private JsonNullable<String> dueAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private EntityInvoiceLinks links;

    @JsonCreator
    public EntityInvoice(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") String id,
            @JsonProperty("reference") String reference,
            @JsonProperty("vatNumber") Optional<String> vatNumber,
            @JsonProperty("status") InvoiceStatus status,
            @JsonProperty("netAmount") Amount netAmount,
            @JsonProperty("vatAmount") Amount vatAmount,
            @JsonProperty("grossAmount") Amount grossAmount,
            @JsonProperty("lines") List<EntityInvoiceLines> lines,
            @JsonProperty("issuedAt") String issuedAt,
            @JsonProperty("paidAt") JsonNullable<String> paidAt,
            @JsonProperty("dueAt") JsonNullable<String> dueAt,
            @JsonProperty("_links") EntityInvoiceLinks links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(vatNumber, "vatNumber");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(netAmount, "netAmount");
        Utils.checkNotNull(vatAmount, "vatAmount");
        Utils.checkNotNull(grossAmount, "grossAmount");
        Utils.checkNotNull(lines, "lines");
        Utils.checkNotNull(issuedAt, "issuedAt");
        Utils.checkNotNull(paidAt, "paidAt");
        Utils.checkNotNull(dueAt, "dueAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.reference = reference;
        this.vatNumber = vatNumber;
        this.status = status;
        this.netAmount = netAmount;
        this.vatAmount = vatAmount;
        this.grossAmount = grossAmount;
        this.lines = lines;
        this.issuedAt = issuedAt;
        this.paidAt = paidAt;
        this.dueAt = dueAt;
        this.links = links;
    }
    
    public EntityInvoice(
            String resource,
            String id,
            String reference,
            InvoiceStatus status,
            Amount netAmount,
            Amount vatAmount,
            Amount grossAmount,
            List<EntityInvoiceLines> lines,
            String issuedAt,
            EntityInvoiceLinks links) {
        this(resource, id, reference,
            Optional.empty(), status, netAmount,
            vatAmount, grossAmount, lines,
            issuedAt, JsonNullable.undefined(), JsonNullable.undefined(),
            links);
    }

    /**
     * Indicates that the response contains an invoice object.
     * Will always contain the string `invoice` for this endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The reference number of the invoice. An example value would be: `2024.10000`.
     */
    @JsonIgnore
    public String reference() {
        return reference;
    }

    /**
     * The VAT number to which the invoice was issued to, if applicable.
     */
    @JsonIgnore
    public Optional<String> vatNumber() {
        return vatNumber;
    }

    /**
     * Status of the invoice.
     */
    @JsonIgnore
    public InvoiceStatus status() {
        return status;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount netAmount() {
        return netAmount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount vatAmount() {
        return vatAmount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonIgnore
    public Amount grossAmount() {
        return grossAmount;
    }

    /**
     * The collection of products which make up the invoice.
     */
    @JsonIgnore
    public List<EntityInvoiceLines> lines() {
        return lines;
    }

    /**
     * The invoice date in `YYYY-MM-DD` format.
     */
    @JsonIgnore
    public String issuedAt() {
        return issuedAt;
    }

    /**
     * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
     */
    @JsonIgnore
    public JsonNullable<String> paidAt() {
        return paidAt;
    }

    /**
     * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
     */
    @JsonIgnore
    public JsonNullable<String> dueAt() {
        return dueAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public EntityInvoiceLinks links() {
        return links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates that the response contains an invoice object.
     * Will always contain the string `invoice` for this endpoint.
     */
    public EntityInvoice withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public EntityInvoice withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The reference number of the invoice. An example value would be: `2024.10000`.
     */
    public EntityInvoice withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * The VAT number to which the invoice was issued to, if applicable.
     */
    public EntityInvoice withVatNumber(String vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = Optional.ofNullable(vatNumber);
        return this;
    }


    /**
     * The VAT number to which the invoice was issued to, if applicable.
     */
    public EntityInvoice withVatNumber(Optional<String> vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = vatNumber;
        return this;
    }

    /**
     * Status of the invoice.
     */
    public EntityInvoice withStatus(InvoiceStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityInvoice withNetAmount(Amount netAmount) {
        Utils.checkNotNull(netAmount, "netAmount");
        this.netAmount = netAmount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityInvoice withVatAmount(Amount vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = vatAmount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityInvoice withGrossAmount(Amount grossAmount) {
        Utils.checkNotNull(grossAmount, "grossAmount");
        this.grossAmount = grossAmount;
        return this;
    }

    /**
     * The collection of products which make up the invoice.
     */
    public EntityInvoice withLines(List<EntityInvoiceLines> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = lines;
        return this;
    }

    /**
     * The invoice date in `YYYY-MM-DD` format.
     */
    public EntityInvoice withIssuedAt(String issuedAt) {
        Utils.checkNotNull(issuedAt, "issuedAt");
        this.issuedAt = issuedAt;
        return this;
    }

    /**
     * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
     */
    public EntityInvoice withPaidAt(String paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = JsonNullable.of(paidAt);
        return this;
    }

    /**
     * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
     */
    public EntityInvoice withPaidAt(JsonNullable<String> paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = paidAt;
        return this;
    }

    /**
     * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
     */
    public EntityInvoice withDueAt(String dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = JsonNullable.of(dueAt);
        return this;
    }

    /**
     * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
     */
    public EntityInvoice withDueAt(JsonNullable<String> dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = dueAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityInvoice withLinks(EntityInvoiceLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityInvoice other = (EntityInvoice) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.vatNumber, other.vatNumber) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.netAmount, other.netAmount) &&
            Utils.enhancedDeepEquals(this.vatAmount, other.vatAmount) &&
            Utils.enhancedDeepEquals(this.grossAmount, other.grossAmount) &&
            Utils.enhancedDeepEquals(this.lines, other.lines) &&
            Utils.enhancedDeepEquals(this.issuedAt, other.issuedAt) &&
            Utils.enhancedDeepEquals(this.paidAt, other.paidAt) &&
            Utils.enhancedDeepEquals(this.dueAt, other.dueAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, reference,
            vatNumber, status, netAmount,
            vatAmount, grossAmount, lines,
            issuedAt, paidAt, dueAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityInvoice.class,
                "resource", resource,
                "id", id,
                "reference", reference,
                "vatNumber", vatNumber,
                "status", status,
                "netAmount", netAmount,
                "vatAmount", vatAmount,
                "grossAmount", grossAmount,
                "lines", lines,
                "issuedAt", issuedAt,
                "paidAt", paidAt,
                "dueAt", dueAt,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private String id;

        private String reference;

        private Optional<String> vatNumber = Optional.empty();

        private InvoiceStatus status;

        private Amount netAmount;

        private Amount vatAmount;

        private Amount grossAmount;

        private List<EntityInvoiceLines> lines;

        private String issuedAt;

        private JsonNullable<String> paidAt = JsonNullable.undefined();

        private JsonNullable<String> dueAt = JsonNullable.undefined();

        private EntityInvoiceLinks links;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates that the response contains an invoice object.
         * Will always contain the string `invoice` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The reference number of the invoice. An example value would be: `2024.10000`.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }


        /**
         * The VAT number to which the invoice was issued to, if applicable.
         */
        public Builder vatNumber(String vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = Optional.ofNullable(vatNumber);
            return this;
        }

        /**
         * The VAT number to which the invoice was issued to, if applicable.
         */
        public Builder vatNumber(Optional<String> vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = vatNumber;
            return this;
        }


        /**
         * Status of the invoice.
         */
        public Builder status(InvoiceStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder netAmount(Amount netAmount) {
            Utils.checkNotNull(netAmount, "netAmount");
            this.netAmount = netAmount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder vatAmount(Amount vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = vatAmount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder grossAmount(Amount grossAmount) {
            Utils.checkNotNull(grossAmount, "grossAmount");
            this.grossAmount = grossAmount;
            return this;
        }


        /**
         * The collection of products which make up the invoice.
         */
        public Builder lines(List<EntityInvoiceLines> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = lines;
            return this;
        }


        /**
         * The invoice date in `YYYY-MM-DD` format.
         */
        public Builder issuedAt(String issuedAt) {
            Utils.checkNotNull(issuedAt, "issuedAt");
            this.issuedAt = issuedAt;
            return this;
        }


        /**
         * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
         */
        public Builder paidAt(String paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = JsonNullable.of(paidAt);
            return this;
        }

        /**
         * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
         */
        public Builder paidAt(JsonNullable<String> paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = paidAt;
            return this;
        }


        /**
         * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
         */
        public Builder dueAt(String dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = JsonNullable.of(dueAt);
            return this;
        }

        /**
         * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
         */
        public Builder dueAt(JsonNullable<String> dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = dueAt;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(EntityInvoiceLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public EntityInvoice build() {

            return new EntityInvoice(
                resource, id, reference,
                vatNumber, status, netAmount,
                vatAmount, grossAmount, lines,
                issuedAt, paidAt, dueAt,
                links);
        }

    }
}
