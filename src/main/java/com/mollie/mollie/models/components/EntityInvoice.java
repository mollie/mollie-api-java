/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EntityInvoice {
    /**
     * Indicates that the response contains an invoice object.
     * Will always contain the string `invoice` for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private Optional<String> resource;

    /**
     * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The reference number of the invoice. An example value would be: `2024.10000`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private Optional<String> reference;

    /**
     * The VAT number to which the invoice was issued to, if applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatNumber")
    private JsonNullable<String> vatNumber;

    /**
     * Status of the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends InvoiceStatus> status;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("netAmount")
    private Optional<? extends Amount> netAmount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatAmount")
    private Optional<? extends Amount> vatAmount;

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grossAmount")
    private Optional<? extends Amount> grossAmount;

    /**
     * The collection of products which make up the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    private Optional<? extends List<EntityInvoiceLines>> lines;

    /**
     * The invoice date in `YYYY-MM-DD` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuedAt")
    private Optional<String> issuedAt;

    /**
     * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paidAt")
    private JsonNullable<String> paidAt;

    /**
     * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dueAt")
    private JsonNullable<String> dueAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    private Optional<? extends EntityInvoiceLinks> links;

    @JsonCreator
    public EntityInvoice(
            @JsonProperty("resource") Optional<String> resource,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("reference") Optional<String> reference,
            @JsonProperty("vatNumber") JsonNullable<String> vatNumber,
            @JsonProperty("status") Optional<? extends InvoiceStatus> status,
            @JsonProperty("netAmount") Optional<? extends Amount> netAmount,
            @JsonProperty("vatAmount") Optional<? extends Amount> vatAmount,
            @JsonProperty("grossAmount") Optional<? extends Amount> grossAmount,
            @JsonProperty("lines") Optional<? extends List<EntityInvoiceLines>> lines,
            @JsonProperty("issuedAt") Optional<String> issuedAt,
            @JsonProperty("paidAt") JsonNullable<String> paidAt,
            @JsonProperty("dueAt") JsonNullable<String> dueAt,
            @JsonProperty("_links") Optional<? extends EntityInvoiceLinks> links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(vatNumber, "vatNumber");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(netAmount, "netAmount");
        Utils.checkNotNull(vatAmount, "vatAmount");
        Utils.checkNotNull(grossAmount, "grossAmount");
        Utils.checkNotNull(lines, "lines");
        Utils.checkNotNull(issuedAt, "issuedAt");
        Utils.checkNotNull(paidAt, "paidAt");
        Utils.checkNotNull(dueAt, "dueAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.reference = reference;
        this.vatNumber = vatNumber;
        this.status = status;
        this.netAmount = netAmount;
        this.vatAmount = vatAmount;
        this.grossAmount = grossAmount;
        this.lines = lines;
        this.issuedAt = issuedAt;
        this.paidAt = paidAt;
        this.dueAt = dueAt;
        this.links = links;
    }
    
    public EntityInvoice() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * Indicates that the response contains an invoice object.
     * Will always contain the string `invoice` for this endpoint.
     */
    @JsonIgnore
    public Optional<String> resource() {
        return resource;
    }

    /**
     * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The reference number of the invoice. An example value would be: `2024.10000`.
     */
    @JsonIgnore
    public Optional<String> reference() {
        return reference;
    }

    /**
     * The VAT number to which the invoice was issued to, if applicable.
     */
    @JsonIgnore
    public JsonNullable<String> vatNumber() {
        return vatNumber;
    }

    /**
     * Status of the invoice.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InvoiceStatus> status() {
        return (Optional<InvoiceStatus>) status;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> netAmount() {
        return (Optional<Amount>) netAmount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> vatAmount() {
        return (Optional<Amount>) vatAmount;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Amount> grossAmount() {
        return (Optional<Amount>) grossAmount;
    }

    /**
     * The collection of products which make up the invoice.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EntityInvoiceLines>> lines() {
        return (Optional<List<EntityInvoiceLines>>) lines;
    }

    /**
     * The invoice date in `YYYY-MM-DD` format.
     */
    @JsonIgnore
    public Optional<String> issuedAt() {
        return issuedAt;
    }

    /**
     * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
     */
    @JsonIgnore
    public JsonNullable<String> paidAt() {
        return paidAt;
    }

    /**
     * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
     */
    @JsonIgnore
    public JsonNullable<String> dueAt() {
        return dueAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EntityInvoiceLinks> links() {
        return (Optional<EntityInvoiceLinks>) links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates that the response contains an invoice object.
     * Will always contain the string `invoice` for this endpoint.
     */
    public EntityInvoice withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }


    /**
     * Indicates that the response contains an invoice object.
     * Will always contain the string `invoice` for this endpoint.
     */
    public EntityInvoice withResource(Optional<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
     */
    public EntityInvoice withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    /**
     * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
     */
    public EntityInvoice withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The reference number of the invoice. An example value would be: `2024.10000`.
     */
    public EntityInvoice withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = Optional.ofNullable(reference);
        return this;
    }


    /**
     * The reference number of the invoice. An example value would be: `2024.10000`.
     */
    public EntityInvoice withReference(Optional<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    /**
     * The VAT number to which the invoice was issued to, if applicable.
     */
    public EntityInvoice withVatNumber(String vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = JsonNullable.of(vatNumber);
        return this;
    }

    /**
     * The VAT number to which the invoice was issued to, if applicable.
     */
    public EntityInvoice withVatNumber(JsonNullable<String> vatNumber) {
        Utils.checkNotNull(vatNumber, "vatNumber");
        this.vatNumber = vatNumber;
        return this;
    }

    /**
     * Status of the invoice.
     */
    public EntityInvoice withStatus(InvoiceStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * Status of the invoice.
     */
    public EntityInvoice withStatus(Optional<? extends InvoiceStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityInvoice withNetAmount(Amount netAmount) {
        Utils.checkNotNull(netAmount, "netAmount");
        this.netAmount = Optional.ofNullable(netAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityInvoice withNetAmount(Optional<? extends Amount> netAmount) {
        Utils.checkNotNull(netAmount, "netAmount");
        this.netAmount = netAmount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityInvoice withVatAmount(Amount vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = Optional.ofNullable(vatAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityInvoice withVatAmount(Optional<? extends Amount> vatAmount) {
        Utils.checkNotNull(vatAmount, "vatAmount");
        this.vatAmount = vatAmount;
        return this;
    }

    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityInvoice withGrossAmount(Amount grossAmount) {
        Utils.checkNotNull(grossAmount, "grossAmount");
        this.grossAmount = Optional.ofNullable(grossAmount);
        return this;
    }


    /**
     * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
     */
    public EntityInvoice withGrossAmount(Optional<? extends Amount> grossAmount) {
        Utils.checkNotNull(grossAmount, "grossAmount");
        this.grossAmount = grossAmount;
        return this;
    }

    /**
     * The collection of products which make up the invoice.
     */
    public EntityInvoice withLines(List<EntityInvoiceLines> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = Optional.ofNullable(lines);
        return this;
    }


    /**
     * The collection of products which make up the invoice.
     */
    public EntityInvoice withLines(Optional<? extends List<EntityInvoiceLines>> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = lines;
        return this;
    }

    /**
     * The invoice date in `YYYY-MM-DD` format.
     */
    public EntityInvoice withIssuedAt(String issuedAt) {
        Utils.checkNotNull(issuedAt, "issuedAt");
        this.issuedAt = Optional.ofNullable(issuedAt);
        return this;
    }


    /**
     * The invoice date in `YYYY-MM-DD` format.
     */
    public EntityInvoice withIssuedAt(Optional<String> issuedAt) {
        Utils.checkNotNull(issuedAt, "issuedAt");
        this.issuedAt = issuedAt;
        return this;
    }

    /**
     * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
     */
    public EntityInvoice withPaidAt(String paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = JsonNullable.of(paidAt);
        return this;
    }

    /**
     * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
     */
    public EntityInvoice withPaidAt(JsonNullable<String> paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = paidAt;
        return this;
    }

    /**
     * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
     */
    public EntityInvoice withDueAt(String dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = JsonNullable.of(dueAt);
        return this;
    }

    /**
     * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
     */
    public EntityInvoice withDueAt(JsonNullable<String> dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = dueAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityInvoice withLinks(EntityInvoiceLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }


    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityInvoice withLinks(Optional<? extends EntityInvoiceLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityInvoice other = (EntityInvoice) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.vatNumber, other.vatNumber) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.netAmount, other.netAmount) &&
            Utils.enhancedDeepEquals(this.vatAmount, other.vatAmount) &&
            Utils.enhancedDeepEquals(this.grossAmount, other.grossAmount) &&
            Utils.enhancedDeepEquals(this.lines, other.lines) &&
            Utils.enhancedDeepEquals(this.issuedAt, other.issuedAt) &&
            Utils.enhancedDeepEquals(this.paidAt, other.paidAt) &&
            Utils.enhancedDeepEquals(this.dueAt, other.dueAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, reference,
            vatNumber, status, netAmount,
            vatAmount, grossAmount, lines,
            issuedAt, paidAt, dueAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityInvoice.class,
                "resource", resource,
                "id", id,
                "reference", reference,
                "vatNumber", vatNumber,
                "status", status,
                "netAmount", netAmount,
                "vatAmount", vatAmount,
                "grossAmount", grossAmount,
                "lines", lines,
                "issuedAt", issuedAt,
                "paidAt", paidAt,
                "dueAt", dueAt,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> resource = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<String> reference = Optional.empty();

        private JsonNullable<String> vatNumber = JsonNullable.undefined();

        private Optional<? extends InvoiceStatus> status = Optional.empty();

        private Optional<? extends Amount> netAmount = Optional.empty();

        private Optional<? extends Amount> vatAmount = Optional.empty();

        private Optional<? extends Amount> grossAmount = Optional.empty();

        private Optional<? extends List<EntityInvoiceLines>> lines = Optional.empty();

        private Optional<String> issuedAt = Optional.empty();

        private JsonNullable<String> paidAt = JsonNullable.undefined();

        private JsonNullable<String> dueAt = JsonNullable.undefined();

        private Optional<? extends EntityInvoiceLinks> links = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates that the response contains an invoice object.
         * Will always contain the string `invoice` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Indicates that the response contains an invoice object.
         * Will always contain the string `invoice` for this endpoint.
         */
        public Builder resource(Optional<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The identifier uniquely referring to this invoice. Example: `inv_FrvewDA3Pr`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The reference number of the invoice. An example value would be: `2024.10000`.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = Optional.ofNullable(reference);
            return this;
        }

        /**
         * The reference number of the invoice. An example value would be: `2024.10000`.
         */
        public Builder reference(Optional<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }


        /**
         * The VAT number to which the invoice was issued to, if applicable.
         */
        public Builder vatNumber(String vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = JsonNullable.of(vatNumber);
            return this;
        }

        /**
         * The VAT number to which the invoice was issued to, if applicable.
         */
        public Builder vatNumber(JsonNullable<String> vatNumber) {
            Utils.checkNotNull(vatNumber, "vatNumber");
            this.vatNumber = vatNumber;
            return this;
        }


        /**
         * Status of the invoice.
         */
        public Builder status(InvoiceStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of the invoice.
         */
        public Builder status(Optional<? extends InvoiceStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder netAmount(Amount netAmount) {
            Utils.checkNotNull(netAmount, "netAmount");
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder netAmount(Optional<? extends Amount> netAmount) {
            Utils.checkNotNull(netAmount, "netAmount");
            this.netAmount = netAmount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder vatAmount(Amount vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = Optional.ofNullable(vatAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder vatAmount(Optional<? extends Amount> vatAmount) {
            Utils.checkNotNull(vatAmount, "vatAmount");
            this.vatAmount = vatAmount;
            return this;
        }


        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder grossAmount(Amount grossAmount) {
            Utils.checkNotNull(grossAmount, "grossAmount");
            this.grossAmount = Optional.ofNullable(grossAmount);
            return this;
        }

        /**
         * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
         */
        public Builder grossAmount(Optional<? extends Amount> grossAmount) {
            Utils.checkNotNull(grossAmount, "grossAmount");
            this.grossAmount = grossAmount;
            return this;
        }


        /**
         * The collection of products which make up the invoice.
         */
        public Builder lines(List<EntityInvoiceLines> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = Optional.ofNullable(lines);
            return this;
        }

        /**
         * The collection of products which make up the invoice.
         */
        public Builder lines(Optional<? extends List<EntityInvoiceLines>> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = lines;
            return this;
        }


        /**
         * The invoice date in `YYYY-MM-DD` format.
         */
        public Builder issuedAt(String issuedAt) {
            Utils.checkNotNull(issuedAt, "issuedAt");
            this.issuedAt = Optional.ofNullable(issuedAt);
            return this;
        }

        /**
         * The invoice date in `YYYY-MM-DD` format.
         */
        public Builder issuedAt(Optional<String> issuedAt) {
            Utils.checkNotNull(issuedAt, "issuedAt");
            this.issuedAt = issuedAt;
            return this;
        }


        /**
         * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
         */
        public Builder paidAt(String paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = JsonNullable.of(paidAt);
            return this;
        }

        /**
         * The date on which the invoice was paid, if applicable, in `YYYY-MM-DD` format.
         */
        public Builder paidAt(JsonNullable<String> paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = paidAt;
            return this;
        }


        /**
         * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
         */
        public Builder dueAt(String dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = JsonNullable.of(dueAt);
            return this;
        }

        /**
         * The date on which the invoice is due, if applicable, in `YYYY-MM-DD` format.
         */
        public Builder dueAt(JsonNullable<String> dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = dueAt;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(EntityInvoiceLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(Optional<? extends EntityInvoiceLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public EntityInvoice build() {

            return new EntityInvoice(
                resource, id, reference,
                vatNumber, status, netAmount,
                vatAmount, grossAmount, lines,
                issuedAt, paidAt, dueAt,
                links);
        }

    }
}
