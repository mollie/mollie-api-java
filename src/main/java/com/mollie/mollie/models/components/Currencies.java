/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
@JsonDeserialize(using = Currencies._Deserializer.class)
@JsonSerialize(using = Currencies._Serializer.class)
public class Currencies {

    public static final Currencies EUR = new Currencies("EUR");
    public static final Currencies GBP = new Currencies("GBP");
    public static final Currencies CHF = new Currencies("CHF");
    public static final Currencies DKK = new Currencies("DKK");
    public static final Currencies NOK = new Currencies("NOK");
    public static final Currencies PLN = new Currencies("PLN");
    public static final Currencies SEK = new Currencies("SEK");
    public static final Currencies USD = new Currencies("USD");
    public static final Currencies CZK = new Currencies("CZK");
    public static final Currencies HUF = new Currencies("HUF");
    public static final Currencies AUD = new Currencies("AUD");
    public static final Currencies CAD = new Currencies("CAD");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, Currencies> values = createValuesMap();
    private static final Map<String, CurrenciesEnum> enums = createEnumsMap();

    private final String value;

    private Currencies(String value) {
        this.value = value;
    }

    /**
     * Returns a Currencies with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as Currencies
     */ 
    public static Currencies of(String value) {
        synchronized (Currencies.class) {
            return values.computeIfAbsent(value, v -> new Currencies(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<CurrenciesEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Currencies other = (Currencies) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "Currencies [value=" + value + "]";
    }

    // return an array just like an enum
    public static Currencies[] values() {
        synchronized (Currencies.class) {
            return values.values().toArray(new Currencies[] {});
        }
    }

    private static final Map<String, Currencies> createValuesMap() {
        Map<String, Currencies> map = new LinkedHashMap<>();
        map.put("EUR", EUR);
        map.put("GBP", GBP);
        map.put("CHF", CHF);
        map.put("DKK", DKK);
        map.put("NOK", NOK);
        map.put("PLN", PLN);
        map.put("SEK", SEK);
        map.put("USD", USD);
        map.put("CZK", CZK);
        map.put("HUF", HUF);
        map.put("AUD", AUD);
        map.put("CAD", CAD);
        return map;
    }

    private static final Map<String, CurrenciesEnum> createEnumsMap() {
        Map<String, CurrenciesEnum> map = new HashMap<>();
        map.put("EUR", CurrenciesEnum.EUR);
        map.put("GBP", CurrenciesEnum.GBP);
        map.put("CHF", CurrenciesEnum.CHF);
        map.put("DKK", CurrenciesEnum.DKK);
        map.put("NOK", CurrenciesEnum.NOK);
        map.put("PLN", CurrenciesEnum.PLN);
        map.put("SEK", CurrenciesEnum.SEK);
        map.put("USD", CurrenciesEnum.USD);
        map.put("CZK", CurrenciesEnum.CZK);
        map.put("HUF", CurrenciesEnum.HUF);
        map.put("AUD", CurrenciesEnum.AUD);
        map.put("CAD", CurrenciesEnum.CAD);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<Currencies> {

        protected _Serializer() {
            super(Currencies.class);
        }

        @Override
        public void serialize(Currencies value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<Currencies> {

        protected _Deserializer() {
            super(Currencies.class);
        }

        @Override
        public Currencies deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return Currencies.of(v);
        }
    }
    
    public enum CurrenciesEnum {

        EUR("EUR"),
        GBP("GBP"),
        CHF("CHF"),
        DKK("DKK"),
        NOK("NOK"),
        PLN("PLN"),
        SEK("SEK"),
        USD("USD"),
        CZK("CZK"),
        HUF("HUF"),
        AUD("AUD"),
        CAD("CAD"),;

        private final String value;

        private CurrenciesEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

