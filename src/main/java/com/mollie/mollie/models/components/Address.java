/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;


public class Address {
    /**
     * A street and street number.
     */
    @JsonProperty("streetAndNumber")
    private String streetAndNumber;

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     */
    @JsonProperty("postalCode")
    private String postalCode;


    @JsonProperty("city")
    private String city;

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    @JsonProperty("country")
    private String country;

    @JsonCreator
    public Address(
            @JsonProperty("streetAndNumber") String streetAndNumber,
            @JsonProperty("postalCode") String postalCode,
            @JsonProperty("city") String city,
            @JsonProperty("country") String country) {
        Utils.checkNotNull(streetAndNumber, "streetAndNumber");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(country, "country");
        this.streetAndNumber = streetAndNumber;
        this.postalCode = postalCode;
        this.city = city;
        this.country = country;
    }

    /**
     * A street and street number.
     */
    @JsonIgnore
    public String streetAndNumber() {
        return streetAndNumber;
    }

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     */
    @JsonIgnore
    public String postalCode() {
        return postalCode;
    }

    @JsonIgnore
    public String city() {
        return city;
    }

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    @JsonIgnore
    public String country() {
        return country;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A street and street number.
     */
    public Address withStreetAndNumber(String streetAndNumber) {
        Utils.checkNotNull(streetAndNumber, "streetAndNumber");
        this.streetAndNumber = streetAndNumber;
        return this;
    }

    /**
     * A postal code. This field may be required if the provided country has a postal code system.
     */
    public Address withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    public Address withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    public Address withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Address other = (Address) o;
        return 
            Utils.enhancedDeepEquals(this.streetAndNumber, other.streetAndNumber) &&
            Utils.enhancedDeepEquals(this.postalCode, other.postalCode) &&
            Utils.enhancedDeepEquals(this.city, other.city) &&
            Utils.enhancedDeepEquals(this.country, other.country);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            streetAndNumber, postalCode, city,
            country);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Address.class,
                "streetAndNumber", streetAndNumber,
                "postalCode", postalCode,
                "city", city,
                "country", country);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String streetAndNumber;

        private String postalCode;

        private String city;

        private String country;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A street and street number.
         */
        public Builder streetAndNumber(String streetAndNumber) {
            Utils.checkNotNull(streetAndNumber, "streetAndNumber");
            this.streetAndNumber = streetAndNumber;
            return this;
        }


        /**
         * A postal code. This field may be required if the provided country has a postal code system.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }


        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }


        /**
         * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public Address build() {

            return new Address(
                streetAndNumber, postalCode, city,
                country);
        }

    }
}
