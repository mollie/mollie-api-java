/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class EntityTerminal {
    /**
     * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
     */
    @JsonProperty("resource")
    private String resource;


    @JsonProperty("id")
    private String id;

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonProperty("mode")
    private Mode mode;

    /**
     * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the
     * description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it
     * may be visible on the device itself depending on the device.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The status of the terminal.
     */
    @JsonProperty("status")
    private EntityTerminalStatus status;

    /**
     * The brand of the terminal.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("brand")
    private Optional<? extends Brand> brand;

    /**
     * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("model")
    private Optional<? extends TerminalModel> model;

    /**
     * The serial number of the terminal. The serial number is provided at terminal creation time.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("serialNumber")
    private Optional<String> serialNumber;

    /**
     * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a
     * specific currency, chosen during setup.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @JsonProperty("profileId")
    private String profileId;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonProperty("createdAt")
    private String createdAt;

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonProperty("updatedAt")
    private String updatedAt;

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonProperty("_links")
    private EntityTerminalLinks links;

    @JsonCreator
    public EntityTerminal(
            @JsonProperty("resource") String resource,
            @JsonProperty("id") String id,
            @JsonProperty("mode") Mode mode,
            @JsonProperty("description") String description,
            @JsonProperty("status") EntityTerminalStatus status,
            @JsonProperty("brand") Optional<? extends Brand> brand,
            @JsonProperty("model") Optional<? extends TerminalModel> model,
            @JsonProperty("serialNumber") Optional<String> serialNumber,
            @JsonProperty("currency") String currency,
            @JsonProperty("profileId") String profileId,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("updatedAt") String updatedAt,
            @JsonProperty("_links") EntityTerminalLinks links) {
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(brand, "brand");
        Utils.checkNotNull(model, "model");
        Utils.checkNotNull(serialNumber, "serialNumber");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(profileId, "profileId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(links, "links");
        this.resource = resource;
        this.id = id;
        this.mode = mode;
        this.description = description;
        this.status = status;
        this.brand = brand;
        this.model = model;
        this.serialNumber = serialNumber;
        this.currency = currency;
        this.profileId = profileId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.links = links;
    }
    
    public EntityTerminal(
            String resource,
            String id,
            Mode mode,
            String description,
            EntityTerminalStatus status,
            String currency,
            String profileId,
            String createdAt,
            String updatedAt,
            EntityTerminalLinks links) {
        this(resource, id, mode,
            description, status, Optional.empty(),
            Optional.empty(), Optional.empty(), currency,
            profileId, createdAt, updatedAt,
            links);
    }

    /**
     * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
     */
    @JsonIgnore
    public String resource() {
        return resource;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    @JsonIgnore
    public Mode mode() {
        return mode;
    }

    /**
     * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the
     * description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it
     * may be visible on the device itself depending on the device.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The status of the terminal.
     */
    @JsonIgnore
    public EntityTerminalStatus status() {
        return status;
    }

    /**
     * The brand of the terminal.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Brand> brand() {
        return (Optional<Brand>) brand;
    }

    /**
     * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TerminalModel> model() {
        return (Optional<TerminalModel>) model;
    }

    /**
     * The serial number of the terminal. The serial number is provided at terminal creation time.
     */
    @JsonIgnore
    public Optional<String> serialNumber() {
        return serialNumber;
    }

    /**
     * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a
     * specific currency, chosen during setup.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    @JsonIgnore
    public String profileId() {
        return profileId;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonIgnore
    public String updatedAt() {
        return updatedAt;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    @JsonIgnore
    public EntityTerminalLinks links() {
        return links;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
     */
    public EntityTerminal withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    public EntityTerminal withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether this entity was created in live mode or in test mode.
     */
    public EntityTerminal withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    /**
     * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the
     * description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it
     * may be visible on the device itself depending on the device.
     */
    public EntityTerminal withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The status of the terminal.
     */
    public EntityTerminal withStatus(EntityTerminalStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The brand of the terminal.
     */
    public EntityTerminal withBrand(Brand brand) {
        Utils.checkNotNull(brand, "brand");
        this.brand = Optional.ofNullable(brand);
        return this;
    }


    /**
     * The brand of the terminal.
     */
    public EntityTerminal withBrand(Optional<? extends Brand> brand) {
        Utils.checkNotNull(brand, "brand");
        this.brand = brand;
        return this;
    }

    /**
     * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
     */
    public EntityTerminal withModel(TerminalModel model) {
        Utils.checkNotNull(model, "model");
        this.model = Optional.ofNullable(model);
        return this;
    }


    /**
     * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
     */
    public EntityTerminal withModel(Optional<? extends TerminalModel> model) {
        Utils.checkNotNull(model, "model");
        this.model = model;
        return this;
    }

    /**
     * The serial number of the terminal. The serial number is provided at terminal creation time.
     */
    public EntityTerminal withSerialNumber(String serialNumber) {
        Utils.checkNotNull(serialNumber, "serialNumber");
        this.serialNumber = Optional.ofNullable(serialNumber);
        return this;
    }


    /**
     * The serial number of the terminal. The serial number is provided at terminal creation time.
     */
    public EntityTerminal withSerialNumber(Optional<String> serialNumber) {
        Utils.checkNotNull(serialNumber, "serialNumber");
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a
     * specific currency, chosen during setup.
     */
    public EntityTerminal withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The identifier referring to the [profile](get-profile) this entity belongs to.
     * 
     * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
     * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
     * required.
     */
    public EntityTerminal withProfileId(String profileId) {
        Utils.checkNotNull(profileId, "profileId");
        this.profileId = profileId;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public EntityTerminal withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    public EntityTerminal withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
     */
    public EntityTerminal withLinks(EntityTerminalLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EntityTerminal other = (EntityTerminal) o;
        return 
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.mode, other.mode) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.brand, other.brand) &&
            Utils.enhancedDeepEquals(this.model, other.model) &&
            Utils.enhancedDeepEquals(this.serialNumber, other.serialNumber) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.profileId, other.profileId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resource, id, mode,
            description, status, brand,
            model, serialNumber, currency,
            profileId, createdAt, updatedAt,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EntityTerminal.class,
                "resource", resource,
                "id", id,
                "mode", mode,
                "description", description,
                "status", status,
                "brand", brand,
                "model", model,
                "serialNumber", serialNumber,
                "currency", currency,
                "profileId", profileId,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "links", links);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resource;

        private String id;

        private Mode mode;

        private String description;

        private EntityTerminalStatus status;

        private Optional<? extends Brand> brand = Optional.empty();

        private Optional<? extends TerminalModel> model = Optional.empty();

        private Optional<String> serialNumber = Optional.empty();

        private String currency;

        private String profileId;

        private String createdAt;

        private String updatedAt;

        private EntityTerminalLinks links;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Indicates the response contains a terminal object. Will always contain the string `terminal` for this endpoint.
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Whether this entity was created in live mode or in test mode.
         */
        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }


        /**
         * A short description of the terminal. The description can be used as an identifier for the terminal. Currently, the
         * description is set when the terminal is initially configured. It will be visible in the Mollie Dashboard, and it
         * may be visible on the device itself depending on the device.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The status of the terminal.
         */
        public Builder status(EntityTerminalStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The brand of the terminal.
         */
        public Builder brand(Brand brand) {
            Utils.checkNotNull(brand, "brand");
            this.brand = Optional.ofNullable(brand);
            return this;
        }

        /**
         * The brand of the terminal.
         */
        public Builder brand(Optional<? extends Brand> brand) {
            Utils.checkNotNull(brand, "brand");
            this.brand = brand;
            return this;
        }


        /**
         * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
         */
        public Builder model(TerminalModel model) {
            Utils.checkNotNull(model, "model");
            this.model = Optional.ofNullable(model);
            return this;
        }

        /**
         * The model of the terminal. For example for a PAX A920, this field's value will be `A920`.
         */
        public Builder model(Optional<? extends TerminalModel> model) {
            Utils.checkNotNull(model, "model");
            this.model = model;
            return this;
        }


        /**
         * The serial number of the terminal. The serial number is provided at terminal creation time.
         */
        public Builder serialNumber(String serialNumber) {
            Utils.checkNotNull(serialNumber, "serialNumber");
            this.serialNumber = Optional.ofNullable(serialNumber);
            return this;
        }

        /**
         * The serial number of the terminal. The serial number is provided at terminal creation time.
         */
        public Builder serialNumber(Optional<String> serialNumber) {
            Utils.checkNotNull(serialNumber, "serialNumber");
            this.serialNumber = serialNumber;
            return this;
        }


        /**
         * The currency configured on the terminal, in ISO 4217 format. Currently most of our terminals are bound to a
         * specific currency, chosen during setup.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        /**
         * The identifier referring to the [profile](get-profile) this entity belongs to.
         * 
         * <p>Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation
         * request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is
         * required.
         */
        public Builder profileId(String profileId) {
            Utils.checkNotNull(profileId, "profileId");
            this.profileId = profileId;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
         */
        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
         */
        public Builder links(EntityTerminalLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        public EntityTerminal build() {

            return new EntityTerminal(
                resource, id, mode,
                description, status, brand,
                model, serialNumber, currency,
                profileId, createdAt, updatedAt,
                links);
        }

    }
}
