/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mollie.mollie.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Context
 * 
 * <p>Depending on the type of the balance transaction, we will try to give more context about the
 * specific event that
 * triggered it. For example, the context object for a payment transaction will look like
 * `{"paymentId": "tr_5B8cwPMGnU6qLbRvo7qEZo", "paymentDescription": "Description"}`.
 * 
 * <p>Below is a complete list of the context values that each type of transaction will have.
 * 
 * <p>* Type `payment`: `paymentId`, `paymentDescription`
 * * Type `capture`: `paymentId` `captureId`, `paymentDescription`, `captureDescription`
 * * Type `capture-commission`: `paymentId`, `paymentDescription`, `organizationId`
 * * Type `capture-rolling-reserve-release`: `paymentId`, `paymentDescription`, `captureId`,
 * `captureDescription`
 * * Type `unauthorized-direct-debit`: `paymentId`, `paymentDescription`
 * * Type `failed-payment`: `paymentId`, `paymentDescription`
 * * Type `refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
 * * Type `refund-compensation`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
 * * Type `returned-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
 * * Type `returned-refund-compensation`: `paymentId` `refundId`, `paymentDescription`,
 * `refundDescription`
 * * Type `chargeback`: `paymentId` `chargebackId`, `paymentDescription`, `chargebackDescription`
 * * Type `chargeback-reversal`: `paymentId`, `chargebackId`, `paymentDescription`,
 * `chargebackDescription`
 * * Type `chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`,
 * `chargebackDescription`
 * * Type `reversed-chargeback-compensation`: `paymentId`, `chargebackId`, `paymentDescription`,
 * `chargebackDescription`
 * * Type `outgoing-transfer`: `settlementId` `transferId`
 * * Type `canceled-outgoing-transfer`: `settlementId` `transferId`
 * * Type `returned-transfer`: `settlementId` `transferId`
 * * Type `invoice-compensation`: `invoiceId`
 * * Type `balance-correction`: none
 * * Type `application-fee`: `paymentId`, `paymentDescription`, `payingOwner`
 * * Type `split-payment`: `paymentId`, `paymentDescription`, `paymentOwner`
 * * Type `platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`, `refundDescription`
 * * Type `returned-platform-payment-refund`: `paymentId` `refundId`, `paymentDescription`,
 * `refundDescription`
 * * Type `platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`,
 * `chargebackDescription`
 * * Type `reversed-platform-payment-chargeback`: `paymentId` `chargebackId`, `paymentDescription`,
 * `chargebackDescription`
 * * Type `payment-commission`: `paymentId`, `paymentDescription`, `organizationId`
 * * Type `reimbursement-fee`: `paymentId`, `paymentDescription`
 * * Type `failed-payment-fee`: `paymentId`, `paymentDescription`
 * * Type `payment-fee`: `paymentId`, `paymentDescription`
 * * Type `cash-advance-loan`: none
 * * Type `platform-connected-organizations-fee`: none
 * * Type `managed-fee`: `feeType`, `&lt;name of the fee&gt;Id`
 * * Type `returned-managed-fee`:  `feeType`, `&lt;name of the fee&gt;Id`
 * * Type `topup`: none
 * * Type `balance-reserve`: none
 * * Type `balance-reserve-return`: none
 * * Type `movement`: none
 * * Type `post-payment-split-payment`: `paymentId`
 * * Type `cash-collateral-issuance`: none
 * * Type `cash-collateral-release`: none
 */
public class Context {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment")
    private JsonNullable<? extends Payment> payment;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capture")
    private JsonNullable<? extends Capture> capture;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capture-commision")
    private JsonNullable<? extends CaptureCommision> captureCommision;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capture-rolling-reserve-release")
    private JsonNullable<? extends CaptureRollingReserveRelease> captureRollingReserveRelease;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unauthorized-direct-debit")
    private JsonNullable<? extends UnauthorizedDirectDebit> unauthorizedDirectDebit;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failed-payment")
    private JsonNullable<? extends FailedPayment> failedPayment;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund")
    private JsonNullable<? extends Refund> refund;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund-compensation")
    private JsonNullable<? extends RefundCompensation> refundCompensation;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returned-refund")
    private JsonNullable<? extends ReturnedRefund> returnedRefund;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returned-refund-compensation")
    private JsonNullable<? extends ReturnedRefundCompensation> returnedRefundCompensation;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeback")
    private JsonNullable<? extends Chargeback> chargeback;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeback-reversal")
    private JsonNullable<? extends ChargebackReversal> chargebackReversal;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeback-compensation")
    private JsonNullable<? extends ChargebackCompensation> chargebackCompensation;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reversed-chargeback-compensation")
    private JsonNullable<? extends ReversedChargebackCompensation> reversedChargebackCompensation;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outgoing-transfer")
    private JsonNullable<? extends OutgoingTransfer> outgoingTransfer;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canceled-outgoing-transfer")
    private JsonNullable<? extends CanceledOutgoingTransfer> canceledOutgoingTransfer;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returned-transfer")
    private JsonNullable<? extends ReturnedTransfer> returnedTransfer;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice-compensation")
    private JsonNullable<? extends InvoiceCompensation> invoiceCompensation;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application-fee")
    private JsonNullable<? extends EntityBalanceTransactionApplicationFee> applicationFee;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("split-payment")
    private JsonNullable<? extends SplitPayment> splitPayment;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platform-payment-refund")
    private JsonNullable<? extends PlatformPaymentRefund> platformPaymentRefund;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returned-platform-payment-refund")
    private JsonNullable<? extends ReturnedPlatformPaymentRefund> returnedPlatformPaymentRefund;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platform-payment-chargeback")
    private JsonNullable<? extends PlatformPaymentChargeback> platformPaymentChargeback;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reversed-platform-payment-chargeback")
    private JsonNullable<? extends ReversedPlatformPaymentChargeback> reversedPlatformPaymentChargeback;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment-commission")
    private JsonNullable<? extends PaymentCommission> paymentCommission;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reimbursement-fee")
    private JsonNullable<? extends ReimbursementFee> reimbursementFee;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failed-payment-fee")
    private JsonNullable<? extends FailedPaymentFee> failedPaymentFee;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment-fee")
    private JsonNullable<? extends PaymentFee> paymentFee;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managed-fee")
    private JsonNullable<? extends ManagedFee> managedFee;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returned-managed-fee")
    private JsonNullable<? extends ReturnedManagedFee> returnedManagedFee;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("post-payment-split-payment")
    private JsonNullable<? extends PostPaymentSplitPayment> postPaymentSplitPayment;

    @JsonCreator
    public Context(
            @JsonProperty("payment") JsonNullable<? extends Payment> payment,
            @JsonProperty("capture") JsonNullable<? extends Capture> capture,
            @JsonProperty("capture-commision") JsonNullable<? extends CaptureCommision> captureCommision,
            @JsonProperty("capture-rolling-reserve-release") JsonNullable<? extends CaptureRollingReserveRelease> captureRollingReserveRelease,
            @JsonProperty("unauthorized-direct-debit") JsonNullable<? extends UnauthorizedDirectDebit> unauthorizedDirectDebit,
            @JsonProperty("failed-payment") JsonNullable<? extends FailedPayment> failedPayment,
            @JsonProperty("refund") JsonNullable<? extends Refund> refund,
            @JsonProperty("refund-compensation") JsonNullable<? extends RefundCompensation> refundCompensation,
            @JsonProperty("returned-refund") JsonNullable<? extends ReturnedRefund> returnedRefund,
            @JsonProperty("returned-refund-compensation") JsonNullable<? extends ReturnedRefundCompensation> returnedRefundCompensation,
            @JsonProperty("chargeback") JsonNullable<? extends Chargeback> chargeback,
            @JsonProperty("chargeback-reversal") JsonNullable<? extends ChargebackReversal> chargebackReversal,
            @JsonProperty("chargeback-compensation") JsonNullable<? extends ChargebackCompensation> chargebackCompensation,
            @JsonProperty("reversed-chargeback-compensation") JsonNullable<? extends ReversedChargebackCompensation> reversedChargebackCompensation,
            @JsonProperty("outgoing-transfer") JsonNullable<? extends OutgoingTransfer> outgoingTransfer,
            @JsonProperty("canceled-outgoing-transfer") JsonNullable<? extends CanceledOutgoingTransfer> canceledOutgoingTransfer,
            @JsonProperty("returned-transfer") JsonNullable<? extends ReturnedTransfer> returnedTransfer,
            @JsonProperty("invoice-compensation") JsonNullable<? extends InvoiceCompensation> invoiceCompensation,
            @JsonProperty("application-fee") JsonNullable<? extends EntityBalanceTransactionApplicationFee> applicationFee,
            @JsonProperty("split-payment") JsonNullable<? extends SplitPayment> splitPayment,
            @JsonProperty("platform-payment-refund") JsonNullable<? extends PlatformPaymentRefund> platformPaymentRefund,
            @JsonProperty("returned-platform-payment-refund") JsonNullable<? extends ReturnedPlatformPaymentRefund> returnedPlatformPaymentRefund,
            @JsonProperty("platform-payment-chargeback") JsonNullable<? extends PlatformPaymentChargeback> platformPaymentChargeback,
            @JsonProperty("reversed-platform-payment-chargeback") JsonNullable<? extends ReversedPlatformPaymentChargeback> reversedPlatformPaymentChargeback,
            @JsonProperty("payment-commission") JsonNullable<? extends PaymentCommission> paymentCommission,
            @JsonProperty("reimbursement-fee") JsonNullable<? extends ReimbursementFee> reimbursementFee,
            @JsonProperty("failed-payment-fee") JsonNullable<? extends FailedPaymentFee> failedPaymentFee,
            @JsonProperty("payment-fee") JsonNullable<? extends PaymentFee> paymentFee,
            @JsonProperty("managed-fee") JsonNullable<? extends ManagedFee> managedFee,
            @JsonProperty("returned-managed-fee") JsonNullable<? extends ReturnedManagedFee> returnedManagedFee,
            @JsonProperty("post-payment-split-payment") JsonNullable<? extends PostPaymentSplitPayment> postPaymentSplitPayment) {
        Utils.checkNotNull(payment, "payment");
        Utils.checkNotNull(capture, "capture");
        Utils.checkNotNull(captureCommision, "captureCommision");
        Utils.checkNotNull(captureRollingReserveRelease, "captureRollingReserveRelease");
        Utils.checkNotNull(unauthorizedDirectDebit, "unauthorizedDirectDebit");
        Utils.checkNotNull(failedPayment, "failedPayment");
        Utils.checkNotNull(refund, "refund");
        Utils.checkNotNull(refundCompensation, "refundCompensation");
        Utils.checkNotNull(returnedRefund, "returnedRefund");
        Utils.checkNotNull(returnedRefundCompensation, "returnedRefundCompensation");
        Utils.checkNotNull(chargeback, "chargeback");
        Utils.checkNotNull(chargebackReversal, "chargebackReversal");
        Utils.checkNotNull(chargebackCompensation, "chargebackCompensation");
        Utils.checkNotNull(reversedChargebackCompensation, "reversedChargebackCompensation");
        Utils.checkNotNull(outgoingTransfer, "outgoingTransfer");
        Utils.checkNotNull(canceledOutgoingTransfer, "canceledOutgoingTransfer");
        Utils.checkNotNull(returnedTransfer, "returnedTransfer");
        Utils.checkNotNull(invoiceCompensation, "invoiceCompensation");
        Utils.checkNotNull(applicationFee, "applicationFee");
        Utils.checkNotNull(splitPayment, "splitPayment");
        Utils.checkNotNull(platformPaymentRefund, "platformPaymentRefund");
        Utils.checkNotNull(returnedPlatformPaymentRefund, "returnedPlatformPaymentRefund");
        Utils.checkNotNull(platformPaymentChargeback, "platformPaymentChargeback");
        Utils.checkNotNull(reversedPlatformPaymentChargeback, "reversedPlatformPaymentChargeback");
        Utils.checkNotNull(paymentCommission, "paymentCommission");
        Utils.checkNotNull(reimbursementFee, "reimbursementFee");
        Utils.checkNotNull(failedPaymentFee, "failedPaymentFee");
        Utils.checkNotNull(paymentFee, "paymentFee");
        Utils.checkNotNull(managedFee, "managedFee");
        Utils.checkNotNull(returnedManagedFee, "returnedManagedFee");
        Utils.checkNotNull(postPaymentSplitPayment, "postPaymentSplitPayment");
        this.payment = payment;
        this.capture = capture;
        this.captureCommision = captureCommision;
        this.captureRollingReserveRelease = captureRollingReserveRelease;
        this.unauthorizedDirectDebit = unauthorizedDirectDebit;
        this.failedPayment = failedPayment;
        this.refund = refund;
        this.refundCompensation = refundCompensation;
        this.returnedRefund = returnedRefund;
        this.returnedRefundCompensation = returnedRefundCompensation;
        this.chargeback = chargeback;
        this.chargebackReversal = chargebackReversal;
        this.chargebackCompensation = chargebackCompensation;
        this.reversedChargebackCompensation = reversedChargebackCompensation;
        this.outgoingTransfer = outgoingTransfer;
        this.canceledOutgoingTransfer = canceledOutgoingTransfer;
        this.returnedTransfer = returnedTransfer;
        this.invoiceCompensation = invoiceCompensation;
        this.applicationFee = applicationFee;
        this.splitPayment = splitPayment;
        this.platformPaymentRefund = platformPaymentRefund;
        this.returnedPlatformPaymentRefund = returnedPlatformPaymentRefund;
        this.platformPaymentChargeback = platformPaymentChargeback;
        this.reversedPlatformPaymentChargeback = reversedPlatformPaymentChargeback;
        this.paymentCommission = paymentCommission;
        this.reimbursementFee = reimbursementFee;
        this.failedPaymentFee = failedPaymentFee;
        this.paymentFee = paymentFee;
        this.managedFee = managedFee;
        this.returnedManagedFee = returnedManagedFee;
        this.postPaymentSplitPayment = postPaymentSplitPayment;
    }
    
    public Context() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Payment> payment() {
        return (JsonNullable<Payment>) payment;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Capture> capture() {
        return (JsonNullable<Capture>) capture;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CaptureCommision> captureCommision() {
        return (JsonNullable<CaptureCommision>) captureCommision;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CaptureRollingReserveRelease> captureRollingReserveRelease() {
        return (JsonNullable<CaptureRollingReserveRelease>) captureRollingReserveRelease;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<UnauthorizedDirectDebit> unauthorizedDirectDebit() {
        return (JsonNullable<UnauthorizedDirectDebit>) unauthorizedDirectDebit;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<FailedPayment> failedPayment() {
        return (JsonNullable<FailedPayment>) failedPayment;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Refund> refund() {
        return (JsonNullable<Refund>) refund;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<RefundCompensation> refundCompensation() {
        return (JsonNullable<RefundCompensation>) refundCompensation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ReturnedRefund> returnedRefund() {
        return (JsonNullable<ReturnedRefund>) returnedRefund;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ReturnedRefundCompensation> returnedRefundCompensation() {
        return (JsonNullable<ReturnedRefundCompensation>) returnedRefundCompensation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Chargeback> chargeback() {
        return (JsonNullable<Chargeback>) chargeback;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ChargebackReversal> chargebackReversal() {
        return (JsonNullable<ChargebackReversal>) chargebackReversal;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ChargebackCompensation> chargebackCompensation() {
        return (JsonNullable<ChargebackCompensation>) chargebackCompensation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ReversedChargebackCompensation> reversedChargebackCompensation() {
        return (JsonNullable<ReversedChargebackCompensation>) reversedChargebackCompensation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<OutgoingTransfer> outgoingTransfer() {
        return (JsonNullable<OutgoingTransfer>) outgoingTransfer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CanceledOutgoingTransfer> canceledOutgoingTransfer() {
        return (JsonNullable<CanceledOutgoingTransfer>) canceledOutgoingTransfer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ReturnedTransfer> returnedTransfer() {
        return (JsonNullable<ReturnedTransfer>) returnedTransfer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<InvoiceCompensation> invoiceCompensation() {
        return (JsonNullable<InvoiceCompensation>) invoiceCompensation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EntityBalanceTransactionApplicationFee> applicationFee() {
        return (JsonNullable<EntityBalanceTransactionApplicationFee>) applicationFee;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<SplitPayment> splitPayment() {
        return (JsonNullable<SplitPayment>) splitPayment;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PlatformPaymentRefund> platformPaymentRefund() {
        return (JsonNullable<PlatformPaymentRefund>) platformPaymentRefund;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ReturnedPlatformPaymentRefund> returnedPlatformPaymentRefund() {
        return (JsonNullable<ReturnedPlatformPaymentRefund>) returnedPlatformPaymentRefund;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PlatformPaymentChargeback> platformPaymentChargeback() {
        return (JsonNullable<PlatformPaymentChargeback>) platformPaymentChargeback;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ReversedPlatformPaymentChargeback> reversedPlatformPaymentChargeback() {
        return (JsonNullable<ReversedPlatformPaymentChargeback>) reversedPlatformPaymentChargeback;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PaymentCommission> paymentCommission() {
        return (JsonNullable<PaymentCommission>) paymentCommission;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ReimbursementFee> reimbursementFee() {
        return (JsonNullable<ReimbursementFee>) reimbursementFee;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<FailedPaymentFee> failedPaymentFee() {
        return (JsonNullable<FailedPaymentFee>) failedPaymentFee;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PaymentFee> paymentFee() {
        return (JsonNullable<PaymentFee>) paymentFee;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ManagedFee> managedFee() {
        return (JsonNullable<ManagedFee>) managedFee;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ReturnedManagedFee> returnedManagedFee() {
        return (JsonNullable<ReturnedManagedFee>) returnedManagedFee;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PostPaymentSplitPayment> postPaymentSplitPayment() {
        return (JsonNullable<PostPaymentSplitPayment>) postPaymentSplitPayment;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Context withPayment(Payment payment) {
        Utils.checkNotNull(payment, "payment");
        this.payment = JsonNullable.of(payment);
        return this;
    }

    public Context withPayment(JsonNullable<? extends Payment> payment) {
        Utils.checkNotNull(payment, "payment");
        this.payment = payment;
        return this;
    }

    public Context withCapture(Capture capture) {
        Utils.checkNotNull(capture, "capture");
        this.capture = JsonNullable.of(capture);
        return this;
    }

    public Context withCapture(JsonNullable<? extends Capture> capture) {
        Utils.checkNotNull(capture, "capture");
        this.capture = capture;
        return this;
    }

    public Context withCaptureCommision(CaptureCommision captureCommision) {
        Utils.checkNotNull(captureCommision, "captureCommision");
        this.captureCommision = JsonNullable.of(captureCommision);
        return this;
    }

    public Context withCaptureCommision(JsonNullable<? extends CaptureCommision> captureCommision) {
        Utils.checkNotNull(captureCommision, "captureCommision");
        this.captureCommision = captureCommision;
        return this;
    }

    public Context withCaptureRollingReserveRelease(CaptureRollingReserveRelease captureRollingReserveRelease) {
        Utils.checkNotNull(captureRollingReserveRelease, "captureRollingReserveRelease");
        this.captureRollingReserveRelease = JsonNullable.of(captureRollingReserveRelease);
        return this;
    }

    public Context withCaptureRollingReserveRelease(JsonNullable<? extends CaptureRollingReserveRelease> captureRollingReserveRelease) {
        Utils.checkNotNull(captureRollingReserveRelease, "captureRollingReserveRelease");
        this.captureRollingReserveRelease = captureRollingReserveRelease;
        return this;
    }

    public Context withUnauthorizedDirectDebit(UnauthorizedDirectDebit unauthorizedDirectDebit) {
        Utils.checkNotNull(unauthorizedDirectDebit, "unauthorizedDirectDebit");
        this.unauthorizedDirectDebit = JsonNullable.of(unauthorizedDirectDebit);
        return this;
    }

    public Context withUnauthorizedDirectDebit(JsonNullable<? extends UnauthorizedDirectDebit> unauthorizedDirectDebit) {
        Utils.checkNotNull(unauthorizedDirectDebit, "unauthorizedDirectDebit");
        this.unauthorizedDirectDebit = unauthorizedDirectDebit;
        return this;
    }

    public Context withFailedPayment(FailedPayment failedPayment) {
        Utils.checkNotNull(failedPayment, "failedPayment");
        this.failedPayment = JsonNullable.of(failedPayment);
        return this;
    }

    public Context withFailedPayment(JsonNullable<? extends FailedPayment> failedPayment) {
        Utils.checkNotNull(failedPayment, "failedPayment");
        this.failedPayment = failedPayment;
        return this;
    }

    public Context withRefund(Refund refund) {
        Utils.checkNotNull(refund, "refund");
        this.refund = JsonNullable.of(refund);
        return this;
    }

    public Context withRefund(JsonNullable<? extends Refund> refund) {
        Utils.checkNotNull(refund, "refund");
        this.refund = refund;
        return this;
    }

    public Context withRefundCompensation(RefundCompensation refundCompensation) {
        Utils.checkNotNull(refundCompensation, "refundCompensation");
        this.refundCompensation = JsonNullable.of(refundCompensation);
        return this;
    }

    public Context withRefundCompensation(JsonNullable<? extends RefundCompensation> refundCompensation) {
        Utils.checkNotNull(refundCompensation, "refundCompensation");
        this.refundCompensation = refundCompensation;
        return this;
    }

    public Context withReturnedRefund(ReturnedRefund returnedRefund) {
        Utils.checkNotNull(returnedRefund, "returnedRefund");
        this.returnedRefund = JsonNullable.of(returnedRefund);
        return this;
    }

    public Context withReturnedRefund(JsonNullable<? extends ReturnedRefund> returnedRefund) {
        Utils.checkNotNull(returnedRefund, "returnedRefund");
        this.returnedRefund = returnedRefund;
        return this;
    }

    public Context withReturnedRefundCompensation(ReturnedRefundCompensation returnedRefundCompensation) {
        Utils.checkNotNull(returnedRefundCompensation, "returnedRefundCompensation");
        this.returnedRefundCompensation = JsonNullable.of(returnedRefundCompensation);
        return this;
    }

    public Context withReturnedRefundCompensation(JsonNullable<? extends ReturnedRefundCompensation> returnedRefundCompensation) {
        Utils.checkNotNull(returnedRefundCompensation, "returnedRefundCompensation");
        this.returnedRefundCompensation = returnedRefundCompensation;
        return this;
    }

    public Context withChargeback(Chargeback chargeback) {
        Utils.checkNotNull(chargeback, "chargeback");
        this.chargeback = JsonNullable.of(chargeback);
        return this;
    }

    public Context withChargeback(JsonNullable<? extends Chargeback> chargeback) {
        Utils.checkNotNull(chargeback, "chargeback");
        this.chargeback = chargeback;
        return this;
    }

    public Context withChargebackReversal(ChargebackReversal chargebackReversal) {
        Utils.checkNotNull(chargebackReversal, "chargebackReversal");
        this.chargebackReversal = JsonNullable.of(chargebackReversal);
        return this;
    }

    public Context withChargebackReversal(JsonNullable<? extends ChargebackReversal> chargebackReversal) {
        Utils.checkNotNull(chargebackReversal, "chargebackReversal");
        this.chargebackReversal = chargebackReversal;
        return this;
    }

    public Context withChargebackCompensation(ChargebackCompensation chargebackCompensation) {
        Utils.checkNotNull(chargebackCompensation, "chargebackCompensation");
        this.chargebackCompensation = JsonNullable.of(chargebackCompensation);
        return this;
    }

    public Context withChargebackCompensation(JsonNullable<? extends ChargebackCompensation> chargebackCompensation) {
        Utils.checkNotNull(chargebackCompensation, "chargebackCompensation");
        this.chargebackCompensation = chargebackCompensation;
        return this;
    }

    public Context withReversedChargebackCompensation(ReversedChargebackCompensation reversedChargebackCompensation) {
        Utils.checkNotNull(reversedChargebackCompensation, "reversedChargebackCompensation");
        this.reversedChargebackCompensation = JsonNullable.of(reversedChargebackCompensation);
        return this;
    }

    public Context withReversedChargebackCompensation(JsonNullable<? extends ReversedChargebackCompensation> reversedChargebackCompensation) {
        Utils.checkNotNull(reversedChargebackCompensation, "reversedChargebackCompensation");
        this.reversedChargebackCompensation = reversedChargebackCompensation;
        return this;
    }

    public Context withOutgoingTransfer(OutgoingTransfer outgoingTransfer) {
        Utils.checkNotNull(outgoingTransfer, "outgoingTransfer");
        this.outgoingTransfer = JsonNullable.of(outgoingTransfer);
        return this;
    }

    public Context withOutgoingTransfer(JsonNullable<? extends OutgoingTransfer> outgoingTransfer) {
        Utils.checkNotNull(outgoingTransfer, "outgoingTransfer");
        this.outgoingTransfer = outgoingTransfer;
        return this;
    }

    public Context withCanceledOutgoingTransfer(CanceledOutgoingTransfer canceledOutgoingTransfer) {
        Utils.checkNotNull(canceledOutgoingTransfer, "canceledOutgoingTransfer");
        this.canceledOutgoingTransfer = JsonNullable.of(canceledOutgoingTransfer);
        return this;
    }

    public Context withCanceledOutgoingTransfer(JsonNullable<? extends CanceledOutgoingTransfer> canceledOutgoingTransfer) {
        Utils.checkNotNull(canceledOutgoingTransfer, "canceledOutgoingTransfer");
        this.canceledOutgoingTransfer = canceledOutgoingTransfer;
        return this;
    }

    public Context withReturnedTransfer(ReturnedTransfer returnedTransfer) {
        Utils.checkNotNull(returnedTransfer, "returnedTransfer");
        this.returnedTransfer = JsonNullable.of(returnedTransfer);
        return this;
    }

    public Context withReturnedTransfer(JsonNullable<? extends ReturnedTransfer> returnedTransfer) {
        Utils.checkNotNull(returnedTransfer, "returnedTransfer");
        this.returnedTransfer = returnedTransfer;
        return this;
    }

    public Context withInvoiceCompensation(InvoiceCompensation invoiceCompensation) {
        Utils.checkNotNull(invoiceCompensation, "invoiceCompensation");
        this.invoiceCompensation = JsonNullable.of(invoiceCompensation);
        return this;
    }

    public Context withInvoiceCompensation(JsonNullable<? extends InvoiceCompensation> invoiceCompensation) {
        Utils.checkNotNull(invoiceCompensation, "invoiceCompensation");
        this.invoiceCompensation = invoiceCompensation;
        return this;
    }

    public Context withApplicationFee(EntityBalanceTransactionApplicationFee applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = JsonNullable.of(applicationFee);
        return this;
    }

    public Context withApplicationFee(JsonNullable<? extends EntityBalanceTransactionApplicationFee> applicationFee) {
        Utils.checkNotNull(applicationFee, "applicationFee");
        this.applicationFee = applicationFee;
        return this;
    }

    public Context withSplitPayment(SplitPayment splitPayment) {
        Utils.checkNotNull(splitPayment, "splitPayment");
        this.splitPayment = JsonNullable.of(splitPayment);
        return this;
    }

    public Context withSplitPayment(JsonNullable<? extends SplitPayment> splitPayment) {
        Utils.checkNotNull(splitPayment, "splitPayment");
        this.splitPayment = splitPayment;
        return this;
    }

    public Context withPlatformPaymentRefund(PlatformPaymentRefund platformPaymentRefund) {
        Utils.checkNotNull(platformPaymentRefund, "platformPaymentRefund");
        this.platformPaymentRefund = JsonNullable.of(platformPaymentRefund);
        return this;
    }

    public Context withPlatformPaymentRefund(JsonNullable<? extends PlatformPaymentRefund> platformPaymentRefund) {
        Utils.checkNotNull(platformPaymentRefund, "platformPaymentRefund");
        this.platformPaymentRefund = platformPaymentRefund;
        return this;
    }

    public Context withReturnedPlatformPaymentRefund(ReturnedPlatformPaymentRefund returnedPlatformPaymentRefund) {
        Utils.checkNotNull(returnedPlatformPaymentRefund, "returnedPlatformPaymentRefund");
        this.returnedPlatformPaymentRefund = JsonNullable.of(returnedPlatformPaymentRefund);
        return this;
    }

    public Context withReturnedPlatformPaymentRefund(JsonNullable<? extends ReturnedPlatformPaymentRefund> returnedPlatformPaymentRefund) {
        Utils.checkNotNull(returnedPlatformPaymentRefund, "returnedPlatformPaymentRefund");
        this.returnedPlatformPaymentRefund = returnedPlatformPaymentRefund;
        return this;
    }

    public Context withPlatformPaymentChargeback(PlatformPaymentChargeback platformPaymentChargeback) {
        Utils.checkNotNull(platformPaymentChargeback, "platformPaymentChargeback");
        this.platformPaymentChargeback = JsonNullable.of(platformPaymentChargeback);
        return this;
    }

    public Context withPlatformPaymentChargeback(JsonNullable<? extends PlatformPaymentChargeback> platformPaymentChargeback) {
        Utils.checkNotNull(platformPaymentChargeback, "platformPaymentChargeback");
        this.platformPaymentChargeback = platformPaymentChargeback;
        return this;
    }

    public Context withReversedPlatformPaymentChargeback(ReversedPlatformPaymentChargeback reversedPlatformPaymentChargeback) {
        Utils.checkNotNull(reversedPlatformPaymentChargeback, "reversedPlatformPaymentChargeback");
        this.reversedPlatformPaymentChargeback = JsonNullable.of(reversedPlatformPaymentChargeback);
        return this;
    }

    public Context withReversedPlatformPaymentChargeback(JsonNullable<? extends ReversedPlatformPaymentChargeback> reversedPlatformPaymentChargeback) {
        Utils.checkNotNull(reversedPlatformPaymentChargeback, "reversedPlatformPaymentChargeback");
        this.reversedPlatformPaymentChargeback = reversedPlatformPaymentChargeback;
        return this;
    }

    public Context withPaymentCommission(PaymentCommission paymentCommission) {
        Utils.checkNotNull(paymentCommission, "paymentCommission");
        this.paymentCommission = JsonNullable.of(paymentCommission);
        return this;
    }

    public Context withPaymentCommission(JsonNullable<? extends PaymentCommission> paymentCommission) {
        Utils.checkNotNull(paymentCommission, "paymentCommission");
        this.paymentCommission = paymentCommission;
        return this;
    }

    public Context withReimbursementFee(ReimbursementFee reimbursementFee) {
        Utils.checkNotNull(reimbursementFee, "reimbursementFee");
        this.reimbursementFee = JsonNullable.of(reimbursementFee);
        return this;
    }

    public Context withReimbursementFee(JsonNullable<? extends ReimbursementFee> reimbursementFee) {
        Utils.checkNotNull(reimbursementFee, "reimbursementFee");
        this.reimbursementFee = reimbursementFee;
        return this;
    }

    public Context withFailedPaymentFee(FailedPaymentFee failedPaymentFee) {
        Utils.checkNotNull(failedPaymentFee, "failedPaymentFee");
        this.failedPaymentFee = JsonNullable.of(failedPaymentFee);
        return this;
    }

    public Context withFailedPaymentFee(JsonNullable<? extends FailedPaymentFee> failedPaymentFee) {
        Utils.checkNotNull(failedPaymentFee, "failedPaymentFee");
        this.failedPaymentFee = failedPaymentFee;
        return this;
    }

    public Context withPaymentFee(PaymentFee paymentFee) {
        Utils.checkNotNull(paymentFee, "paymentFee");
        this.paymentFee = JsonNullable.of(paymentFee);
        return this;
    }

    public Context withPaymentFee(JsonNullable<? extends PaymentFee> paymentFee) {
        Utils.checkNotNull(paymentFee, "paymentFee");
        this.paymentFee = paymentFee;
        return this;
    }

    public Context withManagedFee(ManagedFee managedFee) {
        Utils.checkNotNull(managedFee, "managedFee");
        this.managedFee = JsonNullable.of(managedFee);
        return this;
    }

    public Context withManagedFee(JsonNullable<? extends ManagedFee> managedFee) {
        Utils.checkNotNull(managedFee, "managedFee");
        this.managedFee = managedFee;
        return this;
    }

    public Context withReturnedManagedFee(ReturnedManagedFee returnedManagedFee) {
        Utils.checkNotNull(returnedManagedFee, "returnedManagedFee");
        this.returnedManagedFee = JsonNullable.of(returnedManagedFee);
        return this;
    }

    public Context withReturnedManagedFee(JsonNullable<? extends ReturnedManagedFee> returnedManagedFee) {
        Utils.checkNotNull(returnedManagedFee, "returnedManagedFee");
        this.returnedManagedFee = returnedManagedFee;
        return this;
    }

    public Context withPostPaymentSplitPayment(PostPaymentSplitPayment postPaymentSplitPayment) {
        Utils.checkNotNull(postPaymentSplitPayment, "postPaymentSplitPayment");
        this.postPaymentSplitPayment = JsonNullable.of(postPaymentSplitPayment);
        return this;
    }

    public Context withPostPaymentSplitPayment(JsonNullable<? extends PostPaymentSplitPayment> postPaymentSplitPayment) {
        Utils.checkNotNull(postPaymentSplitPayment, "postPaymentSplitPayment");
        this.postPaymentSplitPayment = postPaymentSplitPayment;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Context other = (Context) o;
        return 
            Utils.enhancedDeepEquals(this.payment, other.payment) &&
            Utils.enhancedDeepEquals(this.capture, other.capture) &&
            Utils.enhancedDeepEquals(this.captureCommision, other.captureCommision) &&
            Utils.enhancedDeepEquals(this.captureRollingReserveRelease, other.captureRollingReserveRelease) &&
            Utils.enhancedDeepEquals(this.unauthorizedDirectDebit, other.unauthorizedDirectDebit) &&
            Utils.enhancedDeepEquals(this.failedPayment, other.failedPayment) &&
            Utils.enhancedDeepEquals(this.refund, other.refund) &&
            Utils.enhancedDeepEquals(this.refundCompensation, other.refundCompensation) &&
            Utils.enhancedDeepEquals(this.returnedRefund, other.returnedRefund) &&
            Utils.enhancedDeepEquals(this.returnedRefundCompensation, other.returnedRefundCompensation) &&
            Utils.enhancedDeepEquals(this.chargeback, other.chargeback) &&
            Utils.enhancedDeepEquals(this.chargebackReversal, other.chargebackReversal) &&
            Utils.enhancedDeepEquals(this.chargebackCompensation, other.chargebackCompensation) &&
            Utils.enhancedDeepEquals(this.reversedChargebackCompensation, other.reversedChargebackCompensation) &&
            Utils.enhancedDeepEquals(this.outgoingTransfer, other.outgoingTransfer) &&
            Utils.enhancedDeepEquals(this.canceledOutgoingTransfer, other.canceledOutgoingTransfer) &&
            Utils.enhancedDeepEquals(this.returnedTransfer, other.returnedTransfer) &&
            Utils.enhancedDeepEquals(this.invoiceCompensation, other.invoiceCompensation) &&
            Utils.enhancedDeepEquals(this.applicationFee, other.applicationFee) &&
            Utils.enhancedDeepEquals(this.splitPayment, other.splitPayment) &&
            Utils.enhancedDeepEquals(this.platformPaymentRefund, other.platformPaymentRefund) &&
            Utils.enhancedDeepEquals(this.returnedPlatformPaymentRefund, other.returnedPlatformPaymentRefund) &&
            Utils.enhancedDeepEquals(this.platformPaymentChargeback, other.platformPaymentChargeback) &&
            Utils.enhancedDeepEquals(this.reversedPlatformPaymentChargeback, other.reversedPlatformPaymentChargeback) &&
            Utils.enhancedDeepEquals(this.paymentCommission, other.paymentCommission) &&
            Utils.enhancedDeepEquals(this.reimbursementFee, other.reimbursementFee) &&
            Utils.enhancedDeepEquals(this.failedPaymentFee, other.failedPaymentFee) &&
            Utils.enhancedDeepEquals(this.paymentFee, other.paymentFee) &&
            Utils.enhancedDeepEquals(this.managedFee, other.managedFee) &&
            Utils.enhancedDeepEquals(this.returnedManagedFee, other.returnedManagedFee) &&
            Utils.enhancedDeepEquals(this.postPaymentSplitPayment, other.postPaymentSplitPayment);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            payment, capture, captureCommision,
            captureRollingReserveRelease, unauthorizedDirectDebit, failedPayment,
            refund, refundCompensation, returnedRefund,
            returnedRefundCompensation, chargeback, chargebackReversal,
            chargebackCompensation, reversedChargebackCompensation, outgoingTransfer,
            canceledOutgoingTransfer, returnedTransfer, invoiceCompensation,
            applicationFee, splitPayment, platformPaymentRefund,
            returnedPlatformPaymentRefund, platformPaymentChargeback, reversedPlatformPaymentChargeback,
            paymentCommission, reimbursementFee, failedPaymentFee,
            paymentFee, managedFee, returnedManagedFee,
            postPaymentSplitPayment);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Context.class,
                "payment", payment,
                "capture", capture,
                "captureCommision", captureCommision,
                "captureRollingReserveRelease", captureRollingReserveRelease,
                "unauthorizedDirectDebit", unauthorizedDirectDebit,
                "failedPayment", failedPayment,
                "refund", refund,
                "refundCompensation", refundCompensation,
                "returnedRefund", returnedRefund,
                "returnedRefundCompensation", returnedRefundCompensation,
                "chargeback", chargeback,
                "chargebackReversal", chargebackReversal,
                "chargebackCompensation", chargebackCompensation,
                "reversedChargebackCompensation", reversedChargebackCompensation,
                "outgoingTransfer", outgoingTransfer,
                "canceledOutgoingTransfer", canceledOutgoingTransfer,
                "returnedTransfer", returnedTransfer,
                "invoiceCompensation", invoiceCompensation,
                "applicationFee", applicationFee,
                "splitPayment", splitPayment,
                "platformPaymentRefund", platformPaymentRefund,
                "returnedPlatformPaymentRefund", returnedPlatformPaymentRefund,
                "platformPaymentChargeback", platformPaymentChargeback,
                "reversedPlatformPaymentChargeback", reversedPlatformPaymentChargeback,
                "paymentCommission", paymentCommission,
                "reimbursementFee", reimbursementFee,
                "failedPaymentFee", failedPaymentFee,
                "paymentFee", paymentFee,
                "managedFee", managedFee,
                "returnedManagedFee", returnedManagedFee,
                "postPaymentSplitPayment", postPaymentSplitPayment);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends Payment> payment = JsonNullable.undefined();

        private JsonNullable<? extends Capture> capture = JsonNullable.undefined();

        private JsonNullable<? extends CaptureCommision> captureCommision = JsonNullable.undefined();

        private JsonNullable<? extends CaptureRollingReserveRelease> captureRollingReserveRelease = JsonNullable.undefined();

        private JsonNullable<? extends UnauthorizedDirectDebit> unauthorizedDirectDebit = JsonNullable.undefined();

        private JsonNullable<? extends FailedPayment> failedPayment = JsonNullable.undefined();

        private JsonNullable<? extends Refund> refund = JsonNullable.undefined();

        private JsonNullable<? extends RefundCompensation> refundCompensation = JsonNullable.undefined();

        private JsonNullable<? extends ReturnedRefund> returnedRefund = JsonNullable.undefined();

        private JsonNullable<? extends ReturnedRefundCompensation> returnedRefundCompensation = JsonNullable.undefined();

        private JsonNullable<? extends Chargeback> chargeback = JsonNullable.undefined();

        private JsonNullable<? extends ChargebackReversal> chargebackReversal = JsonNullable.undefined();

        private JsonNullable<? extends ChargebackCompensation> chargebackCompensation = JsonNullable.undefined();

        private JsonNullable<? extends ReversedChargebackCompensation> reversedChargebackCompensation = JsonNullable.undefined();

        private JsonNullable<? extends OutgoingTransfer> outgoingTransfer = JsonNullable.undefined();

        private JsonNullable<? extends CanceledOutgoingTransfer> canceledOutgoingTransfer = JsonNullable.undefined();

        private JsonNullable<? extends ReturnedTransfer> returnedTransfer = JsonNullable.undefined();

        private JsonNullable<? extends InvoiceCompensation> invoiceCompensation = JsonNullable.undefined();

        private JsonNullable<? extends EntityBalanceTransactionApplicationFee> applicationFee = JsonNullable.undefined();

        private JsonNullable<? extends SplitPayment> splitPayment = JsonNullable.undefined();

        private JsonNullable<? extends PlatformPaymentRefund> platformPaymentRefund = JsonNullable.undefined();

        private JsonNullable<? extends ReturnedPlatformPaymentRefund> returnedPlatformPaymentRefund = JsonNullable.undefined();

        private JsonNullable<? extends PlatformPaymentChargeback> platformPaymentChargeback = JsonNullable.undefined();

        private JsonNullable<? extends ReversedPlatformPaymentChargeback> reversedPlatformPaymentChargeback = JsonNullable.undefined();

        private JsonNullable<? extends PaymentCommission> paymentCommission = JsonNullable.undefined();

        private JsonNullable<? extends ReimbursementFee> reimbursementFee = JsonNullable.undefined();

        private JsonNullable<? extends FailedPaymentFee> failedPaymentFee = JsonNullable.undefined();

        private JsonNullable<? extends PaymentFee> paymentFee = JsonNullable.undefined();

        private JsonNullable<? extends ManagedFee> managedFee = JsonNullable.undefined();

        private JsonNullable<? extends ReturnedManagedFee> returnedManagedFee = JsonNullable.undefined();

        private JsonNullable<? extends PostPaymentSplitPayment> postPaymentSplitPayment = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder payment(Payment payment) {
            Utils.checkNotNull(payment, "payment");
            this.payment = JsonNullable.of(payment);
            return this;
        }

        public Builder payment(JsonNullable<? extends Payment> payment) {
            Utils.checkNotNull(payment, "payment");
            this.payment = payment;
            return this;
        }


        public Builder capture(Capture capture) {
            Utils.checkNotNull(capture, "capture");
            this.capture = JsonNullable.of(capture);
            return this;
        }

        public Builder capture(JsonNullable<? extends Capture> capture) {
            Utils.checkNotNull(capture, "capture");
            this.capture = capture;
            return this;
        }


        public Builder captureCommision(CaptureCommision captureCommision) {
            Utils.checkNotNull(captureCommision, "captureCommision");
            this.captureCommision = JsonNullable.of(captureCommision);
            return this;
        }

        public Builder captureCommision(JsonNullable<? extends CaptureCommision> captureCommision) {
            Utils.checkNotNull(captureCommision, "captureCommision");
            this.captureCommision = captureCommision;
            return this;
        }


        public Builder captureRollingReserveRelease(CaptureRollingReserveRelease captureRollingReserveRelease) {
            Utils.checkNotNull(captureRollingReserveRelease, "captureRollingReserveRelease");
            this.captureRollingReserveRelease = JsonNullable.of(captureRollingReserveRelease);
            return this;
        }

        public Builder captureRollingReserveRelease(JsonNullable<? extends CaptureRollingReserveRelease> captureRollingReserveRelease) {
            Utils.checkNotNull(captureRollingReserveRelease, "captureRollingReserveRelease");
            this.captureRollingReserveRelease = captureRollingReserveRelease;
            return this;
        }


        public Builder unauthorizedDirectDebit(UnauthorizedDirectDebit unauthorizedDirectDebit) {
            Utils.checkNotNull(unauthorizedDirectDebit, "unauthorizedDirectDebit");
            this.unauthorizedDirectDebit = JsonNullable.of(unauthorizedDirectDebit);
            return this;
        }

        public Builder unauthorizedDirectDebit(JsonNullable<? extends UnauthorizedDirectDebit> unauthorizedDirectDebit) {
            Utils.checkNotNull(unauthorizedDirectDebit, "unauthorizedDirectDebit");
            this.unauthorizedDirectDebit = unauthorizedDirectDebit;
            return this;
        }


        public Builder failedPayment(FailedPayment failedPayment) {
            Utils.checkNotNull(failedPayment, "failedPayment");
            this.failedPayment = JsonNullable.of(failedPayment);
            return this;
        }

        public Builder failedPayment(JsonNullable<? extends FailedPayment> failedPayment) {
            Utils.checkNotNull(failedPayment, "failedPayment");
            this.failedPayment = failedPayment;
            return this;
        }


        public Builder refund(Refund refund) {
            Utils.checkNotNull(refund, "refund");
            this.refund = JsonNullable.of(refund);
            return this;
        }

        public Builder refund(JsonNullable<? extends Refund> refund) {
            Utils.checkNotNull(refund, "refund");
            this.refund = refund;
            return this;
        }


        public Builder refundCompensation(RefundCompensation refundCompensation) {
            Utils.checkNotNull(refundCompensation, "refundCompensation");
            this.refundCompensation = JsonNullable.of(refundCompensation);
            return this;
        }

        public Builder refundCompensation(JsonNullable<? extends RefundCompensation> refundCompensation) {
            Utils.checkNotNull(refundCompensation, "refundCompensation");
            this.refundCompensation = refundCompensation;
            return this;
        }


        public Builder returnedRefund(ReturnedRefund returnedRefund) {
            Utils.checkNotNull(returnedRefund, "returnedRefund");
            this.returnedRefund = JsonNullable.of(returnedRefund);
            return this;
        }

        public Builder returnedRefund(JsonNullable<? extends ReturnedRefund> returnedRefund) {
            Utils.checkNotNull(returnedRefund, "returnedRefund");
            this.returnedRefund = returnedRefund;
            return this;
        }


        public Builder returnedRefundCompensation(ReturnedRefundCompensation returnedRefundCompensation) {
            Utils.checkNotNull(returnedRefundCompensation, "returnedRefundCompensation");
            this.returnedRefundCompensation = JsonNullable.of(returnedRefundCompensation);
            return this;
        }

        public Builder returnedRefundCompensation(JsonNullable<? extends ReturnedRefundCompensation> returnedRefundCompensation) {
            Utils.checkNotNull(returnedRefundCompensation, "returnedRefundCompensation");
            this.returnedRefundCompensation = returnedRefundCompensation;
            return this;
        }


        public Builder chargeback(Chargeback chargeback) {
            Utils.checkNotNull(chargeback, "chargeback");
            this.chargeback = JsonNullable.of(chargeback);
            return this;
        }

        public Builder chargeback(JsonNullable<? extends Chargeback> chargeback) {
            Utils.checkNotNull(chargeback, "chargeback");
            this.chargeback = chargeback;
            return this;
        }


        public Builder chargebackReversal(ChargebackReversal chargebackReversal) {
            Utils.checkNotNull(chargebackReversal, "chargebackReversal");
            this.chargebackReversal = JsonNullable.of(chargebackReversal);
            return this;
        }

        public Builder chargebackReversal(JsonNullable<? extends ChargebackReversal> chargebackReversal) {
            Utils.checkNotNull(chargebackReversal, "chargebackReversal");
            this.chargebackReversal = chargebackReversal;
            return this;
        }


        public Builder chargebackCompensation(ChargebackCompensation chargebackCompensation) {
            Utils.checkNotNull(chargebackCompensation, "chargebackCompensation");
            this.chargebackCompensation = JsonNullable.of(chargebackCompensation);
            return this;
        }

        public Builder chargebackCompensation(JsonNullable<? extends ChargebackCompensation> chargebackCompensation) {
            Utils.checkNotNull(chargebackCompensation, "chargebackCompensation");
            this.chargebackCompensation = chargebackCompensation;
            return this;
        }


        public Builder reversedChargebackCompensation(ReversedChargebackCompensation reversedChargebackCompensation) {
            Utils.checkNotNull(reversedChargebackCompensation, "reversedChargebackCompensation");
            this.reversedChargebackCompensation = JsonNullable.of(reversedChargebackCompensation);
            return this;
        }

        public Builder reversedChargebackCompensation(JsonNullable<? extends ReversedChargebackCompensation> reversedChargebackCompensation) {
            Utils.checkNotNull(reversedChargebackCompensation, "reversedChargebackCompensation");
            this.reversedChargebackCompensation = reversedChargebackCompensation;
            return this;
        }


        public Builder outgoingTransfer(OutgoingTransfer outgoingTransfer) {
            Utils.checkNotNull(outgoingTransfer, "outgoingTransfer");
            this.outgoingTransfer = JsonNullable.of(outgoingTransfer);
            return this;
        }

        public Builder outgoingTransfer(JsonNullable<? extends OutgoingTransfer> outgoingTransfer) {
            Utils.checkNotNull(outgoingTransfer, "outgoingTransfer");
            this.outgoingTransfer = outgoingTransfer;
            return this;
        }


        public Builder canceledOutgoingTransfer(CanceledOutgoingTransfer canceledOutgoingTransfer) {
            Utils.checkNotNull(canceledOutgoingTransfer, "canceledOutgoingTransfer");
            this.canceledOutgoingTransfer = JsonNullable.of(canceledOutgoingTransfer);
            return this;
        }

        public Builder canceledOutgoingTransfer(JsonNullable<? extends CanceledOutgoingTransfer> canceledOutgoingTransfer) {
            Utils.checkNotNull(canceledOutgoingTransfer, "canceledOutgoingTransfer");
            this.canceledOutgoingTransfer = canceledOutgoingTransfer;
            return this;
        }


        public Builder returnedTransfer(ReturnedTransfer returnedTransfer) {
            Utils.checkNotNull(returnedTransfer, "returnedTransfer");
            this.returnedTransfer = JsonNullable.of(returnedTransfer);
            return this;
        }

        public Builder returnedTransfer(JsonNullable<? extends ReturnedTransfer> returnedTransfer) {
            Utils.checkNotNull(returnedTransfer, "returnedTransfer");
            this.returnedTransfer = returnedTransfer;
            return this;
        }


        public Builder invoiceCompensation(InvoiceCompensation invoiceCompensation) {
            Utils.checkNotNull(invoiceCompensation, "invoiceCompensation");
            this.invoiceCompensation = JsonNullable.of(invoiceCompensation);
            return this;
        }

        public Builder invoiceCompensation(JsonNullable<? extends InvoiceCompensation> invoiceCompensation) {
            Utils.checkNotNull(invoiceCompensation, "invoiceCompensation");
            this.invoiceCompensation = invoiceCompensation;
            return this;
        }


        public Builder applicationFee(EntityBalanceTransactionApplicationFee applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = JsonNullable.of(applicationFee);
            return this;
        }

        public Builder applicationFee(JsonNullable<? extends EntityBalanceTransactionApplicationFee> applicationFee) {
            Utils.checkNotNull(applicationFee, "applicationFee");
            this.applicationFee = applicationFee;
            return this;
        }


        public Builder splitPayment(SplitPayment splitPayment) {
            Utils.checkNotNull(splitPayment, "splitPayment");
            this.splitPayment = JsonNullable.of(splitPayment);
            return this;
        }

        public Builder splitPayment(JsonNullable<? extends SplitPayment> splitPayment) {
            Utils.checkNotNull(splitPayment, "splitPayment");
            this.splitPayment = splitPayment;
            return this;
        }


        public Builder platformPaymentRefund(PlatformPaymentRefund platformPaymentRefund) {
            Utils.checkNotNull(platformPaymentRefund, "platformPaymentRefund");
            this.platformPaymentRefund = JsonNullable.of(platformPaymentRefund);
            return this;
        }

        public Builder platformPaymentRefund(JsonNullable<? extends PlatformPaymentRefund> platformPaymentRefund) {
            Utils.checkNotNull(platformPaymentRefund, "platformPaymentRefund");
            this.platformPaymentRefund = platformPaymentRefund;
            return this;
        }


        public Builder returnedPlatformPaymentRefund(ReturnedPlatformPaymentRefund returnedPlatformPaymentRefund) {
            Utils.checkNotNull(returnedPlatformPaymentRefund, "returnedPlatformPaymentRefund");
            this.returnedPlatformPaymentRefund = JsonNullable.of(returnedPlatformPaymentRefund);
            return this;
        }

        public Builder returnedPlatformPaymentRefund(JsonNullable<? extends ReturnedPlatformPaymentRefund> returnedPlatformPaymentRefund) {
            Utils.checkNotNull(returnedPlatformPaymentRefund, "returnedPlatformPaymentRefund");
            this.returnedPlatformPaymentRefund = returnedPlatformPaymentRefund;
            return this;
        }


        public Builder platformPaymentChargeback(PlatformPaymentChargeback platformPaymentChargeback) {
            Utils.checkNotNull(platformPaymentChargeback, "platformPaymentChargeback");
            this.platformPaymentChargeback = JsonNullable.of(platformPaymentChargeback);
            return this;
        }

        public Builder platformPaymentChargeback(JsonNullable<? extends PlatformPaymentChargeback> platformPaymentChargeback) {
            Utils.checkNotNull(platformPaymentChargeback, "platformPaymentChargeback");
            this.platformPaymentChargeback = platformPaymentChargeback;
            return this;
        }


        public Builder reversedPlatformPaymentChargeback(ReversedPlatformPaymentChargeback reversedPlatformPaymentChargeback) {
            Utils.checkNotNull(reversedPlatformPaymentChargeback, "reversedPlatformPaymentChargeback");
            this.reversedPlatformPaymentChargeback = JsonNullable.of(reversedPlatformPaymentChargeback);
            return this;
        }

        public Builder reversedPlatformPaymentChargeback(JsonNullable<? extends ReversedPlatformPaymentChargeback> reversedPlatformPaymentChargeback) {
            Utils.checkNotNull(reversedPlatformPaymentChargeback, "reversedPlatformPaymentChargeback");
            this.reversedPlatformPaymentChargeback = reversedPlatformPaymentChargeback;
            return this;
        }


        public Builder paymentCommission(PaymentCommission paymentCommission) {
            Utils.checkNotNull(paymentCommission, "paymentCommission");
            this.paymentCommission = JsonNullable.of(paymentCommission);
            return this;
        }

        public Builder paymentCommission(JsonNullable<? extends PaymentCommission> paymentCommission) {
            Utils.checkNotNull(paymentCommission, "paymentCommission");
            this.paymentCommission = paymentCommission;
            return this;
        }


        public Builder reimbursementFee(ReimbursementFee reimbursementFee) {
            Utils.checkNotNull(reimbursementFee, "reimbursementFee");
            this.reimbursementFee = JsonNullable.of(reimbursementFee);
            return this;
        }

        public Builder reimbursementFee(JsonNullable<? extends ReimbursementFee> reimbursementFee) {
            Utils.checkNotNull(reimbursementFee, "reimbursementFee");
            this.reimbursementFee = reimbursementFee;
            return this;
        }


        public Builder failedPaymentFee(FailedPaymentFee failedPaymentFee) {
            Utils.checkNotNull(failedPaymentFee, "failedPaymentFee");
            this.failedPaymentFee = JsonNullable.of(failedPaymentFee);
            return this;
        }

        public Builder failedPaymentFee(JsonNullable<? extends FailedPaymentFee> failedPaymentFee) {
            Utils.checkNotNull(failedPaymentFee, "failedPaymentFee");
            this.failedPaymentFee = failedPaymentFee;
            return this;
        }


        public Builder paymentFee(PaymentFee paymentFee) {
            Utils.checkNotNull(paymentFee, "paymentFee");
            this.paymentFee = JsonNullable.of(paymentFee);
            return this;
        }

        public Builder paymentFee(JsonNullable<? extends PaymentFee> paymentFee) {
            Utils.checkNotNull(paymentFee, "paymentFee");
            this.paymentFee = paymentFee;
            return this;
        }


        public Builder managedFee(ManagedFee managedFee) {
            Utils.checkNotNull(managedFee, "managedFee");
            this.managedFee = JsonNullable.of(managedFee);
            return this;
        }

        public Builder managedFee(JsonNullable<? extends ManagedFee> managedFee) {
            Utils.checkNotNull(managedFee, "managedFee");
            this.managedFee = managedFee;
            return this;
        }


        public Builder returnedManagedFee(ReturnedManagedFee returnedManagedFee) {
            Utils.checkNotNull(returnedManagedFee, "returnedManagedFee");
            this.returnedManagedFee = JsonNullable.of(returnedManagedFee);
            return this;
        }

        public Builder returnedManagedFee(JsonNullable<? extends ReturnedManagedFee> returnedManagedFee) {
            Utils.checkNotNull(returnedManagedFee, "returnedManagedFee");
            this.returnedManagedFee = returnedManagedFee;
            return this;
        }


        public Builder postPaymentSplitPayment(PostPaymentSplitPayment postPaymentSplitPayment) {
            Utils.checkNotNull(postPaymentSplitPayment, "postPaymentSplitPayment");
            this.postPaymentSplitPayment = JsonNullable.of(postPaymentSplitPayment);
            return this;
        }

        public Builder postPaymentSplitPayment(JsonNullable<? extends PostPaymentSplitPayment> postPaymentSplitPayment) {
            Utils.checkNotNull(postPaymentSplitPayment, "postPaymentSplitPayment");
            this.postPaymentSplitPayment = postPaymentSplitPayment;
            return this;
        }

        public Context build() {

            return new Context(
                payment, capture, captureCommision,
                captureRollingReserveRelease, unauthorizedDirectDebit, failedPayment,
                refund, refundCompensation, returnedRefund,
                returnedRefundCompensation, chargeback, chargebackReversal,
                chargebackCompensation, reversedChargebackCompensation, outgoingTransfer,
                canceledOutgoingTransfer, returnedTransfer, invoiceCompensation,
                applicationFee, splitPayment, platformPaymentRefund,
                returnedPlatformPaymentRefund, platformPaymentChargeback, reversedPlatformPaymentChargeback,
                paymentCommission, reimbursementFee, failedPaymentFee,
                paymentFee, managedFee, returnedManagedFee,
                postPaymentSplitPayment);
        }

    }
}
