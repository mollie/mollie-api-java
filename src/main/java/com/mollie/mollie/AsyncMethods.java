/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.operations.GetMethodRequest;
import com.mollie.mollie.models.operations.ListAllMethodsRequest;
import com.mollie.mollie.models.operations.ListMethodsRequest;
import com.mollie.mollie.models.operations.async.GetMethodRequestBuilder;
import com.mollie.mollie.models.operations.async.GetMethodResponse;
import com.mollie.mollie.models.operations.async.ListAllMethodsRequestBuilder;
import com.mollie.mollie.models.operations.async.ListAllMethodsResponse;
import com.mollie.mollie.models.operations.async.ListMethodsRequestBuilder;
import com.mollie.mollie.models.operations.async.ListMethodsResponse;
import com.mollie.mollie.operations.GetMethod;
import com.mollie.mollie.operations.ListAllMethods;
import com.mollie.mollie.operations.ListMethods;
import com.mollie.mollie.utils.Options;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncMethods {
    private final SDKConfiguration sdkConfiguration;
    private final Methods syncSDK;

    AsyncMethods(Methods syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Methods sync() {
        return syncSDK;
    }


    /**
     * List payment methods
     * 
     * <p>Retrieve all enabled payment methods. The results of this endpoint are
     * **not** paginated — unlike most other list endpoints in our API.
     * 
     * <p>For test mode, all pending and enabled payment methods are returned. If no
     * payment methods are requested yet, the most popular payment methods are returned in the test mode. For live
     * mode, only fully enabled payment methods are returned.
     * 
     * <p>Payment methods can be requested and enabled via the Mollie Dashboard, or
     * via the [Enable payment method endpoint](enable-method) of the Profiles API.
     * 
     * <p>The list can optionally be filtered using a number of parameters described
     * below.
     * 
     * <p>By default, only payment methods for the Euro currency are returned. If you
     * wish to retrieve payment methods which exclusively support other currencies (e.g. Twint), you need to use the
     * `amount` parameters.
     * 
     * @return The async call builder
     */
    public ListMethodsRequestBuilder list() {
        return new ListMethodsRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment methods
     * 
     * <p>Retrieve all enabled payment methods. The results of this endpoint are
     * **not** paginated — unlike most other list endpoints in our API.
     * 
     * <p>For test mode, all pending and enabled payment methods are returned. If no
     * payment methods are requested yet, the most popular payment methods are returned in the test mode. For live
     * mode, only fully enabled payment methods are returned.
     * 
     * <p>Payment methods can be requested and enabled via the Mollie Dashboard, or
     * via the [Enable payment method endpoint](enable-method) of the Profiles API.
     * 
     * <p>The list can optionally be filtered using a number of parameters described
     * below.
     * 
     * <p>By default, only payment methods for the Euro currency are returned. If you
     * wish to retrieve payment methods which exclusively support other currencies (e.g. Twint), you need to use the
     * `amount` parameters.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListMethodsResponse&gt; - The async response
     */
    public CompletableFuture<ListMethodsResponse> list(ListMethodsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List payment methods
     * 
     * <p>Retrieve all enabled payment methods. The results of this endpoint are
     * **not** paginated — unlike most other list endpoints in our API.
     * 
     * <p>For test mode, all pending and enabled payment methods are returned. If no
     * payment methods are requested yet, the most popular payment methods are returned in the test mode. For live
     * mode, only fully enabled payment methods are returned.
     * 
     * <p>Payment methods can be requested and enabled via the Mollie Dashboard, or
     * via the [Enable payment method endpoint](enable-method) of the Profiles API.
     * 
     * <p>The list can optionally be filtered using a number of parameters described
     * below.
     * 
     * <p>By default, only payment methods for the Euro currency are returned. If you
     * wish to retrieve payment methods which exclusively support other currencies (e.g. Twint), you need to use the
     * `amount` parameters.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListMethodsResponse&gt; - The async response
     */
    public CompletableFuture<ListMethodsResponse> list(ListMethodsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListMethodsRequest, ListMethodsResponse> operation
              = new ListMethods.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all payment methods
     * 
     * <p>Retrieve all payment methods that Mollie offers, regardless of the eligibility of the organization for the specific
     * method. The results of this endpoint are **not** paginated — unlike most other list endpoints in our API.
     * 
     * <p>The list can optionally be filtered using a number of parameters described below.
     * 
     * @return The async call builder
     */
    public ListAllMethodsRequestBuilder all() {
        return new ListAllMethodsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all payment methods
     * 
     * <p>Retrieve all payment methods that Mollie offers, regardless of the eligibility of the organization for the specific
     * method. The results of this endpoint are **not** paginated — unlike most other list endpoints in our API.
     * 
     * <p>The list can optionally be filtered using a number of parameters described below.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAllMethodsResponse&gt; - The async response
     */
    public CompletableFuture<ListAllMethodsResponse> all(ListAllMethodsRequest request) {
        return all(request, Optional.empty());
    }

    /**
     * List all payment methods
     * 
     * <p>Retrieve all payment methods that Mollie offers, regardless of the eligibility of the organization for the specific
     * method. The results of this endpoint are **not** paginated — unlike most other list endpoints in our API.
     * 
     * <p>The list can optionally be filtered using a number of parameters described below.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListAllMethodsResponse&gt; - The async response
     */
    public CompletableFuture<ListAllMethodsResponse> all(ListAllMethodsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListAllMethodsRequest, ListAllMethodsResponse> operation
              = new ListAllMethods.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get payment method
     * 
     * <p>Retrieve a single payment method by its ID.
     * 
     * <p>If a method is not available on this profile, a `404 Not Found` response is
     * returned. If the method is available but not enabled yet, a status `403 Forbidden` is returned. You can enable
     * payments methods via the [Enable payment method endpoint](enable-method) of the Profiles API, or via
     * the Mollie Dashboard.
     * 
     * <p>If you do not know the method's ID, you can use the [methods list
     * endpoint](list-methods) to retrieve all payment methods that are available.
     * 
     * <p>Additionally, it is possible to check if wallet methods such as Apple Pay
     * are enabled by passing the wallet ID (`applepay`) as the method ID.
     * 
     * @return The async call builder
     */
    public GetMethodRequestBuilder get() {
        return new GetMethodRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment method
     * 
     * <p>Retrieve a single payment method by its ID.
     * 
     * <p>If a method is not available on this profile, a `404 Not Found` response is
     * returned. If the method is available but not enabled yet, a status `403 Forbidden` is returned. You can enable
     * payments methods via the [Enable payment method endpoint](enable-method) of the Profiles API, or via
     * the Mollie Dashboard.
     * 
     * <p>If you do not know the method's ID, you can use the [methods list
     * endpoint](list-methods) to retrieve all payment methods that are available.
     * 
     * <p>Additionally, it is possible to check if wallet methods such as Apple Pay
     * are enabled by passing the wallet ID (`applepay`) as the method ID.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetMethodResponse&gt; - The async response
     */
    public CompletableFuture<GetMethodResponse> get(GetMethodRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get payment method
     * 
     * <p>Retrieve a single payment method by its ID.
     * 
     * <p>If a method is not available on this profile, a `404 Not Found` response is
     * returned. If the method is available but not enabled yet, a status `403 Forbidden` is returned. You can enable
     * payments methods via the [Enable payment method endpoint](enable-method) of the Profiles API, or via
     * the Mollie Dashboard.
     * 
     * <p>If you do not know the method's ID, you can use the [methods list
     * endpoint](list-methods) to retrieve all payment methods that are available.
     * 
     * <p>Additionally, it is possible to check if wallet methods such as Apple Pay
     * are enabled by passing the wallet ID (`applepay`) as the method ID.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;GetMethodResponse&gt; - The async response
     */
    public CompletableFuture<GetMethodResponse> get(GetMethodRequest request, Optional<Options> options) {
        AsyncRequestOperation<GetMethodRequest, GetMethodResponse> operation
              = new GetMethod.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
