/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;
import static com.mollie.mollie.operations.Operations.RequestlessOperation;

import com.mollie.mollie.models.operations.GetNextSettlementRequestBuilder;
import com.mollie.mollie.models.operations.GetNextSettlementResponse;
import com.mollie.mollie.models.operations.GetOpenSettlementRequestBuilder;
import com.mollie.mollie.models.operations.GetOpenSettlementResponse;
import com.mollie.mollie.models.operations.GetSettlementCapturesRequest;
import com.mollie.mollie.models.operations.GetSettlementCapturesRequestBuilder;
import com.mollie.mollie.models.operations.GetSettlementCapturesResponse;
import com.mollie.mollie.models.operations.GetSettlementChargebacksRequest;
import com.mollie.mollie.models.operations.GetSettlementChargebacksRequestBuilder;
import com.mollie.mollie.models.operations.GetSettlementChargebacksResponse;
import com.mollie.mollie.models.operations.GetSettlementPaymentsRequest;
import com.mollie.mollie.models.operations.GetSettlementPaymentsRequestBuilder;
import com.mollie.mollie.models.operations.GetSettlementPaymentsResponse;
import com.mollie.mollie.models.operations.GetSettlementRefundsRequest;
import com.mollie.mollie.models.operations.GetSettlementRefundsRequestBuilder;
import com.mollie.mollie.models.operations.GetSettlementRefundsResponse;
import com.mollie.mollie.models.operations.GetSettlementRequest;
import com.mollie.mollie.models.operations.GetSettlementRequestBuilder;
import com.mollie.mollie.models.operations.GetSettlementResponse;
import com.mollie.mollie.models.operations.ListSettlementsRequest;
import com.mollie.mollie.models.operations.ListSettlementsRequestBuilder;
import com.mollie.mollie.models.operations.ListSettlementsResponse;
import com.mollie.mollie.operations.GetNextSettlementOperation;
import com.mollie.mollie.operations.GetOpenSettlementOperation;
import com.mollie.mollie.operations.GetSettlementCapturesOperation;
import com.mollie.mollie.operations.GetSettlementChargebacksOperation;
import com.mollie.mollie.operations.GetSettlementOperation;
import com.mollie.mollie.operations.GetSettlementPaymentsOperation;
import com.mollie.mollie.operations.GetSettlementRefundsOperation;
import com.mollie.mollie.operations.ListSettlementsOperation;
import com.mollie.mollie.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Settlements {
    private final SDKConfiguration sdkConfiguration;

    Settlements(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List settlements
     * 
     * <p>Retrieve a list of all your settlements.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public ListSettlementsRequestBuilder list() {
        return new ListSettlementsRequestBuilder(sdkConfiguration);
    }

    /**
     * List settlements
     * 
     * <p>Retrieve a list of all your settlements.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListSettlementsResponse list(ListSettlementsRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List settlements
     * 
     * <p>Retrieve a list of all your settlements.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListSettlementsResponse list(
            ListSettlementsRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<ListSettlementsRequest, ListSettlementsResponse> operation
              = new ListSettlementsOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get settlement
     * 
     * <p>Retrieve a single settlement by its ID.
     * 
     * <p>To lookup settlements by their bank reference, replace the ID in the URL by a reference. For example: `1234567.2404.03`.
     * 
     * <p>A settlement represents a transfer of your balance funds to your external bank account.
     * 
     * <p>Settlements will typically include a report that details what balance transactions have taken place between this settlement and the previous one.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the [balance transactions](list-balance-transactions) endpoint.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public GetSettlementRequestBuilder get() {
        return new GetSettlementRequestBuilder(sdkConfiguration);
    }

    /**
     * Get settlement
     * 
     * <p>Retrieve a single settlement by its ID.
     * 
     * <p>To lookup settlements by their bank reference, replace the ID in the URL by a reference. For example: `1234567.2404.03`.
     * 
     * <p>A settlement represents a transfer of your balance funds to your external bank account.
     * 
     * <p>Settlements will typically include a report that details what balance transactions have taken place between this settlement and the previous one.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the [balance transactions](list-balance-transactions) endpoint.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read**](/reference/authentication)
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSettlementResponse get(String id) throws Exception {
        return get(id, Optional.empty());
    }

    /**
     * Get settlement
     * 
     * <p>Retrieve a single settlement by its ID.
     * 
     * <p>To lookup settlements by their bank reference, replace the ID in the URL by a reference. For example: `1234567.2404.03`.
     * 
     * <p>A settlement represents a transfer of your balance funds to your external bank account.
     * 
     * <p>Settlements will typically include a report that details what balance transactions have taken place between this settlement and the previous one.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the [balance transactions](list-balance-transactions) endpoint.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read**](/reference/authentication)
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSettlementResponse get(
            String id,
            Optional<Options> options) throws Exception {
        GetSettlementRequest request =
            GetSettlementRequest
                .builder()
                .id(id)
                .build();
        RequestOperation<GetSettlementRequest, GetSettlementResponse> operation
              = new GetSettlementOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get open settlement
     * 
     * <p>Retrieve the details of the open balance of the organization. This will return a settlement object representing your organization's balance.
     * 
     * <p>For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement) documentation.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the [balance transactions](list-balance-transactions) endpoint.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public GetOpenSettlementRequestBuilder getOpen() {
        return new GetOpenSettlementRequestBuilder(sdkConfiguration);
    }

    /**
     * Get open settlement
     * 
     * <p>Retrieve the details of the open balance of the organization. This will return a settlement object representing your organization's balance.
     * 
     * <p>For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement) documentation.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the [balance transactions](list-balance-transactions) endpoint.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read**](/reference/authentication)
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOpenSettlementResponse getOpenDirect() throws Exception {
        return getOpen(Optional.empty());
    }

    /**
     * Get open settlement
     * 
     * <p>Retrieve the details of the open balance of the organization. This will return a settlement object representing your organization's balance.
     * 
     * <p>For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement) documentation.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the [balance transactions](list-balance-transactions) endpoint.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read**](/reference/authentication)
     * 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOpenSettlementResponse getOpen(
            Optional<Options> options) throws Exception {
        RequestlessOperation<GetOpenSettlementResponse> operation
            = new GetOpenSettlementOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest());
    }


    /**
     * Get next settlement
     * 
     * <p>Retrieve the details of the current settlement, that has not yet been paid out.
     * 
     * <p>For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement) documentation.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the [balance transactions](list-balance-transactions) endpoint.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public GetNextSettlementRequestBuilder getNext() {
        return new GetNextSettlementRequestBuilder(sdkConfiguration);
    }

    /**
     * Get next settlement
     * 
     * <p>Retrieve the details of the current settlement, that has not yet been paid out.
     * 
     * <p>For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement) documentation.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the [balance transactions](list-balance-transactions) endpoint.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read**](/reference/authentication)
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetNextSettlementResponse getNextDirect() throws Exception {
        return getNext(Optional.empty());
    }

    /**
     * Get next settlement
     * 
     * <p>Retrieve the details of the current settlement, that has not yet been paid out.
     * 
     * <p>For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement) documentation.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the [balance transactions](list-balance-transactions) endpoint.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read**](/reference/authentication)
     * 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetNextSettlementResponse getNext(
            Optional<Options> options) throws Exception {
        RequestlessOperation<GetNextSettlementResponse> operation
            = new GetNextSettlementOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest());
    }


    /**
     * Get settlement payments
     * 
     * <p>Retrieve all payments included in the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List payments endpoint](list-payments).
     * 
     * <p>For capture-based payment methods such as Klarna, the payments are not listed here. Refer to the [List captures endpoint](list-captures) endpoint instead.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read** **payments.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public GetSettlementPaymentsRequestBuilder listPayments() {
        return new GetSettlementPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get settlement payments
     * 
     * <p>Retrieve all payments included in the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List payments endpoint](list-payments).
     * 
     * <p>For capture-based payment methods such as Klarna, the payments are not listed here. Refer to the [List captures endpoint](list-captures) endpoint instead.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read** **payments.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSettlementPaymentsResponse listPayments(GetSettlementPaymentsRequest request) throws Exception {
        return listPayments(request, Optional.empty());
    }

    /**
     * Get settlement payments
     * 
     * <p>Retrieve all payments included in the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List payments endpoint](list-payments).
     * 
     * <p>For capture-based payment methods such as Klarna, the payments are not listed here. Refer to the [List captures endpoint](list-captures) endpoint instead.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read** **payments.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSettlementPaymentsResponse listPayments(
            GetSettlementPaymentsRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<GetSettlementPaymentsRequest, GetSettlementPaymentsResponse> operation
              = new GetSettlementPaymentsOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get settlement captures
     * 
     * <p>Retrieve all captures included in the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List captures endpoint](list-captures).
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read** **payments.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public GetSettlementCapturesRequestBuilder listCaptures() {
        return new GetSettlementCapturesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get settlement captures
     * 
     * <p>Retrieve all captures included in the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List captures endpoint](list-captures).
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read** **payments.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSettlementCapturesResponse listCaptures(GetSettlementCapturesRequest request) throws Exception {
        return listCaptures(request, Optional.empty());
    }

    /**
     * Get settlement captures
     * 
     * <p>Retrieve all captures included in the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List captures endpoint](list-captures).
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read** **payments.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSettlementCapturesResponse listCaptures(
            GetSettlementCapturesRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<GetSettlementCapturesRequest, GetSettlementCapturesResponse> operation
              = new GetSettlementCapturesOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get settlement refunds
     * 
     * <p>Retrieve all refunds 'deducted' from the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List refunds endpoint](list-refunds).
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read** **refunds.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public GetSettlementRefundsRequestBuilder listRefunds() {
        return new GetSettlementRefundsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get settlement refunds
     * 
     * <p>Retrieve all refunds 'deducted' from the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List refunds endpoint](list-refunds).
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read** **refunds.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSettlementRefundsResponse listRefunds(GetSettlementRefundsRequest request) throws Exception {
        return listRefunds(request, Optional.empty());
    }

    /**
     * Get settlement refunds
     * 
     * <p>Retrieve all refunds 'deducted' from the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List refunds endpoint](list-refunds).
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read** **refunds.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSettlementRefundsResponse listRefunds(
            GetSettlementRefundsRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<GetSettlementRefundsRequest, GetSettlementRefundsResponse> operation
              = new GetSettlementRefundsOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get settlement chargebacks
     * 
     * <p>Retrieve all chargebacks 'deducted' from the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List chargebacks endpoint](list-chargebacks).
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read** **payments.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public GetSettlementChargebacksRequestBuilder listChargebacks() {
        return new GetSettlementChargebacksRequestBuilder(sdkConfiguration);
    }

    /**
     * Get settlement chargebacks
     * 
     * <p>Retrieve all chargebacks 'deducted' from the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List chargebacks endpoint](list-chargebacks).
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read** **payments.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSettlementChargebacksResponse listChargebacks(GetSettlementChargebacksRequest request) throws Exception {
        return listChargebacks(request, Optional.empty());
    }

    /**
     * Get settlement chargebacks
     * 
     * <p>Retrieve all chargebacks 'deducted' from the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List chargebacks endpoint](list-chargebacks).
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [Access token with **settlements.read** **payments.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSettlementChargebacksResponse listChargebacks(
            GetSettlementChargebacksRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<GetSettlementChargebacksRequest, GetSettlementChargebacksResponse> operation
              = new GetSettlementChargebacksOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
