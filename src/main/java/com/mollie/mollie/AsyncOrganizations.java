/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.operations.GetCurrentOrganizationRequest;
import com.mollie.mollie.models.operations.GetOrganizationRequest;
import com.mollie.mollie.models.operations.GetPartnerStatusRequest;
import com.mollie.mollie.models.operations.async.GetCurrentOrganizationRequestBuilder;
import com.mollie.mollie.models.operations.async.GetCurrentOrganizationResponse;
import com.mollie.mollie.models.operations.async.GetOrganizationRequestBuilder;
import com.mollie.mollie.models.operations.async.GetOrganizationResponse;
import com.mollie.mollie.models.operations.async.GetPartnerStatusRequestBuilder;
import com.mollie.mollie.models.operations.async.GetPartnerStatusResponse;
import com.mollie.mollie.operations.GetCurrentOrganization;
import com.mollie.mollie.operations.GetOrganization;
import com.mollie.mollie.operations.GetPartnerStatus;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncOrganizations {
    private final SDKConfiguration sdkConfiguration;
    private final Organizations syncSDK;

    AsyncOrganizations(Organizations syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Organizations sync() {
        return syncSDK;
    }


    /**
     * Get organization
     * 
     * <p>Retrieve a single organization by its ID.
     * 
     * <p>You can normally only retrieve the currently authenticated organization with this endpoint. This is primarily useful
     * for OAuth apps. See also [Get current organization](get-current-organization).
     * 
     * <p>If you have a *partner account*', you can retrieve organization details of connected organizations.
     * 
     * @return The async call builder
     */
    public GetOrganizationRequestBuilder get() {
        return new GetOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Get organization
     * 
     * <p>Retrieve a single organization by its ID.
     * 
     * <p>You can normally only retrieve the currently authenticated organization with this endpoint. This is primarily useful
     * for OAuth apps. See also [Get current organization](get-current-organization).
     * 
     * <p>If you have a *partner account*', you can retrieve organization details of connected organizations.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return CompletableFuture&lt;GetOrganizationResponse&gt; - The async response
     */
    public CompletableFuture<GetOrganizationResponse> get(String id) {
        return get(
                id, JsonNullable.undefined(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Get organization
     * 
     * <p>Retrieve a single organization by its ID.
     * 
     * <p>You can normally only retrieve the currently authenticated organization with this endpoint. This is primarily useful
     * for OAuth apps. See also [Get current organization](get-current-organization).
     * 
     * <p>If you have a *partner account*', you can retrieve organization details of connected organizations.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return CompletableFuture&lt;GetOrganizationResponse&gt; - The async response
     */
    public CompletableFuture<GetOrganizationResponse> get(
            String id, JsonNullable<Boolean> testmode,
            Optional<String> idempotencyKey, Optional<Options> options) {
        GetOrganizationRequest request =
            GetOrganizationRequest
                .builder()
                .id(id)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<GetOrganizationRequest, GetOrganizationResponse> operation
              = new GetOrganization.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get current organization
     * 
     * <p>Retrieve the currently authenticated organization. A convenient alias of the [Get organization](get-organization)
     * endpoint.
     * 
     * <p>For a complete reference of the organization object, refer to the [Get organization](get-organization) endpoint
     * documentation.
     * 
     * @return The async call builder
     */
    public GetCurrentOrganizationRequestBuilder getCurrent() {
        return new GetCurrentOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Get current organization
     * 
     * <p>Retrieve the currently authenticated organization. A convenient alias of the [Get organization](get-organization)
     * endpoint.
     * 
     * <p>For a complete reference of the organization object, refer to the [Get organization](get-organization) endpoint
     * documentation.
     * 
     * @return CompletableFuture&lt;GetCurrentOrganizationResponse&gt; - The async response
     */
    public CompletableFuture<GetCurrentOrganizationResponse> getCurrentDirect() {
        return getCurrent(Optional.empty(), Optional.empty());
    }

    /**
     * Get current organization
     * 
     * <p>Retrieve the currently authenticated organization. A convenient alias of the [Get organization](get-organization)
     * endpoint.
     * 
     * <p>For a complete reference of the organization object, refer to the [Get organization](get-organization) endpoint
     * documentation.
     * 
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return CompletableFuture&lt;GetCurrentOrganizationResponse&gt; - The async response
     */
    public CompletableFuture<GetCurrentOrganizationResponse> getCurrent(Optional<String> idempotencyKey, Optional<Options> options) {
        GetCurrentOrganizationRequest request =
            GetCurrentOrganizationRequest
                .builder()
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<GetCurrentOrganizationRequest, GetCurrentOrganizationResponse> operation
              = new GetCurrentOrganization.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get partner status
     * 
     * <p>Retrieve partnership details about the currently authenticated organization. Only relevant for so-called *partner
     * accounts*.
     * 
     * @return The async call builder
     */
    public GetPartnerStatusRequestBuilder getPartner() {
        return new GetPartnerStatusRequestBuilder(sdkConfiguration);
    }

    /**
     * Get partner status
     * 
     * <p>Retrieve partnership details about the currently authenticated organization. Only relevant for so-called *partner
     * accounts*.
     * 
     * @return CompletableFuture&lt;GetPartnerStatusResponse&gt; - The async response
     */
    public CompletableFuture<GetPartnerStatusResponse> getPartnerDirect() {
        return getPartner(Optional.empty(), Optional.empty());
    }

    /**
     * Get partner status
     * 
     * <p>Retrieve partnership details about the currently authenticated organization. Only relevant for so-called *partner
     * accounts*.
     * 
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return CompletableFuture&lt;GetPartnerStatusResponse&gt; - The async response
     */
    public CompletableFuture<GetPartnerStatusResponse> getPartner(Optional<String> idempotencyKey, Optional<Options> options) {
        GetPartnerStatusRequest request =
            GetPartnerStatusRequest
                .builder()
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<GetPartnerStatusRequest, GetPartnerStatusResponse> operation
              = new GetPartnerStatus.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
