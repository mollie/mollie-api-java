/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.CreateWebhookRequestBody;
import com.mollie.mollie.models.operations.CreateWebhookRequestBuilder;
import com.mollie.mollie.models.operations.CreateWebhookResponse;
import com.mollie.mollie.models.operations.DeleteWebhookRequest;
import com.mollie.mollie.models.operations.DeleteWebhookRequestBuilder;
import com.mollie.mollie.models.operations.DeleteWebhookResponse;
import com.mollie.mollie.models.operations.GetWebhookRequest;
import com.mollie.mollie.models.operations.GetWebhookRequestBuilder;
import com.mollie.mollie.models.operations.GetWebhookResponse;
import com.mollie.mollie.models.operations.ListWebhooksRequest;
import com.mollie.mollie.models.operations.ListWebhooksRequestBuilder;
import com.mollie.mollie.models.operations.ListWebhooksResponse;
import com.mollie.mollie.models.operations.TestWebhookRequest;
import com.mollie.mollie.models.operations.TestWebhookRequestBody;
import com.mollie.mollie.models.operations.TestWebhookRequestBuilder;
import com.mollie.mollie.models.operations.TestWebhookResponse;
import com.mollie.mollie.models.operations.UpdateWebhookRequest;
import com.mollie.mollie.models.operations.UpdateWebhookRequestBody;
import com.mollie.mollie.models.operations.UpdateWebhookRequestBuilder;
import com.mollie.mollie.models.operations.UpdateWebhookResponse;
import com.mollie.mollie.operations.CreateWebhook;
import com.mollie.mollie.operations.DeleteWebhook;
import com.mollie.mollie.operations.GetWebhook;
import com.mollie.mollie.operations.ListWebhooks;
import com.mollie.mollie.operations.TestWebhook;
import com.mollie.mollie.operations.UpdateWebhook;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Webhooks {
    private final SDKConfiguration sdkConfiguration;

    Webhooks(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create a webhook
     * 
     * <p>A webhook must have a name, an url and a list of event types. You can also create webhooks in the webhooks settings section of the Dashboard.
     * 
     * @return The call builder
     */
    public CreateWebhookRequestBuilder create() {
        return new CreateWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a webhook
     * 
     * <p>A webhook must have a name, an url and a list of event types. You can also create webhooks in the webhooks settings section of the Dashboard.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateWebhookResponse createDirect() throws Exception {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create a webhook
     * 
     * <p>A webhook must have a name, an url and a list of event types. You can also create webhooks in the webhooks settings section of the Dashboard.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateWebhookResponse create(Optional<? extends CreateWebhookRequestBody> request, Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CreateWebhookRequestBody>, CreateWebhookResponse> operation
              = new CreateWebhook.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all webhooks
     * 
     * <p>Returns a paginated list of your webhooks. If no webhook endpoints are available, the resulting array will be empty. This request should never throw an error.
     * 
     * @return The call builder
     */
    public ListWebhooksRequestBuilder list() {
        return new ListWebhooksRequestBuilder(sdkConfiguration);
    }

    /**
     * List all webhooks
     * 
     * <p>Returns a paginated list of your webhooks. If no webhook endpoints are available, the resulting array will be empty. This request should never throw an error.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListWebhooksResponse list(ListWebhooksRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List all webhooks
     * 
     * <p>Returns a paginated list of your webhooks. If no webhook endpoints are available, the resulting array will be empty. This request should never throw an error.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListWebhooksResponse list(ListWebhooksRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListWebhooksRequest, ListWebhooksResponse> operation
              = new ListWebhooks.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a webhook
     * 
     * <p>Updates the webhook. You may edit the name, url and the list of subscribed event types.
     * 
     * @return The call builder
     */
    public UpdateWebhookRequestBuilder update() {
        return new UpdateWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a webhook
     * 
     * <p>Updates the webhook. You may edit the name, url and the list of subscribed event types.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateWebhookResponse update(String id) throws Exception {
        return update(id, Optional.empty(), Optional.empty());
    }

    /**
     * Update a webhook
     * 
     * <p>Updates the webhook. You may edit the name, url and the list of subscribed event types.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateWebhookResponse update(
            String id, Optional<? extends UpdateWebhookRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        UpdateWebhookRequest request =
            UpdateWebhookRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateWebhookRequest, UpdateWebhookResponse> operation
              = new UpdateWebhook.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a webhook
     * 
     * <p>Retrieve a single webhook object by its ID.
     * 
     * @return The call builder
     */
    public GetWebhookRequestBuilder get() {
        return new GetWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a webhook
     * 
     * <p>Retrieve a single webhook object by its ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWebhookResponse get(String id) throws Exception {
        return get(id, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get a webhook
     * 
     * <p>Retrieve a single webhook object by its ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWebhookResponse get(
            String id, JsonNullable<Boolean> testmode,
            Optional<Options> options) throws Exception {
        GetWebhookRequest request =
            GetWebhookRequest
                .builder()
                .id(id)
                .testmode(testmode)
                .build();
        RequestOperation<GetWebhookRequest, GetWebhookResponse> operation
              = new GetWebhook.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a webhook
     * 
     * <p>Delete a single webhook object by its webhook ID.
     * 
     * @return The call builder
     */
    public DeleteWebhookRequestBuilder delete() {
        return new DeleteWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a webhook
     * 
     * <p>Delete a single webhook object by its webhook ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteWebhookResponse delete(String id) throws Exception {
        return delete(id, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Delete a webhook
     * 
     * <p>Delete a single webhook object by its webhook ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteWebhookResponse delete(
            String id, JsonNullable<Boolean> testmode,
            Optional<Options> options) throws Exception {
        DeleteWebhookRequest request =
            DeleteWebhookRequest
                .builder()
                .id(id)
                .testmode(testmode)
                .build();
        RequestOperation<DeleteWebhookRequest, DeleteWebhookResponse> operation
              = new DeleteWebhook.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Test a webhook
     * 
     * <p>Sends a test event to the webhook to verify the endpoint is working as expected.
     * 
     * @return The call builder
     */
    public TestWebhookRequestBuilder test() {
        return new TestWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Test a webhook
     * 
     * <p>Sends a test event to the webhook to verify the endpoint is working as expected.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public TestWebhookResponse test(String id) throws Exception {
        return test(id, Optional.empty(), Optional.empty());
    }

    /**
     * Test a webhook
     * 
     * <p>Sends a test event to the webhook to verify the endpoint is working as expected.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public TestWebhookResponse test(
            String id, Optional<? extends TestWebhookRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        TestWebhookRequest request =
            TestWebhookRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        RequestOperation<TestWebhookRequest, TestWebhookResponse> operation
              = new TestWebhook.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
