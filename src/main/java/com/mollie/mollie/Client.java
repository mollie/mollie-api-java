/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import com.mollie.mollie.utils.HTTPClient;
import com.mollie.mollie.utils.Hook.SdkInitData;
import com.mollie.mollie.utils.RetryConfig;
import com.mollie.mollie.utils.Utils;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;

public class Client {


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        "https://api.mollie.com/v2",
    };

    private final Payments payments;

    private final Methods methods;

    private final Refunds refunds;

    private final Chargebacks chargebacks;

    private final Captures captures;

    private final Wallets wallets;

    private final PaymentLinks paymentLinks;

    private final Terminals terminals;

    private final DelayedRouting delayedRouting;

    private final Customers customers;

    private final Mandates mandates;

    private final Subscriptions subscriptions;

    private final Permissions permissions;

    private final Organizations organizations;

    private final Profiles profiles;

    private final Onboarding onboarding;

    private final Capabilities capabilities;

    private final Clients clients;

    private final ClientLinks clientLinks;

    private final Webhooks webhooks;

    private final WebhookEvents webhookEvents;

    private final Balances balances;

    private final Settlements settlements;

    private final Invoices invoices;

    public Payments payments() {
        return payments;
    }

    public Methods methods() {
        return methods;
    }

    public Refunds refunds() {
        return refunds;
    }

    public Chargebacks chargebacks() {
        return chargebacks;
    }

    public Captures captures() {
        return captures;
    }

    public Wallets wallets() {
        return wallets;
    }

    public PaymentLinks paymentLinks() {
        return paymentLinks;
    }

    public Terminals terminals() {
        return terminals;
    }

    public DelayedRouting delayedRouting() {
        return delayedRouting;
    }

    public Customers customers() {
        return customers;
    }

    public Mandates mandates() {
        return mandates;
    }

    public Subscriptions subscriptions() {
        return subscriptions;
    }

    public Permissions permissions() {
        return permissions;
    }

    public Organizations organizations() {
        return organizations;
    }

    public Profiles profiles() {
        return profiles;
    }

    public Onboarding onboarding() {
        return onboarding;
    }

    public Capabilities capabilities() {
        return capabilities;
    }

    public Clients clients() {
        return clients;
    }

    public ClientLinks clientLinks() {
        return clientLinks;
    }

    public Webhooks webhooks() {
        return webhooks;
    }

    public WebhookEvents webhookEvents() {
        return webhookEvents;
    }

    public Balances balances() {
        return balances;
    }

    public Settlements settlements() {
        return settlements;
    }

    public Invoices invoices() {
        return invoices;
    }

    private SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();
        private String serverUrl;
        private String server;
        

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.setClient(client);
            return this;
        }
        
        /**
         * Configures the SDK to use the provided security details.
         *
         * @param security The security details to use for all requests. Can be {@code null}.
         * @return The builder instance.
         */
        public Builder security(com.mollie.mollie.models.components.Security security) {
            this.sdkConfiguration.setSecuritySource(SecuritySource.of(security));
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         *
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            Utils.checkNotNull(securitySource, "securitySource");
            this.sdkConfiguration.setSecuritySource(securitySource);
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.setServerIdx(serverIdx);
            this.serverUrl= SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.setRetryConfig(Optional.of(retryConfig));
            return this;
        }
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(com.mollie.mollie.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);  
            return this;  
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(Consumer<? super com.mollie.mollie.utils.Hooks> consumer) {
            consumer.accept(sdkConfiguration.hooks());
            return this;    
        }
        
        /**
         * Builds a new instance of the SDK.
         *
         * @return The SDK instance.
         */
        public Client build() {
            if (serverUrl == null || serverUrl.isBlank()) {
                serverUrl = SERVERS[0];
                sdkConfiguration.setServerIdx(0);
            }
            sdkConfiguration.setServerUrl(serverUrl);
            return new Client(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     *
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private Client(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.sdkConfiguration.initialize();
        this.payments = new Payments(sdkConfiguration);
        this.methods = new Methods(sdkConfiguration);
        this.refunds = new Refunds(sdkConfiguration);
        this.chargebacks = new Chargebacks(sdkConfiguration);
        this.captures = new Captures(sdkConfiguration);
        this.wallets = new Wallets(sdkConfiguration);
        this.paymentLinks = new PaymentLinks(sdkConfiguration);
        this.terminals = new Terminals(sdkConfiguration);
        this.delayedRouting = new DelayedRouting(sdkConfiguration);
        this.customers = new Customers(sdkConfiguration);
        this.mandates = new Mandates(sdkConfiguration);
        this.subscriptions = new Subscriptions(sdkConfiguration);
        this.permissions = new Permissions(sdkConfiguration);
        this.organizations = new Organizations(sdkConfiguration);
        this.profiles = new Profiles(sdkConfiguration);
        this.onboarding = new Onboarding(sdkConfiguration);
        this.capabilities = new Capabilities(sdkConfiguration);
        this.clients = new Clients(sdkConfiguration);
        this.clientLinks = new ClientLinks(sdkConfiguration);
        this.webhooks = new Webhooks(sdkConfiguration);
        this.webhookEvents = new WebhookEvents(sdkConfiguration);
        this.balances = new Balances(sdkConfiguration);
        this.settlements = new Settlements(sdkConfiguration);
        this.invoices = new Invoices(sdkConfiguration);
        
        SdkInitData data = this.sdkConfiguration.hooks().sdkInit(new SdkInitData(this.sdkConfiguration.resolvedServerUrl(), this.sdkConfiguration.client()));
        this.sdkConfiguration.setServerUrl(data.baseUrl());
        this.sdkConfiguration.setClient(data.client());
    }
}
