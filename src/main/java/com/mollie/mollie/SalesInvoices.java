/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.CreateSalesInvoiceRequestBody;
import com.mollie.mollie.models.operations.CreateSalesInvoiceRequestBuilder;
import com.mollie.mollie.models.operations.CreateSalesInvoiceResponse;
import com.mollie.mollie.models.operations.DeleteSalesInvoiceRequest;
import com.mollie.mollie.models.operations.DeleteSalesInvoiceRequestBody;
import com.mollie.mollie.models.operations.DeleteSalesInvoiceRequestBuilder;
import com.mollie.mollie.models.operations.DeleteSalesInvoiceResponse;
import com.mollie.mollie.models.operations.GetSalesInvoiceRequest;
import com.mollie.mollie.models.operations.GetSalesInvoiceRequestBuilder;
import com.mollie.mollie.models.operations.GetSalesInvoiceResponse;
import com.mollie.mollie.models.operations.ListSalesInvoicesRequest;
import com.mollie.mollie.models.operations.ListSalesInvoicesRequestBuilder;
import com.mollie.mollie.models.operations.ListSalesInvoicesResponse;
import com.mollie.mollie.models.operations.UpdateSalesInvoiceRequest;
import com.mollie.mollie.models.operations.UpdateSalesInvoiceRequestBody;
import com.mollie.mollie.models.operations.UpdateSalesInvoiceRequestBuilder;
import com.mollie.mollie.models.operations.UpdateSalesInvoiceResponse;
import com.mollie.mollie.operations.CreateSalesInvoiceOperation;
import com.mollie.mollie.operations.DeleteSalesInvoiceOperation;
import com.mollie.mollie.operations.GetSalesInvoiceOperation;
import com.mollie.mollie.operations.ListSalesInvoicesOperation;
import com.mollie.mollie.operations.UpdateSalesInvoiceOperation;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class SalesInvoices {
    private final SDKConfiguration sdkConfiguration;

    SalesInvoices(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
    /**
     * Create sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>With the Sales Invoice API you can generate sales invoices to send to your customers.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoices.write**](/reference/authentication)
     * 
     * @return The call builder
     */
    public CreateSalesInvoiceRequestBuilder create() {
        return new CreateSalesInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Create sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>With the Sales Invoice API you can generate sales invoices to send to your customers.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoices.write**](/reference/authentication)
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateSalesInvoiceResponse createDirect() throws Exception {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>With the Sales Invoice API you can generate sales invoices to send to your customers.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoices.write**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateSalesInvoiceResponse create(
            Optional<? extends CreateSalesInvoiceRequestBody> request,
            Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CreateSalesInvoiceRequestBody>, CreateSalesInvoiceResponse> operation
              = new CreateSalesInvoiceOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List sales invoices
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a list of all sales invoices created through the API.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoices.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public ListSalesInvoicesRequestBuilder list() {
        return new ListSalesInvoicesRequestBuilder(sdkConfiguration);
    }

    /**
     * List sales invoices
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a list of all sales invoices created through the API.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoices.read**](/reference/authentication)
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListSalesInvoicesResponse listDirect() throws Exception {
        return list(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * List sales invoices
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a list of all sales invoices created through the API.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoices.read**](/reference/authentication)
     * 
     * @param from Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
     * @param limit The maximum number of items to return. Defaults to 50 items.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListSalesInvoicesResponse list(
            Optional<String> from,
            JsonNullable<Long> limit,
            JsonNullable<Boolean> testmode,
            Optional<Options> options) throws Exception {
        ListSalesInvoicesRequest request =
            ListSalesInvoicesRequest
                .builder()
                .from(from)
                .limit(limit)
                .testmode(testmode)
                .build();
        RequestOperation<ListSalesInvoicesRequest, ListSalesInvoicesResponse> operation
              = new ListSalesInvoicesOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a single sales invoice by its ID.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoice.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public GetSalesInvoiceRequestBuilder get() {
        return new GetSalesInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Get sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a single sales invoice by its ID.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoice.read**](/reference/authentication)
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSalesInvoiceResponse get(String id) throws Exception {
        return get(id, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a single sales invoice by its ID.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoice.read**](/reference/authentication)
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSalesInvoiceResponse get(
            String id,
            JsonNullable<Boolean> testmode,
            Optional<Options> options) throws Exception {
        GetSalesInvoiceRequest request =
            GetSalesInvoiceRequest
                .builder()
                .id(id)
                .testmode(testmode)
                .build();
        RequestOperation<GetSalesInvoiceRequest, GetSalesInvoiceResponse> operation
              = new GetSalesInvoiceOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Certain details of an existing sales invoice can be updated. For `draft` it is all values listed below, but for statuses `paid` and `issued` there are certain additional requirements (`paymentDetails` and `emailDetails`, respectively).
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoices.write**](/reference/authentication)
     * 
     * @return The call builder
     */
    public UpdateSalesInvoiceRequestBuilder update() {
        return new UpdateSalesInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Update sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Certain details of an existing sales invoice can be updated. For `draft` it is all values listed below, but for statuses `paid` and `issued` there are certain additional requirements (`paymentDetails` and `emailDetails`, respectively).
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoices.write**](/reference/authentication)
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateSalesInvoiceResponse update(String id) throws Exception {
        return update(id, Optional.empty(), Optional.empty());
    }

    /**
     * Update sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Certain details of an existing sales invoice can be updated. For `draft` it is all values listed below, but for statuses `paid` and `issued` there are certain additional requirements (`paymentDetails` and `emailDetails`, respectively).
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoices.write**](/reference/authentication)
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateSalesInvoiceResponse update(
            String id,
            Optional<? extends UpdateSalesInvoiceRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        UpdateSalesInvoiceRequest request =
            UpdateSalesInvoiceRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdateSalesInvoiceRequest, UpdateSalesInvoiceResponse> operation
              = new UpdateSalesInvoiceOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Sales invoices which are in status `draft` can be deleted. For all other statuses, please use the [Update sales invoice](update-sales-invoice) endpoint instead.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoices.write**](/reference/authentication)
     * 
     * @return The call builder
     */
    public DeleteSalesInvoiceRequestBuilder delete() {
        return new DeleteSalesInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Sales invoices which are in status `draft` can be deleted. For all other statuses, please use the [Update sales invoice](update-sales-invoice) endpoint instead.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoices.write**](/reference/authentication)
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteSalesInvoiceResponse delete(String id) throws Exception {
        return delete(id, Optional.empty(), Optional.empty());
    }

    /**
     * Delete sales invoice
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Sales invoices which are in status `draft` can be deleted. For all other statuses, please use the [Update sales invoice](update-sales-invoice) endpoint instead.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **sales-invoices.write**](/reference/authentication)
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteSalesInvoiceResponse delete(
            String id,
            Optional<? extends DeleteSalesInvoiceRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        DeleteSalesInvoiceRequest request =
            DeleteSalesInvoiceRequest
                .builder()
                .id(id)
                .requestBody(requestBody)
                .build();
        RequestOperation<DeleteSalesInvoiceRequest, DeleteSalesInvoiceResponse> operation
              = new DeleteSalesInvoiceOperation(
                sdkConfiguration,
                options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
