/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.CreatePaymentLinkRequestBody;
import com.mollie.mollie.models.operations.CreatePaymentLinkRequestBuilder;
import com.mollie.mollie.models.operations.CreatePaymentLinkResponse;
import com.mollie.mollie.models.operations.DeletePaymentLinkRequest;
import com.mollie.mollie.models.operations.DeletePaymentLinkRequestBody;
import com.mollie.mollie.models.operations.DeletePaymentLinkRequestBuilder;
import com.mollie.mollie.models.operations.DeletePaymentLinkResponse;
import com.mollie.mollie.models.operations.GetPaymentLinkPaymentsRequest;
import com.mollie.mollie.models.operations.GetPaymentLinkPaymentsRequestBuilder;
import com.mollie.mollie.models.operations.GetPaymentLinkPaymentsResponse;
import com.mollie.mollie.models.operations.GetPaymentLinkRequest;
import com.mollie.mollie.models.operations.GetPaymentLinkRequestBuilder;
import com.mollie.mollie.models.operations.GetPaymentLinkResponse;
import com.mollie.mollie.models.operations.ListPaymentLinksRequest;
import com.mollie.mollie.models.operations.ListPaymentLinksRequestBuilder;
import com.mollie.mollie.models.operations.ListPaymentLinksResponse;
import com.mollie.mollie.models.operations.UpdatePaymentLinkRequest;
import com.mollie.mollie.models.operations.UpdatePaymentLinkRequestBody;
import com.mollie.mollie.models.operations.UpdatePaymentLinkRequestBuilder;
import com.mollie.mollie.models.operations.UpdatePaymentLinkResponse;
import com.mollie.mollie.operations.CreatePaymentLinkOperation;
import com.mollie.mollie.operations.DeletePaymentLinkOperation;
import com.mollie.mollie.operations.GetPaymentLinkOperation;
import com.mollie.mollie.operations.GetPaymentLinkPaymentsOperation;
import com.mollie.mollie.operations.ListPaymentLinksOperation;
import com.mollie.mollie.operations.UpdatePaymentLinkOperation;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PaymentLinks {
    private final SDKConfiguration sdkConfiguration;

    PaymentLinks(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create payment link
     * 
     * <p>With the Payment links API you can generate payment links that by default, unlike regular payments, do not expire. The payment link can be shared with your customers and will redirect them to them the payment page where they can complete the payment. A [payment](get-payment) will only be created once the customer initiates the payment.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.write**](/reference/authentication)
     * 
     * @return The call builder
     */
    public CreatePaymentLinkRequestBuilder create() {
        return new CreatePaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Create payment link
     * 
     * <p>With the Payment links API you can generate payment links that by default, unlike regular payments, do not expire. The payment link can be shared with your customers and will redirect them to them the payment page where they can complete the payment. A [payment](get-payment) will only be created once the customer initiates the payment.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.write**](/reference/authentication)
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentLinkResponse createDirect() throws Exception {
        return create(Optional.empty(), Optional.empty());
    }

    /**
     * Create payment link
     * 
     * <p>With the Payment links API you can generate payment links that by default, unlike regular payments, do not expire. The payment link can be shared with your customers and will redirect them to them the payment page where they can complete the payment. A [payment](get-payment) will only be created once the customer initiates the payment.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.write**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentLinkResponse create(
            Optional<? extends CreatePaymentLinkRequestBody> request,
            Optional<Options> options) throws Exception {
        RequestOperation<Optional<? extends CreatePaymentLinkRequestBody>, CreatePaymentLinkResponse> operation
              = new CreatePaymentLinkOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List payment links
     * 
     * <p>Retrieve a list of all payment links.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public ListPaymentLinksRequestBuilder list() {
        return new ListPaymentLinksRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment links
     * 
     * <p>Retrieve a list of all payment links.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.read**](/reference/authentication)
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentLinksResponse listDirect() throws Exception {
        return list(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List payment links
     * 
     * <p>Retrieve a list of all payment links.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.read**](/reference/authentication)
     * 
     * @param from Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
     * @param limit The maximum number of items to return. Defaults to 50 items.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentLinksResponse list(
            Optional<String> from,
            JsonNullable<Long> limit,
            JsonNullable<Boolean> testmode,
            Optional<Options> options) throws Exception {
        ListPaymentLinksRequest request =
            ListPaymentLinksRequest
                .builder()
                .from(from)
                .limit(limit)
                .testmode(testmode)
                .build();
        RequestOperation<ListPaymentLinksRequest, ListPaymentLinksResponse> operation
              = new ListPaymentLinksOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get payment link
     * 
     * <p>Retrieve a single payment link by its ID.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public GetPaymentLinkRequestBuilder get() {
        return new GetPaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment link
     * 
     * <p>Retrieve a single payment link by its ID.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.read**](/reference/authentication)
     * 
     * @param paymentLinkId Provide the ID of the related payment link.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentLinkResponse get(String paymentLinkId) throws Exception {
        return get(paymentLinkId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get payment link
     * 
     * <p>Retrieve a single payment link by its ID.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.read**](/reference/authentication)
     * 
     * @param paymentLinkId Provide the ID of the related payment link.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentLinkResponse get(
            String paymentLinkId,
            JsonNullable<Boolean> testmode,
            Optional<Options> options) throws Exception {
        GetPaymentLinkRequest request =
            GetPaymentLinkRequest
                .builder()
                .paymentLinkId(paymentLinkId)
                .testmode(testmode)
                .build();
        RequestOperation<GetPaymentLinkRequest, GetPaymentLinkResponse> operation
              = new GetPaymentLinkOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update payment link
     * 
     * <p>Certain details of an existing payment link can be updated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.write**](/reference/authentication)
     * 
     * @return The call builder
     */
    public UpdatePaymentLinkRequestBuilder update() {
        return new UpdatePaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Update payment link
     * 
     * <p>Certain details of an existing payment link can be updated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.write**](/reference/authentication)
     * 
     * @param paymentLinkId Provide the ID of the related payment link.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdatePaymentLinkResponse update(String paymentLinkId) throws Exception {
        return update(paymentLinkId, Optional.empty(), Optional.empty());
    }

    /**
     * Update payment link
     * 
     * <p>Certain details of an existing payment link can be updated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.write**](/reference/authentication)
     * 
     * @param paymentLinkId Provide the ID of the related payment link.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdatePaymentLinkResponse update(
            String paymentLinkId,
            Optional<? extends UpdatePaymentLinkRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        UpdatePaymentLinkRequest request =
            UpdatePaymentLinkRequest
                .builder()
                .paymentLinkId(paymentLinkId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdatePaymentLinkRequest, UpdatePaymentLinkResponse> operation
              = new UpdatePaymentLinkOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Delete payment link
     * 
     * <p>Payment links which have not been opened and no payments have been made yet can be deleted entirely. This can be useful for removing payment links that have been incorrectly configured or that are no longer relevant.
     * 
     * <p>Once deleted, the payment link will no longer show up in the API or Mollie dashboard.
     * 
     * <p>To simply disable a payment link without fully deleting it, you can use the `archived` parameter on the [Update payment link](update-payment-link) endpoint instead.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.write**](/reference/authentication)
     * 
     * @return The call builder
     */
    public DeletePaymentLinkRequestBuilder delete() {
        return new DeletePaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete payment link
     * 
     * <p>Payment links which have not been opened and no payments have been made yet can be deleted entirely. This can be useful for removing payment links that have been incorrectly configured or that are no longer relevant.
     * 
     * <p>Once deleted, the payment link will no longer show up in the API or Mollie dashboard.
     * 
     * <p>To simply disable a payment link without fully deleting it, you can use the `archived` parameter on the [Update payment link](update-payment-link) endpoint instead.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.write**](/reference/authentication)
     * 
     * @param paymentLinkId Provide the ID of the related payment link.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePaymentLinkResponse delete(String paymentLinkId) throws Exception {
        return delete(paymentLinkId, Optional.empty(), Optional.empty());
    }

    /**
     * Delete payment link
     * 
     * <p>Payment links which have not been opened and no payments have been made yet can be deleted entirely. This can be useful for removing payment links that have been incorrectly configured or that are no longer relevant.
     * 
     * <p>Once deleted, the payment link will no longer show up in the API or Mollie dashboard.
     * 
     * <p>To simply disable a payment link without fully deleting it, you can use the `archived` parameter on the [Update payment link](update-payment-link) endpoint instead.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.write**](/reference/authentication)
     * 
     * @param paymentLinkId Provide the ID of the related payment link.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePaymentLinkResponse delete(
            String paymentLinkId,
            Optional<? extends DeletePaymentLinkRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        DeletePaymentLinkRequest request =
            DeletePaymentLinkRequest
                .builder()
                .paymentLinkId(paymentLinkId)
                .requestBody(requestBody)
                .build();
        RequestOperation<DeletePaymentLinkRequest, DeletePaymentLinkResponse> operation
              = new DeletePaymentLinkOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Get payment link payments
     * 
     * <p>Retrieve the list of payments for a specific payment link.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public GetPaymentLinkPaymentsRequestBuilder listPayments() {
        return new GetPaymentLinkPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment link payments
     * 
     * <p>Retrieve the list of payments for a specific payment link.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentLinkPaymentsResponse listPayments(GetPaymentLinkPaymentsRequest request) throws Exception {
        return listPayments(request, Optional.empty());
    }

    /**
     * Get payment link payments
     * 
     * <p>Retrieve the list of payments for a specific payment link.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **payment-links.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentLinkPaymentsResponse listPayments(
            GetPaymentLinkPaymentsRequest request,
            Optional<Options> options) throws Exception {
        RequestOperation<GetPaymentLinkPaymentsRequest, GetPaymentLinkPaymentsResponse> operation
              = new GetPaymentLinkPaymentsOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
