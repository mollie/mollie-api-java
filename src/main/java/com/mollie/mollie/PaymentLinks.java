/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.CreatePaymentLinkRequest;
import com.mollie.mollie.models.operations.CreatePaymentLinkRequestBody;
import com.mollie.mollie.models.operations.CreatePaymentLinkRequestBuilder;
import com.mollie.mollie.models.operations.CreatePaymentLinkResponse;
import com.mollie.mollie.models.operations.DeletePaymentLinkRequest;
import com.mollie.mollie.models.operations.DeletePaymentLinkRequestBody;
import com.mollie.mollie.models.operations.DeletePaymentLinkRequestBuilder;
import com.mollie.mollie.models.operations.DeletePaymentLinkResponse;
import com.mollie.mollie.models.operations.GetPaymentLinkPaymentsRequest;
import com.mollie.mollie.models.operations.GetPaymentLinkPaymentsRequestBuilder;
import com.mollie.mollie.models.operations.GetPaymentLinkPaymentsResponse;
import com.mollie.mollie.models.operations.GetPaymentLinkRequest;
import com.mollie.mollie.models.operations.GetPaymentLinkRequestBuilder;
import com.mollie.mollie.models.operations.GetPaymentLinkResponse;
import com.mollie.mollie.models.operations.ListPaymentLinksRequest;
import com.mollie.mollie.models.operations.ListPaymentLinksRequestBuilder;
import com.mollie.mollie.models.operations.ListPaymentLinksResponse;
import com.mollie.mollie.models.operations.UpdatePaymentLinkRequest;
import com.mollie.mollie.models.operations.UpdatePaymentLinkRequestBody;
import com.mollie.mollie.models.operations.UpdatePaymentLinkRequestBuilder;
import com.mollie.mollie.models.operations.UpdatePaymentLinkResponse;
import com.mollie.mollie.operations.CreatePaymentLink;
import com.mollie.mollie.operations.DeletePaymentLink;
import com.mollie.mollie.operations.GetPaymentLink;
import com.mollie.mollie.operations.GetPaymentLinkPayments;
import com.mollie.mollie.operations.ListPaymentLinks;
import com.mollie.mollie.operations.UpdatePaymentLink;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PaymentLinks {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncPaymentLinks asyncSDK;

    PaymentLinks(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncPaymentLinks(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncPaymentLinks async() {
        return asyncSDK;
    }

    /**
     * Create payment link
     * 
     * <p>With the Payment links API you can generate payment links that by default, unlike regular payments,
     * do not expire.
     * The payment link can be shared with your customers and will redirect them to them the payment page
     * where they can
     * complete the payment. A [payment](get-payment) will only be created once the customer initiates the
     * payment.
     * 
     * @return The call builder
     */
    public CreatePaymentLinkRequestBuilder create() {
        return new CreatePaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Create payment link
     * 
     * <p>With the Payment links API you can generate payment links that by default, unlike regular payments,
     * do not expire.
     * The payment link can be shared with your customers and will redirect them to them the payment page
     * where they can
     * complete the payment. A [payment](get-payment) will only be created once the customer initiates the
     * payment.
     * 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreatePaymentLinkResponse createDirect() {
        return create(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Create payment link
     * 
     * <p>With the Payment links API you can generate payment links that by default, unlike regular payments,
     * do not expire.
     * The payment link can be shared with your customers and will redirect them to them the payment page
     * where they can
     * complete the payment. A [payment](get-payment) will only be created once the customer initiates the
     * payment.
     * 
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreatePaymentLinkResponse create(
            Optional<String> idempotencyKey, Optional<? extends CreatePaymentLinkRequestBody> requestBody,
            Optional<Options> options) {
        CreatePaymentLinkRequest request =
            CreatePaymentLinkRequest
                .builder()
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreatePaymentLinkRequest, CreatePaymentLinkResponse> operation
              = new CreatePaymentLink.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List payment links
     * 
     * <p>Retrieve a list of all payment links.
     * 
     * <p>The results are paginated.
     * 
     * @return The call builder
     */
    public ListPaymentLinksRequestBuilder list() {
        return new ListPaymentLinksRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment links
     * 
     * <p>Retrieve a list of all payment links.
     * 
     * <p>The results are paginated.
     * 
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListPaymentLinksResponse listDirect() {
        return list(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), Optional.empty());
    }

    /**
     * List payment links
     * 
     * <p>Retrieve a list of all payment links.
     * 
     * <p>The results are paginated.
     * 
     * @param from Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
     *         result set.
     * @param limit The maximum number of items to return. Defaults to 50 items.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListPaymentLinksResponse list(
            Optional<String> from, JsonNullable<Long> limit,
            JsonNullable<Boolean> testmode, Optional<String> idempotencyKey,
            Optional<Options> options) {
        ListPaymentLinksRequest request =
            ListPaymentLinksRequest
                .builder()
                .from(from)
                .limit(limit)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        RequestOperation<ListPaymentLinksRequest, ListPaymentLinksResponse> operation
              = new ListPaymentLinks.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get payment link
     * 
     * <p>Retrieve a single payment link by its ID.
     * 
     * @return The call builder
     */
    public GetPaymentLinkRequestBuilder get() {
        return new GetPaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment link
     * 
     * <p>Retrieve a single payment link by its ID.
     * 
     * @param paymentLinkId Provide the ID of the related payment link.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetPaymentLinkResponse get(String paymentLinkId) {
        return get(paymentLinkId, JsonNullable.undefined(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Get payment link
     * 
     * <p>Retrieve a single payment link by its ID.
     * 
     * @param paymentLinkId Provide the ID of the related payment link.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetPaymentLinkResponse get(
            String paymentLinkId, JsonNullable<Boolean> testmode,
            Optional<String> idempotencyKey, Optional<Options> options) {
        GetPaymentLinkRequest request =
            GetPaymentLinkRequest
                .builder()
                .paymentLinkId(paymentLinkId)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        RequestOperation<GetPaymentLinkRequest, GetPaymentLinkResponse> operation
              = new GetPaymentLink.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update payment link
     * 
     * <p>Certain details of an existing payment link can be updated.
     * 
     * @return The call builder
     */
    public UpdatePaymentLinkRequestBuilder update() {
        return new UpdatePaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Update payment link
     * 
     * <p>Certain details of an existing payment link can be updated.
     * 
     * @param paymentLinkId Provide the ID of the related payment link.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdatePaymentLinkResponse update(String paymentLinkId) {
        return update(paymentLinkId, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Update payment link
     * 
     * <p>Certain details of an existing payment link can be updated.
     * 
     * @param paymentLinkId Provide the ID of the related payment link.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdatePaymentLinkResponse update(
            String paymentLinkId, Optional<String> idempotencyKey,
            Optional<? extends UpdatePaymentLinkRequestBody> requestBody, Optional<Options> options) {
        UpdatePaymentLinkRequest request =
            UpdatePaymentLinkRequest
                .builder()
                .paymentLinkId(paymentLinkId)
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdatePaymentLinkRequest, UpdatePaymentLinkResponse> operation
              = new UpdatePaymentLink.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete payment link
     * 
     * <p>Payment links which have not been opened and no payments have been made yet can be deleted entirely.
     * This can be useful for removing payment links that have been incorrectly configured or that are no
     * longer relevant.
     * 
     * <p>Once deleted, the payment link will no longer show up in the API or Mollie dashboard.
     * 
     * <p>To simply disable a payment link without fully deleting it, you can use the `archived` parameter on
     * the
     * [Update payment link](update-payment-link) endpoint instead.
     * 
     * @return The call builder
     */
    public DeletePaymentLinkRequestBuilder delete() {
        return new DeletePaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete payment link
     * 
     * <p>Payment links which have not been opened and no payments have been made yet can be deleted entirely.
     * This can be useful for removing payment links that have been incorrectly configured or that are no
     * longer relevant.
     * 
     * <p>Once deleted, the payment link will no longer show up in the API or Mollie dashboard.
     * 
     * <p>To simply disable a payment link without fully deleting it, you can use the `archived` parameter on
     * the
     * [Update payment link](update-payment-link) endpoint instead.
     * 
     * @param paymentLinkId Provide the ID of the related payment link.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public DeletePaymentLinkResponse delete(String paymentLinkId) {
        return delete(paymentLinkId, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Delete payment link
     * 
     * <p>Payment links which have not been opened and no payments have been made yet can be deleted entirely.
     * This can be useful for removing payment links that have been incorrectly configured or that are no
     * longer relevant.
     * 
     * <p>Once deleted, the payment link will no longer show up in the API or Mollie dashboard.
     * 
     * <p>To simply disable a payment link without fully deleting it, you can use the `archived` parameter on
     * the
     * [Update payment link](update-payment-link) endpoint instead.
     * 
     * @param paymentLinkId Provide the ID of the related payment link.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public DeletePaymentLinkResponse delete(
            String paymentLinkId, Optional<String> idempotencyKey,
            Optional<? extends DeletePaymentLinkRequestBody> requestBody, Optional<Options> options) {
        DeletePaymentLinkRequest request =
            DeletePaymentLinkRequest
                .builder()
                .paymentLinkId(paymentLinkId)
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        RequestOperation<DeletePaymentLinkRequest, DeletePaymentLinkResponse> operation
              = new DeletePaymentLink.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get payment link payments
     * 
     * <p>Retrieve the list of payments for a specific payment link.
     * 
     * <p>The results are paginated.
     * 
     * @return The call builder
     */
    public GetPaymentLinkPaymentsRequestBuilder listPayments() {
        return new GetPaymentLinkPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment link payments
     * 
     * <p>Retrieve the list of payments for a specific payment link.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetPaymentLinkPaymentsResponse listPayments(GetPaymentLinkPaymentsRequest request) {
        return listPayments(request, Optional.empty());
    }

    /**
     * Get payment link payments
     * 
     * <p>Retrieve the list of payments for a specific payment link.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetPaymentLinkPaymentsResponse listPayments(GetPaymentLinkPaymentsRequest request, Optional<Options> options) {
        RequestOperation<GetPaymentLinkPaymentsRequest, GetPaymentLinkPaymentsResponse> operation
              = new GetPaymentLinkPayments.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
