/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.operations.GetNextSettlementRequest;
import com.mollie.mollie.models.operations.GetOpenSettlementRequest;
import com.mollie.mollie.models.operations.GetSettlementRequest;
import com.mollie.mollie.models.operations.ListSettlementCapturesRequest;
import com.mollie.mollie.models.operations.ListSettlementChargebacksRequest;
import com.mollie.mollie.models.operations.ListSettlementPaymentsRequest;
import com.mollie.mollie.models.operations.ListSettlementRefundsRequest;
import com.mollie.mollie.models.operations.ListSettlementsRequest;
import com.mollie.mollie.models.operations.async.GetNextSettlementRequestBuilder;
import com.mollie.mollie.models.operations.async.GetNextSettlementResponse;
import com.mollie.mollie.models.operations.async.GetOpenSettlementRequestBuilder;
import com.mollie.mollie.models.operations.async.GetOpenSettlementResponse;
import com.mollie.mollie.models.operations.async.GetSettlementRequestBuilder;
import com.mollie.mollie.models.operations.async.GetSettlementResponse;
import com.mollie.mollie.models.operations.async.ListSettlementCapturesRequestBuilder;
import com.mollie.mollie.models.operations.async.ListSettlementCapturesResponse;
import com.mollie.mollie.models.operations.async.ListSettlementChargebacksRequestBuilder;
import com.mollie.mollie.models.operations.async.ListSettlementChargebacksResponse;
import com.mollie.mollie.models.operations.async.ListSettlementPaymentsRequestBuilder;
import com.mollie.mollie.models.operations.async.ListSettlementPaymentsResponse;
import com.mollie.mollie.models.operations.async.ListSettlementRefundsRequestBuilder;
import com.mollie.mollie.models.operations.async.ListSettlementRefundsResponse;
import com.mollie.mollie.models.operations.async.ListSettlementsRequestBuilder;
import com.mollie.mollie.models.operations.async.ListSettlementsResponse;
import com.mollie.mollie.operations.GetNextSettlement;
import com.mollie.mollie.operations.GetOpenSettlement;
import com.mollie.mollie.operations.GetSettlement;
import com.mollie.mollie.operations.ListSettlementCaptures;
import com.mollie.mollie.operations.ListSettlementChargebacks;
import com.mollie.mollie.operations.ListSettlementPayments;
import com.mollie.mollie.operations.ListSettlementRefunds;
import com.mollie.mollie.operations.ListSettlements;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncSettlements {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Settlements syncSDK;

    AsyncSettlements(Settlements syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Settlements sync() {
        return syncSDK;
    }


    /**
     * List settlements
     * 
     * <p>Retrieve a list of all your settlements.
     * 
     * <p>The results are paginated.
     * 
     * @return The async call builder
     */
    public ListSettlementsRequestBuilder list() {
        return new ListSettlementsRequestBuilder(sdkConfiguration);
    }

    /**
     * List settlements
     * 
     * <p>Retrieve a list of all your settlements.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListSettlementsResponse&gt; - The async response
     */
    public CompletableFuture<ListSettlementsResponse> list(ListSettlementsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List settlements
     * 
     * <p>Retrieve a list of all your settlements.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListSettlementsResponse&gt; - The async response
     */
    public CompletableFuture<ListSettlementsResponse> list(ListSettlementsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListSettlementsRequest, ListSettlementsResponse> operation
              = new ListSettlements.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get settlement
     * 
     * <p>Retrieve a single settlement by its ID.
     * 
     * <p>To lookup settlements by their bank reference, replace the ID in the URL by
     * a reference. For example: `1234567.2404.03`.
     * 
     * <p>A settlement represents a transfer of your balance funds to your external bank account.
     * 
     * <p>Settlements will typically include a report that details what balance transactions have taken place between this
     * settlement and the previous one.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the
     * [balance transactions](list-balance-transactions) endpoint.
     * 
     * @return The async call builder
     */
    public GetSettlementRequestBuilder get() {
        return new GetSettlementRequestBuilder(sdkConfiguration);
    }

    /**
     * Get settlement
     * 
     * <p>Retrieve a single settlement by its ID.
     * 
     * <p>To lookup settlements by their bank reference, replace the ID in the URL by
     * a reference. For example: `1234567.2404.03`.
     * 
     * <p>A settlement represents a transfer of your balance funds to your external bank account.
     * 
     * <p>Settlements will typically include a report that details what balance transactions have taken place between this
     * settlement and the previous one.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the
     * [balance transactions](list-balance-transactions) endpoint.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return CompletableFuture&lt;GetSettlementResponse&gt; - The async response
     */
    public CompletableFuture<GetSettlementResponse> get(String id) {
        return get(id, Optional.empty(), Optional.empty());
    }

    /**
     * Get settlement
     * 
     * <p>Retrieve a single settlement by its ID.
     * 
     * <p>To lookup settlements by their bank reference, replace the ID in the URL by
     * a reference. For example: `1234567.2404.03`.
     * 
     * <p>A settlement represents a transfer of your balance funds to your external bank account.
     * 
     * <p>Settlements will typically include a report that details what balance transactions have taken place between this
     * settlement and the previous one.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the
     * [balance transactions](list-balance-transactions) endpoint.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return CompletableFuture&lt;GetSettlementResponse&gt; - The async response
     */
    public CompletableFuture<GetSettlementResponse> get(
            String id, Optional<String> idempotencyKey,
            Optional<Options> options) {
        GetSettlementRequest request =
            GetSettlementRequest
                .builder()
                .id(id)
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<GetSettlementRequest, GetSettlementResponse> operation
              = new GetSettlement.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get open settlement
     * 
     * <p>Retrieve the details of the open balance of the organization. This will return a settlement object representing your
     * organization's balance.
     * 
     * <p>For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement)
     * documentation.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the
     * [balance transactions](list-balance-transactions) endpoint.
     * 
     * @return The async call builder
     */
    public GetOpenSettlementRequestBuilder getOpen() {
        return new GetOpenSettlementRequestBuilder(sdkConfiguration);
    }

    /**
     * Get open settlement
     * 
     * <p>Retrieve the details of the open balance of the organization. This will return a settlement object representing your
     * organization's balance.
     * 
     * <p>For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement)
     * documentation.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the
     * [balance transactions](list-balance-transactions) endpoint.
     * 
     * @return CompletableFuture&lt;GetOpenSettlementResponse&gt; - The async response
     */
    public CompletableFuture<GetOpenSettlementResponse> getOpenDirect() {
        return getOpen(Optional.empty(), Optional.empty());
    }

    /**
     * Get open settlement
     * 
     * <p>Retrieve the details of the open balance of the organization. This will return a settlement object representing your
     * organization's balance.
     * 
     * <p>For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement)
     * documentation.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the
     * [balance transactions](list-balance-transactions) endpoint.
     * 
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return CompletableFuture&lt;GetOpenSettlementResponse&gt; - The async response
     */
    public CompletableFuture<GetOpenSettlementResponse> getOpen(Optional<String> idempotencyKey, Optional<Options> options) {
        GetOpenSettlementRequest request =
            GetOpenSettlementRequest
                .builder()
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<GetOpenSettlementRequest, GetOpenSettlementResponse> operation
              = new GetOpenSettlement.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get next settlement
     * 
     * <p>Retrieve the details of the current settlement, that has not yet been paid out.
     * 
     * <p>For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement)
     * documentation.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the
     * [balance transactions](list-balance-transactions) endpoint.
     * 
     * @return The async call builder
     */
    public GetNextSettlementRequestBuilder getNext() {
        return new GetNextSettlementRequestBuilder(sdkConfiguration);
    }

    /**
     * Get next settlement
     * 
     * <p>Retrieve the details of the current settlement, that has not yet been paid out.
     * 
     * <p>For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement)
     * documentation.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the
     * [balance transactions](list-balance-transactions) endpoint.
     * 
     * @return CompletableFuture&lt;GetNextSettlementResponse&gt; - The async response
     */
    public CompletableFuture<GetNextSettlementResponse> getNextDirect() {
        return getNext(Optional.empty(), Optional.empty());
    }

    /**
     * Get next settlement
     * 
     * <p>Retrieve the details of the current settlement, that has not yet been paid out.
     * 
     * <p>For a complete reference of the settlement object, refer to the [Get settlement endpoint](get-settlement)
     * documentation.
     * 
     * <p>For more accurate bookkeeping, refer to the [balance report](get-balance-report) endpoint or the
     * [balance transactions](list-balance-transactions) endpoint.
     * 
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return CompletableFuture&lt;GetNextSettlementResponse&gt; - The async response
     */
    public CompletableFuture<GetNextSettlementResponse> getNext(Optional<String> idempotencyKey, Optional<Options> options) {
        GetNextSettlementRequest request =
            GetNextSettlementRequest
                .builder()
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<GetNextSettlementRequest, GetNextSettlementResponse> operation
              = new GetNextSettlement.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List settlement payments
     * 
     * <p>Retrieve all payments included in the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List payments endpoint](list-payments).
     * 
     * <p>For capture-based payment methods such as Klarna, the payments are not listed here. Refer to the
     * [List captures endpoint](list-captures) endpoint instead.
     * 
     * @return The async call builder
     */
    public ListSettlementPaymentsRequestBuilder listPayments() {
        return new ListSettlementPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List settlement payments
     * 
     * <p>Retrieve all payments included in the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List payments endpoint](list-payments).
     * 
     * <p>For capture-based payment methods such as Klarna, the payments are not listed here. Refer to the
     * [List captures endpoint](list-captures) endpoint instead.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListSettlementPaymentsResponse&gt; - The async response
     */
    public CompletableFuture<ListSettlementPaymentsResponse> listPayments(ListSettlementPaymentsRequest request) {
        return listPayments(request, Optional.empty());
    }

    /**
     * List settlement payments
     * 
     * <p>Retrieve all payments included in the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List payments endpoint](list-payments).
     * 
     * <p>For capture-based payment methods such as Klarna, the payments are not listed here. Refer to the
     * [List captures endpoint](list-captures) endpoint instead.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListSettlementPaymentsResponse&gt; - The async response
     */
    public CompletableFuture<ListSettlementPaymentsResponse> listPayments(ListSettlementPaymentsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListSettlementPaymentsRequest, ListSettlementPaymentsResponse> operation
              = new ListSettlementPayments.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List settlement captures
     * 
     * <p>Retrieve all captures included in the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List captures endpoint](list-captures).
     * 
     * @return The async call builder
     */
    public ListSettlementCapturesRequestBuilder listCaptures() {
        return new ListSettlementCapturesRequestBuilder(sdkConfiguration);
    }

    /**
     * List settlement captures
     * 
     * <p>Retrieve all captures included in the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List captures endpoint](list-captures).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListSettlementCapturesResponse&gt; - The async response
     */
    public CompletableFuture<ListSettlementCapturesResponse> listCaptures(ListSettlementCapturesRequest request) {
        return listCaptures(request, Optional.empty());
    }

    /**
     * List settlement captures
     * 
     * <p>Retrieve all captures included in the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List captures endpoint](list-captures).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListSettlementCapturesResponse&gt; - The async response
     */
    public CompletableFuture<ListSettlementCapturesResponse> listCaptures(ListSettlementCapturesRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListSettlementCapturesRequest, ListSettlementCapturesResponse> operation
              = new ListSettlementCaptures.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List settlement refunds
     * 
     * <p>Retrieve all refunds 'deducted' from the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List refunds endpoint](list-refunds).
     * 
     * @return The async call builder
     */
    public ListSettlementRefundsRequestBuilder listRefunds() {
        return new ListSettlementRefundsRequestBuilder(sdkConfiguration);
    }

    /**
     * List settlement refunds
     * 
     * <p>Retrieve all refunds 'deducted' from the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List refunds endpoint](list-refunds).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListSettlementRefundsResponse&gt; - The async response
     */
    public CompletableFuture<ListSettlementRefundsResponse> listRefunds(ListSettlementRefundsRequest request) {
        return listRefunds(request, Optional.empty());
    }

    /**
     * List settlement refunds
     * 
     * <p>Retrieve all refunds 'deducted' from the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List refunds endpoint](list-refunds).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListSettlementRefundsResponse&gt; - The async response
     */
    public CompletableFuture<ListSettlementRefundsResponse> listRefunds(ListSettlementRefundsRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListSettlementRefundsRequest, ListSettlementRefundsResponse> operation
              = new ListSettlementRefunds.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List settlement chargebacks
     * 
     * <p>Retrieve all chargebacks 'deducted' from the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List chargebacks endpoint](list-chargebacks).
     * 
     * @return The async call builder
     */
    public ListSettlementChargebacksRequestBuilder listChargebacks() {
        return new ListSettlementChargebacksRequestBuilder(sdkConfiguration);
    }

    /**
     * List settlement chargebacks
     * 
     * <p>Retrieve all chargebacks 'deducted' from the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List chargebacks endpoint](list-chargebacks).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListSettlementChargebacksResponse&gt; - The async response
     */
    public CompletableFuture<ListSettlementChargebacksResponse> listChargebacks(ListSettlementChargebacksRequest request) {
        return listChargebacks(request, Optional.empty());
    }

    /**
     * List settlement chargebacks
     * 
     * <p>Retrieve all chargebacks 'deducted' from the given settlement.
     * 
     * <p>The response is in the same format as the response of the [List chargebacks endpoint](list-chargebacks).
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;ListSettlementChargebacksResponse&gt; - The async response
     */
    public CompletableFuture<ListSettlementChargebacksResponse> listChargebacks(ListSettlementChargebacksRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListSettlementChargebacksRequest, ListSettlementChargebacksResponse> operation
              = new ListSettlementChargebacks.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
