/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.operations.ListCapabilitiesRequest;
import com.mollie.mollie.models.operations.async.ListCapabilitiesRequestBuilder;
import com.mollie.mollie.models.operations.async.ListCapabilitiesResponse;
import com.mollie.mollie.operations.ListCapabilities;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncCapabilities {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Capabilities syncSDK;

    AsyncCapabilities(Capabilities syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Capabilities sync() {
        return syncSDK;
    }


    /**
     * List capabilities
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a list of capabilities for an organization.
     * 
     * <p>This API provides detailed insights into the specific requirements and status of each client's onboarding journey.
     * 
     * <p>Capabilities are at the organization level, indicating if the organization can perform a given capability.
     * 
     * <p>For payments, regardless them being at the profile level, the capability is listed at the organization level.
     * This means that if at least one of the clients's profiles can receive payments,
     * the payments capability is enabled, communicating that the organization can indeed receive payments.
     * 
     * @return The async call builder
     */
    public ListCapabilitiesRequestBuilder list() {
        return new ListCapabilitiesRequestBuilder(sdkConfiguration);
    }

    /**
     * List capabilities
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a list of capabilities for an organization.
     * 
     * <p>This API provides detailed insights into the specific requirements and status of each client's onboarding journey.
     * 
     * <p>Capabilities are at the organization level, indicating if the organization can perform a given capability.
     * 
     * <p>For payments, regardless them being at the profile level, the capability is listed at the organization level.
     * This means that if at least one of the clients's profiles can receive payments,
     * the payments capability is enabled, communicating that the organization can indeed receive payments.
     * 
     * @return CompletableFuture&lt;ListCapabilitiesResponse&gt; - The async response
     */
    public CompletableFuture<ListCapabilitiesResponse> listDirect() {
        return list(Optional.empty(), Optional.empty());
    }

    /**
     * List capabilities
     * 
     * <p>&gt; ðŸš§ Beta feature
     * &gt;
     * &gt; This feature is currently in beta testing, and the final specification may still change.
     * 
     * <p>Retrieve a list of capabilities for an organization.
     * 
     * <p>This API provides detailed insights into the specific requirements and status of each client's onboarding journey.
     * 
     * <p>Capabilities are at the organization level, indicating if the organization can perform a given capability.
     * 
     * <p>For payments, regardless them being at the profile level, the capability is listed at the organization level.
     * This means that if at least one of the clients's profiles can receive payments,
     * the payments capability is enabled, communicating that the organization can indeed receive payments.
     * 
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return CompletableFuture&lt;ListCapabilitiesResponse&gt; - The async response
     */
    public CompletableFuture<ListCapabilitiesResponse> list(Optional<String> idempotencyKey, Optional<Options> options) {
        ListCapabilitiesRequest request =
            ListCapabilitiesRequest
                .builder()
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<ListCapabilitiesRequest, ListCapabilitiesResponse> operation
              = new ListCapabilities.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
