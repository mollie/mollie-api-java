/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.operations.CreateWebhookRequest;
import com.mollie.mollie.models.operations.CreateWebhookRequestBody;
import com.mollie.mollie.models.operations.DeleteWebhookRequest;
import com.mollie.mollie.models.operations.DeleteWebhookRequestBody;
import com.mollie.mollie.models.operations.GetWebhookRequest;
import com.mollie.mollie.models.operations.ListWebhooksRequest;
import com.mollie.mollie.models.operations.TestWebhookRequest;
import com.mollie.mollie.models.operations.TestWebhookRequestBody;
import com.mollie.mollie.models.operations.UpdateWebhookRequest;
import com.mollie.mollie.models.operations.UpdateWebhookRequestBody;
import com.mollie.mollie.models.operations.async.CreateWebhookRequestBuilder;
import com.mollie.mollie.models.operations.async.CreateWebhookResponse;
import com.mollie.mollie.models.operations.async.DeleteWebhookRequestBuilder;
import com.mollie.mollie.models.operations.async.DeleteWebhookResponse;
import com.mollie.mollie.models.operations.async.GetWebhookRequestBuilder;
import com.mollie.mollie.models.operations.async.GetWebhookResponse;
import com.mollie.mollie.models.operations.async.ListWebhooksRequestBuilder;
import com.mollie.mollie.models.operations.async.ListWebhooksResponse;
import com.mollie.mollie.models.operations.async.TestWebhookRequestBuilder;
import com.mollie.mollie.models.operations.async.TestWebhookResponse;
import com.mollie.mollie.models.operations.async.UpdateWebhookRequestBuilder;
import com.mollie.mollie.models.operations.async.UpdateWebhookResponse;
import com.mollie.mollie.operations.CreateWebhook;
import com.mollie.mollie.operations.DeleteWebhook;
import com.mollie.mollie.operations.GetWebhook;
import com.mollie.mollie.operations.ListWebhooks;
import com.mollie.mollie.operations.TestWebhook;
import com.mollie.mollie.operations.UpdateWebhook;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncWebhooks {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Webhooks syncSDK;

    AsyncWebhooks(Webhooks syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Webhooks sync() {
        return syncSDK;
    }


    /**
     * Create a webhook
     * 
     * <p>A webhook must have a name, an url and a list of event types. You can also create webhooks in the
     * webhooks settings section of the Dashboard.
     * 
     * @return The async call builder
     */
    public CreateWebhookRequestBuilder create() {
        return new CreateWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a webhook
     * 
     * <p>A webhook must have a name, an url and a list of event types. You can also create webhooks in the
     * webhooks settings section of the Dashboard.
     * 
     * @return {@code CompletableFuture<CreateWebhookResponse>} - The async response
     */
    public CompletableFuture<CreateWebhookResponse> createDirect() {
        return create(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Create a webhook
     * 
     * <p>A webhook must have a name, an url and a list of event types. You can also create webhooks in the
     * webhooks settings section of the Dashboard.
     * 
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return {@code CompletableFuture<CreateWebhookResponse>} - The async response
     */
    public CompletableFuture<CreateWebhookResponse> create(
            Optional<String> idempotencyKey, Optional<? extends CreateWebhookRequestBody> requestBody,
            Optional<Options> options) {
        CreateWebhookRequest request =
            CreateWebhookRequest
                .builder()
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        AsyncRequestOperation<CreateWebhookRequest, CreateWebhookResponse> operation
              = new CreateWebhook.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all webhooks
     * 
     * <p>Returns a paginated list of your webhooks. If no webhook endpoints are available, the resulting
     * array will be empty. This request should never throw an error.
     * 
     * @return The async call builder
     */
    public ListWebhooksRequestBuilder list() {
        return new ListWebhooksRequestBuilder(sdkConfiguration);
    }

    /**
     * List all webhooks
     * 
     * <p>Returns a paginated list of your webhooks. If no webhook endpoints are available, the resulting
     * array will be empty. This request should never throw an error.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListWebhooksResponse>} - The async response
     */
    public CompletableFuture<ListWebhooksResponse> list(ListWebhooksRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List all webhooks
     * 
     * <p>Returns a paginated list of your webhooks. If no webhook endpoints are available, the resulting
     * array will be empty. This request should never throw an error.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<ListWebhooksResponse>} - The async response
     */
    public CompletableFuture<ListWebhooksResponse> list(ListWebhooksRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListWebhooksRequest, ListWebhooksResponse> operation
              = new ListWebhooks.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a webhook
     * 
     * <p>Updates the webhook. You may edit the name, url and the list of subscribed event types.
     * 
     * @return The async call builder
     */
    public UpdateWebhookRequestBuilder update() {
        return new UpdateWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a webhook
     * 
     * <p>Updates the webhook. You may edit the name, url and the list of subscribed event types.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return {@code CompletableFuture<UpdateWebhookResponse>} - The async response
     */
    public CompletableFuture<UpdateWebhookResponse> update(String id) {
        return update(
                id, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Update a webhook
     * 
     * <p>Updates the webhook. You may edit the name, url and the list of subscribed event types.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return {@code CompletableFuture<UpdateWebhookResponse>} - The async response
     */
    public CompletableFuture<UpdateWebhookResponse> update(
            String id, Optional<String> idempotencyKey,
            Optional<? extends UpdateWebhookRequestBody> requestBody, Optional<Options> options) {
        UpdateWebhookRequest request =
            UpdateWebhookRequest
                .builder()
                .id(id)
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        AsyncRequestOperation<UpdateWebhookRequest, UpdateWebhookResponse> operation
              = new UpdateWebhook.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get a webhook
     * 
     * <p>Retrieve a single webhook object by its ID.
     * 
     * @return The async call builder
     */
    public GetWebhookRequestBuilder get() {
        return new GetWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a webhook
     * 
     * <p>Retrieve a single webhook object by its ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return {@code CompletableFuture<GetWebhookResponse>} - The async response
     */
    public CompletableFuture<GetWebhookResponse> get(String id) {
        return get(
                id, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Get a webhook
     * 
     * <p>Retrieve a single webhook object by its ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return {@code CompletableFuture<GetWebhookResponse>} - The async response
     */
    public CompletableFuture<GetWebhookResponse> get(
            String id, Optional<Boolean> testmode,
            Optional<String> idempotencyKey, Optional<Options> options) {
        GetWebhookRequest request =
            GetWebhookRequest
                .builder()
                .id(id)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<GetWebhookRequest, GetWebhookResponse> operation
              = new GetWebhook.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Delete a webhook
     * 
     * <p>Delete a single webhook object by its webhook ID.
     * 
     * @return The async call builder
     */
    public DeleteWebhookRequestBuilder delete() {
        return new DeleteWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a webhook
     * 
     * <p>Delete a single webhook object by its webhook ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return {@code CompletableFuture<DeleteWebhookResponse>} - The async response
     */
    public CompletableFuture<DeleteWebhookResponse> delete(String id) {
        return delete(
                id, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Delete a webhook
     * 
     * <p>Delete a single webhook object by its webhook ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return {@code CompletableFuture<DeleteWebhookResponse>} - The async response
     */
    public CompletableFuture<DeleteWebhookResponse> delete(
            String id, Optional<String> idempotencyKey,
            Optional<? extends DeleteWebhookRequestBody> requestBody, Optional<Options> options) {
        DeleteWebhookRequest request =
            DeleteWebhookRequest
                .builder()
                .id(id)
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        AsyncRequestOperation<DeleteWebhookRequest, DeleteWebhookResponse> operation
              = new DeleteWebhook.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Test a webhook
     * 
     * <p>Sends a test event to the webhook to verify the endpoint is working as expected.
     * 
     * @return The async call builder
     */
    public TestWebhookRequestBuilder test() {
        return new TestWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Test a webhook
     * 
     * <p>Sends a test event to the webhook to verify the endpoint is working as expected.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return {@code CompletableFuture<TestWebhookResponse>} - The async response
     */
    public CompletableFuture<TestWebhookResponse> test(String id) {
        return test(
                id, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Test a webhook
     * 
     * <p>Sends a test event to the webhook to verify the endpoint is working as expected.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param requestBody 
     * @param options additional options
     * @return {@code CompletableFuture<TestWebhookResponse>} - The async response
     */
    public CompletableFuture<TestWebhookResponse> test(
            String id, Optional<String> idempotencyKey,
            Optional<? extends TestWebhookRequestBody> requestBody, Optional<Options> options) {
        TestWebhookRequest request =
            TestWebhookRequest
                .builder()
                .id(id)
                .idempotencyKey(idempotencyKey)
                .requestBody(requestBody)
                .build();
        AsyncRequestOperation<TestWebhookRequest, TestWebhookResponse> operation
              = new TestWebhook.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
