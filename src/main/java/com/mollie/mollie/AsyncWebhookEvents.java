/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.operations.GetWebhookEventRequest;
import com.mollie.mollie.models.operations.async.GetWebhookEventRequestBuilder;
import com.mollie.mollie.models.operations.async.GetWebhookEventResponse;
import com.mollie.mollie.operations.GetWebhookEvent;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.openapitools.jackson.nullable.JsonNullable;


public class AsyncWebhookEvents {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final WebhookEvents syncSDK;

    AsyncWebhookEvents(WebhookEvents syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public WebhookEvents sync() {
        return syncSDK;
    }


    /**
     * Get a Webhook Event
     * 
     * <p>Retrieve a single webhook event object by its event ID.
     * 
     * @return The async call builder
     */
    public GetWebhookEventRequestBuilder get() {
        return new GetWebhookEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a Webhook Event
     * 
     * <p>Retrieve a single webhook event object by its event ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @return CompletableFuture&lt;GetWebhookEventResponse&gt; - The async response
     */
    public CompletableFuture<GetWebhookEventResponse> get(String id) {
        return get(
                id, JsonNullable.undefined(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Get a Webhook Event
     * 
     * <p>Retrieve a single webhook event object by its event ID.
     * 
     * @param id Provide the ID of the item you want to perform this operation on.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return CompletableFuture&lt;GetWebhookEventResponse&gt; - The async response
     */
    public CompletableFuture<GetWebhookEventResponse> get(
            String id, JsonNullable<Boolean> testmode,
            Optional<String> idempotencyKey, Optional<Options> options) {
        GetWebhookEventRequest request =
            GetWebhookEventRequest
                .builder()
                .id(id)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        AsyncRequestOperation<GetWebhookEventRequest, GetWebhookEventResponse> operation
              = new GetWebhookEvent.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
