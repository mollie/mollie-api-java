/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.components.RouteCreateRequest;
import com.mollie.mollie.models.operations.PaymentCreateRouteRequest;
import com.mollie.mollie.models.operations.PaymentCreateRouteRequestBuilder;
import com.mollie.mollie.models.operations.PaymentCreateRouteResponse;
import com.mollie.mollie.models.operations.PaymentListRoutesRequest;
import com.mollie.mollie.models.operations.PaymentListRoutesRequestBuilder;
import com.mollie.mollie.models.operations.PaymentListRoutesResponse;
import com.mollie.mollie.operations.PaymentCreateRoute;
import com.mollie.mollie.operations.PaymentListRoutes;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class DelayedRouting {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncDelayedRouting asyncSDK;

    DelayedRouting(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncDelayedRouting(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncDelayedRouting async() {
        return asyncSDK;
    }

    /**
     * Create a delayed route
     * 
     * <p>Create a route for a specific payment.
     * The routed amount is credited to the account of your customer.
     * 
     * @return The call builder
     */
    public PaymentCreateRouteRequestBuilder create() {
        return new PaymentCreateRouteRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a delayed route
     * 
     * <p>Create a route for a specific payment.
     * The routed amount is credited to the account of your customer.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PaymentCreateRouteResponse create(String paymentId) throws Exception {
        return create(paymentId, Optional.empty(), Optional.empty());
    }

    /**
     * Create a delayed route
     * 
     * <p>Create a route for a specific payment.
     * The routed amount is credited to the account of your customer.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param routeCreateRequest 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PaymentCreateRouteResponse create(
            String paymentId, Optional<? extends RouteCreateRequest> routeCreateRequest,
            Optional<Options> options) throws Exception {
        PaymentCreateRouteRequest request =
            PaymentCreateRouteRequest
                .builder()
                .paymentId(paymentId)
                .routeCreateRequest(routeCreateRequest)
                .build();
        RequestOperation<PaymentCreateRouteRequest, PaymentCreateRouteResponse> operation
              = new PaymentCreateRoute.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List payment routes
     * 
     * <p>Retrieve a list of all routes created for a specific payment.
     * 
     * @return The call builder
     */
    public PaymentListRoutesRequestBuilder list() {
        return new PaymentListRoutesRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment routes
     * 
     * <p>Retrieve a list of all routes created for a specific payment.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PaymentListRoutesResponse list(String paymentId) throws Exception {
        return list(paymentId, JsonNullable.undefined(), Optional.empty());
    }

    /**
     * List payment routes
     * 
     * <p>Retrieve a list of all routes created for a specific payment.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PaymentListRoutesResponse list(
            String paymentId, JsonNullable<Boolean> testmode,
            Optional<Options> options) throws Exception {
        PaymentListRoutesRequest request =
            PaymentListRoutesRequest
                .builder()
                .paymentId(paymentId)
                .testmode(testmode)
                .build();
        RequestOperation<PaymentListRoutesRequest, PaymentListRoutesResponse> operation
              = new PaymentListRoutes.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
