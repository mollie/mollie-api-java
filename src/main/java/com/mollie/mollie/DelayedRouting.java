/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.PaymentCreateRouteRequest;
import com.mollie.mollie.models.operations.PaymentCreateRouteRequestBody;
import com.mollie.mollie.models.operations.PaymentCreateRouteRequestBuilder;
import com.mollie.mollie.models.operations.PaymentCreateRouteResponse;
import com.mollie.mollie.models.operations.PaymentListRoutesRequest;
import com.mollie.mollie.models.operations.PaymentListRoutesRequestBuilder;
import com.mollie.mollie.models.operations.PaymentListRoutesResponse;
import com.mollie.mollie.operations.PaymentCreateRouteOperation;
import com.mollie.mollie.operations.PaymentListRoutesOperation;
import com.mollie.mollie.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class DelayedRouting {
    private final SDKConfiguration sdkConfiguration;

    DelayedRouting(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create a delayed route
     * 
     * <p>Create a route for a specific payment. The routed amount is credited to the account of your customer.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @return The call builder
     */
    public PaymentCreateRouteRequestBuilder create() {
        return new PaymentCreateRouteRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a delayed route
     * 
     * <p>Create a route for a specific payment. The routed amount is credited to the account of your customer.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PaymentCreateRouteResponse create(String paymentId) throws Exception {
        return create(paymentId, Optional.empty(), Optional.empty());
    }

    /**
     * Create a delayed route
     * 
     * <p>Create a route for a specific payment. The routed amount is credited to the account of your customer.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PaymentCreateRouteResponse create(
            String paymentId,
            Optional<? extends PaymentCreateRouteRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        PaymentCreateRouteRequest request =
            PaymentCreateRouteRequest
                .builder()
                .paymentId(paymentId)
                .requestBody(requestBody)
                .build();
        RequestOperation<PaymentCreateRouteRequest, PaymentCreateRouteResponse> operation
              = new PaymentCreateRouteOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List payment routes
     * 
     * <p>Retrieve a list of all routes created for a specific payment.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @return The call builder
     */
    public PaymentListRoutesRequestBuilder list() {
        return new PaymentListRoutesRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment routes
     * 
     * <p>Retrieve a list of all routes created for a specific payment.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PaymentListRoutesResponse list(String paymentId) throws Exception {
        return list(paymentId, Optional.empty());
    }

    /**
     * List payment routes
     * 
     * <p>Retrieve a list of all routes created for a specific payment.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PaymentListRoutesResponse list(
            String paymentId,
            Optional<Options> options) throws Exception {
        PaymentListRoutesRequest request =
            PaymentListRoutesRequest
                .builder()
                .paymentId(paymentId)
                .build();
        RequestOperation<PaymentListRoutesRequest, PaymentListRoutesResponse> operation
              = new PaymentListRoutesOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
