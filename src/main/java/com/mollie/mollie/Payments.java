/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.CancelPaymentRequest;
import com.mollie.mollie.models.operations.CancelPaymentRequestBody;
import com.mollie.mollie.models.operations.CancelPaymentRequestBuilder;
import com.mollie.mollie.models.operations.CancelPaymentResponse;
import com.mollie.mollie.models.operations.CreatePaymentRequest;
import com.mollie.mollie.models.operations.CreatePaymentRequestBody;
import com.mollie.mollie.models.operations.CreatePaymentRequestBuilder;
import com.mollie.mollie.models.operations.CreatePaymentResponse;
import com.mollie.mollie.models.operations.Embed;
import com.mollie.mollie.models.operations.GetPaymentRequest;
import com.mollie.mollie.models.operations.GetPaymentRequestBuilder;
import com.mollie.mollie.models.operations.GetPaymentResponse;
import com.mollie.mollie.models.operations.Include;
import com.mollie.mollie.models.operations.ListPaymentsRequest;
import com.mollie.mollie.models.operations.ListPaymentsRequestBuilder;
import com.mollie.mollie.models.operations.ListPaymentsResponse;
import com.mollie.mollie.models.operations.QueryParamInclude;
import com.mollie.mollie.models.operations.ReleaseAuthorizationRequest;
import com.mollie.mollie.models.operations.ReleaseAuthorizationRequestBody;
import com.mollie.mollie.models.operations.ReleaseAuthorizationRequestBuilder;
import com.mollie.mollie.models.operations.ReleaseAuthorizationResponse;
import com.mollie.mollie.models.operations.UpdatePaymentRequest;
import com.mollie.mollie.models.operations.UpdatePaymentRequestBody;
import com.mollie.mollie.models.operations.UpdatePaymentRequestBuilder;
import com.mollie.mollie.models.operations.UpdatePaymentResponse;
import com.mollie.mollie.operations.CancelPayment;
import com.mollie.mollie.operations.CreatePayment;
import com.mollie.mollie.operations.GetPayment;
import com.mollie.mollie.operations.ListPayments;
import com.mollie.mollie.operations.ReleaseAuthorization;
import com.mollie.mollie.operations.UpdatePayment;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Payments {
    private final SDKConfiguration sdkConfiguration;

    Payments(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create payment
     * 
     * <p>Payment creation is elemental to the Mollie API: this is where most payment
     * implementations start off.
     * 
     * <p>Once you have created a payment, you should redirect your customer to the
     * URL in the `_links.checkout` property from the response.
     * 
     * <p>To wrap your head around the payment process, an explanation and flow charts
     * can be found in the 'Accepting payments' guide.
     * 
     * <p>If you specify the `method` parameter when creating a payment, optional
     * additional parameters may be available for the payment method that are not listed below. Please refer to the
     * guide on [method-specific parameters](extra-payment-parameters).
     * 
     * @return The call builder
     */
    public CreatePaymentRequestBuilder create() {
        return new CreatePaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Create payment
     * 
     * <p>Payment creation is elemental to the Mollie API: this is where most payment
     * implementations start off.
     * 
     * <p>Once you have created a payment, you should redirect your customer to the
     * URL in the `_links.checkout` property from the response.
     * 
     * <p>To wrap your head around the payment process, an explanation and flow charts
     * can be found in the 'Accepting payments' guide.
     * 
     * <p>If you specify the `method` parameter when creating a payment, optional
     * additional parameters may be available for the payment method that are not listed below. Please refer to the
     * guide on [method-specific parameters](extra-payment-parameters).
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentResponse createDirect() throws Exception {
        return create(JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * Create payment
     * 
     * <p>Payment creation is elemental to the Mollie API: this is where most payment
     * implementations start off.
     * 
     * <p>Once you have created a payment, you should redirect your customer to the
     * URL in the `_links.checkout` property from the response.
     * 
     * <p>To wrap your head around the payment process, an explanation and flow charts
     * can be found in the 'Accepting payments' guide.
     * 
     * <p>If you specify the `method` parameter when creating a payment, optional
     * additional parameters may be available for the payment method that are not listed below. Please refer to the
     * guide on [method-specific parameters](extra-payment-parameters).
     * 
     * @param include This endpoint allows you to include additional information via the `include` query string parameter.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentResponse create(
            JsonNullable<? extends Include> include, Optional<? extends CreatePaymentRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        CreatePaymentRequest request =
            CreatePaymentRequest
                .builder()
                .include(include)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreatePaymentRequest, CreatePaymentResponse> operation
              = new CreatePayment.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List payments
     * 
     * <p>Retrieve all payments created with the current website profile.
     * 
     * <p>The results are paginated.
     * 
     * @return The call builder
     */
    public ListPaymentsRequestBuilder list() {
        return new ListPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List payments
     * 
     * <p>Retrieve all payments created with the current website profile.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentsResponse list(ListPaymentsRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List payments
     * 
     * <p>Retrieve all payments created with the current website profile.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentsResponse list(ListPaymentsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListPaymentsRequest, ListPaymentsResponse> operation
              = new ListPayments.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get payment
     * 
     * <p>Retrieve a single payment object by its payment ID.
     * 
     * @return The call builder
     */
    public GetPaymentRequestBuilder get() {
        return new GetPaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment
     * 
     * <p>Retrieve a single payment object by its payment ID.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentResponse get(String paymentId) throws Exception {
        return get(paymentId, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get payment
     * 
     * <p>Retrieve a single payment object by its payment ID.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param include This endpoint allows you to include additional information via the `include` query string parameter.
     * @param embed This endpoint allows embedding related API items by appending the
     *         following values via the `embed` query string parameter.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentResponse get(
            String paymentId, JsonNullable<? extends QueryParamInclude> include,
            JsonNullable<? extends Embed> embed, JsonNullable<Boolean> testmode,
            Optional<Options> options) throws Exception {
        GetPaymentRequest request =
            GetPaymentRequest
                .builder()
                .paymentId(paymentId)
                .include(include)
                .embed(embed)
                .testmode(testmode)
                .build();
        RequestOperation<GetPaymentRequest, GetPaymentResponse> operation
              = new GetPayment.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update payment
     * 
     * <p>Certain details of an existing payment can be updated.
     * 
     * <p>Updating the payment details will not result in a webhook call.
     * 
     * @return The call builder
     */
    public UpdatePaymentRequestBuilder update() {
        return new UpdatePaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Update payment
     * 
     * <p>Certain details of an existing payment can be updated.
     * 
     * <p>Updating the payment details will not result in a webhook call.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdatePaymentResponse update(String paymentId) throws Exception {
        return update(paymentId, Optional.empty(), Optional.empty());
    }

    /**
     * Update payment
     * 
     * <p>Certain details of an existing payment can be updated.
     * 
     * <p>Updating the payment details will not result in a webhook call.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdatePaymentResponse update(
            String paymentId, Optional<? extends UpdatePaymentRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        UpdatePaymentRequest request =
            UpdatePaymentRequest
                .builder()
                .paymentId(paymentId)
                .requestBody(requestBody)
                .build();
        RequestOperation<UpdatePaymentRequest, UpdatePaymentResponse> operation
              = new UpdatePayment.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Cancel payment
     * 
     * <p>Depending on the payment method, you may be able to cancel a payment for a certain amount of time — usually until
     * the next business day or as long as the payment status is open.
     * 
     * <p>Payments may also be canceled manually from the Mollie Dashboard.
     * 
     * <p>The `isCancelable` property on the [Payment object](get-payment) will indicate if the payment can be canceled.
     * 
     * @return The call builder
     */
    public CancelPaymentRequestBuilder cancel() {
        return new CancelPaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel payment
     * 
     * <p>Depending on the payment method, you may be able to cancel a payment for a certain amount of time — usually until
     * the next business day or as long as the payment status is open.
     * 
     * <p>Payments may also be canceled manually from the Mollie Dashboard.
     * 
     * <p>The `isCancelable` property on the [Payment object](get-payment) will indicate if the payment can be canceled.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CancelPaymentResponse cancel(String paymentId) throws Exception {
        return cancel(paymentId, Optional.empty(), Optional.empty());
    }

    /**
     * Cancel payment
     * 
     * <p>Depending on the payment method, you may be able to cancel a payment for a certain amount of time — usually until
     * the next business day or as long as the payment status is open.
     * 
     * <p>Payments may also be canceled manually from the Mollie Dashboard.
     * 
     * <p>The `isCancelable` property on the [Payment object](get-payment) will indicate if the payment can be canceled.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CancelPaymentResponse cancel(
            String paymentId, Optional<? extends CancelPaymentRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        CancelPaymentRequest request =
            CancelPaymentRequest
                .builder()
                .paymentId(paymentId)
                .requestBody(requestBody)
                .build();
        RequestOperation<CancelPaymentRequest, CancelPaymentResponse> operation
              = new CancelPayment.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Release payment authorization
     * 
     * <p>Releases the full remaining authorized amount. Call this endpoint when you will not be making any additional
     * captures. Payment authorizations may also be released manually from the Mollie Dashboard.
     * 
     * <p>Mollie will do its best to process release requests, but it is not guaranteed that it will succeed. It is up to
     * the issuing bank if and when the hold will be released.
     * 
     * <p>If the request does succeed, the payment status will change to `canceled` for payments without captures.
     * If there is a successful capture, the payment will transition to `paid`.
     * 
     * @return The call builder
     */
    public ReleaseAuthorizationRequestBuilder releaseAuthorization() {
        return new ReleaseAuthorizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Release payment authorization
     * 
     * <p>Releases the full remaining authorized amount. Call this endpoint when you will not be making any additional
     * captures. Payment authorizations may also be released manually from the Mollie Dashboard.
     * 
     * <p>Mollie will do its best to process release requests, but it is not guaranteed that it will succeed. It is up to
     * the issuing bank if and when the hold will be released.
     * 
     * <p>If the request does succeed, the payment status will change to `canceled` for payments without captures.
     * If there is a successful capture, the payment will transition to `paid`.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ReleaseAuthorizationResponse releaseAuthorization(String paymentId) throws Exception {
        return releaseAuthorization(paymentId, Optional.empty(), Optional.empty());
    }

    /**
     * Release payment authorization
     * 
     * <p>Releases the full remaining authorized amount. Call this endpoint when you will not be making any additional
     * captures. Payment authorizations may also be released manually from the Mollie Dashboard.
     * 
     * <p>Mollie will do its best to process release requests, but it is not guaranteed that it will succeed. It is up to
     * the issuing bank if and when the hold will be released.
     * 
     * <p>If the request does succeed, the payment status will change to `canceled` for payments without captures.
     * If there is a successful capture, the payment will transition to `paid`.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ReleaseAuthorizationResponse releaseAuthorization(
            String paymentId, Optional<? extends ReleaseAuthorizationRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        ReleaseAuthorizationRequest request =
            ReleaseAuthorizationRequest
                .builder()
                .paymentId(paymentId)
                .requestBody(requestBody)
                .build();
        RequestOperation<ReleaseAuthorizationRequest, ReleaseAuthorizationResponse> operation
              = new ReleaseAuthorization.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
