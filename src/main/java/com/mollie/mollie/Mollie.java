/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.mollie.mollie;

import com.mollie.mollie.utils.HTTPClient;
import com.mollie.mollie.utils.RetryConfig;
import com.mollie.mollie.utils.SpeakeasyHTTPClient;
import com.mollie.mollie.utils.Utils;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;

public class Mollie {


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        "https://api.mollie.com/v2",
    };

    private final BalancesAPI balancesAPI;

    private final SettlementsAPI settlementsAPI;

    private final InvoicesAPI invoicesAPI;

    private final PermissionsAPI permissionsAPI;

    private final OrganizationsAPI organizationsAPI;

    private final ProfilesAPI profilesAPI;

    private final OnboardingAPI onboardingAPI;

    private final CapabilitiesAPI capabilitiesAPI;

    private final ClientsAPI clientsAPI;

    private final ClientLinksAPI clientLinksAPI;

    private final OrdersAPI ordersAPI;

    private final ShipmentsAPI shipmentsAPI;

    private final PaymentsAPI paymentsAPI;

    private final MethodsAPI methodsAPI;

    private final RefundsAPI refundsAPI;

    private final ChargebacksAPI chargebacksAPI;

    private final CapturesAPI capturesAPI;

    private final WalletsAPI walletsAPI;

    private final PaymentLinksAPI paymentLinksAPI;

    private final TerminalsAPI terminalsAPI;

    private final DelayedRoutingAPI delayedRoutingAPI;

    private final CustomersAPI customersAPI;

    private final MandatesAPI mandatesAPI;

    private final SubscriptionsAPI subscriptionsAPI;

    public BalancesAPI balancesAPI() {
        return balancesAPI;
    }

    public SettlementsAPI settlementsAPI() {
        return settlementsAPI;
    }

    public InvoicesAPI invoicesAPI() {
        return invoicesAPI;
    }

    public PermissionsAPI permissionsAPI() {
        return permissionsAPI;
    }

    public OrganizationsAPI organizationsAPI() {
        return organizationsAPI;
    }

    public ProfilesAPI profilesAPI() {
        return profilesAPI;
    }

    public OnboardingAPI onboardingAPI() {
        return onboardingAPI;
    }

    public CapabilitiesAPI capabilitiesAPI() {
        return capabilitiesAPI;
    }

    public ClientsAPI clientsAPI() {
        return clientsAPI;
    }

    public ClientLinksAPI clientLinksAPI() {
        return clientLinksAPI;
    }

    public OrdersAPI ordersAPI() {
        return ordersAPI;
    }

    public ShipmentsAPI shipmentsAPI() {
        return shipmentsAPI;
    }

    public PaymentsAPI paymentsAPI() {
        return paymentsAPI;
    }

    public MethodsAPI methodsAPI() {
        return methodsAPI;
    }

    public RefundsAPI refundsAPI() {
        return refundsAPI;
    }

    public ChargebacksAPI chargebacksAPI() {
        return chargebacksAPI;
    }

    public CapturesAPI capturesAPI() {
        return capturesAPI;
    }

    public WalletsAPI walletsAPI() {
        return walletsAPI;
    }

    public PaymentLinksAPI paymentLinksAPI() {
        return paymentLinksAPI;
    }

    public TerminalsAPI terminalsAPI() {
        return terminalsAPI;
    }

    public DelayedRoutingAPI delayedRoutingAPI() {
        return delayedRoutingAPI;
    }

    public CustomersAPI customersAPI() {
        return customersAPI;
    }

    public MandatesAPI mandatesAPI() {
        return mandatesAPI;
    }

    public SubscriptionsAPI subscriptionsAPI() {
        return subscriptionsAPI;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        
        /**
         * Configures the SDK to use the provided security details.
         *
         * @param security The security details to use for all requests.
         * @return The builder instance.
         */
        public Builder security(com.mollie.mollie.models.components.Security security) {
            this.sdkConfiguration.securitySource = SecuritySource.of(security);
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            this.sdkConfiguration.securitySource = securitySource;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.sdkConfiguration.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.serverIdx = serverIdx;
            this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(com.mollie.mollie.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);  
            return this;  
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(Consumer<? super com.mollie.mollie.utils.Hooks> consumer) {
            consumer.accept(sdkConfiguration.hooks());
            return this;    
        }
        
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public Mollie build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
	        if (sdkConfiguration.securitySource == null) {
	    	    sdkConfiguration.securitySource = SecuritySource.of(null);
	        }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS[0];
                sdkConfiguration.serverIdx = 0;
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new Mollie(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private Mollie(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.balancesAPI = new BalancesAPI(sdkConfiguration);
        this.settlementsAPI = new SettlementsAPI(sdkConfiguration);
        this.invoicesAPI = new InvoicesAPI(sdkConfiguration);
        this.permissionsAPI = new PermissionsAPI(sdkConfiguration);
        this.organizationsAPI = new OrganizationsAPI(sdkConfiguration);
        this.profilesAPI = new ProfilesAPI(sdkConfiguration);
        this.onboardingAPI = new OnboardingAPI(sdkConfiguration);
        this.capabilitiesAPI = new CapabilitiesAPI(sdkConfiguration);
        this.clientsAPI = new ClientsAPI(sdkConfiguration);
        this.clientLinksAPI = new ClientLinksAPI(sdkConfiguration);
        this.ordersAPI = new OrdersAPI(sdkConfiguration);
        this.shipmentsAPI = new ShipmentsAPI(sdkConfiguration);
        this.paymentsAPI = new PaymentsAPI(sdkConfiguration);
        this.methodsAPI = new MethodsAPI(sdkConfiguration);
        this.refundsAPI = new RefundsAPI(sdkConfiguration);
        this.chargebacksAPI = new ChargebacksAPI(sdkConfiguration);
        this.capturesAPI = new CapturesAPI(sdkConfiguration);
        this.walletsAPI = new WalletsAPI(sdkConfiguration);
        this.paymentLinksAPI = new PaymentLinksAPI(sdkConfiguration);
        this.terminalsAPI = new TerminalsAPI(sdkConfiguration);
        this.delayedRoutingAPI = new DelayedRoutingAPI(sdkConfiguration);
        this.customersAPI = new CustomersAPI(sdkConfiguration);
        this.mandatesAPI = new MandatesAPI(sdkConfiguration);
        this.subscriptionsAPI = new SubscriptionsAPI(sdkConfiguration);
        this.sdkConfiguration.initialize();
    }}
