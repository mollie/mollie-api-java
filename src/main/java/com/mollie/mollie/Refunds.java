/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.components.EntityRefund;
import com.mollie.mollie.models.operations.CancelRefundRequest;
import com.mollie.mollie.models.operations.CancelRefundRequestBuilder;
import com.mollie.mollie.models.operations.CancelRefundResponse;
import com.mollie.mollie.models.operations.CreateRefundRequest;
import com.mollie.mollie.models.operations.CreateRefundRequestBuilder;
import com.mollie.mollie.models.operations.CreateRefundResponse;
import com.mollie.mollie.models.operations.GetRefundRequest;
import com.mollie.mollie.models.operations.GetRefundRequestBuilder;
import com.mollie.mollie.models.operations.GetRefundResponse;
import com.mollie.mollie.models.operations.ListAllRefundsRequest;
import com.mollie.mollie.models.operations.ListAllRefundsRequestBuilder;
import com.mollie.mollie.models.operations.ListAllRefundsResponse;
import com.mollie.mollie.models.operations.ListRefundsRequest;
import com.mollie.mollie.models.operations.ListRefundsRequestBuilder;
import com.mollie.mollie.models.operations.ListRefundsResponse;
import com.mollie.mollie.operations.CancelRefund;
import com.mollie.mollie.operations.CreateRefund;
import com.mollie.mollie.operations.GetRefund;
import com.mollie.mollie.operations.ListAllRefunds;
import com.mollie.mollie.operations.ListRefunds;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Refunds {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncRefunds asyncSDK;

    Refunds(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncRefunds(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncRefunds async() {
        return asyncSDK;
    }

    /**
     * Create payment refund
     * 
     * <p>Creates a refund for a specific payment. The refunded amount is credited to your customer usually
     * either via a bank
     * transfer or by refunding the amount to your customer's credit card.
     * 
     * @return The call builder
     */
    public CreateRefundRequestBuilder create() {
        return new CreateRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Create payment refund
     * 
     * <p>Creates a refund for a specific payment. The refunded amount is credited to your customer usually
     * either via a bank
     * transfer or by refunding the amount to your customer's credit card.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateRefundResponse create(String paymentId) {
        return create(paymentId, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Create payment refund
     * 
     * <p>Creates a refund for a specific payment. The refunded amount is credited to your customer usually
     * either via a bank
     * transfer or by refunding the amount to your customer's credit card.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param entityRefund 
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateRefundResponse create(
            String paymentId, Optional<String> idempotencyKey,
            Optional<? extends EntityRefund> entityRefund, Optional<Options> options) {
        CreateRefundRequest request =
            CreateRefundRequest
                .builder()
                .paymentId(paymentId)
                .idempotencyKey(idempotencyKey)
                .entityRefund(entityRefund)
                .build();
        RequestOperation<CreateRefundRequest, CreateRefundResponse> operation
              = new CreateRefund.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List payment refunds
     * 
     * <p>Retrieve a list of all refunds created for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @return The call builder
     */
    public ListRefundsRequestBuilder list() {
        return new ListRefundsRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment refunds
     * 
     * <p>Retrieve a list of all refunds created for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListRefundsResponse list(ListRefundsRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List payment refunds
     * 
     * <p>Retrieve a list of all refunds created for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListRefundsResponse list(ListRefundsRequest request, Optional<Options> options) {
        RequestOperation<ListRefundsRequest, ListRefundsResponse> operation
              = new ListRefunds.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get payment refund
     * 
     * <p>Retrieve a single payment refund by its ID and the ID of its parent payment.
     * 
     * @return The call builder
     */
    public GetRefundRequestBuilder get() {
        return new GetRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment refund
     * 
     * <p>Retrieve a single payment refund by its ID and the ID of its parent payment.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetRefundResponse get(GetRefundRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get payment refund
     * 
     * <p>Retrieve a single payment refund by its ID and the ID of its parent payment.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetRefundResponse get(GetRefundRequest request, Optional<Options> options) {
        RequestOperation<GetRefundRequest, GetRefundResponse> operation
              = new GetRefund.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Cancel payment refund
     * 
     * <p>Refunds will be executed with a delay of two hours. Until that time, refunds may be canceled
     * manually via the
     * Mollie Dashboard, or by using this endpoint.
     * 
     * <p>A refund can only be canceled while its `status` field is either `queued` or `pending`. See the
     * [Get refund endpoint](get-refund) for more information.
     * 
     * @return The call builder
     */
    public CancelRefundRequestBuilder cancel() {
        return new CancelRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel payment refund
     * 
     * <p>Refunds will be executed with a delay of two hours. Until that time, refunds may be canceled
     * manually via the
     * Mollie Dashboard, or by using this endpoint.
     * 
     * <p>A refund can only be canceled while its `status` field is either `queued` or `pending`. See the
     * [Get refund endpoint](get-refund) for more information.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param refundId Provide the ID of the related refund.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CancelRefundResponse cancel(String paymentId, String refundId) {
        return cancel(paymentId, refundId, JsonNullable.undefined(),
            Optional.empty(), Optional.empty());
    }

    /**
     * Cancel payment refund
     * 
     * <p>Refunds will be executed with a delay of two hours. Until that time, refunds may be canceled
     * manually via the
     * Mollie Dashboard, or by using this endpoint.
     * 
     * <p>A refund can only be canceled while its `status` field is either `queued` or `pending`. See the
     * [Get refund endpoint](get-refund) for more information.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param refundId Provide the ID of the related refund.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query
     *         parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by
     *         setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CancelRefundResponse cancel(
            String paymentId, String refundId,
            JsonNullable<Boolean> testmode, Optional<String> idempotencyKey,
            Optional<Options> options) {
        CancelRefundRequest request =
            CancelRefundRequest
                .builder()
                .paymentId(paymentId)
                .refundId(refundId)
                .testmode(testmode)
                .idempotencyKey(idempotencyKey)
                .build();
        RequestOperation<CancelRefundRequest, CancelRefundResponse> operation
              = new CancelRefund.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all refunds
     * 
     * <p>Retrieve a list of all of your refunds.
     * 
     * <p>The results are paginated.
     * 
     * @return The call builder
     */
    public ListAllRefundsRequestBuilder all() {
        return new ListAllRefundsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all refunds
     * 
     * <p>Retrieve a list of all of your refunds.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListAllRefundsResponse all(ListAllRefundsRequest request) {
        return all(request, Optional.empty());
    }

    /**
     * List all refunds
     * 
     * <p>Retrieve a list of all of your refunds.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListAllRefundsResponse all(ListAllRefundsRequest request, Optional<Options> options) {
        RequestOperation<ListAllRefundsRequest, ListAllRefundsResponse> operation
              = new ListAllRefunds.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
