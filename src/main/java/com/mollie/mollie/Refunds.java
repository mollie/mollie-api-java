/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.RequestOperation;

import com.mollie.mollie.models.operations.CancelRefundRequest;
import com.mollie.mollie.models.operations.CancelRefundRequestBuilder;
import com.mollie.mollie.models.operations.CancelRefundResponse;
import com.mollie.mollie.models.operations.CreateOrderRefundRequest;
import com.mollie.mollie.models.operations.CreateOrderRefundRequestBody;
import com.mollie.mollie.models.operations.CreateOrderRefundRequestBuilder;
import com.mollie.mollie.models.operations.CreateOrderRefundResponse;
import com.mollie.mollie.models.operations.CreateRefundRequest;
import com.mollie.mollie.models.operations.CreateRefundRequestBody;
import com.mollie.mollie.models.operations.CreateRefundRequestBuilder;
import com.mollie.mollie.models.operations.CreateRefundResponse;
import com.mollie.mollie.models.operations.GetRefundQueryParamInclude;
import com.mollie.mollie.models.operations.GetRefundRequest;
import com.mollie.mollie.models.operations.GetRefundRequestBuilder;
import com.mollie.mollie.models.operations.GetRefundResponse;
import com.mollie.mollie.models.operations.ListAllRefundsRequest;
import com.mollie.mollie.models.operations.ListAllRefundsRequestBuilder;
import com.mollie.mollie.models.operations.ListAllRefundsResponse;
import com.mollie.mollie.models.operations.ListOrderRefundsRequest;
import com.mollie.mollie.models.operations.ListOrderRefundsRequestBuilder;
import com.mollie.mollie.models.operations.ListOrderRefundsResponse;
import com.mollie.mollie.models.operations.ListRefundsRequest;
import com.mollie.mollie.models.operations.ListRefundsRequestBuilder;
import com.mollie.mollie.models.operations.ListRefundsResponse;
import com.mollie.mollie.operations.CancelRefundOperation;
import com.mollie.mollie.operations.CreateOrderRefundOperation;
import com.mollie.mollie.operations.CreateRefundOperation;
import com.mollie.mollie.operations.GetRefundOperation;
import com.mollie.mollie.operations.ListAllRefundsOperation;
import com.mollie.mollie.operations.ListOrderRefundsOperation;
import com.mollie.mollie.operations.ListRefundsOperation;
import com.mollie.mollie.utils.Options;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Refunds {
    private final SDKConfiguration sdkConfiguration;

    Refunds(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create payment refund
     * 
     * <p>Creates a refund for a specific payment. The refunded amount is credited to your customer usually either via a bank transfer or by refunding the amount to your customer's credit card.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.write**](/reference/authentication)
     * 
     * @return The call builder
     */
    public CreateRefundRequestBuilder create() {
        return new CreateRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Create payment refund
     * 
     * <p>Creates a refund for a specific payment. The refunded amount is credited to your customer usually either via a bank transfer or by refunding the amount to your customer's credit card.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.write**](/reference/authentication)
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateRefundResponse create(String paymentId) throws Exception {
        return create(paymentId, Optional.empty(), Optional.empty());
    }

    /**
     * Create payment refund
     * 
     * <p>Creates a refund for a specific payment. The refunded amount is credited to your customer usually either via a bank transfer or by refunding the amount to your customer's credit card.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.write**](/reference/authentication)
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateRefundResponse create(
            String paymentId, Optional<? extends CreateRefundRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        CreateRefundRequest request =
            CreateRefundRequest
                .builder()
                .paymentId(paymentId)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreateRefundRequest, CreateRefundResponse> operation
              = new CreateRefundOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List payment refunds
     * 
     * <p>Retrieve a list of all refunds created for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public ListRefundsRequestBuilder list() {
        return new ListRefundsRequestBuilder(sdkConfiguration);
    }

    /**
     * List payment refunds
     * 
     * <p>Retrieve a list of all refunds created for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListRefundsResponse list(ListRefundsRequest request) throws Exception {
        return list(request, Optional.empty());
    }

    /**
     * List payment refunds
     * 
     * <p>Retrieve a list of all refunds created for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListRefundsResponse list(ListRefundsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListRefundsRequest, ListRefundsResponse> operation
              = new ListRefundsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get payment refund
     * 
     * <p>Retrieve a single payment refund by its ID and the ID of its parent payment.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public GetRefundRequestBuilder get() {
        return new GetRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Get payment refund
     * 
     * <p>Retrieve a single payment refund by its ID and the ID of its parent payment.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.read**](/reference/authentication)
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param refundId Provide the ID of the related refund.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRefundResponse get(String paymentId, String refundId) throws Exception {
        return get(paymentId, refundId, JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Get payment refund
     * 
     * <p>Retrieve a single payment refund by its ID and the ID of its parent payment.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.read**](/reference/authentication)
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param refundId Provide the ID of the related refund.
     * @param include This endpoint allows you to include additional information via the `include` query string parameter.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRefundResponse get(
            String paymentId, String refundId,
            JsonNullable<? extends GetRefundQueryParamInclude> include, JsonNullable<Boolean> testmode,
            Optional<Options> options) throws Exception {
        GetRefundRequest request =
            GetRefundRequest
                .builder()
                .paymentId(paymentId)
                .refundId(refundId)
                .include(include)
                .testmode(testmode)
                .build();
        RequestOperation<GetRefundRequest, GetRefundResponse> operation
              = new GetRefundOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Cancel payment refund
     * 
     * <p>Refunds will be executed with a delay of two hours. Until that time, refunds may be canceled manually via the Mollie Dashboard, or by using this endpoint.
     * 
     * <p>A refund can only be canceled while its `status` field is either `queued` or `pending`. See the [Get refund endpoint](get-refund) for more information.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.write**](/reference/authentication)
     * 
     * @return The call builder
     */
    public CancelRefundRequestBuilder cancel() {
        return new CancelRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel payment refund
     * 
     * <p>Refunds will be executed with a delay of two hours. Until that time, refunds may be canceled manually via the Mollie Dashboard, or by using this endpoint.
     * 
     * <p>A refund can only be canceled while its `status` field is either `queued` or `pending`. See the [Get refund endpoint](get-refund) for more information.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.write**](/reference/authentication)
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param refundId Provide the ID of the related refund.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CancelRefundResponse cancel(String paymentId, String refundId) throws Exception {
        return cancel(paymentId, refundId, JsonNullable.undefined(),
            Optional.empty());
    }

    /**
     * Cancel payment refund
     * 
     * <p>Refunds will be executed with a delay of two hours. Until that time, refunds may be canceled manually via the Mollie Dashboard, or by using this endpoint.
     * 
     * <p>A refund can only be canceled while its `status` field is either `queued` or `pending`. See the [Get refund endpoint](get-refund) for more information.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.write**](/reference/authentication)
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param refundId Provide the ID of the related refund.
     * @param testmode Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
     *         
     *         Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CancelRefundResponse cancel(
            String paymentId, String refundId,
            JsonNullable<Boolean> testmode, Optional<Options> options) throws Exception {
        CancelRefundRequest request =
            CancelRefundRequest
                .builder()
                .paymentId(paymentId)
                .refundId(refundId)
                .testmode(testmode)
                .build();
        RequestOperation<CancelRefundRequest, CancelRefundResponse> operation
              = new CancelRefundOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create order refund
     * 
     * <p>When using the Orders API, refunds should be made for a specific order.
     * 
     * <p>If you want to refund arbitrary amounts, however, you can also use the [Create payment refund endpoint](create-refund) by creating a refund on the payment itself.
     * 
     * <p>If an order line is still in the `authorized` state, it cannot be refunded. You should cancel it instead. Order lines that are `paid`, `shipping` or `completed` can be refunded.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.write**](/reference/authentication)
     * 
     * @return The call builder
     */
    public CreateOrderRefundRequestBuilder createOrder() {
        return new CreateOrderRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Create order refund
     * 
     * <p>When using the Orders API, refunds should be made for a specific order.
     * 
     * <p>If you want to refund arbitrary amounts, however, you can also use the [Create payment refund endpoint](create-refund) by creating a refund on the payment itself.
     * 
     * <p>If an order line is still in the `authorized` state, it cannot be refunded. You should cancel it instead. Order lines that are `paid`, `shipping` or `completed` can be refunded.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.write**](/reference/authentication)
     * 
     * @param orderId Provide the ID of the related order.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrderRefundResponse createOrder(String orderId) throws Exception {
        return createOrder(orderId, Optional.empty(), Optional.empty());
    }

    /**
     * Create order refund
     * 
     * <p>When using the Orders API, refunds should be made for a specific order.
     * 
     * <p>If you want to refund arbitrary amounts, however, you can also use the [Create payment refund endpoint](create-refund) by creating a refund on the payment itself.
     * 
     * <p>If an order line is still in the `authorized` state, it cannot be refunded. You should cancel it instead. Order lines that are `paid`, `shipping` or `completed` can be refunded.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.write**](/reference/authentication)
     * 
     * @param orderId Provide the ID of the related order.
     * @param requestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrderRefundResponse createOrder(
            String orderId, Optional<? extends CreateOrderRefundRequestBody> requestBody,
            Optional<Options> options) throws Exception {
        CreateOrderRefundRequest request =
            CreateOrderRefundRequest
                .builder()
                .orderId(orderId)
                .requestBody(requestBody)
                .build();
        RequestOperation<CreateOrderRefundRequest, CreateOrderRefundResponse> operation
              = new CreateOrderRefundOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List order refunds
     * 
     * <p>Retrieve a list of all refunds created for a specific order.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public ListOrderRefundsRequestBuilder listForOrder() {
        return new ListOrderRefundsRequestBuilder(sdkConfiguration);
    }

    /**
     * List order refunds
     * 
     * <p>Retrieve a list of all refunds created for a specific order.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListOrderRefundsResponse listForOrder(ListOrderRefundsRequest request) throws Exception {
        return listForOrder(request, Optional.empty());
    }

    /**
     * List order refunds
     * 
     * <p>Retrieve a list of all refunds created for a specific order.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListOrderRefundsResponse listForOrder(ListOrderRefundsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListOrderRefundsRequest, ListOrderRefundsResponse> operation
              = new ListOrderRefundsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all refunds
     * 
     * <p>Retrieve a list of all of your refunds.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.read**](/reference/authentication)
     * 
     * @return The call builder
     */
    public ListAllRefundsRequestBuilder all() {
        return new ListAllRefundsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all refunds
     * 
     * <p>Retrieve a list of all of your refunds.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAllRefundsResponse all(ListAllRefundsRequest request) throws Exception {
        return all(request, Optional.empty());
    }

    /**
     * List all refunds
     * 
     * <p>Retrieve a list of all of your refunds.
     * 
     * <p>The results are paginated.
     * 
     * <p>&gt; ðŸ”‘ Access with
     * &gt;
     * &gt; [API key](/reference/authentication)
     * &gt;
     * &gt; [Access token with **refunds.read**](/reference/authentication)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAllRefundsResponse all(ListAllRefundsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<ListAllRefundsRequest, ListAllRefundsResponse> operation
              = new ListAllRefundsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
