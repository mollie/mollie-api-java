/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import static com.mollie.mollie.operations.Operations.AsyncRequestOperation;

import com.mollie.mollie.models.components.EntityCapture;
import com.mollie.mollie.models.operations.CreateCaptureRequest;
import com.mollie.mollie.models.operations.GetCaptureRequest;
import com.mollie.mollie.models.operations.ListCapturesRequest;
import com.mollie.mollie.models.operations.async.CreateCaptureRequestBuilder;
import com.mollie.mollie.models.operations.async.CreateCaptureResponse;
import com.mollie.mollie.models.operations.async.GetCaptureRequestBuilder;
import com.mollie.mollie.models.operations.async.GetCaptureResponse;
import com.mollie.mollie.models.operations.async.ListCapturesRequestBuilder;
import com.mollie.mollie.models.operations.async.ListCapturesResponse;
import com.mollie.mollie.operations.CreateCapture;
import com.mollie.mollie.operations.GetCapture;
import com.mollie.mollie.operations.ListCaptures;
import com.mollie.mollie.utils.Headers;
import com.mollie.mollie.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncCaptures {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Captures syncSDK;

    AsyncCaptures(Captures syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Captures sync() {
        return syncSDK;
    }


    /**
     * Create capture
     * 
     * <p>Capture an *authorized* payment.
     * 
     * <p>Some payment methods allow you to first collect a customer's authorization,
     * and capture the amount at a later point.
     * 
     * <p>By default, Mollie captures payments automatically. If however you
     * configured your payment with `captureMode: manual`, you can capture the payment using this endpoint
     * after
     * having collected the customer's authorization.
     * 
     * @return The async call builder
     */
    public CreateCaptureRequestBuilder create() {
        return new CreateCaptureRequestBuilder(sdkConfiguration);
    }

    /**
     * Create capture
     * 
     * <p>Capture an *authorized* payment.
     * 
     * <p>Some payment methods allow you to first collect a customer's authorization,
     * and capture the amount at a later point.
     * 
     * <p>By default, Mollie captures payments automatically. If however you
     * configured your payment with `captureMode: manual`, you can capture the payment using this endpoint
     * after
     * having collected the customer's authorization.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @return {@code CompletableFuture<CreateCaptureResponse>} - The async response
     */
    public CompletableFuture<CreateCaptureResponse> create(String paymentId) {
        return create(
                paymentId, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Create capture
     * 
     * <p>Capture an *authorized* payment.
     * 
     * <p>Some payment methods allow you to first collect a customer's authorization,
     * and capture the amount at a later point.
     * 
     * <p>By default, Mollie captures payments automatically. If however you
     * configured your payment with `captureMode: manual`, you can capture the payment using this endpoint
     * after
     * having collected the customer's authorization.
     * 
     * @param paymentId Provide the ID of the related payment.
     * @param idempotencyKey A unique key to ensure idempotent requests. This key should be a UUID v4 string.
     * @param entityCapture 
     * @param options additional options
     * @return {@code CompletableFuture<CreateCaptureResponse>} - The async response
     */
    public CompletableFuture<CreateCaptureResponse> create(
            String paymentId, Optional<String> idempotencyKey,
            Optional<? extends EntityCapture> entityCapture, Optional<Options> options) {
        CreateCaptureRequest request =
            CreateCaptureRequest
                .builder()
                .paymentId(paymentId)
                .idempotencyKey(idempotencyKey)
                .entityCapture(entityCapture)
                .build();
        AsyncRequestOperation<CreateCaptureRequest, CreateCaptureResponse> operation
              = new CreateCapture.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List captures
     * 
     * <p>Retrieve a list of all captures created for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @return The async call builder
     */
    public ListCapturesRequestBuilder list() {
        return new ListCapturesRequestBuilder(sdkConfiguration);
    }

    /**
     * List captures
     * 
     * <p>Retrieve a list of all captures created for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListCapturesResponse>} - The async response
     */
    public CompletableFuture<ListCapturesResponse> list(ListCapturesRequest request) {
        return list(request, Optional.empty());
    }

    /**
     * List captures
     * 
     * <p>Retrieve a list of all captures created for a specific payment.
     * 
     * <p>The results are paginated.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<ListCapturesResponse>} - The async response
     */
    public CompletableFuture<ListCapturesResponse> list(ListCapturesRequest request, Optional<Options> options) {
        AsyncRequestOperation<ListCapturesRequest, ListCapturesResponse> operation
              = new ListCaptures.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get capture
     * 
     * <p>Retrieve a single payment capture by its ID and the ID of its parent
     * payment.
     * 
     * @return The async call builder
     */
    public GetCaptureRequestBuilder get() {
        return new GetCaptureRequestBuilder(sdkConfiguration);
    }

    /**
     * Get capture
     * 
     * <p>Retrieve a single payment capture by its ID and the ID of its parent
     * payment.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetCaptureResponse>} - The async response
     */
    public CompletableFuture<GetCaptureResponse> get(GetCaptureRequest request) {
        return get(request, Optional.empty());
    }

    /**
     * Get capture
     * 
     * <p>Retrieve a single payment capture by its ID and the ID of its parent
     * payment.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<GetCaptureResponse>} - The async response
     */
    public CompletableFuture<GetCaptureResponse> get(GetCaptureRequest request, Optional<Options> options) {
        AsyncRequestOperation<GetCaptureRequest, GetCaptureResponse> operation
              = new GetCapture.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
