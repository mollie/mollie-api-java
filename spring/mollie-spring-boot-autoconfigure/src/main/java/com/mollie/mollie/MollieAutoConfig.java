/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.mollie.mollie;

import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import java.util.concurrent.TimeUnit;

import com.mollie.mollie.utils.BackoffStrategy;
import com.mollie.mollie.utils.HTTPClient;
import com.mollie.mollie.utils.RetryConfig;
import com.mollie.mollie.utils.SpeakeasyHTTPClient;
import java.lang.IllegalStateException;
import java.lang.String;
import java.lang.System;
import java.util.Optional;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;


/**
 * Spring Boot Auto Configuration for openapi SDK
 * This configuration class automatically configures the openapi SDK
 * when Spring Boot detects it on the classpath.
 */
@AutoConfiguration
@ConditionalOnClass(Client.class)
@EnableConfigurationProperties(MollieAutoConfigProperties.class)
public class MollieAutoConfig {

    /**
     * Constructor.
     */
    public MollieAutoConfig() {
    }

    /**
     * Creates a RetryConfig bean from properties if retry is enabled.
     * 
     * @param properties the configuration properties
     * @return A configured RetryConfig instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnProperty(prefix = "mollie.retry-config", name = "strategy")
    public RetryConfig retryConfig(MollieAutoConfigProperties properties) {
        MollieAutoConfigProperties.RetryConfig retryProps = properties.getRetryConfig();
        
        if (RetryConfig.Strategy.BACKOFF.equals(retryProps.getStrategy())) {
            MollieAutoConfigProperties.RetryConfig.Backoff backoff = retryProps.getBackoff();
            return RetryConfig.builder()
                .backoff(
                    BackoffStrategy.builder()
                        .initialInterval(backoff.getInitialInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxInterval(backoff.getMaxInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxElapsedTime(backoff.getMaxElapsedTime().toMillis(), TimeUnit.MILLISECONDS)
                        .baseFactor(backoff.getBaseFactor())
                        .jitterFactor(backoff.getJitterFactor())
                        .retryConnectError(backoff.isRetryConnectError())
                        .retryReadTimeoutError(backoff.isRetryReadTimeoutError())
                        .build()
                )
                .build();
        }
        
        // Default retry config for other strategies
        return RetryConfig.builder().build();
    }

    /**
     * Creates a {@code Consumer<String>} bean for HTTP debug logging if none exists.
     * This logger is used by the SpeakeasyHTTPClient for debug output when debug logging is enabled.
     * By default, it logs to {@code System.out}, but can be customized by providing your own {@code Consumer<String>} bean.
     *
     * @return A {@code Consumer<String>} that logs messages to {@code System.out}
     */
    @Bean
    @ConditionalOnMissingBean
    public Consumer<String> httpLogger() {
        return System.out::println;
    }

    /**
     * Creates an HTTPClient bean if none exists.
     *
     * @param properties the configuration properties
     * @param httpLogger the logger for HTTP debug output
     * @return A configured HTTPClient instance
     */
    @Bean
    @ConditionalOnMissingBean
    public HTTPClient httpClient(MollieAutoConfigProperties properties, Consumer<String> httpLogger) {
        MollieAutoConfigProperties.HttpClient httpClientProps = properties.getHttpClient();

        // Configure the static logger
        SpeakeasyHTTPClient.setLogger(httpLogger);

        if (httpClientProps != null) {
            // Configure debug logging
            SpeakeasyHTTPClient.setDebugLogging(httpClientProps.isEnableDebugLogging());

            // Configure redacted headers
            if (httpClientProps.getRedactedHeaders() != null && !httpClientProps.getRedactedHeaders().isEmpty()) {
                SpeakeasyHTTPClient.setRedactedHeaders(httpClientProps.getRedactedHeaders());
            }
        }

        return new SpeakeasyHTTPClient();
    }
    /**
     * Creates a SecuritySource bean if none exists and security properties are configured.
     *
     * @param properties the configuration properties
     * @return A configured SecuritySource instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnPropertyPrefix(prefix = "mollie.security")
    public SecuritySource securitySource(MollieAutoConfigProperties properties) {MollieAutoConfigProperties.Security securityProps = properties.getSecurity();
        com.mollie.mollie.models.components.Security.Builder securityBuilder = com.mollie.mollie.models.components.Security.builder();
        boolean hasAnySecurityConfiguration = false;
        // Build apiKey security from direct properties (primitive value)
        if (securityProps.getApiKey() != null) {
            securityBuilder.apiKey(securityProps.getApiKey());
            hasAnySecurityConfiguration = true;
        }
        // Build oAuth security from direct properties (primitive value)
        if (securityProps.getOAuth() != null) {
            securityBuilder.oAuth(securityProps.getOAuth());
            hasAnySecurityConfiguration = true;
        }
        
        if (!hasAnySecurityConfiguration) {
            throw new IllegalStateException("Security configuration is present but no security options are configured. " +
                "Please configure at least one security option in your application properties.");
        }
        
        return SecuritySource.of(securityBuilder.build());
    }

    /**
     * Creates the SDKConfiguration bean as the single source of truth for all SDK configuration.
     *
     * @param properties the configuration properties
     * @param httpClient the HTTP client bean
     * @param hooks the hooks bean
     * @param asyncHooks the async hooks bean
     * @param securitySource the security source bean (optional)
     * @param globals the globals configuration bean
     * @param retryConfig the retry config bean (optional)
     * @return A configured SDKConfiguration instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SDKConfiguration sdkConfiguration(
            MollieAutoConfigProperties properties,
            HTTPClient httpClient,
            com.mollie.mollie.utils.Hooks hooks,
            com.mollie.mollie.utils.AsyncHooks asyncHooks,
            SecuritySource securitySource,
            com.mollie.mollie.utils.Globals globals,
            Optional<RetryConfig> retryConfig) {
        
        SDKConfiguration sdkConfiguration = new SDKConfiguration();
        
        sdkConfiguration.setClient(httpClient);
        
        sdkConfiguration.setHooks(hooks);
        sdkConfiguration.setAsyncHooks(asyncHooks);
        sdkConfiguration.setSecuritySource(securitySource);
        
        if (properties.getServerUrl() != null) {
            sdkConfiguration.setServerUrl(properties.getServerUrl());
        }
        sdkConfiguration.setServerIdx(properties.getServerIdx());
        sdkConfiguration.setGlobals(globals);
        
        sdkConfiguration.setRetryConfig(retryConfig);
        
        return sdkConfiguration;
    }

    /**
     * Creates the main SDK bean using the configured SDKConfiguration.
     *
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured Client instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Client client(SDKConfiguration sdkConfiguration) {
        return new Client(sdkConfiguration);
    }

    /**
     * Creates a Globals configuration bean if none exists, populated from properties.
     *
     * @param properties the configuration properties
     * @return A configured Globals instance
     */
    @Bean
    @ConditionalOnMissingBean
    public com.mollie.mollie.utils.Globals globals(MollieAutoConfigProperties properties) {
        com.mollie.mollie.utils.Globals globals = new com.mollie.mollie.utils.Globals();
        
        // Populate globals from properties
        MollieAutoConfigProperties.Globals globalProps = properties.getGlobals();
        if (globalProps.getProfileId() != null) {
            globals.putParam("queryParam", "profileId", globalProps.getProfileId());
        }
        if (globalProps.getTestmode() != null) {
            globals.putParam("queryParam", "testmode", globalProps.getTestmode());
        }
        if (globalProps.getCustomUserAgent() != null) {
            globals.putParam("header", "customUserAgent", globalProps.getCustomUserAgent());
        }
        
        return globals;
    }

    /**
     * Creates an AsyncHooks bean if none exists.
     * 
     * @return A configured AsyncHooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public com.mollie.mollie.utils.AsyncHooks asyncHooks() {
        return new com.mollie.mollie.utils.AsyncHooks();
    }

    /**
     * Creates a ScheduledExecutorService for async retry operations if none exists.
     * 
     * @return A configured ScheduledExecutorService instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ScheduledExecutorService retryScheduler() {
        return Executors.newSingleThreadScheduledExecutor();
    }

    /**
     * Creates a Hooks configuration bean if none exists.
     *
     * @return A configured Hooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public com.mollie.mollie.utils.Hooks hooks() {
        return new com.mollie.mollie.utils.Hooks();
    }
    /**
     * Creates a Balances sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Balances instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Balances balances(Client client) {
        return client.balances();
    }
    /**
     * Creates a Settlements sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Settlements instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Settlements settlements(Client client) {
        return client.settlements();
    }
    /**
     * Creates a Invoices sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Invoices instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Invoices invoices(Client client) {
        return client.invoices();
    }
    /**
     * Creates a Permissions sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Permissions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Permissions permissions(Client client) {
        return client.permissions();
    }
    /**
     * Creates a Organizations sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Organizations instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Organizations organizations(Client client) {
        return client.organizations();
    }
    /**
     * Creates a Profiles sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Profiles instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Profiles profiles(Client client) {
        return client.profiles();
    }
    /**
     * Creates a Onboarding sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Onboarding instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Onboarding onboarding(Client client) {
        return client.onboarding();
    }
    /**
     * Creates a Capabilities sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Capabilities instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Capabilities capabilities(Client client) {
        return client.capabilities();
    }
    /**
     * Creates a Clients sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Clients instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Clients clients(Client client) {
        return client.clients();
    }
    /**
     * Creates a ClientLinks sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured ClientLinks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ClientLinks clientLinks(Client client) {
        return client.clientLinks();
    }
    /**
     * Creates a Webhooks sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Webhooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Webhooks webhooks(Client client) {
        return client.webhooks();
    }
    /**
     * Creates a WebhookEvents sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured WebhookEvents instance
     */
    @Bean
    @ConditionalOnMissingBean
    public WebhookEvents webhookEvents(Client client) {
        return client.webhookEvents();
    }
    /**
     * Creates a BalanceTransfers sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured BalanceTransfers instance
     */
    @Bean
    @ConditionalOnMissingBean
    public BalanceTransfers balanceTransfers(Client client) {
        return client.balanceTransfers();
    }
    /**
     * Creates a Payments sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Payments instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Payments payments(Client client) {
        return client.payments();
    }
    /**
     * Creates a Methods sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Methods instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Methods methods(Client client) {
        return client.methods();
    }
    /**
     * Creates a Refunds sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Refunds instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Refunds refunds(Client client) {
        return client.refunds();
    }
    /**
     * Creates a Chargebacks sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Chargebacks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Chargebacks chargebacks(Client client) {
        return client.chargebacks();
    }
    /**
     * Creates a Captures sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Captures instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Captures captures(Client client) {
        return client.captures();
    }
    /**
     * Creates a Wallets sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Wallets instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Wallets wallets(Client client) {
        return client.wallets();
    }
    /**
     * Creates a PaymentLinks sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured PaymentLinks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public PaymentLinks paymentLinks(Client client) {
        return client.paymentLinks();
    }
    /**
     * Creates a Terminals sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Terminals instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Terminals terminals(Client client) {
        return client.terminals();
    }
    /**
     * Creates a DelayedRouting sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured DelayedRouting instance
     */
    @Bean
    @ConditionalOnMissingBean
    public DelayedRouting delayedRouting(Client client) {
        return client.delayedRouting();
    }
    /**
     * Creates a Customers sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Customers instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Customers customers(Client client) {
        return client.customers();
    }
    /**
     * Creates a Mandates sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Mandates instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Mandates mandates(Client client) {
        return client.mandates();
    }
    /**
     * Creates a Subscriptions sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Subscriptions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Subscriptions subscriptions(Client client) {
        return client.subscriptions();
    }
    /**
     * Creates a SalesInvoices sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured SalesInvoices instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SalesInvoices salesInvoices(Client client) {
        return client.salesInvoices();
    }

    /**
     * Creates the async SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured AsyncClient instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncClient asyncClient(Client client, SDKConfiguration sdkConfiguration) {
        return new AsyncClient(client, sdkConfiguration);
    }
    /**
     * Creates an AsyncBalances sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncBalances instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncBalances asyncBalances(AsyncClient asyncClient) {
        return asyncClient.balances();
    }
    /**
     * Creates an AsyncSettlements sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncSettlements instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncSettlements asyncSettlements(AsyncClient asyncClient) {
        return asyncClient.settlements();
    }
    /**
     * Creates an AsyncInvoices sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncInvoices instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncInvoices asyncInvoices(AsyncClient asyncClient) {
        return asyncClient.invoices();
    }
    /**
     * Creates an AsyncPermissions sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncPermissions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPermissions asyncPermissions(AsyncClient asyncClient) {
        return asyncClient.permissions();
    }
    /**
     * Creates an AsyncOrganizations sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncOrganizations instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncOrganizations asyncOrganizations(AsyncClient asyncClient) {
        return asyncClient.organizations();
    }
    /**
     * Creates an AsyncProfiles sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncProfiles instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncProfiles asyncProfiles(AsyncClient asyncClient) {
        return asyncClient.profiles();
    }
    /**
     * Creates an AsyncOnboarding sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncOnboarding instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncOnboarding asyncOnboarding(AsyncClient asyncClient) {
        return asyncClient.onboarding();
    }
    /**
     * Creates an AsyncCapabilities sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncCapabilities instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCapabilities asyncCapabilities(AsyncClient asyncClient) {
        return asyncClient.capabilities();
    }
    /**
     * Creates an AsyncClients sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncClients instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncClients asyncClients(AsyncClient asyncClient) {
        return asyncClient.clients();
    }
    /**
     * Creates an AsyncClientLinks sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncClientLinks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncClientLinks asyncClientLinks(AsyncClient asyncClient) {
        return asyncClient.clientLinks();
    }
    /**
     * Creates an AsyncWebhooks sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncWebhooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncWebhooks asyncWebhooks(AsyncClient asyncClient) {
        return asyncClient.webhooks();
    }
    /**
     * Creates an AsyncWebhookEvents sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncWebhookEvents instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncWebhookEvents asyncWebhookEvents(AsyncClient asyncClient) {
        return asyncClient.webhookEvents();
    }
    /**
     * Creates an AsyncBalanceTransfers sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncBalanceTransfers instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncBalanceTransfers asyncBalanceTransfers(AsyncClient asyncClient) {
        return asyncClient.balanceTransfers();
    }
    /**
     * Creates an AsyncPayments sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncPayments instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPayments asyncPayments(AsyncClient asyncClient) {
        return asyncClient.payments();
    }
    /**
     * Creates an AsyncMethods sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncMethods instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncMethods asyncMethods(AsyncClient asyncClient) {
        return asyncClient.methods();
    }
    /**
     * Creates an AsyncRefunds sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncRefunds instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncRefunds asyncRefunds(AsyncClient asyncClient) {
        return asyncClient.refunds();
    }
    /**
     * Creates an AsyncChargebacks sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncChargebacks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncChargebacks asyncChargebacks(AsyncClient asyncClient) {
        return asyncClient.chargebacks();
    }
    /**
     * Creates an AsyncCaptures sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncCaptures instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCaptures asyncCaptures(AsyncClient asyncClient) {
        return asyncClient.captures();
    }
    /**
     * Creates an AsyncWallets sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncWallets instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncWallets asyncWallets(AsyncClient asyncClient) {
        return asyncClient.wallets();
    }
    /**
     * Creates an AsyncPaymentLinks sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncPaymentLinks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPaymentLinks asyncPaymentLinks(AsyncClient asyncClient) {
        return asyncClient.paymentLinks();
    }
    /**
     * Creates an AsyncTerminals sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncTerminals instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTerminals asyncTerminals(AsyncClient asyncClient) {
        return asyncClient.terminals();
    }
    /**
     * Creates an AsyncDelayedRouting sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncDelayedRouting instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncDelayedRouting asyncDelayedRouting(AsyncClient asyncClient) {
        return asyncClient.delayedRouting();
    }
    /**
     * Creates an AsyncCustomers sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncCustomers instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCustomers asyncCustomers(AsyncClient asyncClient) {
        return asyncClient.customers();
    }
    /**
     * Creates an AsyncMandates sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncMandates instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncMandates asyncMandates(AsyncClient asyncClient) {
        return asyncClient.mandates();
    }
    /**
     * Creates an AsyncSubscriptions sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncSubscriptions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncSubscriptions asyncSubscriptions(AsyncClient asyncClient) {
        return asyncClient.subscriptions();
    }
    /**
     * Creates an AsyncSalesInvoices sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncSalesInvoices instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncSalesInvoices asyncSalesInvoices(AsyncClient asyncClient) {
        return asyncClient.salesInvoices();
    }
}